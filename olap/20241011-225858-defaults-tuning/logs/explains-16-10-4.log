query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832004.27..1832004.90 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832004.27..1832008.08 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832004.27..1832007.14 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831004.21..1831004.22 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831003.99..1831004.13 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312586.90 rows=14811917 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1032118.29..1032118.29 rows=1 width=192)
   ->  Sort  (cost=1032118.29..1032118.29 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=554147.46..1032118.28 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68624.00 rows=7651 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.64 rows=1913 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=553146.97..561006.84 rows=1571974 width=172)
                     ->  Sort  (cost=553146.97..557076.91 rows=1571974 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.51..305005.51 rows=1571974 width=172)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255233.10 rows=8001110 width=14)
                                 ->  Hash  (cost=3798.51..3798.51 rows=20000 width=166)
                                       ->  Hash Join  (cost=2.51..3798.51 rows=20000 width=166)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(42 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2241083.08..2241083.11 rows=10 width=44)
   ->  Sort  (cost=2241083.08..2248748.07 rows=3065996 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1723407.19..2174828.01 rows=3065996 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1723407.19..2090513.12 rows=3065996 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1722407.14..1724323.38 rows=766499 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41552.07..1637382.81 rows=766499 width=24)
                                 ->  Parallel Hash Join  (cost=41551.51..354433.30 rows=353176 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308142.88 rows=1805294 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.48..40634.48 rows=73362 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.48 rows=73362 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283173.40..660423.87 rows=1 width=24)
   ->  GroupAggregate  (cost=283173.40..2169425.76 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283173.40..2166577.37 rows=569668 width=16)
               ->  Gather Merge  (cost=283172.83..351402.06 rows=569837 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282172.78..282528.92 rows=142459 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6573.26..269978.15 rows=142459 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6430.81 rows=569837 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=764138.88..764138.89 rows=1 width=58)
   ->  Sort  (cost=764138.88..764138.95 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=763898.10..764138.76 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=763898.10..764137.70 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=762898.04..763125.73 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=762898.04..762943.52 rows=18190 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=72718.38..761611.02 rows=18190 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69026.78..755531.76 rows=454793 width=50)
                                             ->  Parallel Hash Join  (cost=69026.22..341240.91 rows=113732 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=26232.97..296030.87 rows=568660 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25664.32 rows=2274638 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.74..41855.74 rows=75000 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.74 rows=75000 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1292768.15..1292768.16 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1292768.15..1292768.16 rows=1 width=32)
         ->  Gather  (cost=1292767.72..1292768.13 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1291767.72..1291767.73 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=214388.95..1290263.01 rows=300941 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..214088.01 rows=1203763 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1419426.30..1420476.10 rows=1 width=116)
   ->  GroupAggregate  (cost=1419426.30..11967847.01 rows=10048 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1419426.30..11966787.25 rows=60603 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1419425.87..6780842.33 rows=1515085 width=76)
                     ->  Gather Merge  (cost=1419425.44..1600833.60 rows=1515085 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1418425.38..1419372.31 rows=378771 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372510.17 rows=378771 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350075.68 rows=4550790 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Scan using customer_pkey on customer  (cost=0.43..3.41 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 8 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=386264.05..392030.56 rows=1 width=64)
   ->  GroupAggregate  (cost=386264.05..14260497.27 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=386264.05..14259966.25 rows=24145 width=70)
               Join Filter: (supplier.s_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=386264.05..14251184.58 rows=24145 width=20)
                     ->  Nested Loop  (cost=386263.76..14172197.19 rows=24145 width=20)
                           ->  Nested Loop  (cost=386263.32..3794778.24 rows=3621871 width=24)
                                 ->  Gather Merge  (cost=386262.75..494710.73 rows=905736 width=8)
                                       Workers Planned: 4
                                       ->  Sort  (cost=385262.70..385828.78 rows=226434 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Parallel Hash Join  (cost=42793.24..365122.83 rows=226434 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..317517.86 rows=1132170 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=41855.74..41855.74 rows=75000 width=4)
                                                         ->  Hash Join  (cost=2.51..41855.74 rows=75000 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Memoize  (cost=0.44..3.42 rows=1 width=4)
                                 Cache Key: lineitem.l_partkey
                                 Cache Mode: logical
                                 ->  Index Scan using part_pkey on part  (cost=0.43..3.41 rows=1 width=4)
                                       Index Cond: (p_partkey = lineitem.l_partkey)
                                       Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.27 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 9 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=42472.49..47688.92 rows=1 width=90)
   ->  GroupAggregate  (cost=42472.49..830152.94 rows=151 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=42472.49..830148.03 rows=151 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=9652.78..830143.68 rows=151 width=81)
                     Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                     ->  Gather Merge  (cost=8651.47..20048.53 rows=100000 width=30)
                           Workers Planned: 1
                           ->  Sort  (cost=7651.46..7798.52 rows=58824 width=30)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=1.56..2991.39 rows=58824 width=30)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                     ->  Materialize  (cost=1001.31..583595.15 rows=151 width=35)
                           ->  Gather  (cost=1001.31..583594.40 rows=151 width=35)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=1.31..582579.30 rows=38 width=35)
                                       ->  Nested Loop  (cost=0.87..582449.24 rows=38 width=35)
                                             ->  Nested Loop  (cost=0.43..165332.02 rows=121229 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47231.07 rows=30304 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.72 rows=18 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..3.43 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(31 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=962653.80..962653.85 rows=20 width=202)
   ->  Sort  (cost=962653.80..964106.21 rows=580964 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=863108.94..947194.56 rows=580964 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=863108.94..932670.46 rows=580964 width=182)
                     Workers Planned: 4
                     ->  Sort  (cost=862108.88..862471.98 rows=145241 width=182)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=806337.38..849655.85 rows=145241 width=182)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=806335.82..849208.40 rows=145241 width=160)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=148)
                                       ->  Parallel Hash  (cost=804520.31..804520.31 rows=145241 width=16)
                                             ->  Nested Loop  (cost=6804.63..804520.31 rows=145241 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6804.06..270284.06 rows=147466 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6656.60 rows=589866 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 11 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=437199.27..437199.27 rows=1 width=36)
   InitPlan 1 (returns $3)
     ->  Finalize Aggregate  (cost=193163.49..193163.50 rows=1 width=32)
           ->  Gather  (cost=193163.26..193163.47 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=192163.26..192163.27 rows=1 width=32)
                       ->  Nested Loop  (cost=0.87..191180.78 rows=130998 width=10)
                             ->  Nested Loop  (cost=0.44..4617.72 rows=1667 width=4)
                                   ->  Parallel Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3552.46 rows=41667 width=8)
                                   ->  Memoize  (cost=0.15..0.92 rows=1 width=4)
                                         Cache Key: supplier_1.s_nationkey
                                         Cache Mode: logical
                                         ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.91 rows=1 width=4)
                                               Index Cond: (n_nationkey = supplier_1.s_nationkey)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..111.13 rows=79 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=244035.77..244297.77 rows=104798 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  Finalize GroupAggregate  (cost=203315.10..243511.78 rows=104798 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $3)
               ->  Gather Merge  (cost=203315.10..236830.89 rows=261996 width=36)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=202315.07..205590.02 rows=130998 width=36)
                           Group Key: partsupp.ps_partkey
                           ->  Sort  (cost=202315.07..202642.57 rows=130998 width=14)
                                 Sort Key: partsupp.ps_partkey
                                 ->  Nested Loop  (cost=0.87..191180.78 rows=130998 width=14)
                                       ->  Nested Loop  (cost=0.44..4617.72 rows=1667 width=4)
                                             ->  Parallel Index Scan using supplier_pkey on supplier  (cost=0.29..3552.46 rows=41667 width=8)
                                             ->  Memoize  (cost=0.15..0.92 rows=1 width=4)
                                                   Cache Key: supplier.s_nationkey
                                                   Cache Mode: logical
                                                   ->  Index Scan using nation_pkey on nation  (cost=0.14..0.91 rows=1 width=4)
                                                         Index Cond: (n_nationkey = supplier.s_nationkey)
                                                         Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..111.13 rows=79 width=18)
                                             Index Cond: (ps_suppkey = supplier.s_suppkey)
(39 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469279.86..1613904.95 rows=1 width=27)
   ->  GroupAggregate  (cost=1469279.86..2481655.48 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469279.86..2476672.37 rows=284745 width=27)
               ->  Gather Merge  (cost=1469279.42..1503373.26 rows=284745 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468279.36..1468457.33 rows=71186 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462542.02 rows=71186 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1361615.88..1361615.88 rows=1 width=16)
   ->  Sort  (cost=1361615.88..1361616.38 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1361612.88..1361614.88 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1208109.51..1339112.96 rows=1499995 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=53284.29..662893.10 rows=14848447 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448767.53 rows=14848447 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=28674.35..28674.35 rows=1499995 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.35 rows=1499995 width=4)
(14 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=839523.90..839523.91 rows=1 width=32)
   ->  Finalize Aggregate  (cost=839523.90..839523.91 rows=1 width=32)
         ->  Gather  (cost=839523.44..839523.85 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=838523.44..838523.45 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=64356.99..835214.96 rows=189056 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=12125.85..782487.55 rows=189056 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..11936.80 rows=756223 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.06..45981.06 rows=500006 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.06 rows=500006 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2744167.81..2744275.07 rows=1 width=103)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1390390.94..1390390.95 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1387930.74..1389160.84 rows=98408 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1344385.20..1384978.50 rows=393632 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1343385.20..1344615.30 rows=98408 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=37769.14..1337496.40 rows=588880 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..37180.26 rows=2355520 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1353776.86..1406549.75 rows=492 width=103)
         ->  Finalize GroupAggregate  (cost=1353776.57..1405336.31 rows=492 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1353776.57..1400907.95 rows=393632 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1352776.51..1353022.53 rows=98408 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1343385.20..1344615.30 rows=98408 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=37769.14..1337496.40 rows=588880 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..37180.26 rows=2355520 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.46 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=250540.80..250540.81 rows=1 width=44)
   ->  Sort  (cost=250540.80..250923.44 rows=153053 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172017.09..249775.54 rows=153053 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172017.09..242369.33 rows=587568 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171017.03..171384.26 rows=146892 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57870.57..158410.46 rows=146892 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101385.98 rows=1000139 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.15..53481.15 rows=73437 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.15 rows=73437 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3367416.91..3367416.92 rows=1 width=32)
   ->  Aggregate  (cost=3367416.91..3367416.92 rows=1 width=32)
         ->  Merge Join  (cost=2271836.32..3367368.13 rows=19508 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2270835.40..3260585.73 rows=1889058 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2270835.40..3175578.12 rows=7556232 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2269835.34..2274557.98 rows=1889058 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869646.74..2039700.51 rows=1889058 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 16
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275098.12 rows=14995512 width=9)
               ->  Materialize  (cost=1000.93..101173.32 rows=61961 width=21)
                     ->  Gather Merge  (cost=1000.93..101018.42 rows=61961 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..92638.21 rows=15490 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.64 rows=516 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..49.92 rows=32 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 18 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8724705.44..8724705.69 rows=100 width=71)
   ->  Sort  (cost=8724705.44..8774675.65 rows=19988084 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7359571.16..7960775.25 rows=19988084 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 128
               ->  Hash Join  (cost=78782.31..6282869.29 rows=19988084 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=295.42..5869847.53 rows=19988084 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3340199.77 rows=4998504 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547964.86 rows=14999962 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692253.70 rows=4998504 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167410.78 rows=59982048 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167410.78 rows=59982048 width=9)
                     ->  Hash  (cost=50946.95..50946.95 rows=1499995 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50946.95 rows=1499995 width=23)
(20 rows)

query 19 run 1
SET
SET
SET

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=127155.08..127155.09 rows=1 width=32)
   ->  Finalize Aggregate  (cost=127155.08..127155.09 rows=1 width=32)
         ->  Gather  (cost=127154.65..127155.06 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=126154.65..126154.66 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..126152.43 rows=295 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.26 rows=1230 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..51.96 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2458701.08..2657510.03 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2458701.08..2657510.03 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2454578.15..2652751.22 rows=3 width=8)
               ->  Hash Join  (cost=2454578.15..2652751.21 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2378112.29..2539934.43 rows=4846771 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Bitmap Heap Scan on lineitem  (cost=146326.52..1993467.88 rows=9125947 width=13)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..144045.04 rows=9125947 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=75253.59..75253.59 rows=80818 width=16)
                           ->  Gather  (cost=1000.43..75253.59 rows=80818 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.43..66171.79 rows=20204 width=16)
                                       ->  Parallel Seq Scan on part  (cost=0.00..47231.07 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.57 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(32 rows)

query 21 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1966541.33..1966541.34 rows=1 width=34)
   ->  Sort  (cost=1966541.33..1966541.34 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1966538.10..1966541.32 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Nested Loop Semi Join  (cost=1966538.10..1966541.31 rows=1 width=26)
                     Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                     ->  Gather Merge  (cost=1966537.54..1966537.66 rows=1 width=38)
                           Workers Planned: 4
                           ->  Sort  (cost=1965537.48..1965537.49 rows=1 width=38)
                                 Sort Key: supplier.s_name
                                 ->  Nested Loop Anti Join  (cost=1338027.82..1965537.47 rows=1 width=38)
                                       ->  Parallel Hash Join  (cost=1338027.25..1653253.72 rows=97258 width=38)
                                             Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308142.88 rows=1824120 width=4)
                                                   Filter: (o_orderstatus = 'F'::bpchar)
                                             ->  Parallel Hash  (cost=1335528.00..1335528.00 rows=199940 width=34)
                                                   ->  Parallel Hash Join  (cost=3020.56..1335528.00 rows=199940 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312586.90 rows=4998504 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.64 rows=1 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.62 rows=4 width=8)
                           Index Cond: (l_orderkey = orders.o_orderkey)
(33 rows)

query 22 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93876.78..93878.50 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46820.98..46820.99 rows=1 width=32)
           ->  Gather  (cost=46820.55..46820.96 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.55..45820.56 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.72 rows=11932 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.79..59814.62 rows=7414 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.79..59629.27 rows=7414 width=38)
               ->  Gather Merge  (cost=47055.35..49150.71 rows=17500 width=26)
                     Workers Planned: 4
                     Params Evaluated: $1
                     ->  Sort  (cost=46055.30..46066.23 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.72 rows=4375 width=26)
                                 Filter: ((c_acctbal > $1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.16 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

