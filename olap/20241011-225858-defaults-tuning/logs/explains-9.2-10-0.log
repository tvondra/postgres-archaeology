query 1 run 1
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=4243370.99..4243370.99 rows=1 width=25)
   ->  Sort  (cost=4243370.99..4243371.00 rows=6 width=25)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=4243370.85..4243370.96 rows=6 width=25)
               ->  Seq Scan on lineitem  (cost=0.00..1874969.85 rows=59210025 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(6 rows)

query 2 run 1
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1149900.77..1149900.78 rows=1 width=193)
   ->  Sort  (cost=1149900.77..1149900.78 rows=1 width=193)
         Sort Key: public.supplier.s_acctbal, public.nation.n_name, public.supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=557360.78..1149900.76 rows=1 width=193)
               Merge Cond: (part.p_partkey = public.partsupp.ps_partkey)
               Join Filter: (public.partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.00..89212.95 rows=9309 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=557351.20..565331.45 rows=1596050 width=173)
                     ->  Sort  (cost=557351.20..561341.32 rows=1596050 width=173)
                           Sort Key: public.partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.53..305233.82 rows=1596050 width=173)
                                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255224.03 rows=8000203 width=14)
                                 ->  Hash  (cost=3798.53..3798.53 rows=20000 width=167)
                                       ->  Hash Join  (cost=2.53..3798.53 rows=20000 width=167)
                                             Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (public.nation.n_regionkey = public.region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=66.12..66.13 rows=1 width=6)
                       ->  Nested Loop  (cost=1.56..66.11 rows=4 width=6)
                             Join Filter: (public.nation.n_regionkey = public.region.r_regionkey)
                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=1.56..64.82 rows=18 width=10)
                                   Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                   ->  Nested Loop  (cost=0.00..63.01 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.89 rows=18 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.27 rows=1 width=8)
                                               Index Cond: (s_suppkey = public.partsupp.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
(40 rows)

query 3 run 1
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3536912.16..3536912.18 rows=10 width=24)
   ->  Sort  (cost=3536912.16..3544907.83 rows=3198270 width=24)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         ->  GroupAggregate  (cost=3379846.27..3467798.69 rows=3198270 width=24)
               ->  Sort  (cost=3379846.27..3387841.94 rows=3198270 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=636770.42..2992126.42 rows=3198270 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1874969.85 rows=32645719 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=611225.05..611225.05 rows=1469550 width=12)
                                 ->  Hash Join  (cost=144638.98..611225.05 rows=1469550 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=86149.41..438190.06 rows=7261812 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..84333.96 rows=7261812 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54695.50..54695.50 rows=303526 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54695.50 rows=303526 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 4 run 1
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3106881.66..3106881.66 rows=1 width=16)
   ->  Sort  (cost=3106881.66..3106881.66 rows=1 width=16)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=3106881.64..3106881.65 rows=1 width=16)
               ->  Merge Semi Join  (cost=119.16..3103905.92 rows=595143 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..622968.81 rows=595286 width=20)
                           Filter: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2421623.81 rows=19995383 width=4)
                           Filter: (l_commitdate < l_receiptdate)
(10 rows)

query 5 run 1
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2942172.18..2942172.18 rows=1 width=38)
   ->  Sort  (cost=2942172.18..2942172.24 rows=25 width=38)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  HashAggregate  (cost=2942171.80..2942172.05 rows=25 width=38)
               ->  Hash Join  (cost=454348.41..2941431.01 rows=74079 width=38)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Merge Join  (cost=449627.41..2898919.98 rows=1852462 width=50)
                           Merge Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2271658.44 rows=59986148 width=20)
                           ->  Sort  (cost=449510.70..450668.77 rows=463227 width=38)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=96590.09..405917.89 rows=463227 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=33267.75..329277.78 rows=2316135 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..32688.72 rows=2316135 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59572.64..59572.64 rows=299976 width=38)
                                             ->  Hash Join  (cost=2.53..59572.64 rows=299976 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50945.80 rows=1499880 width=8)
                                                   ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(30 rows)

query 6 run 1
SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1081818.43..1081818.44 rows=1 width=12)
   ->  Aggregate  (cost=1081818.43..1081818.44 rows=1 width=12)
         ->  Bitmap Heap Scan on lineitem  (cost=208357.41..1075907.14 rows=1182258 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..208061.84 rows=1182258 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(6 rows)

query 7 run 1
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2605179.03..2605179.03 rows=1 width=68)
   ->  Sort  (cost=2605179.03..2605324.96 rows=58372 width=68)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2604011.59..2604887.17 rows=58372 width=68)
               ->  Hash Join  (cost=864041.49..2603136.01 rows=58372 width=68)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (n1.n_nationkey = supplier.s_nationkey))
                     ->  Hash Join  (cost=859320.49..2568344.61 rows=1459741 width=76)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=292655.27..1691718.83 rows=18261371 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..288089.92 rows=18261371 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=538796.08..538796.08 rows=1199052 width=60)
                                 ->  Hash Join  (cost=59285.58..538796.08 rows=1199052 width=60)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..411269.47 rows=15000147 width=8)
                                       ->  Hash  (cost=57786.90..57786.90 rows=119894 width=60)
                                             ->  Hash Join  (cost=16.65..57786.90 rows=119894 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50945.80 rows=1499880 width=8)
                                                   ->  Hash  (cost=16.62..16.62 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..16.62 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=30)
                                                               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
                     ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(28 rows)

query 8 run 1
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1294515.28..1294515.28 rows=1 width=42)
   ->  Sort  (cost=1294515.28..1294517.12 rows=738 width=42)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1294498.67..1294511.59 rows=738 width=42)
               ->  Nested Loop  (cost=505663.28..1294008.29 rows=24519 width=42)
                     Join Filter: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=505663.28..1284689.76 rows=24519 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=501192.28..1279728.32 rows=24526 width=20)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.00..768509.07 rows=399921 width=20)
                                       ->  Seq Scan on part  (cost=0.00..65981.39 rows=13334 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..52.37 rows=32 width=24)
                                             Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=486099.21..486099.21 rows=919926 width=8)
                                       ->  Hash Join  (cost=129388.91..486099.21 rows=919926 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=66066.56..396329.00 rows=4599629 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..64916.66 rows=4599629 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59572.64..59572.64 rows=299976 width=4)
                                                   ->  Hash Join  (cost=2.53..59572.64 rows=299976 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50945.80 rows=1499880 width=8)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(37 rows)

query 9 run 1
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3214185.35..3214185.35 rows=1 width=53)
   ->  Sort  (cost=3214185.35..3214185.73 rows=154 width=53)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=3214182.27..3214184.58 rows=154 width=53)
               ->  Nested Loop  (cost=9.76..3214179.57 rows=154 width=53)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=9.76..3214119.74 rows=154 width=31)
                           ->  Nested Loop  (cost=9.76..3213524.21 rows=154 width=31)
                                 ->  Nested Loop  (cost=9.76..3213023.36 rows=154 width=35)
                                       ->  Merge Join  (cost=9.76..437474.37 rows=484861 width=18)
                                             Merge Cond: (part.p_partkey = partsupp.ps_partkey)
                                             ->  Index Scan using part_pkey on part  (cost=0.00..84212.87 rows=121214 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..328131.62 rows=8000203 width=14)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..5.71 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.24 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..3.86 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 10 run 1
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2650759.12..2650759.17 rows=20 width=181)
   ->  Sort  (cost=2650759.12..2652181.15 rows=568810 width=181)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  GroupAggregate  (cost=2614292.92..2635623.29 rows=568810 width=181)
               ->  Sort  (cost=2614292.92..2615714.94 rows=568810 width=181)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=387177.33..2527424.79 rows=568810 width=181)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=387175.77..2519602.09 rows=568810 width=159)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=285257.47..2370660.63 rows=568810 width=16)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..1874969.85 rows=14890561 width=16)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=278095.02..278095.02 rows=572996 width=8)
                                             ->  Bitmap Heap Scan on orders  (cost=8232.08..278095.02 rows=572996 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8088.83 rows=572996 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Hash  (cost=50945.80..50945.80 rows=1499880 width=147)
                                       ->  Seq Scan on customer  (cost=0.00..50945.80 rows=1499880 width=147)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=685029.02..685029.02 rows=1 width=14)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=323135.15..323135.16 rows=1 width=10)
           ->  Hash Join  (cost=2323.42..320741.07 rows=319210 width=10)
                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..255224.03 rows=8000203 width=14)
                 ->  Hash  (cost=2273.42..2273.42 rows=4000 width=4)
                       ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = public.nation.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                         Index Cond: (s_nationkey = public.nation.n_nationkey)
   ->  Sort  (cost=361893.86..362691.88 rows=319210 width=14)
         Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
         ->  GroupAggregate  (cost=349923.48..360297.81 rows=319210 width=14)
               Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $1)
               ->  Sort  (cost=349923.48..350721.51 rows=319210 width=14)
                     Sort Key: public.partsupp.ps_partkey
                     ->  Hash Join  (cost=2323.42..320741.07 rows=319210 width=14)
                           Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..255224.03 rows=8000203 width=18)
                           ->  Hash  (cost=2273.42..2273.42 rows=4000 width=4)
                                 ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=4)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=8)
                                             Recheck Cond: (s_nationkey = public.nation.n_nationkey)
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                   Index Cond: (s_nationkey = public.nation.n_nationkey)
(31 rows)

query 12 run 1
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3095866.51..3095866.51 rows=1 width=27)
   ->  Sort  (cost=3095866.51..3095866.51 rows=1 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=3095866.49..3095866.50 rows=1 width=27)
               ->  Merge Join  (cost=2501084.58..3090801.86 rows=289407 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..547968.07 rows=15000147 width=20)
                     ->  Sort  (cost=2501084.51..2501808.03 rows=289407 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..2474831.33 rows=289407 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 13 run 1
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2752060.95..2752060.96 rows=1 width=8)
   ->  Sort  (cost=2752060.95..2752061.45 rows=200 width=8)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         ->  HashAggregate  (cost=2752057.95..2752059.95 rows=200 width=8)
               ->  GroupAggregate  (cost=2348042.74..2729559.75 rows=1499880 width=8)
                     ->  Merge Left Join  (cost=2348042.74..2640317.40 rows=14848711 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.00..28672.51 rows=1499880 width=4)
                           ->  Materialize  (cost=2348042.74..2422286.30 rows=14848711 width=8)
                                 ->  Sort  (cost=2348042.74..2385164.52 rows=14848711 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..448769.84 rows=14848711 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 14 run 1
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=845597.10..845597.11 rows=1 width=33)
   ->  Aggregate  (cost=845597.10..845597.11 rows=1 width=33)
         ->  Hash Join  (cost=112375.71..831710.99 rows=793492 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=12721.01..692779.72 rows=793492 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12522.63 rows=793492 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60981.31..60981.31 rows=2000031 width=25)
                     ->  Seq Scan on part  (cost=0.00..60981.31 rows=2000031 width=25)
(10 rows)

query 15 run 1
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2456021.74..2456022.90 rows=1 width=104)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1219298.94..1219298.95 rows=1 width=32)
           ->  HashAggregate  (cost=1219212.90..1219251.14 rows=3824 width=16)
                 ->  Bitmap Heap Scan on lineitem  (cost=36748.85..1196284.48 rows=2292842 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36175.63 rows=2292842 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1236722.79..1241165.91 rows=3824 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..4135.75 rows=100000 width=72)
         ->  Sort  (cost=1236722.79..1236732.35 rows=3824 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1236409.21..1236495.25 rows=3824 width=36)
                     ->  HashAggregate  (cost=1236409.21..1236457.01 rows=3824 width=16)
                           Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=36748.85..1196284.48 rows=2292842 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36175.63 rows=2292842 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(20 rows)

DROP VIEW
query 16 run 1
SET
SET
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=377345.03..377345.03 rows=1 width=40)
   ->  Sort  (cost=377345.03..377414.50 rows=27789 width=40)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=369517.84..377206.08 rows=27789 width=40)
               ->  Sort  (cost=369517.84..370999.91 rows=592828 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Merge Join  (cost=3484.01..302251.78 rows=592828 width=40)
                           Merge Cond: (part.p_partkey = partsupp.ps_partkey)
                           ->  Index Scan using part_pkey on part  (cost=0.00..109213.26 rows=296411 width=40)
                                 Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.03..176380.66 rows=4000102 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
(15 rows)

query 17 run 1
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10829375.97..10829375.98 rows=1 width=8)
   ->  Aggregate  (cost=10829375.97..10829375.98 rows=1 width=8)
         ->  Merge Join  (cost=10133682.25..10829329.56 rows=18563 width=8)
               Merge Cond: (public.lineitem.l_partkey = part.p_partkey)
               Join Filter: (public.lineitem.l_quantity < ((0.2 * avg(public.lineitem.l_quantity))))
               ->  GroupAggregate  (cost=10133682.25..10611854.50 rows=1885076 width=9)
                     ->  Sort  (cost=10133682.25..10283647.62 rows=59986148 width=9)
                           Sort Key: public.lineitem.l_partkey
                           ->  Seq Scan on lineitem  (cost=0.00..1725004.48 rows=59986148 width=9)
               ->  Materialize  (cost=0.00..193067.79 rows=59085 width=21)
                     ->  Nested Loop  (cost=0.00..192920.08 rows=59085 width=21)
                           ->  Index Scan using part_pkey on part  (cost=0.00..89212.95 rows=1970 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..52.32 rows=32 width=17)
                                 Index Cond: (l_partkey = part.p_partkey)
(15 rows)

query 18 run 1
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=11874325.42..11874328.17 rows=100 width=44)
   ->  GroupAggregate  (cost=11874325.42..12699134.95 rows=29993074 width=44)
         ->  Sort  (cost=11874325.42..11949308.10 rows=29993074 width=44)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               ->  Hash Join  (cost=78600.01..7556339.65 rows=29993074 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=116.71..6459143.87 rows=29993074 width=25)
                           Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=0.00..3719427.75 rows=7500074 width=24)
                                 Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.00..547968.07 rows=15000147 width=20)
                                 ->  Materialize  (cost=0.00..2946502.60 rows=14996537 width=4)
                                       ->  GroupAggregate  (cost=0.00..2759045.89 rows=14996537 width=9)
                                             Filter: (sum(public.lineitem.l_quantity) > 313::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2271658.44 rows=59986148 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2271658.44 rows=59986148 width=9)
                     ->  Hash  (cost=50945.80..50945.80 rows=1499880 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50945.80 rows=1499880 width=23)
(18 rows)

query 19 run 1
SET
SET


 Limit  (cost=3131993.43..3131993.44 rows=1 width=12)
   ->  Aggregate  (cost=3131993.43..3131993.44 rows=1 width=12)
         ->  Hash Join  (cost=104654.77..3131984.69 rows=1165 width=12)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               Join Filter: (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..2924727.44 rows=1122570 width=21)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))))
               ->  Hash  (cost=65981.39..65981.39 rows=2000031 width=30)
                     ->  Seq Scan on part  (cost=0.00..65981.39 rows=2000031 width=30)
                           Filter: (p_size >= 1)
(10 rows)

query 20 run 1
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2984786.49..2984786.49 rows=1 width=52)
   ->  Sort  (cost=2984786.49..2984791.49 rows=2000 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2859083.54..2984776.49 rows=2000 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=56)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=60)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2859034.28..2980823.14 rows=28 width=8)
                     ->  Merge Join  (cost=2859034.28..2980823.00 rows=28 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2562377.75..2664962.85 rows=911868 width=13)
                                 ->  Sort  (cost=2562377.75..2585174.43 rows=9118675 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=146136.63..1408059.76 rows=9118675 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..143856.96 rows=9118675 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=296656.54..298498.33 rows=736716 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=0.00..224860.80 rows=736716 width=16)
                                       ->  Seq Scan on part  (cost=0.00..65981.39 rows=40405 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.75 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 21 run 1
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4861932.13..4861932.13 rows=1 width=26)
   ->  Sort  (cost=4861932.13..4861932.13 rows=1 width=26)
         Sort Key: (count(*)), supplier.s_name
         ->  HashAggregate  (cost=4861932.11..4861932.12 rows=1 width=26)
               ->  Nested Loop Anti Join  (cost=571303.66..4861932.10 rows=1 width=26)
                     ->  Nested Loop Semi Join  (cost=571303.66..4861920.50 rows=1 width=34)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Hash Join  (cost=571303.66..2583268.61 rows=390562 width=38)
                                 Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Hash Join  (cost=2323.42..1960271.63 rows=799567 width=34)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on lineitem l1  (cost=0.00..1874969.85 rows=19995383 width=8)
                                             Filter: (l_receiptdate > l_commitdate)
                                       ->  Hash  (cost=2273.42..2273.42 rows=4000 width=30)
                                             ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                         Filter: (n_name = 'PERU'::bpchar)
                                                   ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=34)
                                                         Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                         ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                               Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Hash  (cost=448769.84..448769.84 rows=7327072 width=4)
                                       ->  Seq Scan on orders  (cost=0.00..448769.84 rows=7327072 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..5.78 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.00..5.79 rows=1 width=8)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(29 rows)

query 22 run 1
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=155181.35..155181.35 rows=1 width=22)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75437.97..75437.98 rows=1 width=6)
           ->  Seq Scan on customer  (cost=0.00..75318.85 rows=47645 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Sort  (cost=79743.37..79761.85 rows=7391 width=22)
         Sort Key: ("substring"((public.customer.c_phone)::text, 1, 2))
         ->  HashAggregate  (cost=79595.55..79706.42 rows=7391 width=22)
               ->  Nested Loop Anti Join  (cost=0.00..79540.12 rows=7391 width=22)
                     ->  Seq Scan on customer  (cost=0.00..75318.85 rows=17499 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.00..2.60 rows=17 width=4)
                           Index Cond: (o_custkey = public.customer.c_custkey)
(13 rows)

