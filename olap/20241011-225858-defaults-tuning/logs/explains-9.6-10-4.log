query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1905904.60..1905904.81 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1905904.60..1905905.84 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=1905904.60..1905904.66 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=1905901.48..1905904.05 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=1904901.48..1904901.65 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312589.36 rows=14807803 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1108283.77..1108283.77 rows=1 width=193)
   ->  Sort  (cost=1108283.77..1108283.77 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=557598.93..1108283.76 rows=1 width=193)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89213.35 rows=8445 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=557598.34..565585.69 rows=1597469 width=173)
                     ->  Sort  (cost=557598.34..561592.01 rows=1597469 width=173)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.53..305248.03 rows=1597469 width=173)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255224.04 rows=8000204 width=14)
                                 ->  Hash  (cost=3798.53..3798.53 rows=20000 width=167)
                                       ->  Hash Join  (cost=2.53..3798.53 rows=20000 width=167)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=66.61..66.62 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.60 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..65.32 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.51 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(40 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2580035.20..2580035.23 rows=10 width=44)
   ->  Sort  (cost=2580035.20..2587991.49 rows=3182516 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=2415786.70..2511262.18 rows=3182516 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=2415786.70..2423742.99 rows=3182516 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Gather  (cost=59463.90..2030089.34 rows=3182516 width=24)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=58463.90..1710837.74 rows=795629 width=24)
                                 ->  Hash Join  (cost=58463.34..377126.44 rows=367006 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308141.36 rows=1827116 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54697.07..54697.07 rows=301301 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54697.07 rows=301301 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 4 run 1
SET
SET
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=752708.56..752708.60 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=752708.56..752708.76 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=752708.56..752708.61 rows=20 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=752706.08..752708.13 rows=20 width=24)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=751706.08..751706.13 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=0.56..751026.06 rows=136004 width=16)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..317516.03 rows=136038 width=20)
                                       Filter: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=823006.91..823006.91 rows=1 width=58)
   ->  Sort  (cost=823006.91..823006.97 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=823005.47..823006.78 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=823005.47..823005.72 rows=100 width=58)
                     Sort Key: nation.n_name
                     ->  Gather  (cost=822758.45..823002.15 rows=100 width=58)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=821758.45..821992.15 rows=25 width=58)
                                 Group Key: nation.n_name
                                 ->  Sort  (cost=821758.45..821805.12 rows=18671 width=38)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=68046.20..820433.88 rows=18671 width=38)
                                             Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                             ->  Nested Loop  (cost=63325.20..812005.28 rows=469452 width=50)
                                                   ->  Hash Join  (cost=63324.64..384215.69 rows=117392 width=38)
                                                         Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317516.03 rows=586962 width=8)
                                                               Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Hash  (cost=59574.62..59574.62 rows=300001 width=38)
                                                               ->  Hash Join  (cost=2.53..59574.62 rows=300001 width=38)
                                                                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                                     ->  Seq Scan on customer  (cost=0.00..50947.06 rows=1500006 width=8)
                                                                     ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                                           ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                                                 Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                                 ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                             Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=20)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                             ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1087002.99..1087003.00 rows=1 width=32)
   ->  Aggregate  (cost=1087002.99..1087003.00 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=213319.76..1081088.95 rows=1182808 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..213024.06 rows=1182808 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1480622.70..1480622.78 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1480622.70..1481400.18 rows=10032 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=1480622.70..1480723.02 rows=40128 width=92)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Gather  (cost=1473104.62..1477554.45 rows=40128 width=92)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1472104.62..1472541.65 rows=10032 width=92)
                           Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Sort  (cost=1472104.62..1472141.97 rows=14941 width=72)
                                 Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=63051.45..1471068.69 rows=14941 width=72)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                       ->  Nested Loop  (cost=59274.05..1465287.92 rows=361127 width=46)
                                             ->  Hash Join  (cost=59273.48..375102.05 rows=299990 width=30)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298766.68 rows=3749868 width=8)
                                                   ->  Hash  (cost=57773.48..57773.48 rows=120000 width=30)
                                                         ->  Hash Join  (cost=1.40..57773.48 rows=120000 width=30)
                                                               Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..50947.06 rows=1500006 width=8)
                                                               ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.62 rows=1 width=24)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                                   Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=3677.40..3677.40 rows=8000 width=30)
                                             ->  Hash Join  (cost=1.40..3677.40 rows=8000 width=30)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                               Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(35 rows)

query 8 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=639510.58..639510.66 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=639510.58..639709.08 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=639510.58..639534.64 rows=9624 width=72)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Gather  (cost=637729.89..638873.84 rows=9624 width=72)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=636729.89..636911.44 rows=2406 width=72)
                           Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=636729.89..636744.72 rows=5930 width=46)
                                 Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=67798.20..636358.26 rows=5930 width=46)
                                       Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                       ->  Hash Join  (cost=67796.64..636245.51 rows=5930 width=20)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Nested Loop  (cost=4472.00..572750.39 rows=29650 width=24)
                                                   ->  Hash Join  (cost=4471.57..231354.19 rows=99392 width=20)
                                                         Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                         ->  Nested Loop  (cost=0.56..225514.36 rows=99974 width=20)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..47231.14 rows=3334 width=4)
                                                                     Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..53.13 rows=34 width=24)
                                                                     Index Cond: (l_partkey = part.p_partkey)
                                                         ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                                               ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=12)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59574.62..59574.62 rows=300001 width=4)
                                                   ->  Hash Join  (cost=2.53..59574.62 rows=300001 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50947.06 rows=1500006 width=8)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(41 rows)

query 9 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=690840.25..690840.28 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=690840.25..690846.03 rows=193 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=690840.25..690840.73 rows=192 width=66)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Gather  (cost=690811.97..690832.97 rows=192 width=66)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=689811.97..689813.77 rows=48 width=66)
                           Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=689811.97..689812.09 rows=48 width=57)
                                 Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                                 ->  Hash Join  (cost=3.29..689810.63 rows=48 width=57)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=1.73..689808.17 rows=48 width=31)
                                             ->  Nested Loop  (cost=1.29..689643.40 rows=48 width=31)
                                                   ->  Nested Loop  (cost=1.00..689485.57 rows=48 width=35)
                                                         ->  Nested Loop  (cost=0.43..185019.74 rows=141417 width=18)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..47231.14 rows=35354 width=4)
                                                                     Filter: ((p_name)::text ~~ '%navy%'::text)
                                                               ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.72 rows=18 width=14)
                                                                     Index Cond: (ps_partkey = part.p_partkey)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..3.56 rows=1 width=29)
                                                               Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                                   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.28 rows=1 width=8)
                                                         Index Cond: (s_suppkey = lineitem.l_suppkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                                                   Index Cond: (o_orderkey = lineitem.l_orderkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 10 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1167289.18..1167289.23 rows=20 width=202)
   ->  Sort  (cost=1167289.18..1168740.21 rows=580410 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1135883.41..1151844.68 rows=580410 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Sort  (cost=1135883.41..1137334.43 rows=580410 width=182)
                     Sort Key: customer.c_custkey, nation.n_name
                     ->  Gather  (cost=102926.26..1047160.44 rows=580410 width=182)
                           Workers Planned: 4
                           ->  Hash Join  (cost=101926.26..988119.44 rows=145102 width=182)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=101924.70..986122.72 rows=145102 width=160)
                                       ->  Hash Join  (cost=101924.13..455011.35 rows=146546 width=152)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..317516.03 rows=146546 width=8)
                                                   Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Hash  (cost=50947.06..50947.06 rows=1500006 width=148)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.06 rows=1500006 width=148)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=488228.87..488228.87 rows=1 width=36)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=207444.38..207444.39 rows=1 width=32)
           ->  Gather  (cost=207443.95..207444.36 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206443.95..206443.96 rows=1 width=32)
                       ->  Hash Join  (cost=2323.46..205844.89 rows=79874 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195222.51 rows=2000051 width=14)
                             ->  Hash  (cost=2273.46..2273.46 rows=4000 width=4)
                                   ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=49.29..2232.15 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=280784.47..281583.21 rows=319494 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=268004.71..279187.00 rows=319494 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $1)
               ->  Sort  (cost=268004.71..268803.45 rows=319494 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Gather  (cost=3323.46..238794.29 rows=319494 width=14)
                           Workers Planned: 4
                           ->  Hash Join  (cost=2323.46..205844.89 rows=79874 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195222.51 rows=2000051 width=18)
                                 ->  Hash  (cost=2273.46..2273.46 rows=4000 width=4)
                                       ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
(37 rows)

query 12 run 1
SET
SET
SET
                                                                                                                          QUERY PLAN                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1718056.45..1718056.50 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1718056.45..1718056.80 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=1718056.45..1718056.52 rows=28 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Gather  (cost=1716610.47..1718055.78 rows=28 width=27)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1715610.47..1717052.98 rows=7 width=27)
                           Group Key: lineitem.l_shipmode
                           ->  Sort  (cost=1715610.47..1715790.77 rows=72122 width=27)
                                 Sort Key: lineitem.l_shipmode
                                 ->  Nested Loop  (cost=0.43..1709790.89 rows=72122 width=27)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1462546.45 rows=72122 width=15)
                                             Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(16 rows)

query 13 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2775588.34..2775588.34 rows=1 width=16)
   ->  Sort  (cost=2775588.34..2775588.84 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=2775585.34..2775587.34 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=2368210.84..2753085.25 rows=1500006 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=2368210.84..2663095.31 rows=14997976 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.52 rows=1500006 width=4)
                           ->  Materialize  (cost=2368208.52..2443198.40 rows=14997976 width=8)
                                 ->  Sort  (cost=2368208.52..2405703.46 rows=14997976 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..448761.43 rows=14997976 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(15 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=803126.49..803126.51 rows=1 width=32)
   ->  Aggregate  (cost=803126.49..803126.51 rows=1 width=32)
         ->  Hash Join  (cost=111416.24..790284.66 rows=733819 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=11761.21..658781.34 rows=733819 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..11577.76 rows=733819 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60981.46..60981.46 rows=2000046 width=25)
                     ->  Seq Scan on part  (cost=0.00..60981.46 rows=2000046 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2687716.52..2687717.06 rows=1 width=104)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1222205.97..1222205.98 rows=1 width=32)
           ->  HashAggregate  (cost=1219691.35..1220948.66 rows=100585 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=36934.67..1196645.88 rows=2304547 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36358.54 rows=2304547 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1465510.54..1519784.58 rows=100585 width=104)
         Merge Cond: (lineitem.l_suppkey = supplier.s_suppkey)
         ->  GroupAggregate  (cost=1465510.25..1513109.97 rows=100585 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Sort  (cost=1465510.25..1471271.62 rows=2304547 width=16)
                     Sort Key: lineitem.l_suppkey
                     ->  Bitmap Heap Scan on lineitem  (cost=36934.67..1196645.88 rows=2304547 width=16)
                           Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36358.54 rows=2304547 width=0)
                                 Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=72)
(21 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=359337.60..359337.60 rows=1 width=44)
   ->  Sort  (cost=359337.60..359717.92 rows=152127 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=349818.28..358576.96 rows=152127 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=349818.28..351265.76 rows=578993 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=90521.04..284220.43 rows=578993 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176380.53 rows=4000102 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=83430.89..83430.89 rows=289496 width=40)
                                 ->  Gather  (cost=1000.00..83430.89 rows=289496 width=40)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.29 rows=72374 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5185673.04..5185673.06 rows=1 width=32)
   ->  Aggregate  (cost=5185673.04..5185673.06 rows=1 width=32)
         ->  Merge Join  (cost=5066700.82..5185628.52 rows=17809 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=4978998.06..5075108.80 rows=1747468 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=4978998.06..4996472.74 rows=6989872 width=36)
                           Sort Key: lineitem_1.l_partkey
                           ->  Gather  (cost=3228191.62..4061489.99 rows=6989872 width=36)
                                 Workers Planned: 4
                                 ->  Partial GroupAggregate  (cost=3227191.62..3361502.79 rows=1747468 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Sort  (cost=3227191.62..3264680.90 rows=14995709 width=9)
                                             Sort Key: lineitem_1.l_partkey
                                             ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275100.09 rows=14995709 width=9)
               ->  Sort  (cost=87702.76..87855.64 rows=61151 width=21)
                     Sort Key: lineitem.l_partkey
                     ->  Gather  (cost=1000.57..82841.23 rows=61151 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.56..75726.13 rows=15288 width=21)
                                 ->  Parallel Seq Scan on part  (cost=0.00..48481.17 rows=510 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..53.08 rows=34 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(25 rows)

query 18 run 1
SET
SET
SET
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=13545319.61..13545319.86 rows=100 width=71)
   ->  Sort  (cost=13545319.61..13620298.16 rows=29991418 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=11724262.28..12399069.18 rows=29991418 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=11724262.28..11799240.82 rows=29991418 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=78669.16..7406527.87 rows=29991418 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=182.02..6459339.46 rows=29991418 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Semi Join  (cost=1.00..3719316.10 rows=7499737 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..547957.55 rows=14999474 width=20)
                                       ->  Materialize  (cost=0.56..2946413.51 rows=14995709 width=4)
                                             ->  GroupAggregate  (cost=0.56..2758967.15 rows=14995709 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271606.60 rows=59982836 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2271606.60 rows=59982836 width=9)
                           ->  Hash  (cost=50947.06..50947.06 rows=1500006 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..50947.06 rows=1500006 width=23)
(22 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=128882.52..128882.53 rows=1 width=32)
   ->  Finalize Aggregate  (cost=128882.52..128882.53 rows=1 width=32)
         ->  Gather  (cost=128882.09..128882.50 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=127882.09..127882.10 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..127879.97 rows=282 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.49 rows=1188 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..55.25 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2961366.28..2961366.28 rows=1 width=52)
   ->  Sort  (cost=2961366.28..2961371.28 rows=2000 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2712042.87..2961356.28 rows=2000 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=56)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=60)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2711993.58..2950203.19 rows=148 width=8)
                     ->  Merge Join  (cost=2711993.58..2950202.45 rows=148 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2551358.79..2714325.44 rows=4829909 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=2551358.79..2573988.29 rows=9051802 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=145065.54..1405985.57 rows=9051802 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..142802.59 rows=9051802 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=160634.79..161565.78 rows=372395 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=1000.43..126176.20 rows=372395 width=16)
                                       ->  Gather  (cost=1000.00..50251.34 rows=20202 width=4)
                                             Workers Planned: 4
                                             ->  Parallel Seq Scan on part  (cost=0.00..47231.14 rows=5050 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.58 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(33 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2066593.39..2066593.39 rows=1 width=34)
   ->  Sort  (cost=2066593.39..2066593.39 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=2066593.36..2066593.38 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=2066593.36..2066593.36 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=3325.02..2066593.35 rows=1 width=26)
                           ->  Nested Loop  (cost=3324.46..2066586.62 rows=1 width=34)
                                 ->  Gather  (cost=3324.02..2066583.17 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=2324.02..2065583.07 rows=1 width=38)
                                             ->  Hash Join  (cost=2323.46..1335645.26 rows=198780 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312589.36 rows=4998570 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.63 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.44 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.64 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 22 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=132932.95..132932.98 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Finalize Aggregate  (cost=46821.03..46821.04 rows=1 width=32)
           ->  Gather  (cost=46820.60..46821.01 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.60..45820.61 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.79 rows=11924 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86111.91..86336.42 rows=8164 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=86111.91..86132.32 rows=8164 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..85581.45 rows=8164 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75322.16 rows=17500 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.20 rows=19 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

