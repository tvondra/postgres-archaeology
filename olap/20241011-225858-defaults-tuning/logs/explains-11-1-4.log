query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191611.96..191612.64 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191611.96..191616.02 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=191611.96..191614.84 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=190611.91..190611.92 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=190611.66..190611.83 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131313.98 rows=1482442 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=54883.24..54883.25 rows=1 width=192)
   ->  Sort  (cost=54883.24..54883.25 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=37849.01..54883.23 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6432.20 rows=832 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=347 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=30542.01..30542.01 rows=160000 width=172)
                     ->  Hash Join  (cost=408.01..30542.01 rows=160000 width=172)
                           Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..25534.00 rows=800000 width=14)
                           ->  Hash  (cost=383.01..383.01 rows=2000 width=166)
                                 ->  Hash Join  (cost=2.51..383.01 rows=2000 width=166)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=144)
                                       ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                             ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                   Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(38 rows)

query 3 run 1
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=235591.51..235591.54 rows=10 width=44)
   ->  Sort  (cost=235591.51..236392.72 rows=320484 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=180077.50..228665.97 rows=320484 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=180077.50..220653.87 rows=320484 width=44)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=179077.45..181481.08 rows=80121 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=179077.45..179277.75 rows=80121 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Parallel Hash Join  (cost=37927.49..172551.63 rows=80121 width=24)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..131313.98 rows=813788 width=16)
                                             Filter: (l_shipdate > '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=37331.88..37331.88 rows=47649 width=12)
                                             ->  Parallel Hash Join  (cost=4537.02..37331.88 rows=47649 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..32179.39 rows=234456 width=16)
                                                         Filter: (o_orderdate < '1995-03-07'::date)
                                                   ->  Parallel Hash  (cost=4378.25..4378.25 rows=12702 width=4)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12702 width=4)
                                                               Filter: (c_mktsegment = 'BUILDING'::bpchar)
(23 rows)

query 4 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=79404.56..79404.94 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=79404.56..79406.46 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Gather Merge  (cost=79404.56..79406.34 rows=15 width=24)
               Workers Planned: 3
               ->  Sort  (cost=78404.52..78404.53 rows=5 width=24)
                     Sort Key: orders.o_orderpriority
                     ->  Partial HashAggregate  (cost=78404.41..78404.46 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=806.30..78314.02 rows=18078 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=805.87..27208.04 rows=18078 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..791.86 rows=56043 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.22 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=85673.39..85673.39 rows=1 width=58)
   ->  Sort  (cost=85673.39..85673.45 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=85633.71..85673.26 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=85633.71..85672.39 rows=75 width=58)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=84633.67..84663.54 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=84633.67..84639.58 rows=2364 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=8521.33..84501.21 rows=2364 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=8048.33..83716.35 rows=59401 width=50)
                                             ->  Parallel Hash Join  (cost=8047.90..35632.99 rows=14850 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=3307.76..30552.53 rows=74251 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..3250.22 rows=230179 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=4583.88..4583.88 rows=12500 width=38)
                                                         ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.20 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=108124.39..108124.40 rows=1 width=32)
   ->  Finalize Aggregate  (cost=108124.39..108124.40 rows=1 width=32)
         ->  Gather  (cost=108123.96..108124.37 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=107123.96..107123.97 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=21400.76..106973.55 rows=30081 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21370.67 rows=120323 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=163952.94..163953.10 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=163952.94..164881.25 rows=6005 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=163952.94..164703.53 rows=5811 width=92)
               Workers Planned: 3
               ->  Partial GroupAggregate  (cost=162952.90..163020.70 rows=1937 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=162952.90..162957.74 rows=1937 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Hash Join  (cost=4843.31..162847.15 rows=1937 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=4478.21..162222.40 rows=46796 width=46)
                                       ->  Parallel Hash Join  (cost=4477.77..37423.29 rows=38710 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=8)
                                             ->  Parallel Hash  (cost=4415.27..4415.27 rows=5000 width=30)
                                                   ->  Hash Join  (cost=1.40..4415.27 rows=5000 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.21 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=355.10..355.10 rows=800 width=30)
                                       ->  Hash Join  (cost=1.40..355.10 rows=800 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 8 run 1
SET
SET
SET
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=70208.72..70208.87 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=70208.72..70563.29 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=70208.72..70483.98 rows=2014 width=72)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=69208.70..69251.49 rows=1007 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=69208.70..69211.21 rows=1007 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=64645.89..69158.47 rows=1007 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Hash Join  (cost=64644.33..69148.78 rows=1007 width=20)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Hash Join  (cost=64196.33..68698.13 rows=1012 width=20)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Parallel Hash Join  (cost=64193.82..68666.52 rows=5061 width=24)
                                                   Hash Cond: (customer.c_custkey = orders.o_custkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Parallel Hash  (cost=64144.85..64144.85 rows=3918 width=24)
                                                         ->  Parallel Hash Join  (cost=30181.65..64144.85 rows=3918 width=24)
                                                               Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                               ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=148748 width=12)
                                                                     Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                               ->  Parallel Hash  (cost=29975.82..29975.82 rows=16466 width=20)
                                                                     ->  Nested Loop  (cost=0.43..29975.82 rows=16466 width=20)
                                                                           ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=549 width=4)
                                                                                 Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..44.93 rows=31 width=24)
                                                                                 Index Cond: (l_partkey = part.p_partkey)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(40 rows)

query 9 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=46737.86..46738.00 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=46737.86..46747.79 rows=73 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=46737.86..46745.91 rows=60 width=66)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=45737.84..45738.96 rows=30 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=45737.84..45737.91 rows=30 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3.13..45737.10 rows=30 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=1.57..45735.30 rows=30 width=31)
                                       ->  Nested Loop  (cost=1.14..45640.91 rows=30 width=31)
                                             ->  Nested Loop  (cost=0.86..45552.47 rows=30 width=35)
                                                   ->  Nested Loop  (cost=0.42..13369.16 rows=10102 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=2525 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..3.22 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..3.18 rows=1 width=29)
                                                         Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                             ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.95 rows=1 width=8)
                                                   Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..3.15 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 10 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=100578.01..100578.06 rows=20 width=202)
   ->  Sort  (cost=100578.01..100717.74 rows=55891 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=98392.14..99090.77 rows=55891 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6816.07..97693.50 rows=55891 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5816.07..91104.40 rows=18029 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5814.51..91047.49 rows=18029 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=811.26..85996.91 rows=18029 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=810.82..27214.63 rows=18187 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..796.73 rows=56380 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.22 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22718.12..22718.12 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=10892.39..10892.40 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..10652.39 rows=32000 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..25.25 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=11825.72..11852.39 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=11212.39..11772.39 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..10652.39 rows=32000 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..25.25 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=170207.29..170228.41 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=170207.29..170355.12 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=170207.29..170354.84 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=169207.24..169351.45 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=169207.24..169225.25 rows=7207 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..168745.44 rows=7207 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..146317.17 rows=7208 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.11 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64816.89..64816.89 rows=1 width=16)
   ->  Sort  (cost=64816.89..64817.39 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64813.89..64815.89 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61063.89..62563.89 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53564.64 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=68522.45..68522.46 rows=1 width=32)
   ->  Finalize Aggregate  (cost=68522.45..68522.46 rows=1 width=32)
         ->  Gather  (cost=68521.99..68522.40 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=67521.99..67522.00 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7046.84..67229.44 rows=16717 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1072.84..61211.56 rows=16717 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1056.12 rows=66869 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=240244.76..240357.12 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=121436.44..121436.45 rows=1 width=32)
           ->  HashAggregate  (cost=121185.12..121310.78 rows=10053 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3566.14..118960.53 rows=222459 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3510.52 rows=222459 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=118808.31..124426.50 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=118808.02..124301.37 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Gather Merge  (cost=118808.02..123622.79 rows=40212 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=117807.96..117833.10 rows=10053 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=117014.01..117139.67 rows=10053 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=3566.14..116457.86 rows=55615 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3510.52 rows=222459 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.49 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29210.32..29210.33 rows=1 width=44)
   ->  Sort  (cost=29210.32..29250.07 rows=15897 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=28239.44..29130.84 rows=15897 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=28239.44..28385.93 rows=58594 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=7683.35..23599.25 rows=58594 width=40)
                           Workers Planned: 4
                           ->  Parallel Hash Join  (cost=6683.35..16739.85 rows=14648 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12207 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12207 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=429219.07..429219.08 rows=1 width=32)
   ->  Aggregate  (cost=429219.07..429219.08 rows=1 width=32)
         ->  Merge Join  (cost=299956.63..429214.37 rows=1876 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=298955.75..413994.06 rows=194378 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=298955.75..405247.05 rows=777512 width=36)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=297955.70..311637.81 rows=194378 width=36)
                                 Group Key: lineitem_1.l_partkey
                                 ->  Sort  (cost=297955.70..301706.49 rows=1500319 width=9)
                                       Sort Key: lineitem_1.l_partkey
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..127563.19 rows=1500319 width=9)
               ->  Materialize  (cost=1000.88..12705.77 rows=5791 width=21)
                     ->  Gather Merge  (cost=1000.88..12691.29 rows=5791 width=21)
                           Workers Planned: 2
                           ->  Nested Loop  (cost=0.85..11022.84 rows=2413 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.42..7176.42 rows=80 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..47.77 rows=31 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(22 rows)

query 18 run 1
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=894732.16..894732.41 rows=100 width=71)
   ->  Sort  (cost=894732.16..899733.22 rows=2000424 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=523745.69..818277.40 rows=2000424 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=523745.69..773267.86 rows=2000424 width=71)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=522745.63..533998.01 rows=500106 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=522745.63..523995.89 rows=500106 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Parallel Hash Join  (cost=330712.28..465514.91 rows=500106 width=44)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..127563.19 rows=1500319 width=9)
                                       ->  Parallel Hash  (cost=328695.71..328695.71 rows=161325 width=43)
                                             ->  Parallel Hash Join  (cost=296032.35..328695.71 rows=161325 width=43)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Hash Join  (cost=291029.10..323268.97 rows=161325 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=20)
                                                         ->  Hash  (cost=284777.78..284777.78 rows=500106 width=4)
                                                               ->  GroupAggregate  (cost=0.43..279776.72 rows=500106 width=4)
                                                                     Group Key: lineitem_1.l_orderkey
                                                                     Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                                     ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227265.56 rows=6001275 width=9)
                                                   ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=23)
(27 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=18216.38..18216.39 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18216.38..18216.39 rows=1 width=32)
         ->  Gather  (cost=18216.16..18216.37 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17216.16..17216.17 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17215.80 rows=47 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=199 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..48.11 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=272397.84..272397.85 rows=1 width=51)
   ->  Sort  (cost=272397.84..272397.85 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=238993.44..272397.83 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=238993.44..271942.52 rows=1 width=8)
                     ->  Merge Join  (cost=238993.44..271942.52 rows=1 width=8)
                           Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                           Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity)))))
                           ->  GroupAggregate  (cost=237992.57..254094.96 rows=479743 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=237992.57..240219.13 rows=890625 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=14274.34..140193.71 rows=890625 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14051.68 rows=890625 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Materialize  (cost=1000.87..11430.98 rows=8080 width=16)
                                 ->  Gather Merge  (cost=1000.87..11410.78 rows=8080 width=16)
                                       Workers Planned: 2
                                       ->  Nested Loop  (cost=0.84..9478.12 rows=3367 width=16)
                                             ->  Parallel Index Scan using part_pkey on part  (cost=0.42..6968.09 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..2.94 rows=4 width=12)
                                                   Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=193912.57..193912.58 rows=1 width=34)
   ->  Sort  (cost=193912.57..193912.58 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=193912.54..193912.56 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=193912.54..193912.55 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=1236.87..193912.53 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=1236.44..193909.14 rows=1 width=38)
                                 ->  Gather  (cost=1236.01..193905.83 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=236.01..192905.73 rows=1 width=34)
                                             ->  Hash Join  (cost=235.58..133623.95 rows=19899 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131313.98 rows=500106 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                         ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..3.39 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.31 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..3.37 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(33 rows)

query 22 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12912.46..12912.59 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.82..6242.83 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1987 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Finalize GroupAggregate  (cost=6669.63..6768.61 rows=741 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Gather Merge  (cost=6669.63..6749.46 rows=618 width=72)
               Workers Planned: 2
               Params Evaluated: $1
               ->  Partial GroupAggregate  (cost=5669.61..5678.10 rows=309 width=72)
                     Group Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Sort  (cost=5669.61..5670.38 rows=309 width=38)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Nested Loop Anti Join  (cost=0.43..5656.83 rows=309 width=38)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                       Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                                 ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.96 rows=17 width=4)
                                       Index Cond: (o_custkey = customer.c_custkey)
(22 rows)

