query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=4245031.06..4245031.06 rows=1 width=236)
   ->  Sort  (cost=4245031.06..4245031.07 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=4245030.86..4245031.03 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874941.10 rows=59252244 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1092813.09..1092813.09 rows=1 width=192)
   ->  Sort  (cost=1092813.09..1092813.09 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=558116.95..1092813.08 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89212.57 rows=8175 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=558115.95..566117.50 rows=1600310 width=172)
                     ->  Sort  (cost=558115.95..562116.72 rows=1600310 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.51..305294.89 rows=1600310 width=172)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255237.48 rows=8001548 width=14)
                                 ->  Hash  (cost=3798.51..3798.51 rows=20000 width=166)
                                       ->  Hash Join  (cost=2.51..3798.51 rows=20000 width=166)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(40 rows)

query 3 run 1
SET
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3443383.06..3443383.08 rows=10 width=44)
   ->  Sort  (cost=3443383.06..3451326.16 rows=3177239 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3279406.90..3374724.07 rows=3177239 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=3279406.90..3287349.99 rows=3177239 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=540146.47..2894387.29 rows=3177239 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1874941.10 rows=32583287 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=514722.22..514722.22 rows=1462580 width=12)
                                 ->  Hash Join  (cost=144194.04..514722.22 rows=1462580 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=85699.96..437265.59 rows=7223810 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..83894.01 rows=7223810 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54697.69..54697.69 rows=303711 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54697.69 rows=303711 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 4 run 1
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2040553.76..2040553.76 rows=1 width=24)
   ->  Sort  (cost=2040553.76..2040553.77 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=2040553.68..2040553.73 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=7935.57..2037792.27 rows=552282 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=7935.00..277488.96 rows=552397 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7796.91 rows=552397 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2072483.28..2072483.28 rows=1 width=58)
   ->  Sort  (cost=2072483.28..2072483.34 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2071584.27..2072483.15 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=2071584.27..2071763.98 rows=71886 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=100518.95..2065785.43 rows=71886 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=95797.95..2051571.76 rows=1808126 width=50)
                                 ->  Hash Join  (cost=95797.38..403973.42 rows=452126 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=32471.87..327649.29 rows=2260628 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..31906.72 rows=2260628 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59575.38..59575.38 rows=300011 width=38)
                                             ->  Hash Join  (cost=2.51..59575.38 rows=300011 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.55 rows=1500055 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1078278.15..1078278.16 rows=1 width=32)
   ->  Aggregate  (cost=1078278.15..1078278.16 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=212400.81..1072459.93 rows=1163644 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..212109.90 rows=1163644 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2380752.13..2380752.25 rows=1 width=92)
   ->  GroupAggregate  (cost=2380752.13..2381979.21 rows=10032 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=2380752.13..2380902.34 rows=60087 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=854361.78..2375982.79 rows=60087 width=72)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=294600.91..1774611.90 rows=1443850 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=290971.51..1688458.10 rows=18156239 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..286432.46 rows=18156239 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536558.77..536558.77 rows=1199927 width=30)
                           ->  Hash Join  (cost=57054.17..536558.77 rows=1199927 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411258.82 rows=14999082 width=8)
                                 ->  Hash  (cost=55554.12..55554.12 rows=120004 width=30)
                                       ->  Hash Join  (cost=1.40..55554.12 rows=120004 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.55 rows=1500055 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(32 rows)

query 8 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1263420.66..1263420.91 rows=1 width=40)
   ->  GroupAggregate  (cost=1263420.66..1264018.38 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=1263420.66..1263481.06 rows=24159 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Nested Loop  (cost=504066.53..1261661.85 rows=24159 width=46)
                     Join Filter: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=504066.53..1252814.51 rows=24159 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=499595.53..1248279.71 rows=24303 width=20)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.56..738693.16 rows=399881 width=20)
                                       ->  Seq Scan on part  (cost=0.00..65981.09 rows=13333 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..50.13 rows=32 width=24)
                                             Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=484639.08..484639.08 rows=911591 width=8)
                                       ->  Hash Join  (cost=128793.50..484639.08 rows=911591 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=65467.98..395105.32 rows=4557956 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..64328.49 rows=4557956 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59575.38..59575.38 rows=300011 width=4)
                                                   ->  Hash Join  (cost=2.51..59575.38 rows=300011 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50947.55 rows=1500055 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(38 rows)

query 9 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1497223.37..1497223.41 rows=1 width=66)
   ->  GroupAggregate  (cost=1497223.37..1497227.23 rows=103 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=1497223.37..1497223.63 rows=103 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Nested Loop  (cost=66992.48..1497219.93 rows=103 width=57)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=66992.48..1497180.86 rows=103 width=31)
                           ->  Nested Loop  (cost=66992.04..1496828.33 rows=103 width=31)
                                 ->  Nested Loop  (cost=66991.75..1496490.68 rows=103 width=35)
                                       ->  Hash Join  (cost=66991.19..343232.78 rows=323293 width=18)
                                             Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                             ->  Seq Scan on partsupp  (cost=0.00..255237.48 rows=8001548 width=14)
                                             ->  Hash  (cost=65981.09..65981.09 rows=80808 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..65981.09 rows=80808 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..3.56 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.28 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 10 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2460251.85..2460251.90 rows=20 width=202)
   ->  Sort  (cost=2460251.85..2461678.06 rows=570484 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2429383.16..2445071.47 rows=570484 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Sort  (cost=2429383.16..2430809.37 rows=570484 width=182)
                     Sort Key: customer.c_custkey, nation.n_name
                     ->  Hash Join  (cost=387387.38..2342248.43 rows=570484 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=387385.82..2340495.49 rows=570484 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=285459.58..2199271.73 rows=570484 width=16)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..1874941.10 rows=14808013 width=16)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=278236.52..278236.52 rows=577845 width=8)
                                             ->  Bitmap Heap Scan on orders  (cost=8300.85..278236.52 rows=577845 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8156.39 rows=577845 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Hash  (cost=50947.55..50947.55 rows=1500055 width=148)
                                       ->  Seq Scan on customer  (cost=0.00..50947.55 rows=1500055 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 11 run 1
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=626004.14..626004.15 rows=1 width=36)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=293167.83..293167.84 rows=1 width=32)
           ->  Hash Join  (cost=2323.46..290767.36 rows=320062 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255237.48 rows=8001548 width=14)
                 ->  Hash  (cost=2273.46..2273.46 rows=4000 width=4)
                       ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=49.29..2232.15 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=332836.30..333636.46 rows=320062 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=320033.82..331235.99 rows=320062 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $1)
               ->  Sort  (cost=320033.82..320833.98 rows=320062 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Hash Join  (cost=2323.46..290767.36 rows=320062 width=14)
                           Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..255237.48 rows=8001548 width=18)
                           ->  Hash  (cost=2273.46..2273.46 rows=4000 width=4)
                                 ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                             Recheck Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                   Index Cond: (s_nationkey = nation.n_nationkey)
(32 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3117508.96..3118341.71 rows=1 width=27)
   ->  GroupAggregate  (cost=3117508.96..3123338.19 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=3117508.96..3118237.61 rows=291458 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Merge Join  (cost=2501242.80..3091054.88 rows=291458 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..547951.67 rows=14999082 width=20)
                     ->  Sort  (cost=2501233.66..2501962.31 rows=291458 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..2474779.58 rows=291458 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(12 rows)

query 13 run 1
SET
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2687696.32..2687696.32 rows=1 width=16)
   ->  Sort  (cost=2687696.32..2687696.82 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=2687693.32..2687695.32 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=2539970.36..2665192.50 rows=1500055 width=12)
                     Group Key: customer.c_custkey
                     ->  Sort  (cost=2539970.36..2576710.89 rows=14696212 width=8)
                           Sort Key: customer.c_custkey
                           ->  Hash Right Join  (cost=53285.94..661296.13 rows=14696212 width=8)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..448756.53 rows=14696212 width=8)
                                       Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                                 ->  Hash  (cost=28675.25..28675.25 rows=1500055 width=4)
                                       ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28675.25 rows=1500055 width=4)
(15 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=828664.85..828664.86 rows=1 width=32)
   ->  Aggregate  (cost=828664.85..828664.86 rows=1 width=32)
         ->  Hash Join  (cost=112338.80..814813.24 rows=791520 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=12685.65..691680.34 rows=791520 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12487.77 rows=791520 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60981.07..60981.07 rows=2000007 width=25)
                     ->  Seq Scan on part  (cost=0.00..60981.07 rows=2000007 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2684188.64..2684189.18 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1221466.89..1221466.90 rows=1 width=32)
           ->  HashAggregate  (cost=1218951.92..1220209.40 rows=100599 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=36645.19..1196086.43 rows=2286549 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36073.56 rows=2286549 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1462721.74..1516610.68 rows=100599 width=103)
         Merge Cond: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=71)
         ->  GroupAggregate  (cost=1462721.45..1509961.41 rows=100599 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Sort  (cost=1462721.45..1468437.82 rows=2286549 width=16)
                     Sort Key: lineitem.l_suppkey
                     ->  Bitmap Heap Scan on lineitem  (cost=36645.19..1196086.43 rows=2286549 width=16)
                           Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36073.56 rows=2286549 width=0)
                                 Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(21 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=358828.39..358828.39 rows=1 width=44)
   ->  Sort  (cost=358828.39..359212.90 rows=153804 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=349088.24..358059.37 rows=153804 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=349088.24..350574.86 rows=594647 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98168.47..281603.11 rows=594647 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176404.05 rows=4000774 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90981.18..90981.18 rows=297267 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90981.18 rows=297267 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10827423.29..10827423.30 rows=1 width=32)
   ->  Aggregate  (cost=10827423.29..10827423.30 rows=1 width=32)
         ->  Merge Join  (cost=10133319.51..10827375.67 rows=19046 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  GroupAggregate  (cost=10133318.52..10611352.80 rows=1877028 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=10133318.52..10283278.14 rows=59983848 width=9)
                           Sort Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..1724981.48 rows=59983848 width=9)
               ->  Materialize  (cost=0.99..191693.58 rows=60883 width=21)
                     ->  Nested Loop  (cost=0.99..191541.37 rows=60883 width=21)
                           ->  Index Scan using part_pkey on part  (cost=0.43..89212.57 rows=2030 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..50.09 rows=32 width=17)
                                 Index Cond: (l_partkey = part.p_partkey)
(16 rows)

query 18 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=21566197.59..21566197.84 rows=100 width=71)
   ->  Sort  (cost=21566197.59..21716126.02 rows=59971371 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=17924779.06..19274134.91 rows=59971371 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=17924779.06..18074707.49 rows=59971371 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=78545.11..7805227.93 rows=59971371 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=56.87..6740602.39 rows=59971371 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Join  (cost=1.00..3681849.06 rows=14995962 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..547951.67 rows=14999082 width=20)
                                       ->  GroupAggregate  (cost=0.56..2758990.55 rows=14995962 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271621.78 rows=59983848 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2271621.78 rows=59983848 width=9)
                           ->  Hash  (cost=50947.55..50947.55 rows=1500055 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..50947.55 rows=1500055 width=23)
(21 rows)

query 19 run 1
SET
SET
SET

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=375409.60..375409.61 rows=1 width=32)
   ->  Aggregate  (cost=375409.60..375409.61 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..375401.06 rows=1138 width=12)
               ->  Seq Scan on part  (cost=0.00..125981.30 rows=4784 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..52.13 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2990402.08..2990402.09 rows=1 width=51)
   ->  Sort  (cost=2990402.08..2990402.09 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2579947.74..2990402.07 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2579947.74..2985749.77 rows=3 width=8)
                     ->  Merge Join  (cost=2579947.74..2985749.75 rows=3 width=8)
                           Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                           Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity)))))
                           ->  GroupAggregate  (cost=2579946.88..2745236.28 rows=4869138 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=2579946.88..2603009.96 rows=9225233 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=147843.70..1411365.20 rows=9225233 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..145537.40 rows=9225233 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Materialize  (cost=0.86..160339.46 rows=80823 width=16)
                                 ->  Nested Loop  (cost=0.86..160137.40 rows=80823 width=16)
                                       ->  Index Scan using part_pkey on part  (cost=0.43..84212.55 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.58 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(28 rows)

query 21 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3991645.84..3991645.85 rows=1 width=34)
   ->  Sort  (cost=3991645.84..3991645.85 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=3991645.81..3991645.83 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=3991645.81..3991645.82 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=570774.54..3991645.80 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=570773.97..3991642.15 rows=1 width=34)
                                 Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                 ->  Hash Join  (cost=570773.41..2571654.47 rows=386699 width=38)
                                       Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                       ->  Hash Join  (cost=2323.46..1960194.59 rows=795022 width=34)
                                             Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                             ->  Seq Scan on lineitem l1  (cost=0.00..1874941.10 rows=19994616 width=8)
                                                   Filter: (l_receiptdate > l_commitdate)
                                             ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                                   ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                               Filter: (n_name = 'PERU'::bpchar)
                                                         ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                               Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                                     Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Hash  (cost=448756.53..448756.53 rows=7295554 width=4)
                                             ->  Seq Scan on orders  (cost=0.00..448756.53 rows=7295554 width=4)
                                                   Filter: (o_orderstatus = 'F'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.62 rows=4 width=8)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.64 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(32 rows)

query 22 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161737.29..161737.32 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75442.83..75442.84 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75323.44 rows=47754 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86294.45..86498.06 rows=7404 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=86294.45..86312.96 rows=7404 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..85818.59 rows=7404 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75323.44 rows=17501 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.16 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

