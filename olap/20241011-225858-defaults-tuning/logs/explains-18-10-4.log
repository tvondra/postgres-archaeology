query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832015.36..1832015.99 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832015.36..1832019.18 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832015.36..1832018.23 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831015.30..1831015.32 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831015.09..1831015.22 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312590.54 rows=14812130 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1043666.42..1043666.43 rows=1 width=192)
   ->  Sort  (cost=1043666.42..1043666.43 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=559123.80..1043666.41 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68621.41 rows=7636 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66711.83 rows=1909 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=558123.16..566124.90 rows=1600348 width=172)
                     ->  Sort  (cost=558123.16..562124.03 rows=1600348 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.51..305297.91 rows=1600348 width=172)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255239.40 rows=8001740 width=14)
                                 ->  Hash  (cost=3798.51..3798.51 rows=20000 width=166)
                                       ->  Hash Join  (cost=2.51..3798.51 rows=20000 width=166)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(42 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2275929.12..2275929.15 rows=10 width=44)
   ->  Sort  (cost=2275929.12..2283736.14 rows=3122806 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1748661.19..2208446.41 rows=3122806 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1748661.19..2122569.24 rows=3122806 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1747661.13..1749612.88 rows=780702 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41566.78..1660958.46 rows=780702 width=24)
                                 ->  Parallel Hash Join  (cost=41566.22..354469.64 rows=359656 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308152.84 rows=1809742 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.63..40634.63 rows=74527 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.63 rows=74527 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=281739.20..634292.05 rows=1 width=24)
   ->  GroupAggregate  (cost=281739.20..2044503.44 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=281739.20..2041842.11 rows=532255 width=16)
               ->  Gather Merge  (cost=281738.64..345499.25 rows=532516 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=280738.58..281071.40 rows=133129 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6142.72..269407.66 rows=133129 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6009.60 rows=532516 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=767021.89..767021.89 rows=1 width=58)
   ->  Sort  (cost=767021.89..767021.95 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=766779.66..767021.77 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=766779.66..767020.70 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=765779.60..766008.74 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=765779.60..765825.36 rows=18306 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=72884.23..764483.53 rows=18306 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69192.63..758389.62 rows=457584 width=50)
                                             ->  Parallel Hash Join  (cost=69192.07..341476.09 rows=114452 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=26398.63..296250.54 rows=572261 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25826.37 rows=2289043 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.92..41855.92 rows=75002 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.92 rows=75002 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.10 rows=375010 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1288173.10..1288173.11 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1288173.10..1288173.11 rows=1 width=32)
         ->  Gather  (cost=1288172.66..1288173.07 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1287172.66..1287172.67 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=212194.69..1285674.87 rows=299558 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..211895.13 rows=1198233 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1419812.53..1420869.49 rows=1 width=116)
   ->  GroupAggregate  (cost=1419812.53..12027529.96 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1419812.53..12026465.26 rows=60944 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1419812.10..6811367.61 rows=1523602 width=76)
                     ->  Gather Merge  (cost=1419811.67..1602239.60 rows=1523602 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1418811.61..1419763.86 rows=380900 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372622.98 rows=380900 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350080.04 rows=4576371 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Scan using customer_pkey on customer  (cost=0.43..3.41 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 8 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=386415.93..392105.07 rows=1 width=64)
   ->  GroupAggregate  (cost=386415.93..14074489.56 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=386415.93..14073956.08 rows=24268 width=70)
               Join Filter: (supplier.s_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=386415.93..14065129.71 rows=24268 width=20)
                     ->  Nested Loop  (cost=386415.63..13985739.94 rows=24268 width=20)
                           ->  Nested Loop  (cost=386415.20..3812839.23 rows=3640195 width=24)
                                 ->  Gather Merge  (cost=386414.63..495432.42 rows=910495 width=8)
                                       Workers Planned: 4
                                       ->  Sort  (cost=385414.57..385983.63 rows=227624 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Parallel Hash Join  (cost=42793.44..365160.25 rows=227624 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..317529.81 rows=1138118 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=41855.92..41855.92 rows=75002 width=4)
                                                         ->  Hash Join  (cost=2.51..41855.92 rows=75002 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.10 rows=375010 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Memoize  (cost=0.44..3.42 rows=1 width=4)
                                 Cache Key: lineitem.l_partkey
                                 Cache Mode: logical
                                 ->  Index Scan using part_pkey on part  (cost=0.43..3.41 rows=1 width=4)
                                       Index Cond: (p_partkey = lineitem.l_partkey)
                                       Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.27 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 9 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=53692.82..58563.65 rows=1 width=90)
   ->  GroupAggregate  (cost=53692.82..1110664.00 rows=217 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=53692.82..1110656.94 rows=217 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=9652.78..1110650.35 rows=217 width=81)
                     Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                     ->  Gather Merge  (cost=8651.47..20048.53 rows=100000 width=30)
                           Workers Planned: 1
                           ->  Sort  (cost=7651.46..7798.52 rows=58824 width=30)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=1.56..2991.39 rows=58824 width=30)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                     ->  Materialize  (cost=1001.31..762101.82 rows=219 width=35)
                           ->  Gather  (cost=1001.31..762100.73 rows=219 width=35)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=1.31..761078.83 rows=55 width=35)
                                       ->  Nested Loop  (cost=0.87..760890.58 rows=55 width=35)
                                             ->  Nested Loop  (cost=0.43..204688.44 rows=161652 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47230.79 rows=40403 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.72 rows=18 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..3.43 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(31 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=936592.97..936593.02 rows=20 width=201)
   ->  Sort  (cost=936592.97..937986.46 rows=557395 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=841086.53..921760.89 rows=557395 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=841086.53..907826.02 rows=557395 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=840086.47..840434.84 rows=139349 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=784894.40..828180.25 rows=139349 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=784892.84..827750.89 rows=139349 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39697.10 rows=375010 width=147)
                                       ->  Parallel Hash  (cost=783150.98..783150.98 rows=139349 width=16)
                                             ->  Nested Loop  (cost=6536.75..783150.98 rows=139349 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6536.19..269929.16 rows=141665 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6394.53 rows=566659 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 11 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=451022.39..451022.39 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=197428.87..197428.88 rows=1 width=32)
           ->  Gather  (cost=197428.65..197428.86 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=196428.65..196428.66 rows=1 width=32)
                       ->  Nested Loop  (cost=0.72..195428.43 rows=133362 width=10)
                             ->  Nested Loop  (cost=0.29..4178.78 rows=1667 width=4)
                                   Join Filter: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3552.46 rows=41667 width=8)
                                   ->  Materialize  (cost=0.00..1.32 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..113.92 rows=81 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=253593.51..253860.23 rows=106690 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=207780.88..253060.06 rows=106690 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=207780.88..245058.31 rows=320070 width=14)
                     Workers Planned: 2
                     ->  Sort  (cost=206780.86..207114.27 rows=133362 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..195428.43 rows=133362 width=14)
                                 ->  Nested Loop  (cost=0.29..4178.78 rows=1667 width=4)
                                       Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Index Scan using supplier_pkey on supplier  (cost=0.29..3552.46 rows=41667 width=8)
                                       ->  Materialize  (cost=0.00..1.32 rows=1 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..113.92 rows=81 width=18)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
(33 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469475.96..1618480.66 rows=1 width=27)
   ->  GroupAggregate  (cost=1469475.96..2512508.86 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469475.96..2507374.85 rows=293368 width=27)
               ->  Gather Merge  (cost=1469475.52..1504601.83 rows=293368 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468475.46..1468658.82 rows=73342 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462548.57 rows=73342 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1361832.91..1361832.91 rows=1 width=16)
   ->  Sort  (cost=1361832.91..1361833.41 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1361829.91..1361831.91 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1208300.74..1339329.30 rows=1500041 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=53285.56..662968.48 rows=14851602 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448807.36 rows=14851602 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=28675.04..28675.04 rows=1500041 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28675.04 rows=1500041 width=4)
(14 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=870006.32..870006.34 rows=1 width=32)
   ->  Finalize Aggregate  (cost=870006.32..870006.34 rows=1 width=32)
         ->  Gather  (cost=870005.87..870006.28 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=869005.87..869005.88 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65109.20..865491.99 rows=200793 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=12878.58..812734.29 rows=200793 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12677.79 rows=803172 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.83..45980.83 rows=499983 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.83 rows=499983 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2740647.61..2740754.91 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1388600.92..1388600.93 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1386144.82..1387372.87 rows=98244 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1342671.85..1383197.50 rows=392976 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1341671.85..1342899.90 rows=98244 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=36350.90..1336004.21 rows=566764 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35784.14 rows=2267057 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352046.68..1404731.83 rows=491 width=103)
         ->  Finalize GroupAggregate  (cost=1352046.39..1403520.21 rows=491 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1352046.39..1399099.23 rows=392976 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351046.33..1351291.94 rows=98244 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1341671.85..1342899.90 rows=98244 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=36350.90..1336004.21 rows=566764 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35784.14 rows=2267057 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.46 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=253332.69..253332.69 rows=1 width=44)
   ->  Sort  (cost=253332.69..253719.99 rows=154920 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172465.21..252558.09 rows=154920 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172465.21..244954.71 rows=605418 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171465.15..171843.53 rows=151354 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57897.76..158442.98 rows=151354 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101391.10 rows=1000218 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.57..53480.57 rows=75658 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.57 rows=75658 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3301445.08..3301445.10 rows=1 width=32)
   ->  Aggregate  (cost=3301445.08..3301445.10 rows=1 width=32)
         ->  Merge Join  (cost=2257831.33..3301400.50 rows=17832 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2256830.40..3194602.36 rows=1789851 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2256830.40..3114059.06 rows=7159404 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2255830.34..2260304.97 rows=1789851 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869661.19..2038477.71 rows=1789851 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 16
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275101.03 rows=14995803 width=9)
               ->  Materialize  (cost=1000.93..101505.38 rows=59775 width=21)
                     ->  Gather Merge  (cost=1000.93..101355.94 rows=59775 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..93236.10 rows=14944 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66711.83 rows=498 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.92 rows=34 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 18 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8578825.58..8578825.83 rows=100 width=71)
   ->  Sort  (cost=8578825.58..8628787.12 rows=19984614 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=829639.05..7815028.00 rows=19984614 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=829639.05..7415335.72 rows=19984614 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=829638.65..6690379.37 rows=19984614 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=829503.79..4160913.08 rows=4998601 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=828503.74..3564531.46 rows=1249650 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=828503.17..837880.14 rows=3750787 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.73..353006.45 rows=3750787 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298775.87 rows=3750787 width=20)
                                                   ->  Parallel Hash  (cost=39697.10..39697.10 rows=375010 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.10 rows=375010 width=23)
                                       ->  GroupAggregate  (cost=0.56..2692281.35 rows=4998601 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167428.25 rows=59983212 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167428.25 rows=59983212 width=9)
(26 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=130888.16..130888.17 rows=1 width=32)
   ->  Finalize Aggregate  (cost=130888.16..130888.17 rows=1 width=32)
         ->  Gather  (cost=130887.73..130888.14 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=129887.73..129887.74 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..129885.57 rows=288 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.28 rows=1228 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..55.08 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2462578.31..2662317.77 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2462578.31..2662317.77 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2458455.38..2657558.96 rows=3 width=8)
               ->  Hash Join  (cost=2458455.38..2657558.95 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2381989.16..2544635.60 rows=4860933 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Bitmap Heap Scan on lineitem  (cost=147330.24..1994703.95 rows=9188602 width=13)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..145033.09 rows=9188602 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=75253.86..75253.86 rows=80824 width=16)
                           ->  Gather  (cost=1000.43..75253.86 rows=80824 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.43..66171.46 rows=20206 width=16)
                                       ->  Parallel Seq Scan on part  (cost=0.00..47230.79 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.57 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(32 rows)

query 21 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1967305.43..1967305.44 rows=1 width=34)
   ->  Sort  (cost=1967305.43..1967305.44 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1967302.21..1967305.42 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Nested Loop Semi Join  (cost=1967302.21..1967305.41 rows=1 width=26)
                     Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                     ->  Gather Merge  (cost=1967301.64..1967301.77 rows=1 width=38)
                           Workers Planned: 4
                           ->  Sort  (cost=1966301.58..1966301.59 rows=1 width=38)
                                 Sort Key: supplier.s_name
                                 ->  Nested Loop Anti Join  (cost=1338031.89..1966301.57 rows=1 width=38)
                                       ->  Parallel Hash Join  (cost=1338031.32..1653285.73 rows=97486 width=38)
                                             Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308152.84 rows=1828759 width=4)
                                                   Filter: (o_orderstatus = 'F'::bpchar)
                                             ->  Parallel Hash  (cost=1335532.02..1335532.02 rows=199944 width=34)
                                                   ->  Parallel Hash Join  (cost=3020.56..1335532.02 rows=199944 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312590.54 rows=4998601 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.64 rows=1 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.62 rows=4 width=8)
                           Index Cond: (l_orderkey = orders.o_orderkey)
(33 rows)

query 22 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93877.34..93879.11 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.24..46821.25 rows=1 width=32)
           ->  Gather  (cost=46820.81..46821.22 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.81..45820.82 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.02 rows=11914 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.09..59859.09 rows=7250 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.09..59677.84 rows=7250 width=38)
               ->  Gather Merge  (cost=47055.66..49151.01 rows=17500 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46055.60..46066.54 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.02 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.16 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

