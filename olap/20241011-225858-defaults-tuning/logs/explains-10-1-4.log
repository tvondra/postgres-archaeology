query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191549.38..191549.59 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191549.38..191550.63 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=191549.38..191549.44 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=191546.27..191548.83 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=190546.27..190546.43 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131312.11 rows=1480854 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=66413.58..66413.58 rows=1 width=192)
   ->  Sort  (cost=66413.58..66413.58 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=44351.04..66413.57 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=836 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Sort  (cost=44350.62..44750.10 rows=159792 width=172)
                     Sort Key: partsupp.ps_partkey
                     ->  Hash Join  (cost=408.01..30539.93 rows=159792 width=172)
                           Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..25534.00 rows=800000 width=14)
                           ->  Hash  (cost=383.01..383.01 rows=2000 width=166)
                                 ->  Hash Join  (cost=2.51..383.01 rows=2000 width=166)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=144)
                                       ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                             ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                   Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(38 rows)

query 3 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=249748.66..249748.68 rows=10 width=44)
   ->  Sort  (cost=249748.66..250530.58 rows=312770 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=196704.70..242989.81 rows=312770 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=196704.70..235296.66 rows=302682 width=44)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=195704.66..198731.48 rows=100894 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=195704.66..195956.90 rows=100894 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=5846.74..187319.12 rows=100894 width=24)
                                       ->  Hash Join  (cost=5846.31..38632.08 rows=46114 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..32179.39 rows=230992 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Hash  (cost=5472.00..5472.00 rows=29945 width=4)
                                                   ->  Seq Scan on customer  (cost=0.00..5472.00 rows=29945 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.20 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(22 rows)

query 4 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=78556.36..78556.39 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=78556.36..78556.52 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=78556.36..78556.39 rows=15 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=78554.51..78556.06 rows=15 width=24)
                     Workers Planned: 3
                     ->  Partial HashAggregate  (cost=77554.51..77554.56 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=793.89..77465.60 rows=17782 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=793.46..27191.19 rows=17782 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..779.68 rows=55125 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.22 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=86013.08..86013.08 rows=1 width=58)
   ->  Sort  (cost=86013.08..86013.14 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=85974.14..86012.95 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=85974.14..86012.08 rows=75 width=58)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=84974.10..85003.23 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=84974.10..84979.86 rows=2305 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=10034.75..84845.36 rows=2305 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=9561.75..84068.36 rows=57904 width=50)
                                             ->  Hash Join  (cost=9561.32..37194.21 rows=14476 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=3224.31..30441.02 rows=72380 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..3168.22 rows=224379 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Hash  (cost=5962.01..5962.01 rows=30000 width=38)
                                                         ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.20 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=107168.13..107168.14 rows=1 width=32)
   ->  Finalize Aggregate  (cost=107168.13..107168.14 rows=1 width=32)
         ->  Gather  (cost=107167.69..107168.10 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=106167.69..106167.70 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=21248.10..106019.92 rows=29554 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21218.55 rows=118214 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=165409.81..165409.96 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=165409.81..166338.10 rows=6004 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=165409.81..166160.40 rows=5811 width=92)
               Workers Planned: 3
               ->  Partial GroupAggregate  (cost=164409.77..164477.56 rows=1937 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=164409.77..164414.61 rows=1937 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Hash Join  (cost=6074.43..164304.01 rows=1937 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=5709.33..163679.33 rows=46783 width=46)
                                       ->  Hash Join  (cost=5708.90..38880.23 rows=38710 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=8)
                                             ->  Hash  (cost=5558.90..5558.90 rows=12000 width=30)
                                                   ->  Hash Join  (cost=1.40..5558.90 rows=12000 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.21 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=355.10..355.10 rows=800 width=30)
                                       ->  Hash Join  (cost=1.40..355.10 rows=800 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 8 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=81572.83..81572.98 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=81572.83..81929.50 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=81572.83..81850.01 rows=2028 width=72)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=80572.81..80615.91 rows=1014 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=80572.81..80575.35 rows=1014 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=50196.37..80522.18 rows=1014 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Hash Join  (cost=50194.81..80512.43 rows=1014 width=20)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Hash Join  (cost=49746.81..80061.76 rows=1019 width=20)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Nested Loop  (cost=0.43..30242.79 rows=16639 width=20)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=555 width=4)
                                                         Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..44.92 rows=31 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                             ->  Hash  (cost=48598.14..48598.14 rows=91859 width=8)
                                                   ->  Hash Join  (cost=12936.73..48598.14 rows=91859 width=8)
                                                         Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                         ->  Bitmap Heap Scan on orders  (cost=6599.72..39620.18 rows=459297 width=12)
                                                               Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                               ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6484.90 rows=459297 width=0)
                                                                     Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Hash  (cost=5962.01..5962.01 rows=30000 width=4)
                                                               ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=4)
                                                                     Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                                     ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                                     ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                                           ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                                 Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                                 ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                                 ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(42 rows)

query 9 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=73753.57..73753.71 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=73753.57..73770.10 rows=121 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=73753.57..73766.99 rows=100 width=66)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=72753.55..72755.42 rows=50 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=72753.55..72753.67 rows=50 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3.13..72752.14 rows=50 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=1.57..72750.17 rows=50 width=31)
                                       ->  Nested Loop  (cost=1.14..72592.85 rows=50 width=31)
                                             ->  Nested Loop  (cost=0.86..72445.46 rows=50 width=35)
                                                   ->  Nested Loop  (cost=0.42..18811.91 rows=16835 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=4209 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..3.21 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..3.18 rows=1 width=29)
                                                         Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                             ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.95 rows=1 width=8)
                                                   Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..3.15 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 10 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=102898.83..102898.88 rows=20 width=202)
   ->  Sort  (cost=102898.83..103038.52 rows=55877 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=100713.50..101411.96 rows=55877 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=8789.76..100015.04 rows=55877 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=7789.76..93427.34 rows=18025 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=7788.20..93370.44 rows=18025 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=816.20..86351.12 rows=18025 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=815.77..27221.20 rows=18295 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..801.59 rows=56716 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.22 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                       ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22743.04..22743.04 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=10892.14..10892.16 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..10652.46 rows=31958 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..25.25 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=11850.88..11930.78 rows=31958 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=11211.72..11691.09 rows=31958 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..10652.46 rows=31958 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..25.25 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=170022.82..170043.78 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=170022.82..170169.51 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=170022.82..170169.23 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=169022.77..169165.84 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=169022.77..169040.64 rows=7150 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..168565.03 rows=7150 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..146313.80 rows=7151 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.11 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64587.14..64587.14 rows=1 width=16)
   ->  Sort  (cost=64587.14..64587.64 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64584.14..64586.14 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60834.14..62334.14 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53485.54 rows=1469719 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1469719 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=78731.68..78731.69 rows=1 width=32)
   ->  Finalize Aggregate  (cost=78731.68..78731.69 rows=1 width=32)
         ->  Gather  (cost=78731.22..78731.63 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=77731.22..77731.23 rows=1 width=64)
                     ->  Hash Join  (cost=9881.06..77381.37 rows=19991 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1282.06..68729.90 rows=19991 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1262.07 rows=79964 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                                 ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=247123.56..247123.62 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122355.24..122355.24 rows=1 width=32)
           ->  HashAggregate  (cost=122103.93..122229.58 rows=10052 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3728.68..119777.83 rows=232610 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3670.53 rows=232610 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=124768.31..125362.59 rows=10052 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=124768.03..124793.16 rows=10052 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=123848.51..124099.81 rows=10052 width=36)
                     ->  HashAggregate  (cost=123848.51..123999.29 rows=10052 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3728.68..119777.83 rows=232610 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3670.53 rows=232610 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=32606.40..32606.40 rows=1 width=44)
   ->  Sort  (cost=32606.40..32646.52 rows=16048 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=31617.21..32526.16 rows=16048 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=31617.21..31766.90 rows=59878 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=10821.66..26865.97 rows=59878 width=40)
                           Workers Planned: 4
                           ->  Hash Join  (cost=9821.66..19878.17 rows=14970 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Hash  (cost=9099.00..9099.00 rows=29939 width=40)
                                       ->  Seq Scan on part  (cost=0.00..9099.00 rows=29939 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=429110.89..429110.90 rows=1 width=32)
   ->  Aggregate  (cost=429110.89..429110.90 rows=1 width=32)
         ->  Merge Join  (cost=299938.66..429105.81 rows=2031 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=298937.78..413454.91 rows=193404 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=298937.78..404751.73 rows=773616 width=36)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=297937.73..311606.54 rows=193404 width=36)
                                 Group Key: lineitem_1.l_partkey
                                 ->  Sort  (cost=297937.73..301688.15 rows=1500169 width=9)
                                       Sort Key: lineitem_1.l_partkey
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..127561.69 rows=1500169 width=9)
               ->  Materialize  (cost=1000.88..13141.44 rows=6301 width=21)
                     ->  Gather Merge  (cost=1000.88..13125.68 rows=6301 width=21)
                           Workers Planned: 2
                           ->  Nested Loop  (cost=0.85..11398.37 rows=2625 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.42..7176.42 rows=88 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..47.67 rows=31 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(22 rows)

query 18 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1855646.22..1855646.47 rows=100 width=71)
   ->  Sort  (cost=1855646.22..1870647.91 rows=6000675 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1491289.55..1626304.74 rows=6000675 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=1491289.55..1506291.24 rows=6000675 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=6979.19..697045.50 rows=6000675 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=7.19..674321.29 rows=6000675 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Join  (cost=0.86..368321.77 rows=1500169 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..54805.93 rows=1500000 width=20)
                                       ->  GroupAggregate  (cost=0.43..276012.04 rows=1500169 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227256.56 rows=6000675 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..227256.56 rows=6000675 width=9)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(21 rows)

query 19 run 1
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

 Limit  (cost=18349.51..18349.52 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18349.51..18349.52 rows=1 width=32)
         ->  Gather  (cost=18349.29..18349.50 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17349.29..17349.30 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17348.91 rows=50 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=202 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..48.05 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=277100.33..277100.33 rows=1 width=51)
   ->  Sort  (cost=277100.33..277100.33 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=243225.57..277100.32 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=243225.57..276645.01 rows=1 width=8)
                     ->  Merge Join  (cost=243225.57..276645.00 rows=1 width=8)
                           Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                           Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity)))))
                           ->  GroupAggregate  (cost=242224.70..258710.63 rows=486275 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=242224.70..244522.65 rows=919180 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=14732.03..141079.73 rows=919180 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14502.23 rows=919180 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Materialize  (cost=1000.87..11430.98 rows=8080 width=16)
                                 ->  Gather Merge  (cost=1000.87..11410.78 rows=8080 width=16)
                                       Workers Planned: 2
                                       ->  Nested Loop  (cost=0.84..9478.12 rows=3367 width=16)
                                             ->  Parallel Index Scan using part_pkey on part  (cost=0.42..6968.09 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..2.94 rows=4 width=12)
                                                   Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=202750.53..202750.53 rows=1 width=34)
   ->  Sort  (cost=202750.53..202750.53 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=202750.50..202750.52 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=202750.50..202750.50 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=1236.87..202750.49 rows=1 width=26)
                           ->  Nested Loop  (cost=1236.44..202747.08 rows=1 width=34)
                                 ->  Gather  (cost=1236.01..202743.77 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=236.01..201743.67 rows=1 width=38)
                                             ->  Hash Join  (cost=235.58..133621.88 rows=19899 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131312.11 rows=500056 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                         ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..3.38 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.31 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..3.39 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 22 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14816.98..14817.01 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.82..6242.83 rows=1 width=32)
           ->  Gather  (cost=6242.60..6242.81 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.60..5242.61 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1988 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8574.15..8594.78 rows=750 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8574.15..8576.03 rows=750 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8538.34 rows=750 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.98 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

