query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=425102.53..425102.54 rows=1 width=236)
   ->  Sort  (cost=425102.53..425102.55 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=425102.34..425102.50 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187578.34 rows=5938100 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=62661.39..62661.40 rows=1 width=192)
   ->  Sort  (cost=62661.39..62661.40 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=0.42..62661.38 rows=1 width=192)
               Join Filter: (nation.n_regionkey = region.r_regionkey)
               ->  Nested Loop  (cost=0.42..62660.31 rows=1 width=196)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=0.42..62658.75 rows=1 width=170)
                           Join Filter: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Nested Loop  (cost=0.42..62210.75 rows=1 width=34)
                                 ->  Seq Scan on part  (cost=0.00..7099.00 rows=712 width=30)
                                       Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
                                 ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..77.39 rows=1 width=14)
                                       Index Cond: (ps_partkey = part.p_partkey)
                                       Filter: ((SubPlan 1) = ps_supplycost)
                                       SubPlan 1
                                         ->  Aggregate  (cost=18.52..18.53 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..18.52 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..17.41 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..16.74 rows=4 width=10)
                                                                 ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                                                       Index Cond: (part.p_partkey = ps_partkey)
                                                                 ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=144)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                     Filter: (r_name = 'AMERICA'::bpchar)
(33 rows)

query 3 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=304013.78..304013.81 rows=10 width=44)
   ->  Sort  (cost=304013.78..304808.13 rows=317739 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=287615.39..297147.56 rows=317739 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=287615.39..288409.73 rows=317739 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=55642.82..258578.04 rows=317739 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..187578.34 rows=3247866 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=53808.05..53808.05 rows=146781 width=12)
                                 ->  Hash Join  (cost=14444.11..53808.05 rows=146781 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=8591.99..43773.09 rows=724008 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8410.99 rows=724008 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=5472.00..5472.00 rows=30410 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..5472.00 rows=30410 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 4 run 1
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=185332.49..185332.50 rows=1 width=24)
   ->  Sort  (cost=185332.49..185332.51 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=185332.42..185332.47 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=800.63..185054.24 rows=55636 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=800.20..27765.74 rows=55636 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..786.29 rows=55636 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.22 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=190002.63..190002.63 rows=1 width=58)
   ->  Sort  (cost=190002.63..190002.69 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=189911.59..190002.51 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=189911.59..189929.71 rows=7248 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=10075.05..189446.88 rows=7248 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=9602.05..187538.57 rows=181710 width=50)
                                 ->  Hash Join  (cost=9601.61..40445.70 rows=45427 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=3264.58..32802.64 rows=227137 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..3207.80 rows=227137 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=5962.03..5962.03 rows=30000 width=38)
                                             ->  Hash Join  (cost=2.53..5962.03 rows=30000 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.20 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=108602.86..108602.87 rows=1 width=32)
   ->  Aggregate  (cost=108602.86..108602.87 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=21343.03..108012.99 rows=117973 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21313.53 rows=117973 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=234456.49..234456.53 rows=1 width=92)
   ->  GroupAggregate  (cost=234456.49..234668.52 rows=6058 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=234456.49..234471.64 rows=6058 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=85023.25..234075.91 rows=6058 width=72)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=29636.35..177879.82 rows=145600 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=29256.45..169198.42 rows=1825465 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..28800.08 rows=1825465 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=369.90..369.90 rows=800 width=30)
                                 ->  Hash Join  (cost=1.40..369.90 rows=800 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=53886.90..53886.90 rows=120000 width=30)
                           ->  Hash Join  (cost=5930.90..53886.90 rows=120000 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                 ->  Hash  (cost=5780.90..5780.90 rows=12000 width=30)
                                       ->  Hash Join  (cost=1.40..5780.90 rows=12000 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(32 rows)

query 8 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=118023.67..118023.72 rows=1 width=40)
   ->  GroupAggregate  (cost=118023.67..118131.54 rows=2397 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=118023.67..118029.66 rows=2397 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Nested Loop  (cost=49881.11..117889.12 rows=2397 width=46)
                     Join Filter: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=49881.11..116976.94 rows=2397 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=49433.11..116495.94 rows=2405 width=20)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.43..66889.22 rows=40000 width=20)
                                       ->  Seq Scan on part  (cost=0.00..6599.00 rows=1333 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..44.92 rows=31 width=24)
                                             Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=48305.28..48305.28 rows=90192 width=8)
                                       ->  Hash Join  (cost=12816.82..48305.28 rows=90192 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=6479.79..39375.22 rows=450962 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6367.05 rows=450962 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=5962.03..5962.03 rows=30000 width=4)
                                                   ->  Hash Join  (cost=2.53..5962.03 rows=30000 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(38 rows)

query 9 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=71620.91..71620.95 rows=1 width=66)
   ->  GroupAggregate  (cost=71620.91..71622.75 rows=49 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=71620.91..71621.04 rows=49 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Nested Loop  (cost=1.57..71619.54 rows=49 width=57)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=1.57..71599.61 rows=49 width=31)
                           ->  Nested Loop  (cost=1.14..71444.95 rows=49 width=31)
                                 ->  Nested Loop  (cost=0.86..71300.01 rows=49 width=35)
                                       ->  Nested Loop  (cost=0.42..19816.90 rows=16160 width=18)
                                             ->  Seq Scan on part  (cost=0.00..6599.00 rows=4040 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..3.23 rows=4 width=14)
                                                   Index Cond: (ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..3.18 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.95 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..3.15 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=230621.46..230621.51 rows=20 width=202)
   ->  Sort  (cost=230621.46..230769.08 rows=59049 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=228312.08..229050.19 rows=59049 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Hash Join  (cost=7825.15..227573.96 rows=59049 width=182)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=7823.59..226760.48 rows=59049 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Nested Loop  (cost=851.59..218976.55 rows=59049 width=16)
                                 ->  Bitmap Heap Scan on orders  (cost=851.15..27869.31 rows=59144 width=8)
                                       Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..836.37 rows=59144 width=0)
                                             Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.22 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(21 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22744.67..22744.67 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=10892.33..10892.34 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..10652.33 rows=32000 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..25.25 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=11852.33..11932.33 rows=32000 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=11212.33..11692.33 rows=32000 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..10652.33 rows=32000 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..25.25 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=310893.94..310977.04 rows=1 width=27)
   ->  GroupAggregate  (cost=310893.94..311475.65 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=310893.94..310966.65 rows=29082 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Merge Join  (cost=249750.14..308737.83 rows=29082 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..54805.93 rows=1500000 width=20)
                     ->  Sort  (cost=249749.69..249822.42 rows=29089 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..247593.01 rows=29089 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(12 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=81502.61..81502.61 rows=1 width=16)
   ->  Sort  (cost=81502.61..81503.11 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=81499.61..81501.61 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=77749.61..79249.61 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..70250.36 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=77509.42..77509.43 rows=1 width=32)
   ->  Aggregate  (cost=77509.42..77509.43 rows=1 width=32)
         ->  Hash Join  (cost=9795.75..76204.47 rows=74568 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1196.75..66580.16 rows=74568 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1178.11 rows=74568 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=246464.08..246464.14 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122053.84..122053.85 rows=1 width=32)
           ->  HashAggregate  (cost=121803.09..121928.47 rows=10030 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3611.42..119550.42 rows=225267 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3555.10 rows=225267 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=124410.23..125004.18 rows=10030 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=124409.94..124435.02 rows=10030 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=123492.60..123743.35 rows=10030 width=36)
                     ->  HashAggregate  (cost=123492.60..123643.05 rows=10030 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3611.42..119550.42 rows=225267 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3555.10 rows=225267 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=34882.79..34882.79 rows=1 width=44)
   ->  Sort  (cost=34882.79..34922.73 rows=15976 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=33902.38..34802.91 rows=15976 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=33902.38..34050.53 rows=59262 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9817.82..29204.43 rows=59262 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17642.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29631 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29631 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=982971.74..982971.75 rows=1 width=32)
   ->  Aggregate  (cost=982971.74..982971.75 rows=1 width=32)
         ->  Merge Join  (cost=914183.45..982966.99 rows=1899 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  GroupAggregate  (cost=914182.59..962099.02 rows=193695 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=914182.59..929186.26 rows=6001467 width=9)
                           Sort Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..172574.67 rows=6001467 width=9)
               ->  Materialize  (cost=0.85..18360.87 rows=5881 width=21)
                     ->  Nested Loop  (cost=0.85..18346.17 rows=5881 width=21)
                           ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=196 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..47.75 rows=31 width=17)
                                 Index Cond: (l_partkey = part.p_partkey)
(16 rows)

query 18 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1258672.45..1258672.70 rows=100 width=71)
   ->  Sort  (cost=1258672.45..1266172.45 rows=3000000 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1076514.60..1144014.60 rows=3000000 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=1076514.60..1084014.60 rows=3000000 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=7005.10..694438.64 rows=3000000 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=33.10..646216.64 rows=3000000 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Semi Join  (cost=0.86..372095.46 rows=750000 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..54805.93 rows=1500000 width=20)
                                       ->  Materialize  (cost=0.43..294784.95 rows=1500367 width=4)
                                             ->  GroupAggregate  (cost=0.43..276030.36 rows=1500367 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227268.44 rows=6001467 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..227268.44 rows=6001467 width=9)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=36274.10..36274.11 rows=1 width=32)
   ->  Aggregate  (cost=36274.10..36274.11 rows=1 width=32)
         ->  Nested Loop  (cost=0.43..36273.24 rows=115 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=493 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..48.01 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=277908.93..277908.93 rows=1 width=51)
   ->  Sort  (cost=277908.93..277909.43 rows=200 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=253825.35..277907.93 rows=200 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=6.38..230.58 rows=400 width=55)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=59)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=253818.97..277485.43 rows=32 width=8)
                     ->  Merge Join  (cost=253818.97..277485.27 rows=32 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=240668.82..257014.86 rows=483941 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=240668.82..242940.55 rows=908692 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=14564.53..140754.91 rows=908692 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14337.35 rows=908692 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=13150.15..13170.52 rows=8150 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=0.42..12620.70 rows=8150 width=16)
                                       ->  Seq Scan on part  (cost=0.00..6599.00 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..2.94 rows=4 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(31 rows)

query 21 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=390617.47..390617.47 rows=1 width=34)
   ->  Sort  (cost=390617.47..390617.47 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=390617.44..390617.46 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=390617.44..390617.44 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=57090.94..390617.43 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=57090.51..390611.06 rows=1 width=34)
                                 Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                 ->  Hash Join  (cost=57090.08..257754.28 rows=38806 width=38)
                                       Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                       ->  Hash Join  (cost=235.58..196113.55 rows=79780 width=34)
                                             Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                             ->  Seq Scan on lineitem l1  (cost=0.00..187578.34 rows=2000489 width=8)
                                                   Filter: (l_receiptdate > l_commitdate)
                                             ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                   ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                               Filter: (n_name = 'PERU'::bpchar)
                                                         ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                               Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                     Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Hash  (cost=44881.00..44881.00 rows=729800 width=4)
                                             ->  Seq Scan on orders  (cost=0.00..44881.00 rows=729800 width=4)
                                                   Filter: (o_orderstatus = 'F'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..3.37 rows=4 width=8)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..3.39 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(32 rows)

query 22 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16123.44..16123.47 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7546.42..7546.43 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4768 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8577.01..8597.27 rows=737 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8577.01..8578.85 rows=737 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8541.91 rows=737 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.96 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

