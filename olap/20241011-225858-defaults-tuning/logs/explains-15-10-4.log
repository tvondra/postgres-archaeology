query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832098.70..1832099.34 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832098.70..1832102.52 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832098.70..1832101.58 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831098.65..1831098.66 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831098.43..1831098.57 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312611.16 rows=14813922 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1073670.68..1073670.69 rows=1 width=192)
   ->  Sort  (cost=1073670.68..1073670.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=554183.37..1073670.67 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68718.40 rows=8445 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.46 rows=2111 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=553182.58..561044.50 rows=1572384 width=172)
                     ->  Sort  (cost=553182.58..557113.54 rows=1572384 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.51..304973.46 rows=1572384 width=172)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255206.81 rows=7998481 width=14)
                                 ->  Hash  (cost=3798.51..3798.51 rows=20000 width=166)
                                       ->  Hash Join  (cost=2.51..3798.51 rows=20000 width=166)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(42 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2270717.37..2270717.39 rows=10 width=44)
   ->  Sort  (cost=2270717.37..2278519.56 rows=3120876 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1743775.30..2203276.36 rows=3120876 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1743775.30..2117452.27 rows=3120876 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1742775.24..1744725.79 rows=780219 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41558.45..1656130.09 rows=780219 width=24)
                                 ->  Parallel Hash Join  (cost=41557.88..354472.69 rows=358326 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308141.77 rows=1818298 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.20..40634.20 rows=73895 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.20 rows=73895 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282738.47..652505.16 rows=1 width=24)
   ->  GroupAggregate  (cost=282738.47..2131571.90 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282738.47..2128779.53 rows=558463 width=16)
               ->  Gather Merge  (cost=282737.91..349614.85 rows=558543 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281737.85..282086.94 rows=139636 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6442.50..269805.04 rows=139636 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6302.87 rows=558543 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=776344.38..776344.39 rows=1 width=58)
   ->  Sort  (cost=776344.38..776344.45 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=776097.71..776344.26 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=776097.71..776343.20 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=775097.65..775331.23 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=775097.65..775144.31 rows=18661 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73420.75..773773.87 rows=18661 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69729.15..767630.25 rows=467052 width=50)
                                             ->  Parallel Hash Join  (cost=69728.59..342236.63 rows=116780 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=26935.77..296962.25 rows=583898 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26351.88 rows=2335594 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.38..41855.38 rows=74995 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.38 rows=74995 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1278864.04..1278864.05 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1278864.04..1278864.05 rows=1 width=32)
         ->  Gather  (cost=1278863.61..1278864.02 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1277863.61..1277863.62 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=209803.42..1276385.58 rows=295606 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..209507.81 rows=1182424 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1420115.95..1421177.77 rows=1 width=116)
   ->  GroupAggregate  (cost=1420115.95..12068004.73 rows=10028 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1420115.95..12066936.68 rows=61175 width=96)
               Join Filter: (n2.n_nationkey = customer.c_nationkey)
               ->  Nested Loop  (cost=1420115.52..6832089.20 rows=1529372 width=76)
                     ->  Gather Merge  (cost=1420115.09..1603233.90 rows=1529372 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1419115.03..1420070.89 rows=382343 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372741.72 rows=382343 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350104.79 rows=4599170 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Scan using customer_pkey on customer  (cost=0.43..3.41 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 8 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=386386.96..393010.95 rows=1 width=64)
   ->  GroupAggregate  (cost=386386.96..16323701.65 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=386386.96..16323169.91 rows=24181 width=70)
               Join Filter: (supplier.s_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=386386.96..16314375.00 rows=24181 width=20)
                     ->  Nested Loop  (cost=386386.67..16235178.24 rows=24209 width=20)
                           ->  Nested Loop  (cost=386386.24..3810883.58 rows=3639409 width=24)
                                 ->  Gather Merge  (cost=386385.68..495342.17 rows=909983 width=8)
                                       Workers Planned: 4
                                       ->  Sort  (cost=385385.62..385954.36 rows=227496 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Parallel Hash Join  (cost=42792.81..365143.61 rows=227496 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..317516.52 rows=1137478 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=41855.38..41855.38 rows=74995 width=4)
                                                         ->  Hash Join  (cost=2.51..41855.38 rows=74995 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using part_pkey on part  (cost=0.43..3.41 rows=1 width=4)
                                 Index Cond: (p_partkey = lineitem.l_partkey)
                                 Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.27 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(36 rows)

query 9 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=37638.61..42845.33 rows=1 width=90)
   ->  GroupAggregate  (cost=37638.61..709305.15 rows=129 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=37638.61..709300.96 rows=129 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=9652.78..709295.83 rows=129 width=81)
                     Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                     ->  Gather Merge  (cost=8651.47..20048.53 rows=100000 width=30)
                           Workers Planned: 1
                           ->  Sort  (cost=7651.46..7798.52 rows=58824 width=30)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=1.56..2991.39 rows=58824 width=30)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                     ->  Materialize  (cost=1001.31..494247.30 rows=130 width=35)
                           ->  Gather  (cost=1001.31..494246.65 rows=130 width=35)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=1.31..493233.65 rows=32 width=35)
                                       ->  Nested Loop  (cost=0.87..493124.13 rows=32 width=35)
                                             ->  Nested Loop  (cost=0.43..145644.01 rows=100990 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47231.01 rows=25252 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.72 rows=18 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..3.43 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(31 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=920919.80..920919.85 rows=20 width=201)
   ->  Sort  (cost=920919.80..922276.44 rows=542653 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=827939.32..906480.00 rows=542653 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=827939.32..892913.68 rows=542653 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=826939.26..827278.42 rows=135663 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=772109.48..815374.21 rows=135663 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=772107.92..814956.16 rows=135663 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=147)
                                       ->  Parallel Hash  (cost=770412.13..770412.13 rows=135663 width=16)
                                             ->  Nested Loop  (cost=6377.00..770412.13 rows=135663 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6376.43..269717.54 rows=138207 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6238.23 rows=552829 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 11 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=437289.88..437289.88 rows=1 width=36)
   InitPlan 1 (returns $3)
     ->  Finalize Aggregate  (cost=193202.06..193202.07 rows=1 width=32)
           ->  Gather  (cost=193201.84..193202.05 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=192201.84..192201.85 rows=1 width=32)
                       ->  Nested Loop  (cost=0.87..191219.10 rows=131032 width=10)
                             ->  Nested Loop  (cost=0.44..4617.72 rows=1667 width=4)
                                   ->  Parallel Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3552.46 rows=41667 width=8)
                                   ->  Memoize  (cost=0.15..0.92 rows=1 width=4)
                                         Cache Key: supplier_1.s_nationkey
                                         Cache Mode: logical
                                         ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.91 rows=1 width=4)
                                               Index Cond: (n_nationkey = supplier_1.s_nationkey)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..111.15 rows=79 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=244087.80..244349.87 rows=104826 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  Finalize GroupAggregate  (cost=203356.55..243563.67 rows=104826 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $3)
               ->  Gather Merge  (cost=203356.55..236881.04 rows=262064 width=36)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=202356.53..205632.33 rows=131032 width=36)
                           Group Key: partsupp.ps_partkey
                           ->  Sort  (cost=202356.53..202684.11 rows=131032 width=14)
                                 Sort Key: partsupp.ps_partkey
                                 ->  Nested Loop  (cost=0.87..191219.10 rows=131032 width=14)
                                       ->  Nested Loop  (cost=0.44..4617.72 rows=1667 width=4)
                                             ->  Parallel Index Scan using supplier_pkey on supplier  (cost=0.29..3552.46 rows=41667 width=8)
                                             ->  Memoize  (cost=0.15..0.92 rows=1 width=4)
                                                   Cache Key: supplier.s_nationkey
                                                   Cache Mode: logical
                                                   ->  Index Scan using nation_pkey on nation  (cost=0.14..0.91 rows=1 width=4)
                                                         Index Cond: (n_nationkey = supplier.s_nationkey)
                                                         Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..111.15 rows=79 width=18)
                                             Index Cond: (ps_suppkey = supplier.s_suppkey)
(39 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469249.89..1612170.46 rows=1 width=27)
   ->  GroupAggregate  (cost=1469249.89..2469693.87 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469249.89..2464769.49 rows=281389 width=27)
               ->  Gather Merge  (cost=1469249.46..1502941.47 rows=281389 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468249.40..1468425.27 rows=70347 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462585.69 rows=70347 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1369831.90..1369831.90 rows=1 width=16)
   ->  Sort  (cost=1369831.90..1369832.40 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1369828.90..1369830.90 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1215158.63..1347330.35 rows=1499903 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=53280.76..664446.96 rows=14998105 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448763.06 rows=14998105 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=28672.97..28672.97 rows=1499903 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28672.97 rows=1499903 width=4)
(14 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=874583.86..874583.87 rows=1 width=32)
   ->  Finalize Aggregate  (cost=874583.86..874583.87 rows=1 width=32)
         ->  Gather  (cost=874583.40..874583.81 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=873583.40..873583.41 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65225.89..870037.81 rows=202605 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=12994.87..817274.95 rows=202605 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12792.27 rows=810420 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.01..45981.01 rows=500001 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.01 rows=500001 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2721534.25..2721641.41 rows=1 width=103)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1379386.23..1379386.24 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1376883.26..1378134.75 rows=100119 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1332580.60..1373879.69 rows=400476 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1331580.60..1332832.09 rows=100119 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=35370.56..1326065.72 rows=551488 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34819.08 rows=2205951 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1342148.00..1395835.23 rows=501 width=103)
         ->  Finalize GroupAggregate  (cost=1342147.71..1394603.91 rows=501 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1342147.71..1390098.56 rows=400476 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1341147.65..1341397.95 rows=100119 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1331580.60..1332832.09 rows=100119 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=35370.56..1326065.72 rows=551488 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34819.08 rows=2205951 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=251286.76..251286.76 rows=1 width=44)
   ->  Sort  (cost=251286.76..251670.76 rows=153599 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172117.08..250518.77 rows=153599 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172117.08..243057.94 rows=592484 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171117.02..171487.32 rows=148121 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size
                           ->  Parallel Hash Join  (cost=57878.42..158396.08 rows=148121 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101364.62 rows=999810 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.03..53481.03 rows=74075 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.03 rows=74075 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3349024.43..3349024.44 rows=1 width=32)
   ->  Aggregate  (cost=3349024.43..3349024.44 rows=1 width=32)
         ->  Merge Join  (cost=2264744.78..3348981.88 rows=17018 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2263743.86..3226796.90 rows=1838103 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2263743.86..3144082.26 rows=7352412 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2262743.80..2267339.06 rows=1838103 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869743.11..2039178.90 rows=1838103 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 16
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275117.53 rows=14997453 width=9)
               ->  Materialize  (cost=1000.93..98431.66 rows=55550 width=21)
                     ->  Gather Merge  (cost=1000.93..98292.78 rows=55550 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..90676.18 rows=13888 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.46 rows=463 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..51.43 rows=33 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 18 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8775855.67..8775855.92 rows=100 width=71)
   ->  Sort  (cost=8775855.67..8825840.01 rows=19993735 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7410335.44..8011709.50 rows=19993735 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 128
               ->  Hash Join  (cost=78611.99..6333329.16 rows=19993735 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=128.17..5920220.65 rows=19993735 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3390377.52 rows=4999151 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547959.51 rows=14999605 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692438.10 rows=4999151 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167527.25 rows=59989812 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167527.25 rows=59989812 width=9)
                     ->  Hash  (cost=50946.03..50946.03 rows=1499903 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50946.03 rows=1499903 width=23)
(20 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=127415.23..127415.24 rows=1 width=32)
   ->  Finalize Aggregate  (cost=127415.23..127415.24 rows=1 width=32)
         ->  Gather  (cost=127414.80..127415.21 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=126414.80..126414.81 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..126412.68 rows=283 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.04 rows=1199 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..53.52 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2470292.20..2720754.52 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2470292.20..2720754.52 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2466169.27..2715995.71 rows=3 width=8)
               ->  Hash Join  (cost=2466169.27..2715995.70 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2389706.47..2553980.38 rows=4888707 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Bitmap Heap Scan on lineitem  (cost=149312.16..1997195.14 rows=9312595 width=13)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..146984.02 rows=9312595 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=75250.93..75250.93 rows=80792 width=16)
                           ->  Gather  (cost=1000.43..75250.93 rows=80792 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.43..66171.73 rows=20198 width=16)
                                       ->  Parallel Seq Scan on part  (cost=0.00..47231.01 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.57 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(32 rows)

query 21 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1968044.55..1968044.55 rows=1 width=34)
   ->  Sort  (cost=1968044.55..1968044.55 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1968041.32..1968044.54 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Nested Loop Semi Join  (cost=1968041.32..1968044.52 rows=1 width=26)
                     Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                     ->  Gather Merge  (cost=1968040.75..1968040.88 rows=1 width=38)
                           Workers Planned: 4
                           ->  Sort  (cost=1967040.70..1967040.70 rows=1 width=38)
                                 Sort Key: supplier.s_name
                                 ->  Nested Loop Anti Join  (cost=1338050.61..1967040.69 rows=1 width=38)
                                       ->  Parallel Hash Join  (cost=1338050.04..1653315.27 rows=97707 width=38)
                                             Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308141.77 rows=1834452 width=4)
                                                   Filter: (o_orderstatus = 'F'::bpchar)
                                             ->  Parallel Hash  (cost=1335553.44..1335553.44 rows=199728 width=34)
                                                   ->  Parallel Hash Join  (cost=3020.56..1335553.44 rows=199728 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312611.16 rows=4999151 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.64 rows=1 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.62 rows=4 width=8)
                           Index Cond: (l_orderkey = orders.o_orderkey)
(33 rows)

query 22 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93875.60..93877.44 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46820.41..46820.42 rows=1 width=32)
           ->  Gather  (cost=46819.98..46820.39 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45819.98..45819.99 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.11 rows=11944 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.19..59920.01 rows=7027 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.19..59744.34 rows=7027 width=38)
               ->  Gather Merge  (cost=47054.75..49149.99 rows=17499 width=26)
                     Workers Planned: 4
                     Params Evaluated: $1
                     ->  Sort  (cost=46054.69..46065.63 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.11 rows=4375 width=26)
                                 Filter: ((c_acctbal > $1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.16 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

