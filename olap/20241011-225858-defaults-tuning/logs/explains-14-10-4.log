query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1831608.75..1831609.39 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1831608.75..1831612.57 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1831608.75..1831611.62 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1830608.69..1830608.71 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1830608.48..1830608.61 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312614.68 rows=14799823 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1025381.32..1025381.33 rows=1 width=192)
   ->  Sort  (cost=1025381.32..1025381.33 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=557069.14..1025381.31 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68638.35 rows=7777 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66711.97 rows=1944 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=556068.35..564011.66 rows=1588661 width=172)
                     ->  Sort  (cost=556068.35..560040.01 rows=1588661 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.51..305172.70 rows=1588661 width=172)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255233.33 rows=8001133 width=14)
                                 ->  Hash  (cost=3798.51..3798.51 rows=20000 width=166)
                                       ->  Hash Join  (cost=2.51..3798.51 rows=20000 width=166)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=62.90..62.91 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..62.89 rows=3 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..61.62 rows=17 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..60.00 rows=17 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.73 rows=17 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(42 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2296859.38..2296859.41 rows=10 width=44)
   ->  Sort  (cost=2296859.38..2304754.24 rows=3157943 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1763658.77..2228617.37 rows=3157943 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1763658.77..2141773.94 rows=3157943 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1762658.71..1764632.42 rows=789486 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41573.12..1674917.87 rows=789486 width=24)
                                 ->  Parallel Hash Join  (cost=41572.55..354487.16 rows=363494 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308146.91 rows=1816262 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.44..40634.44 rows=75049 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.44 rows=75049 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283607.80..668341.11 rows=1 width=24)
   ->  GroupAggregate  (cost=283607.80..2207274.36 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283607.80..2204369.27 rows=581009 width=16)
               ->  Gather Merge  (cost=283607.23..353190.42 rows=581145 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282607.18..282970.39 rows=145286 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6702.67..270149.97 rows=145286 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6557.39 rows=581145 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=766466.17..766466.17 rows=1 width=58)
   ->  Sort  (cost=766466.17..766466.23 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=766224.21..766466.05 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=766224.21..766464.98 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=765224.15..765453.01 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=765224.15..765269.86 rows=18284 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=72852.49..763929.80 rows=18284 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69160.89..757838.19 rows=457146 width=50)
                                             ->  Parallel Hash Join  (cost=69160.33..341430.98 rows=114313 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=26367.16..296208.66 rows=571566 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25795.60 rows=2286266 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.68..41855.68 rows=74999 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.68 rows=74999 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.95 rows=374995 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1284928.03..1284928.04 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1284928.03..1284928.04 rows=1 width=32)
         ->  Gather  (cost=1284927.60..1284928.01 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1283927.60..1283927.61 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=213318.49..1282442.35 rows=297048 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..213021.45 rows=1188192 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1419935.95..1420993.94 rows=1 width=116)
   ->  GroupAggregate  (cost=1419935.95..12042162.45 rows=10040 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1419935.95..12041096.44 rows=61027 width=96)
               Join Filter: (n2.n_nationkey = customer.c_nationkey)
               ->  Nested Loop  (cost=1419935.52..6818865.66 rows=1525686 width=76)
                     ->  Gather Merge  (cost=1419935.08..1602612.55 rows=1525686 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1418935.03..1419888.58 rows=381422 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372678.50 rows=381422 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350109.01 rows=4582632 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Scan using customer_pkey on customer  (cost=0.43..3.41 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 8 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=386389.03..393011.48 rows=1 width=64)
   ->  GroupAggregate  (cost=386389.03..16320016.66 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=386389.03..16319484.00 rows=24227 width=70)
               Join Filter: (supplier.s_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=386389.03..16310672.42 rows=24227 width=20)
                     ->  Nested Loop  (cost=386388.74..16231416.78 rows=24227 width=20)
                           ->  Nested Loop  (cost=386388.31..3810317.44 rows=3638473 width=24)
                                 ->  Gather Merge  (cost=386387.74..495326.15 rows=909832 width=8)
                                       Workers Planned: 4
                                       ->  Sort  (cost=385387.69..385956.33 rows=227458 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Parallel Hash Join  (cost=42793.17..365149.34 rows=227458 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..317522.69 rows=1137290 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=41855.68..41855.68 rows=74999 width=4)
                                                         ->  Hash Join  (cost=2.51..41855.68 rows=74999 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.95 rows=374995 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using part_pkey on part  (cost=0.43..3.41 rows=1 width=4)
                                 Index Cond: (p_partkey = lineitem.l_partkey)
                                 Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.27 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(36 rows)

query 9 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=37795.66..42874.13 rows=1 width=90)
   ->  GroupAggregate  (cost=37795.66..713231.56 rows=133 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=37795.66..713227.24 rows=133 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=9652.78..713221.92 rows=133 width=81)
                     Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                     ->  Gather Merge  (cost=8651.47..20048.53 rows=100000 width=30)
                           Workers Planned: 1
                           ->  Sort  (cost=7651.46..7798.52 rows=58824 width=30)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=1.56..2991.39 rows=58824 width=30)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                     ->  Materialize  (cost=1001.31..493673.39 rows=133 width=35)
                           ->  Gather  (cost=1001.31..493672.72 rows=133 width=35)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=1.31..492659.42 rows=33 width=35)
                                       ->  Nested Loop  (cost=0.87..492546.48 rows=33 width=35)
                                             ->  Nested Loop  (cost=0.43..144949.38 rows=101024 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47230.84 rows=25252 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.70 rows=17 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..3.43 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(31 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=931953.87..931953.92 rows=20 width=201)
   ->  Sort  (cost=931953.87..933328.82 rows=549981 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=837717.77..917319.07 rows=549981 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=837717.77..903569.55 rows=549981 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=836717.71..837061.45 rows=137495 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=781239.18..824983.19 rows=137495 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=781237.62..824559.52 rows=137495 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.95 rows=374995 width=147)
                                       ->  Parallel Hash  (cost=779518.93..779518.93 rows=137495 width=16)
                                             ->  Nested Loop  (cost=6491.83..779518.93 rows=137495 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6491.26..269869.45 rows=140679 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6350.59 rows=562715 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 11 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=437847.16..437847.17 rows=1 width=36)
   InitPlan 1 (returns $3)
     ->  Finalize Aggregate  (cost=193212.48..193212.50 rows=1 width=32)
           ->  Gather  (cost=193212.26..193212.47 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=192212.26..192212.27 rows=1 width=32)
                       ->  Nested Loop  (cost=0.87..191219.35 rows=132388 width=10)
                             ->  Nested Loop  (cost=0.44..4617.72 rows=1667 width=4)
                                   ->  Parallel Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3552.46 rows=41667 width=8)
                                   ->  Memoize  (cost=0.15..0.92 rows=1 width=4)
                                         Cache Key: supplier_1.s_nationkey
                                         Cache Mode: logical
                                         ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.91 rows=1 width=4)
                                               Index Cond: (n_nationkey = supplier_1.s_nationkey)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..111.15 rows=79 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=244634.67..244899.45 rows=105911 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  Finalize GroupAggregate  (cost=203481.89..244105.11 rows=105911 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $3)
               ->  Gather Merge  (cost=203481.89..237353.31 rows=264776 width=36)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=202481.87..205791.57 rows=132388 width=36)
                           Group Key: partsupp.ps_partkey
                           ->  Sort  (cost=202481.87..202812.84 rows=132388 width=14)
                                 Sort Key: partsupp.ps_partkey
                                 ->  Nested Loop  (cost=0.87..191219.35 rows=132388 width=14)
                                       ->  Nested Loop  (cost=0.44..4617.72 rows=1667 width=4)
                                             ->  Parallel Index Scan using supplier_pkey on supplier  (cost=0.29..3552.46 rows=41667 width=8)
                                             ->  Memoize  (cost=0.15..0.92 rows=1 width=4)
                                                   Cache Key: supplier.s_nationkey
                                                   Cache Mode: logical
                                                   ->  Index Scan using nation_pkey on nation  (cost=0.14..0.91 rows=1 width=4)
                                                         Index Cond: (n_nationkey = supplier.s_nationkey)
                                                         Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..111.15 rows=79 width=18)
                                             Index Cond: (ps_suppkey = supplier.s_suppkey)
(39 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469316.77..1613639.22 rows=1 width=27)
   ->  GroupAggregate  (cost=1469316.77..2479573.91 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469316.77..2474601.24 rows=284149 width=27)
               ->  Gather Merge  (cost=1469316.34..1503338.81 rows=284149 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468316.28..1468493.87 rows=71037 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462592.02 rows=71037 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1353371.88..1353371.89 rows=1 width=16)
   ->  Sort  (cost=1353371.88..1353372.38 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1353368.88..1353370.88 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1201039.74..1330869.18 rows=1499980 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 8
                     ->  Hash Right Join  (cost=53283.88..661340.39 rows=14698195 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448783.64 rows=14698195 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=28674.13..28674.13 rows=1499980 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.13 rows=1499980 width=4)
(14 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=818945.65..818945.67 rows=1 width=32)
   ->  Finalize Aggregate  (cost=818945.65..818945.67 rows=1 width=32)
         ->  Gather  (cost=818945.20..818945.61 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=817945.20..817945.21 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=63870.19..814769.40 rows=181474 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=11639.48..762062.32 rows=181474 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..11458.01 rows=725894 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.87..45980.87 rows=499987 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.87 rows=499987 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2740394.94..2740502.29 rows=1 width=103)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1388556.67..1388556.68 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1386089.32..1387323.00 rows=98694 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1342417.23..1383128.50 rows=394776 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1341417.23..1342650.90 rows=98694 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=36121.81..1335784.97 rows=563226 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35558.59 rows=2252902 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1351838.26..1404762.82 rows=493 width=103)
         ->  Finalize GroupAggregate  (cost=1351837.96..1403547.55 rows=493 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1351837.96..1399106.32 rows=394776 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1350837.90..1351084.64 rows=98694 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1341417.23..1342650.90 rows=98694 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=36121.81..1335784.97 rows=563226 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35558.59 rows=2252902 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.46 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=251597.39..251597.39 rows=1 width=44)
   ->  Sort  (cost=251597.39..251981.82 rows=153773 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172184.83..250828.53 rows=153773 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172184.83..243347.44 rows=594336 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171184.77..171556.23 rows=148584 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size
                           ->  Parallel Hash Join  (cost=57880.63..158420.72 rows=148584 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101386.16 rows=1000142 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.68..53480.68 rows=74280 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.68 rows=74280 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3328458.21..3328458.22 rows=1 width=32)
   ->  Aggregate  (cost=3328458.21..3328458.22 rows=1 width=32)
         ->  Merge Join  (cost=2260006.12..3328413.49 rows=17889 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2259005.20..3204422.47 rows=1804443 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2259005.20..3123222.53 rows=7217772 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2258005.14..2262516.25 rows=1804443 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869757.06..2038774.84 rows=1804443 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 32
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275120.34 rows=14997734 width=9)
               ->  Materialize  (cost=1000.93..100615.92 rows=59483 width=21)
                     ->  Gather Merge  (cost=1000.93..100467.22 rows=59483 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..92382.16 rows=14871 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66711.97 rows=496 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..51.42 rows=33 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 18 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8775668.92..8775669.17 rows=100 width=71)
   ->  Sort  (cost=8775668.92..8825649.65 rows=19992292 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7410247.24..8011577.90 rows=19992292 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 256
               ->  Hash Join  (cost=78811.96..6333318.70 rows=19992292 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=326.41..5920230.23 rows=19992292 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3390435.14 rows=4999245 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547984.20 rows=15001251 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692464.79 rows=4999245 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167544.10 rows=59990936 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167544.10 rows=59990936 width=9)
                     ->  Hash  (cost=50946.80..50946.80 rows=1499980 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50946.80 rows=1499980 width=23)
(20 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=125438.43..125438.44 rows=1 width=32)
   ->  Finalize Aggregate  (cost=125438.43..125438.44 rows=1 width=32)
         ->  Gather  (cost=125438.00..125438.41 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=124438.00..124438.01 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..124435.90 rows=279 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.45 rows=1162 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..53.52 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2471668.14..2722542.59 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2471668.14..2722542.59 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2467545.21..2717783.79 rows=3 width=8)
               ->  Hash Join  (cost=2467545.21..2717783.77 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2391218.51..2555810.55 rows=4894079 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 64
                           ->  Bitmap Heap Scan on lineitem  (cost=149701.00..1997681.92 rows=9336920 width=13)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..147366.77 rows=9336920 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=75114.43..75114.43 rows=80818 width=16)
                           ->  Gather  (cost=1000.43..75114.43 rows=80818 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.43..66032.63 rows=20204 width=16)
                                       ->  Parallel Seq Scan on part  (cost=0.00..47230.84 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.55 rows=17 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(32 rows)

query 21 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1968283.63..1968283.64 rows=1 width=34)
   ->  Sort  (cost=1968283.63..1968283.64 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1968280.41..1968283.62 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Nested Loop Semi Join  (cost=1968280.41..1968283.61 rows=1 width=26)
                     Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                     ->  Gather Merge  (cost=1968279.84..1968279.97 rows=1 width=38)
                           Workers Planned: 4
                           ->  Sort  (cost=1967279.78..1967279.79 rows=1 width=38)
                                 Sort Key: supplier.s_name
                                 ->  Nested Loop Anti Join  (cost=1338058.92..1967279.77 rows=1 width=38)
                                       ->  Parallel Hash Join  (cost=1338058.35..1653326.38 rows=97778 width=38)
                                             Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308146.91 rows=1833778 width=4)
                                                   Filter: (o_orderstatus = 'F'::bpchar)
                                             ->  Parallel Hash  (cost=1335558.73..1335558.73 rows=199970 width=34)
                                                   ->  Parallel Hash Join  (cost=3020.56..1335558.73 rows=199970 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312614.68 rows=4999245 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.64 rows=1 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.62 rows=4 width=8)
                           Index Cond: (l_orderkey = orders.o_orderkey)
(33 rows)

query 22 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93876.62..93878.15 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46820.92..46820.93 rows=1 width=32)
           ->  Gather  (cost=46820.49..46820.90 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.49..45820.50 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.62 rows=11946 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.69..59589.02 rows=8215 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.69..59383.65 rows=8215 width=38)
               ->  Gather Merge  (cost=47055.26..49150.61 rows=17500 width=26)
                     Workers Planned: 4
                     Params Evaluated: $1
                     ->  Sort  (cost=46055.20..46066.14 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.62 rows=4375 width=26)
                                 Filter: ((c_acctbal > $1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.19 rows=19 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

