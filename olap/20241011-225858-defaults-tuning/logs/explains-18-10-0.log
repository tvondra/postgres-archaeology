query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3949692.81..3949692.81 rows=1 width=236)
   ->  Sort  (cost=3949692.81..3949692.82 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3949692.61..3949692.78 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874935.00 rows=59278789 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1126825.37..1126825.37 rows=1 width=192)
   ->  Sort  (cost=1126825.37..1126825.37 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=557177.81..1126825.36 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89211.55 rows=8862 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=557176.04..565152.07 rows=1595206 width=172)
                     ->  Sort  (cost=557176.04..561164.06 rows=1595206 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.51..305198.96 rows=1595206 width=172)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255204.83 rows=7998283 width=14)
                                 ->  Hash  (cost=3798.51..3798.51 rows=20000 width=166)
                                       ->  Hash Join  (cost=2.51..3798.51 rows=20000 width=166)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(40 rows)

query 3 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3174464.11..3174464.14 rows=10 width=44)
   ->  Sort  (cost=3174464.11..3182267.38 rows=3121308 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3031419.59..3107013.77 rows=3121308 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 16
               ->  Hash Join  (cost=519011.85..2867307.07 rows=3121308 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874935.00 rows=32188037 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=493723.85..493723.85 rows=1454720 width=12)
                           ->  Hash Join  (cost=123531.82..493723.85 rows=1454720 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=65046.72..416334.53 rows=7201585 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..63246.32 rows=7201585 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54697.50..54697.50 rows=303008 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54697.50 rows=303008 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 4 run 1
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2091001.42..2091001.42 rows=1 width=24)
   ->  Sort  (cost=2091001.42..2091001.43 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=2091001.34..2091001.39 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=6561.39..2088158.58 rows=568552 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=6560.83..276360.38 rows=568770 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6418.64 rows=568770 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2052595.47..2052595.47 rows=1 width=58)
   ->  Sort  (cost=2052595.47..2052595.53 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2051707.82..2052595.34 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=2051707.82..2051885.26 rows=70977 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=93926.32..2045988.83 rows=70977 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=89205.32..2031846.80 rows=1794479 width=50)
                                 ->  Hash Join  (cost=89204.75..397034.90 rows=448792 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=25879.51..320806.90 rows=2243959 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25318.53 rows=2243959 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59575.14..59575.14 rows=300008 width=38)
                                             ->  Hash Join  (cost=2.51..59575.14 rows=300008 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.40 rows=1500040 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1989069.36..1989069.37 rows=1 width=32)
   ->  Aggregate  (cost=1989069.36..1989069.37 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=218761.03..1982987.88 rows=1216296 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..218456.96 rows=1216296 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2714662.12..2714662.24 rows=1 width=116)
   ->  GroupAggregate  (cost=2714662.12..2715840.49 rows=10048 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2714662.12..2714808.93 rows=58723 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563430.08..2710010.78 rows=58723 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2109506.10 rows=1411066 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024893.40 rows=17832703 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536595.09..536595.09 rows=1200127 width=30)
                           ->  Hash Join  (cost=57053.96..536595.09 rows=1200127 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411283.91 rows=15001591 width=8)
                                 ->  Hash  (cost=55553.93..55553.93 rows=120003 width=30)
                                       ->  Hash Join  (cost=1.40..55553.93 rows=120003 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.40 rows=1500040 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 8 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1232774.70..1232774.95 rows=1 width=64)
   ->  GroupAggregate  (cost=1232774.70..1233368.74 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=1232774.70..1232835.36 rows=24263 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=880507.13..1231007.57 rows=24263 width=70)
                     ->  Hash Join  (cost=880506.98..1230330.97 rows=24263 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=876035.98..1225795.57 rows=24531 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=812710.74..1161765.07 rows=122654 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=53240.29..383756.12 rows=4616522 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..52086.15 rows=4616522 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=754488.36..754488.36 rows=398568 width=20)
                                             ->  Nested Loop  (cost=0.44..754488.36 rows=398568 width=20)
                                                   ->  Seq Scan on part  (cost=0.00..65980.45 rows=13289 width=4)
                                                         Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..51.48 rows=33 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59575.14..59575.14 rows=300008 width=4)
                                       ->  Hash Join  (cost=2.51..59575.14 rows=300008 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.40 rows=1500040 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.91 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 9 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2291131.91..2291131.94 rows=1 width=90)
   ->  GroupAggregate  (cost=2291131.91..2291138.42 rows=186 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=2291131.91..2291132.37 rows=186 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               ->  Nested Loop  (cost=67749.25..2291124.89 rows=186 width=81)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=67749.25..2291055.79 rows=186 width=31)
                           ->  Nested Loop  (cost=67748.82..2290419.18 rows=186 width=31)
                                 ->  Nested Loop  (cost=67748.53..2289806.17 rows=187 width=35)
                                       ->  Hash Join  (cost=67748.09..343948.45 rows=565535 width=18)
                                             Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                             ->  Seq Scan on partsupp  (cost=0.00..255204.83 rows=7998283 width=14)
                                             ->  Hash  (cost=65980.45..65980.45 rows=141411 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..65980.45 rows=141411 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..3.43 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.28 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2402509.99..2402510.04 rows=20 width=201)
   ->  Sort  (cost=2402509.99..2403974.08 rows=585636 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2254436.28..2386926.42 rows=585636 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=2254436.28..2372285.52 rows=585636 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=2254436.11..2345931.90 rows=585636 width=181)
                           ->  Merge Join  (cost=2254435.96..2331592.53 rows=585636 width=159)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..64622.53 rows=1500040 width=147)
                                 ->  Sort  (cost=2254435.43..2255899.52 rows=585636 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=284280.14..2198332.55 rows=585636 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Seq Scan on lineitem  (cost=0.00..1874935.00 rows=14901866 width=16)
                                                   Filter: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=276910.70..276910.70 rows=589555 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=6799.37..276910.70 rows=589555 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6651.99 rows=589555 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..0.91 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
(28 rows)

query 11 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=606471.01..606471.01 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293093.07..293093.08 rows=1 width=32)
           ->  Hash Join  (cost=2311.46..290700.26 rows=319041 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255204.83 rows=7998283 width=14)
                 ->  Hash  (cost=2261.46..2261.46 rows=4000 width=4)
                       ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=37.29..2220.15 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=313377.93..313643.79 rows=106347 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=304944.94..312846.19 rows=106347 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2311.46..290700.26 rows=319041 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255204.83 rows=7998283 width=18)
                     ->  Hash  (cost=2261.46..2261.46 rows=4000 width=4)
                           ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
(31 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3032293.37..3033143.11 rows=1 width=27)
   ->  GroupAggregate  (cost=3032293.37..3038241.56 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=3032293.37..3033036.88 rows=297406 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Hash Join  (cost=2478486.17..3005256.08 rows=297406 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411283.91 rows=15001591 width=20)
                     ->  Hash  (cost=2474768.60..2474768.60 rows=297406 width=15)
                           ->  Seq Scan on lineitem  (cost=0.00..2474768.60 rows=297406 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1361728.67..1361728.67 rows=1 width=16)
   ->  Sort  (cost=1361728.67..1361729.17 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1361725.67..1361727.67 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1208208.57..1339225.07 rows=1500040 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=53285.53..662932.93 rows=14850060 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448787.89 rows=14850060 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=28675.03..28675.03 rows=1500040 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28675.03 rows=1500040 width=4)
(14 rows)

query 14 run 1
SET
SET
SET
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1320536.73..1320536.75 rows=1 width=32)
   ->  Aggregate  (cost=1320536.73..1320536.75 rows=1 width=32)
         ->  Hash Join  (cost=99652.57..1306801.82 rows=784852 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..1183751.57 rows=784852 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.56..60980.56 rows=1999956 width=25)
                     ->  Seq Scan on part  (cost=0.00..60980.56 rows=1999956 width=25)
(8 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3742042.04..3742050.73 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1871512.49..1871512.50 rows=1 width=32)
           ->  HashAggregate  (cost=1868984.94..1870248.71 rows=101102 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=35312.49..1846961.60 rows=2202334 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34761.90 rows=2202334 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1870529.55..1874922.64 rows=506 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=71)
         ->  Sort  (cost=1870529.25..1870530.52 rows=506 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1868984.94..1870506.53 rows=506 width=36)
                     ->  HashAggregate  (cost=1868984.94..1870501.47 rows=506 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=35312.49..1846961.60 rows=2202334 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34761.90 rows=2202334 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=358007.41..358007.41 rows=1 width=44)
   ->  Sort  (cost=358007.41..358390.55 rows=153255 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=348342.90..357241.14 rows=153255 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=348342.90..349816.04 rows=589255 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98134.91..281508.13 rows=589255 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176346.91 rows=3999142 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90979.90..90979.90 rows=294684 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90979.90 rows=294684 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=4881334.44..4881334.45 rows=1 width=32)
   ->  Aggregate  (cost=4881334.44..4881334.45 rows=1 width=32)
         ->  Nested Loop  (cost=4174228.05..4881291.00 rows=17374 width=8)
               Join Filter: (lineitem.l_partkey = part.p_partkey)
               ->  Hash Join  (cost=4174227.61..4791676.76 rows=1738 width=40)
                     Hash Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=4103223.10..4715954.81 rows=1797114 width=36)
                           Group Key: lineitem_1.l_partkey
                           Planned Partitions: 16
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..1724976.60 rows=59983360 width=9)
                     ->  Hash  (cost=70980.34..70980.34 rows=1934 width=4)
                           ->  Seq Scan on part  (cost=0.00..70980.34 rows=1934 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..51.42 rows=11 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(16 rows)

query 18 run 1
SET
SET
SET
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8672203.92..8672204.17 rows=100 width=71)
   ->  Sort  (cost=8672203.92..8722170.88 rows=19986787 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=4154269.72..7908323.29 rows=19986787 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=4154269.72..7508587.55 rows=19986787 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=4154269.53..6783663.99 rows=19986787 width=44)
                           Merge Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167430.46 rows=59983360 width=9)
                           ->  Materialize  (cost=4154262.68..4179255.75 rows=4998613 width=43)
                                 ->  Sort  (cost=4154262.68..4166759.21 rows=4998613 width=43)
                                       Sort Key: orders.o_orderkey
                                       ->  Hash Join  (cost=78488.90..3499238.10 rows=4998613 width=43)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Merge Join  (cost=1.00..3340260.80 rows=4998613 width=24)
                                                   Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..547989.30 rows=15001591 width=20)
                                                   ->  GroupAggregate  (cost=0.56..2692284.86 rows=4998613 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167430.46 rows=59983360 width=9)
                                             ->  Hash  (cost=50947.40..50947.40 rows=1500040 width=23)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.40 rows=1500040 width=23)
(25 rows)

query 19 run 1
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=388976.62..388976.63 rows=1 width=32)
   ->  Aggregate  (cost=388976.62..388976.63 rows=1 width=32)
         ->  Nested Loop  (cost=0.44..388967.73 rows=1184 width=12)
               ->  Seq Scan on part  (cost=0.00..125979.13 rows=4913 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..53.52 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2716118.39..2716118.40 rows=1 width=51)
   ->  Sort  (cost=2716118.39..2716118.40 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2514809.40..2716118.38 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2514809.40..2711466.08 rows=3 width=8)
                     ->  Hash Join  (cost=2514809.40..2711466.06 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2371846.72..2532326.48 rows=4823569 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Bitmap Heap Scan on lineitem  (cost=144693.35..1991493.95 rows=9024125 width=13)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..142437.32 rows=9024125 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=141750.80..141750.80 rows=80792 width=16)
                                 ->  Nested Loop  (cost=0.43..141750.80 rows=80792 width=16)
                                       ->  Seq Scan on part  (cost=0.00..65980.45 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.57 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(27 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3683052.40..3683052.40 rows=1 width=34)
   ->  Sort  (cost=3683052.40..3683052.40 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=3683052.37..3683052.39 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=3683052.37..3683052.37 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=1970025.66..3683052.36 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop Anti Join  (cost=1970025.10..3683048.72 rows=1 width=38)
                                 ->  Hash Join  (cost=1970024.53..2449963.15 rows=384034 width=38)
                                       Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..448787.89 rows=7282772 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                                       ->  Hash  (cost=1960136.27..1960136.27 rows=791061 width=34)
                                             ->  Hash Join  (cost=2311.46..1960136.27 rows=791061 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Seq Scan on lineitem l1  (cost=0.00..1874935.00 rows=19994453 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2261.46..2261.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.64 rows=1 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.62 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 22 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161639.18..161639.21 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75442.31..75442.32 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75323.05 rows=47701 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86196.87..86410.05 rows=7752 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86196.87..86216.25 rows=7752 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..85696.08 rows=7752 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75323.05 rows=17500 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.17 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

