query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191532.19..191532.40 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191532.19..191533.44 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=191532.19..191532.25 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=191529.08..191531.64 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=190529.08..190529.24 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131312.36 rows=1480418 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=66661.20..66661.21 rows=1 width=192)
   ->  Sort  (cost=66661.20..66661.21 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=44342.91..66661.19 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=870 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Sort  (cost=44342.45..44741.74 rows=159713 width=172)
                     Sort Key: partsupp.ps_partkey
                     ->  Hash Join  (cost=408.03..30539.16 rows=159713 width=172)
                           Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..25534.00 rows=800000 width=14)
                           ->  Hash  (cost=383.03..383.03 rows=2000 width=166)
                                 ->  Hash Join  (cost=2.53..383.03 rows=2000 width=166)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=144)
                                       ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                             ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                   Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=18.52..18.53 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.52 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.41 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.74 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(38 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=266460.51..266460.53 rows=10 width=44)
   ->  Sort  (cost=266460.51..267244.91 rows=313761 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=250267.41..259680.24 rows=313761 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=250267.41..251051.82 rows=313761 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Gather  (cost=6847.18..221622.12 rows=313761 width=24)
                           Workers Planned: 3
                           ->  Nested Loop  (cost=5847.18..189246.02 rows=101213 width=24)
                                 ->  Hash Join  (cost=5846.75..39363.14 rows=46485 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..32179.39 rows=232577 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=5472.00..5472.00 rows=29980 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..5472.00 rows=29980 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.20 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 4 run 1
SET
SET
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=87934.57..87934.60 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=87934.57..87934.73 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=87934.57..87934.61 rows=15 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=87932.72..87934.27 rows=15 width=24)
                     Workers Planned: 3
                     ->  Partial HashAggregate  (cost=86932.72..86932.77 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=0.43..86838.16 rows=18912 width=16)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=18912 width=20)
                                       Filter: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.22 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=88938.10..88938.11 rows=1 width=58)
   ->  Sort  (cost=88938.10..88938.17 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=88936.92..88937.98 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=88936.92..88937.10 rows=75 width=58)
                     Sort Key: nation.n_name
                     ->  Gather  (cost=88897.93..88934.58 rows=75 width=58)
                           Workers Planned: 3
                           ->  Partial GroupAggregate  (cost=87897.93..87927.08 rows=25 width=58)
                                 Group Key: nation.n_name
                                 ->  Sort  (cost=87897.93..87903.70 rows=2307 width=38)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=6810.46..87769.06 rows=2307 width=38)
                                             Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                             ->  Nested Loop  (cost=6337.46..86840.32 rows=57689 width=50)
                                                   ->  Hash Join  (cost=6337.03..40140.74 rows=14422 width=38)
                                                         Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=72112 width=8)
                                                               Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Hash  (cost=5962.03..5962.03 rows=30000 width=38)
                                                               ->  Hash Join  (cost=2.53..5962.03 rows=30000 width=38)
                                                                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                                     ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                                     ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                                           ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                                                 Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                                 ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                             Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.20 rows=4 width=20)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                             ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=109413.74..109413.75 rows=1 width=32)
   ->  Aggregate  (cost=109413.74..109413.75 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=21513.22..108815.93 rows=119561 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21483.33 rows=119561 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=166565.38..166565.42 rows=1 width=92)
   ->  GroupAggregate  (cost=166565.38..166780.04 rows=6133 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=166565.38..166580.72 rows=6133 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Gather  (cost=7311.23..166179.55 rows=6133 width=72)
                     Workers Planned: 3
                     ->  Hash Join  (cost=6311.23..164545.47 rows=1978 width=72)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                           ->  Nested Loop  (cost=5931.33..163901.33 rows=47544 width=46)
                                 ->  Hash Join  (cost=5930.90..39102.23 rows=38710 width=30)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=8)
                                       ->  Hash  (cost=5780.90..5780.90 rows=12000 width=30)
                                             ->  Hash Join  (cost=1.40..5780.90 rows=12000 width=30)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                               Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.21 rows=1 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=369.90..369.90 rows=800 width=30)
                                 ->  Hash Join  (cost=1.40..369.90 rows=800 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(31 rows)

query 8 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=81673.26..81673.30 rows=1 width=40)
   ->  GroupAggregate  (cost=81673.26..81781.69 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=81673.26..81679.29 rows=2413 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Gather  (cost=50941.74..81537.69 rows=2413 width=46)
                     Workers Planned: 2
                     ->  Hash Join  (cost=49941.74..80289.35 rows=1005 width=46)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Hash Join  (cost=49940.18..80268.94 rows=1005 width=20)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Hash Join  (cost=49492.18..79807.12 rows=1005 width=20)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Nested Loop  (cost=0.43..30242.84 rows=16665 width=20)
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=555 width=4)
                                                   Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..44.92 rows=31 width=24)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Hash  (cost=48360.38..48360.38 rows=90509 width=8)
                                             ->  Hash Join  (cost=12839.06..48360.38 rows=90509 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Bitmap Heap Scan on orders  (cost=6502.02..39421.21 rows=452546 width=12)
                                                         Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6388.89 rows=452546 width=0)
                                                               Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Hash  (cost=5962.03..5962.03 rows=30000 width=4)
                                                         ->  Hash Join  (cost=2.53..5962.03 rows=30000 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                               ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(40 rows)

query 9 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=32727.56..32727.59 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=32727.56..32728.88 rows=47 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=32727.56..32727.66 rows=40 width=66)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Gather  (cost=32721.75..32726.50 rows=40 width=66)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=31721.75..31722.50 rows=20 width=66)
                           Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=31721.75..31721.80 rows=20 width=57)
                                 Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                                 ->  Hash Join  (cost=3.13..31721.31 rows=20 width=57)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=1.57..31719.38 rows=20 width=31)
                                             ->  Nested Loop  (cost=1.14..31656.25 rows=20 width=31)
                                                   ->  Nested Loop  (cost=0.86..31597.09 rows=20 width=35)
                                                         ->  Nested Loop  (cost=0.42..10647.03 rows=6576 width=18)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=1683 width=4)
                                                                     Filter: ((p_name)::text ~~ '%navy%'::text)
                                                               ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..3.23 rows=4 width=14)
                                                                     Index Cond: (ps_partkey = part.p_partkey)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..3.18 rows=1 width=29)
                                                               Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                                   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.95 rows=1 width=8)
                                                         Index Cond: (s_suppkey = lineitem.l_suppkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..3.15 rows=1 width=8)
                                                   Index Cond: (o_orderkey = lineitem.l_orderkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 10 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=111052.11..111052.16 rows=20 width=202)
   ->  Sort  (cost=111052.11..111196.23 rows=57651 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=108797.40..109518.03 rows=57651 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=7973.99..108076.76 rows=57651 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=6973.99..101311.66 rows=18597 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=6972.43..101054.39 rows=18597 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=0.43..93826.68 rows=18597 width=16)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=18702 width=8)
                                             Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.22 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                       ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(21 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22741.30..22741.31 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=10891.50..10891.51 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..10651.93 rows=31943 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..25.25 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=11849.79..11929.65 rows=31943 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=11210.93..11690.07 rows=31943 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..10651.93 rows=31943 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..25.25 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                                                          QUERY PLAN                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=170484.70..170484.75 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=170484.70..170485.05 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=170484.70..170484.77 rows=28 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Gather  (cost=170336.63..170484.02 rows=28 width=27)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=169336.63..169481.22 rows=7 width=27)
                           Group Key: lineitem.l_shipmode
                           ->  Sort  (cost=169336.63..169354.70 rows=7226 width=27)
                                 Sort Key: lineitem.l_shipmode
                                 ->  Nested Loop  (cost=0.43..168873.48 rows=7226 width=27)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..146314.24 rows=7227 width=15)
                                             Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..3.11 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(16 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=81502.61..81502.61 rows=1 width=16)
   ->  Sort  (cost=81502.61..81503.11 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=81499.61..81501.61 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=77749.61..79249.61 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..70250.36 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=80785.18..80785.19 rows=1 width=32)
   ->  Aggregate  (cost=80785.18..80785.19 rows=1 width=32)
         ->  Hash Join  (cost=9883.58..79384.07 rows=80063 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1284.58..69684.20 rows=80063 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1264.56 rows=80063 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=247418.72..247418.78 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122492.08..122492.09 rows=1 width=32)
           ->  HashAggregate  (cost=122242.05..122367.06 rows=10001 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3782.68..119882.30 rows=235975 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3723.68 rows=235975 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=124926.63..125520.15 rows=10001 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=124926.35..124951.35 rows=10001 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=124011.86..124261.89 rows=10001 width=36)
                     ->  HashAggregate  (cost=124011.86..124161.88 rows=10001 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3782.68..119882.30 rows=235975 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3723.68 rows=235975 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=34702.37..34702.37 rows=1 width=44)
   ->  Sort  (cost=34702.37..34742.24 rows=15946 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=33742.88..34622.64 rows=15946 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=33742.88..33886.94 rows=57624 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9816.20..29186.44 rows=57624 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17642.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29502 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29502 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=501448.52..501448.53 rows=1 width=32)
   ->  Aggregate  (cost=501448.52..501448.53 rows=1 width=32)
         ->  Merge Join  (cost=488456.43..501443.53 rows=1994 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=476910.69..487406.28 rows=190829 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=476910.69..478818.98 rows=763316 width=36)
                           Sort Key: lineitem_1.l_partkey
                           ->  Gather  (cost=298940.01..388908.38 rows=763316 width=36)
                                 Workers Planned: 4
                                 ->  Partial GroupAggregate  (cost=297940.01..311576.78 rows=190829 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Sort  (cost=297940.01..301690.48 rows=1500188 width=9)
                                             Sort Key: lineitem_1.l_partkey
                                             ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..127561.88 rows=1500188 width=9)
               ->  Sort  (cost=11545.75..11561.43 rows=6271 width=21)
                     Sort Key: lineitem.l_partkey
                     ->  Gather  (cost=1000.43..11150.22 rows=6271 width=21)
                           Workers Planned: 2
                           ->  Nested Loop  (cost=0.43..9523.12 rows=2613 width=21)
                                 ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=87 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..47.67 rows=31 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(25 rows)

query 18 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1258655.28..1258655.53 rows=100 width=71)
   ->  Sort  (cost=1258655.28..1266155.28 rows=3000001 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1076497.37..1143997.39 rows=3000001 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=1076497.37..1083997.37 rows=3000001 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=6975.29..694421.29 rows=3000001 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=3.29..646199.28 rows=3000001 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Semi Join  (cost=0.86..372074.49 rows=750000 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..54805.93 rows=1500000 width=20)
                                       ->  Materialize  (cost=0.43..294766.21 rows=1500188 width=4)
                                             ->  GroupAggregate  (cost=0.43..276013.86 rows=1500188 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227257.74 rows=6000754 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..227257.74 rows=6000754 width=9)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 19 run 1
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

 Limit  (cost=18169.51..18169.52 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18169.51..18169.52 rows=1 width=32)
         ->  Gather  (cost=18169.28..18169.49 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17169.28..17169.29 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17168.93 rows=47 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=198 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..48.11 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=279943.87..279943.87 rows=1 width=51)
   ->  Sort  (cost=279943.87..279944.37 rows=200 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=255628.46..279942.87 rows=200 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=6.38..230.58 rows=400 width=55)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=59)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=255622.08..279520.37 rows=32 width=8)
                     ->  Merge Join  (cost=255622.08..279520.21 rows=32 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=242746.93..259279.89 rows=487064 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=242746.93..245053.68 rows=922700 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=14789.11..141189.61 rows=922700 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14558.43 rows=922700 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=12875.15..12894.88 rows=7891 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=1000.42..12364.37 rows=7891 width=16)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..2.94 rows=4 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(33 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=203103.49..203103.50 rows=1 width=34)
   ->  Sort  (cost=203103.49..203103.50 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=203103.46..203103.48 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=203103.46..203103.47 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=1236.87..203103.45 rows=1 width=26)
                           ->  Nested Loop  (cost=1236.44..203097.09 rows=1 width=34)
                                 ->  Gather  (cost=1236.01..203093.76 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=236.01..202093.66 rows=1 width=38)
                                             ->  Hash Join  (cost=235.58..133623.18 rows=20000 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131312.36 rows=500063 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                         ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..3.38 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.31 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..3.39 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 22 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14821.05..14821.08 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Finalize Aggregate  (cost=6242.82..6242.84 rows=1 width=32)
           ->  Gather  (cost=6242.60..6242.81 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.60..5242.61 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1990 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8578.22..8598.32 rows=731 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8578.22..8580.04 rows=731 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8543.44 rows=731 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.96 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

