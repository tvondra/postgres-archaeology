query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3948970.46..3948970.47 rows=1 width=236)
   ->  Sort  (cost=3948970.46..3948970.48 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3948970.27..3948970.44 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874969.25 rows=59257172 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1040442.52..1040442.53 rows=1 width=193)
   ->  Sort  (cost=1040442.52..1040442.53 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=554465.69..1040442.51 rows=1 width=193)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89210.57 rows=7745 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=554464.92..562362.10 rows=1579436 width=173)
                     ->  Sort  (cost=554464.92..558413.51 rows=1579436 width=173)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.51..305092.01 rows=1579436 width=173)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255241.74 rows=8001974 width=14)
                                 ->  Hash  (cost=3798.51..3798.51 rows=20000 width=167)
                                       ->  Hash Join  (cost=2.51..3798.51 rows=20000 width=167)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=62.90..62.91 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..62.89 rows=3 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..61.62 rows=17 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..60.00 rows=17 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.73 rows=17 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(40 rows)

query 3 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3174500.16..3174500.19 rows=10 width=44)
   ->  Sort  (cost=3174500.16..3182276.36 rows=3110479 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3031951.92..3107283.83 rows=3110479 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 16
               ->  Hash Join  (cost=519619.52..2868408.76 rows=3110479 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874969.25 rows=32232854 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=494458.73..494458.73 rows=1447423 width=12)
                           ->  Hash Join  (cost=123783.93..494458.73 rows=1447423 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=65337.59..417024.39 rows=7233504 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..63529.21 rows=7233504 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54694.89..54694.89 rows=300116 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54694.89 rows=300116 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 4 run 1
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2027616.12..2027616.13 rows=1 width=24)
   ->  Sort  (cost=2027616.12..2027616.14 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=2027616.05..2027616.10 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=6334.08..2024871.12 rows=548985 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=6333.52..275837.73 rows=549081 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6196.25 rows=549081 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2091925.89..2091925.89 rows=1 width=58)
   ->  Sort  (cost=2091925.89..2091925.95 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2091017.92..2091925.77 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=2091017.92..2091199.42 rows=72603 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=94513.32..2085156.04 rows=72603 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=89792.32..2070797.05 rows=1835806 width=50)
                                 ->  Hash Join  (cost=89791.76..398684.34 rows=459032 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=26470.34..322165.75 rows=2295161 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25896.55 rows=2295161 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59571.84..59571.84 rows=299966 width=38)
                                             ->  Hash Join  (cost=2.51..59571.84 rows=299966 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50945.31 rows=1499831 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1976980.63..1976980.64 rows=1 width=32)
   ->  Aggregate  (cost=1976980.63..1976980.64 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=216304.06..1970977.22 rows=1200681 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..216003.89 rows=1200681 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2715289.55..2715289.67 rows=1 width=116)
   ->  GroupAggregate  (cost=2715289.55..2716472.78 rows=10024 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2715289.55..2715437.10 rows=59021 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563388.32..2710612.45 rows=59021 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2109985.52 rows=1418217 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024934.50 rows=17930520 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536556.76..536556.76 rows=1199933 width=30)
                           ->  Hash Join  (cost=57051.01..536556.76 rows=1199933 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411259.61 rows=14999161 width=8)
                                 ->  Hash  (cost=55551.19..55551.19 rows=119986 width=30)
                                       ->  Hash Join  (cost=1.40..55551.19 rows=119986 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50945.31 rows=1499831 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 8 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1211215.18..1211215.42 rows=1 width=64)
   ->  GroupAggregate  (cost=1211215.18..1211801.54 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=1211215.18..1211274.98 rows=23922 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=860298.05..1209475.32 rows=23922 width=70)
                     ->  Hash Join  (cost=860297.90..1208807.90 rows=23922 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=855826.90..1204273.39 rows=24195 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=792505.48..1140256.36 rows=120977 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=52449.90..381936.38 rows=4547899 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..51312.92 rows=4547899 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=735068.26..735068.26 rows=398986 width=20)
                                             ->  Nested Loop  (cost=0.44..735068.26 rows=398986 width=20)
                                                   ->  Seq Scan on part  (cost=0.00..65979.84 rows=13302 width=4)
                                                         Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..49.98 rows=32 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59571.84..59571.84 rows=299966 width=4)
                                       ->  Hash Join  (cost=2.51..59571.84 rows=299966 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50945.31 rows=1499831 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.91 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 9 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1734917.58..1734917.61 rows=1 width=90)
   ->  GroupAggregate  (cost=1734917.58..1734921.95 rows=125 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=1734917.58..1734917.89 rows=125 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               ->  Nested Loop  (cost=67243.57..1734913.23 rows=125 width=81)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=67243.57..1734866.46 rows=125 width=31)
                           ->  Nested Loop  (cost=67243.13..1734438.63 rows=125 width=31)
                                 ->  Nested Loop  (cost=67242.84..1734022.30 rows=127 width=35)
                                       ->  Hash Join  (cost=67242.40..343489.37 rows=404138 width=18)
                                             Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                             ->  Seq Scan on partsupp  (cost=0.00..255241.74 rows=8001974 width=14)
                                             ->  Hash  (cost=65979.84..65979.84 rows=101005 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..65979.84 rows=101005 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..3.43 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.28 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2397766.72..2397766.77 rows=20 width=202)
   ->  Sort  (cost=2397766.72..2399187.78 rows=568425 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2252048.42..2382641.14 rows=568425 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=2252048.42..2368430.51 rows=568425 width=182)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=2252048.25..2342851.39 rows=568425 width=182)
                           ->  Merge Join  (cost=2252048.10..2328932.77 rows=568425 width=160)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..64619.39 rows=1499831 width=148)
                                 ->  Sort  (cost=2252047.59..2253468.65 rows=568425 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=283564.36..2197715.79 rows=568425 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Seq Scan on lineitem  (cost=0.00..1874969.25 rows=14926541 width=16)
                                                   Filter: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=276424.48..276424.48 rows=571190 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=6588.63..276424.48 rows=571190 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6445.84 rows=571190 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..0.91 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
(28 rows)

query 11 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=606261.59..606261.59 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293088.63..293088.64 rows=1 width=32)
           ->  Hash Join  (cost=2311.46..290719.47 rows=315887 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255241.74 rows=8001974 width=14)
                 ->  Hash  (cost=2261.46..2261.46 rows=4000 width=4)
                       ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=37.29..2220.15 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=313172.95..313436.19 rows=105296 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=304823.33..312646.47 rows=105296 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2311.46..290719.47 rows=315887 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255241.74 rows=8001974 width=18)
                     ->  Hash  (cost=2261.46..2261.46 rows=4000 width=4)
                           ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
(31 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3031743.06..3032579.31 rows=1 width=27)
   ->  GroupAggregate  (cost=3031743.06..3037596.79 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=3031743.06..3032474.77 rows=292683 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Hash Join  (cost=2478488.79..3005168.94 rows=292683 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411259.61 rows=14999161 width=20)
                     ->  Hash  (cost=2474830.25..2474830.25 rows=292683 width=15)
                           ->  Seq Scan on lineitem  (cost=0.00..2474830.25 rows=292683 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1369797.63..1369797.63 rows=1 width=16)
   ->  Sort  (cost=1369797.63..1369798.13 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1369794.63..1369796.63 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1215129.63..1347297.17 rows=1499831 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=53278.78..664434.26 rows=14997661 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448757.51 rows=14997661 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=28671.89..28671.89 rows=1499831 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28671.89 rows=1499831 width=4)
(14 rows)

query 14 run 1
SET
SET
SET
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1240634.34..1240634.36 rows=1 width=32)
   ->  Aggregate  (cost=1240634.34..1240634.36 rows=1 width=32)
         ->  Hash Join  (cost=99651.47..1227809.13 rows=732869 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..1105404.44 rows=732869 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.07..60980.07 rows=1999907 width=25)
                     ->  Seq Scan on part  (cost=0.00..60980.07 rows=1999907 width=25)
(8 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3768009.08..3768017.76 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1884496.22..1884496.23 rows=1 width=32)
           ->  HashAggregate  (cost=1881967.62..1883231.92 rows=101144 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=36203.09..1859388.57 rows=2257905 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35638.62 rows=2257905 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1883512.86..1887905.95 rows=506 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=72)
         ->  Sort  (cost=1883512.56..1883513.83 rows=506 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1881967.62..1883489.84 rows=506 width=36)
                     ->  HashAggregate  (cost=1881967.62..1883484.78 rows=506 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=36203.09..1859388.57 rows=2257905 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35638.62 rows=2257905 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=359919.24..359919.24 rows=1 width=44)
   ->  Sort  (cost=359919.24..360305.75 rows=154602 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=350070.87..359146.23 rows=154602 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=350070.87..351576.74 rows=602347 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98213.70..281656.35 rows=602347 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176411.50 rows=4000987 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90978.68..90978.68 rows=301085 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90978.68 rows=301085 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=4885249.80..4885249.81 rows=1 width=32)
   ->  Aggregate  (cost=4885249.80..4885249.81 rows=1 width=32)
         ->  Nested Loop  (cost=4174363.51..4885203.95 rows=18339 width=8)
               Join Filter: (lineitem.l_partkey = part.p_partkey)
               ->  Hash Join  (cost=4174363.07..4793389.30 rows=1834 width=40)
                     Hash Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=4103359.14..4717437.03 rows=1885076 width=36)
                           Group Key: lineitem_1.l_partkey
                           Planned Partitions: 16
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..1725004.00 rows=59986100 width=9)
                     ->  Hash  (cost=70979.60..70979.60 rows=1946 width=4)
                           ->  Seq Scan on part  (cost=0.00..70979.60 rows=1946 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..49.93 rows=11 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(16 rows)

query 18 run 1
SET
SET
SET
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8672927.48..8672927.73 rows=100 width=71)
   ->  Sort  (cost=8672927.48..8722907.11 rows=19991854 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=4154319.73..7908853.20 rows=19991854 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=4154319.73..7509016.12 rows=19991854 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=4154319.54..6784126.94 rows=19991854 width=44)
                           Merge Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167471.56 rows=59986100 width=9)
                           ->  Materialize  (cost=4154317.63..4179311.84 rows=4998842 width=43)
                                 ->  Sort  (cost=4154317.63..4166814.73 rows=4998842 width=43)
                                       Sort Key: orders.o_orderkey
                                       ->  Hash Join  (cost=78483.20..3499261.41 rows=4998842 width=43)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Merge Join  (cost=1.00..3340286.22 rows=4998842 width=24)
                                                   Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..547952.85 rows=14999161 width=20)
                                                   ->  GroupAggregate  (cost=0.56..2692349.94 rows=4998842 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167471.56 rows=59986100 width=9)
                                             ->  Hash  (cost=50945.31..50945.31 rows=1499831 width=23)
                                                   ->  Seq Scan on customer  (cost=0.00..50945.31 rows=1499831 width=23)
(25 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=383016.47..383016.48 rows=1 width=32)
   ->  Aggregate  (cost=383016.47..383016.48 rows=1 width=32)
         ->  Nested Loop  (cost=0.44..383007.67 rows=1173 width=12)
               ->  Seq Scan on part  (cost=0.00..125977.05 rows=4946 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..51.96 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2716188.74..2716188.75 rows=1 width=52)
   ->  Sort  (cost=2716188.74..2716188.75 rows=1 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2514760.15..2716188.73 rows=1 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=56)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=60)
               ->  Materialize  (cost=2514760.15..2711536.43 rows=3 width=8)
                     ->  Hash Join  (cost=2514760.15..2711536.41 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2372356.99..2532941.93 rows=4825494 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Bitmap Heap Scan on lineitem  (cost=144815.44..1991674.87 rows=9031939 width=13)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..142557.46 rows=9031939 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=141190.74..141190.74 rows=80828 width=16)
                                 ->  Nested Loop  (cost=0.43..141190.74 rows=80828 width=16)
                                       ->  Seq Scan on part  (cost=0.00..65979.84 rows=20201 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.55 rows=17 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(27 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3686321.17..3686321.18 rows=1 width=34)
   ->  Sort  (cost=3686321.17..3686321.18 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=3686321.14..3686321.16 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=3686321.14..3686321.15 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=1970056.75..3686321.13 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop Anti Join  (cost=1970056.18..3686317.49 rows=1 width=38)
                                 ->  Hash Join  (cost=1970055.62..2450049.97 rows=385025 width=38)
                                       Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..448757.51 rows=7303092 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                                       ->  Hash  (cost=1960171.02..1960171.02 rows=790768 width=34)
                                             ->  Hash Join  (cost=2311.46..1960171.02 rows=790768 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Seq Scan on lineitem l1  (cost=0.00..1874969.25 rows=19995367 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2261.46..2261.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.64 rows=1 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.62 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 22 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161637.97..161638.00 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75436.92..75436.93 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75317.56 rows=47741 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86201.04..86412.85 rows=7702 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86201.04..86220.30 rows=7702 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..85703.84 rows=7702 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75317.56 rows=17498 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.17 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

