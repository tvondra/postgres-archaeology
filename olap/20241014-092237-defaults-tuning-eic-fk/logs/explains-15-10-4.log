query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832194.32..1832194.95 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832194.32..1832198.14 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832194.32..1832197.19 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831194.26..1831194.28 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831194.05..1831194.18 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312594.99 rows=14817116 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1005707.56..1005707.57 rows=1 width=192)
   ->  Sort  (cost=1005707.56..1005707.57 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=559016.58..1005707.55 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68580.78 rows=7293 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.05 rows=1823 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=558015.85..566015.78 rows=1599987 width=172)
                     ->  Sort  (cost=558015.85..562015.82 rows=1599987 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.51..305248.41 rows=1599987 width=172)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255221.36 rows=7999936 width=14)
                                 ->  Hash  (cost=3798.51..3798.51 rows=20000 width=166)
                                       ->  Hash Join  (cost=2.51..3798.51 rows=20000 width=166)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=62.90..62.91 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..62.89 rows=3 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..61.62 rows=17 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..60.00 rows=17 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.73 rows=17 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(42 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2328033.49..2328033.52 rows=10 width=44)
   ->  Sort  (cost=2328033.49..2336052.39 rows=3207558 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1786455.67..2258719.32 rows=3207558 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1786455.67..2170511.47 rows=3207558 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1785455.61..1787460.33 rows=801890 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41584.25..1696245.34 rows=801890 width=24)
                                 ->  Parallel Hash Join  (cost=41583.68..354520.30 rows=369356 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308148.65 rows=1823982 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.47..40634.47 rows=75937 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.47 rows=75937 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283673.64..669530.11 rows=1 width=24)
   ->  GroupAggregate  (cost=283673.64..2212956.01 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283673.64..2210042.90 rows=582612 width=16)
               ->  Gather Merge  (cost=283673.07..353458.13 rows=582831 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282673.01..283037.28 rows=145708 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6722.95..270176.57 rows=145708 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6577.25 rows=582831 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=764234.30..764234.31 rows=1 width=58)
   ->  Sort  (cost=764234.30..764234.37 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=763993.45..764234.18 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=763993.45..764233.12 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=762993.40..763221.15 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=762993.40..763038.88 rows=18195 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=72723.32..761705.99 rows=18195 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69031.73..755626.41 rows=454853 width=50)
                                             ->  Parallel Hash Join  (cost=69031.16..341248.18 rows=113756 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=26237.94..296037.64 rows=568780 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25669.16 rows=2275122 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.73..41855.73 rows=75000 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.73 rows=75000 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.97 rows=374998 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1266030.50..1266030.51 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1266030.50..1266030.51 rows=1 width=32)
         ->  Gather  (cost=1266030.06..1266030.47 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1265030.06..1265030.07 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=210166.11..1263588.78 rows=288256 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..209877.85 rows=1153026 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1419782.89..1420840.14 rows=1 width=116)
   ->  GroupAggregate  (cost=1419782.89..12021874.74 rows=10028 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1419782.89..12020810.64 rows=60912 width=96)
               Join Filter: (n2.n_nationkey = customer.c_nationkey)
               ->  Nested Loop  (cost=1419782.46..6808478.68 rows=1522794 width=76)
                     ->  Gather Merge  (cost=1419782.03..1602113.22 rows=1522794 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1418781.97..1419733.71 rows=380698 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372618.02 rows=380698 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350085.39 rows=4573942 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Scan using customer_pkey on customer  (cost=0.43..3.41 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 8 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=386380.86..392999.94 rows=1 width=64)
   ->  GroupAggregate  (cost=386380.86..16311890.76 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=386380.86..16311359.52 rows=24156 width=70)
               Join Filter: (supplier.s_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=386380.86..16302573.70 rows=24156 width=20)
                     ->  Nested Loop  (cost=386380.57..16223550.33 rows=24156 width=20)
                           ->  Nested Loop  (cost=386380.14..3808991.91 rows=3636557 width=24)
                                 ->  Gather Merge  (cost=386379.57..495276.07 rows=909482 width=8)
                                       Workers Planned: 4
                                       ->  Sort  (cost=385379.52..385947.94 rows=227370 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Parallel Hash Join  (cost=42793.23..365149.63 rows=227370 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..317524.78 rows=1136852 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=41855.73..41855.73 rows=75000 width=4)
                                                         ->  Hash Join  (cost=2.51..41855.73 rows=75000 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.97 rows=374998 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using part_pkey on part  (cost=0.43..3.41 rows=1 width=4)
                                 Index Cond: (p_partkey = lineitem.l_partkey)
                                 Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.27 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(36 rows)

query 9 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=646989.31..647185.82 rows=1 width=90)
   ->  GroupAggregate  (cost=646989.31..12467085.23 rows=60150 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=646989.31..12413166.23 rows=3029529 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=158467.63..11974525.48 rows=3029529 width=81)
                     ->  Nested Loop  (cost=158467.20..1598039.51 rows=3029529 width=53)
                           Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Gather Merge  (cost=158466.76..206843.98 rows=404037 width=48)
                                 Workers Planned: 4
                                 ->  Sort  (cost=157466.70..157719.22 rows=101009 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=3546.53..149070.77 rows=101009 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Parallel Hash Join  (cost=3544.97..148759.11 rows=101009 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.43..144949.42 rows=101009 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..47230.87 rows=25252 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.70 rows=17 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..3.43 rows=1 width=29)
                                 Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(30 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=944853.24..944853.29 rows=20 width=202)
   ->  Sort  (cost=944853.24..946269.46 rows=566491 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=847788.24..929779.12 rows=566491 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=847788.24..915616.84 rows=566491 width=182)
                     Workers Planned: 4
                     ->  Sort  (cost=846788.19..847142.24 rows=141623 width=182)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=791372.83..834671.14 rows=141623 width=182)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=791371.27..834234.79 rows=141623 width=160)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.97 rows=374998 width=148)
                                       ->  Parallel Hash  (cost=789600.98..789600.98 rows=141623 width=16)
                                             ->  Nested Loop  (cost=6617.57..789600.98 rows=141623 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6617.00..270036.24 rows=143416 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6473.59 rows=573665 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 11 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=442882.57..442882.58 rows=1 width=36)
   InitPlan 1 (returns $3)
     ->  Finalize Aggregate  (cost=195543.44..195543.45 rows=1 width=32)
           ->  Gather  (cost=195543.22..195543.43 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=194543.22..194543.23 rows=1 width=32)
                       ->  Nested Loop  (cost=0.87..193543.23 rows=133332 width=10)
                             ->  Nested Loop  (cost=0.44..4617.72 rows=1667 width=4)
                                   ->  Parallel Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3552.46 rows=41667 width=8)
                                   ->  Memoize  (cost=0.15..0.92 rows=1 width=4)
                                         Cache Key: supplier_1.s_nationkey
                                         Cache Mode: logical
                                         ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.91 rows=1 width=4)
                                               Index Cond: (n_nationkey = supplier_1.s_nationkey)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..112.53 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=247339.12..247605.78 rows=106666 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  Finalize GroupAggregate  (cost=205892.91..246805.79 rows=106666 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $3)
               ->  Gather Merge  (cost=205892.91..240005.85 rows=266664 width=36)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=204892.89..208226.19 rows=133332 width=36)
                           Group Key: partsupp.ps_partkey
                           ->  Sort  (cost=204892.89..205226.22 rows=133332 width=14)
                                 Sort Key: partsupp.ps_partkey
                                 ->  Nested Loop  (cost=0.87..193543.23 rows=133332 width=14)
                                       ->  Nested Loop  (cost=0.44..4617.72 rows=1667 width=4)
                                             ->  Parallel Index Scan using supplier_pkey on supplier  (cost=0.29..3552.46 rows=41667 width=8)
                                             ->  Memoize  (cost=0.15..0.92 rows=1 width=4)
                                                   Cache Key: supplier.s_nationkey
                                                   Cache Mode: logical
                                                   ->  Index Scan using nation_pkey on nation  (cost=0.14..0.91 rows=1 width=4)
                                                         Index Cond: (n_nationkey = supplier.s_nationkey)
                                                         Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..112.53 rows=80 width=18)
                                             Index Cond: (ps_suppkey = supplier.s_suppkey)
(39 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469398.45..1616428.90 rows=1 width=27)
   ->  GroupAggregate  (cost=1469398.45..2498611.56 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469398.45..2493545.57 rows=289481 width=27)
               ->  Gather Merge  (cost=1469398.02..1504058.92 rows=289481 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468397.96..1468578.88 rows=72370 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462556.58 rows=72370 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1328421.88..1328421.88 rows=1 width=16)
   ->  Sort  (cost=1328421.88..1328422.38 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1328418.88..1328420.88 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1179636.78..1305919.03 rows=1499990 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=53284.15..656609.72 rows=14244141 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448790.60 rows=14244141 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=28674.28..28674.28 rows=1499990 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.28 rows=1499990 width=4)
(14 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=871036.74..871036.76 rows=1 width=32)
   ->  Finalize Aggregate  (cost=871036.74..871036.76 rows=1 width=32)
         ->  Gather  (cost=871036.29..871036.70 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=870036.29..870036.30 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65136.49..866515.30 rows=201199 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=12905.73..813756.40 rows=201199 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12704.54 rows=804797 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.89..45980.89 rows=499989 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.89 rows=499989 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2745407.96..2745515.14 rows=1 width=103)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1391216.40..1391216.41 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1388728.05..1389972.23 rows=99534 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1344684.26..1385742.03 rows=398136 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1343684.26..1344928.43 rows=99534 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=38010.09..1337757.91 rows=592635 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..37417.46 rows=2370539 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1354191.55..1407565.32 rows=498 width=103)
         ->  Finalize GroupAggregate  (cost=1354191.26..1406340.96 rows=498 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1354191.26..1401861.93 rows=398136 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1353191.20..1353440.03 rows=99534 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1343684.26..1344928.43 rows=99534 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=38010.09..1337757.91 rows=592635 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..37417.46 rows=2370539 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=252917.06..252917.06 rows=1 width=44)
   ->  Sort  (cost=252917.06..253303.74 rows=154671 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172386.47..252143.70 rows=154671 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172386.47..244568.49 rows=602850 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171386.41..171763.19 rows=150712 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size
                           ->  Parallel Hash Join  (cost=57894.13..158424.10 rows=150712 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101376.44 rows=999992 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.73..53480.73 rows=75355 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.73 rows=75355 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3411753.55..3411753.56 rows=1 width=32)
   ->  Aggregate  (cost=3411753.55..3411753.56 rows=1 width=32)
         ->  Merge Join  (cost=2277708.50..3411706.34 rows=18883 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2276707.58..3288039.46 rows=1930249 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2276707.58..3201178.26 rows=7720996 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2275707.52..2280533.14 rows=1930249 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869678.86..2040253.84 rows=1930249 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 16
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275104.59 rows=14996159 width=9)
               ->  Materialize  (cost=1000.93..98683.90 rows=58696 width=21)
                     ->  Gather Merge  (cost=1000.93..98537.16 rows=58696 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..90545.84 rows=14674 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.05 rows=489 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..48.43 rows=31 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 18 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8774783.96..8774784.21 rows=100 width=71)
   ->  Sort  (cost=8774783.96..8824752.33 rows=19987351 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7409699.73..8010881.77 rows=19987351 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 128
               ->  Hash Join  (cost=78736.56..6333037.35 rows=19987351 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=249.78..5920027.63 rows=19987351 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3390283.44 rows=4998720 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547992.56 rows=15001808 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692315.17 rows=4998720 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167449.60 rows=59984636 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167449.60 rows=59984636 width=9)
                     ->  Hash  (cost=50946.90..50946.90 rows=1499990 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50946.90 rows=1499990 width=23)
(20 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=123871.86..123871.87 rows=1 width=32)
   ->  Finalize Aggregate  (cost=123871.86..123871.87 rows=1 width=32)
         ->  Gather  (cost=123871.43..123871.84 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=122871.43..122871.44 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..122869.32 rows=280 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.54 rows=1203 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..50.40 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2455096.78..2701405.86 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2455096.78..2701405.86 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2450973.85..2696647.05 rows=3 width=8)
               ->  Hash Join  (cost=2450973.85..2696647.04 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2374648.11..2535726.02 rows=4834009 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Bitmap Heap Scan on lineitem  (cost=145416.30..1992389.60 rows=9069340 width=13)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..143148.97 rows=9069340 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=75113.60..75113.60 rows=80809 width=16)
                           ->  Gather  (cost=1000.43..75113.60 rows=80809 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.43..66032.70 rows=20202 width=16)
                                       ->  Parallel Seq Scan on part  (cost=0.00..47230.87 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.55 rows=17 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(32 rows)

query 21 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1970070.31..1970070.32 rows=1 width=34)
   ->  Sort  (cost=1970070.31..1970070.32 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1970067.08..1970070.30 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Nested Loop Semi Join  (cost=1970067.08..1970070.29 rows=1 width=26)
                     Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                     ->  Gather Merge  (cost=1970066.52..1970066.64 rows=1 width=38)
                           Workers Planned: 4
                           ->  Sort  (cost=1969066.46..1969066.47 rows=1 width=38)
                                 Sort Key: supplier.s_name
                                 ->  Nested Loop Anti Join  (cost=1338036.88..1969066.45 rows=1 width=38)
                                       ->  Parallel Hash Join  (cost=1338036.31..1653347.08 rows=98328 width=38)
                                             Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308148.65 rows=1844347 width=4)
                                                   Filter: (o_orderstatus = 'F'::bpchar)
                                             ->  Parallel Hash  (cost=1335536.95..1335536.95 rows=199949 width=34)
                                                   ->  Parallel Hash Join  (cost=3020.56..1335536.95 rows=199949 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312594.99 rows=4998720 width=8)
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.64 rows=1 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.62 rows=4 width=8)
                           Index Cond: (l_orderkey = orders.o_orderkey)
(33 rows)

query 22 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93876.81..93878.67 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46821.04..46821.05 rows=1 width=32)
           ->  Gather  (cost=46820.61..46821.02 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.61..45820.62 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.68 rows=11969 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.76..59951.99 rows=6920 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.76..59778.99 rows=6920 width=38)
               ->  Gather Merge  (cost=47055.32..49150.68 rows=17500 width=26)
                     Workers Planned: 4
                     Params Evaluated: $1
                     ->  Sort  (cost=46055.26..46066.20 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.68 rows=4375 width=26)
                                 Filter: ((c_acctbal > $1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.16 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

