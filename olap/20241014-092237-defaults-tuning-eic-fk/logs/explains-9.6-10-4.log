query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1906171.04..1906171.25 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1906171.04..1906172.29 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=1906171.04..1906171.10 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=1906167.93..1906170.49 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=1905167.93..1905168.09 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312605.89 rows=14814051 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1076660.15..1076660.16 rows=1 width=192)
   ->  Sort  (cost=1076660.15..1076660.16 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=557889.73..1076660.14 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89211.71 rows=7459 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=557877.34..565874.00 rows=1599333 width=172)
                     ->  Sort  (cost=557877.34..561875.67 rows=1599333 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.53..305218.01 rows=1599333 width=172)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255188.65 rows=7996665 width=14)
                                 ->  Hash  (cost=3798.53..3798.53 rows=20000 width=166)
                                       ->  Hash Join  (cost=2.53..3798.53 rows=20000 width=166)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=69.98..69.99 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..69.97 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.67 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.84 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(40 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2622850.28..2622850.31 rows=10 width=44)
   ->  Sort  (cost=2622850.28..2630969.80 rows=3247809 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=2455232.03..2552666.30 rows=3247809 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=2455232.03..2463351.55 rows=3247809 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Gather  (cost=59564.17..2061144.92 rows=3247809 width=24)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=58564.17..1735364.02 rows=811952 width=24)
                                 ->  Hash Join  (cost=58563.60..377242.85 rows=373723 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308146.50 rows=1812138 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54696.78..54696.78 rows=309346 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54696.78 rows=309346 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 4 run 1
SET
SET
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=767485.97..767486.01 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=767485.97..767486.17 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=767485.97..767486.02 rows=20 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=767483.49..767485.54 rows=20 width=24)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=766483.49..766483.54 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=0.56..765780.35 rows=140628 width=16)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..317522.20 rows=140666 width=20)
                                       Filter: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=805693.63..805693.63 rows=1 width=58)
   ->  Sort  (cost=805693.63..805693.69 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=805692.19..805693.50 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=805692.19..805692.44 rows=100 width=58)
                     Sort Key: nation.n_name
                     ->  Gather  (cost=805453.11..805688.87 rows=100 width=58)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=804453.11..804678.87 rows=25 width=58)
                                 Group Key: nation.n_name
                                 ->  Sort  (cost=804453.11..804498.20 rows=18036 width=38)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=68045.76..803178.09 rows=18036 width=38)
                                             Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                             ->  Nested Loop  (cost=63324.76..794895.68 rows=450806 width=50)
                                                   ->  Hash Join  (cost=63324.19..384087.45 rows=112732 width=38)
                                                         Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317522.20 rows=563662 width=8)
                                                               Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Hash  (cost=59574.24..59574.24 rows=299996 width=38)
                                                               ->  Hash Join  (cost=2.53..59574.24 rows=299996 width=38)
                                                                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                                     ->  Seq Scan on customer  (cost=0.00..50946.82 rows=1499982 width=8)
                                                                     ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                                           ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                                                 Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                                 ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                             Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=20)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                             ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1096376.25..1096376.26 rows=1 width=32)
   ->  Aggregate  (cost=1096376.25..1096376.26 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=214375.52..1090358.63 rows=1203525 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..214074.64 rows=1203525 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1480778.35..1480778.43 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1480778.35..1481556.76 rows=10044 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=1480778.35..1480878.79 rows=40176 width=92)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Gather  (cost=1473248.75..1477706.09 rows=40176 width=92)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1472248.75..1472688.49 rows=10044 width=92)
                           Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Sort  (cost=1472248.75..1472286.46 rows=15084 width=72)
                                 Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=63051.10..1471201.86 rows=15084 width=72)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                       ->  Nested Loop  (cost=59273.70..1465409.87 rows=362461 width=46)
                                             ->  Hash Join  (cost=59273.13..375107.72 rows=300022 width=30)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298770.80 rows=3750280 width=8)
                                                   ->  Hash  (cost=57773.14..57773.14 rows=119999 width=30)
                                                         ->  Hash Join  (cost=1.40..57773.14 rows=119999 width=30)
                                                               Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..50946.82 rows=1499982 width=8)
                                                               ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.62 rows=1 width=24)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                                   Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=3677.40..3677.40 rows=8000 width=30)
                                             ->  Hash Join  (cost=1.40..3677.40 rows=8000 width=30)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                               Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(35 rows)

query 8 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=625092.54..625092.63 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=625092.54..625291.04 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=625092.54..625116.60 rows=9624 width=72)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Gather  (cost=623310.19..624455.80 rows=9624 width=72)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=622310.19..622493.40 rows=2406 width=72)
                           Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=622310.19..622325.20 rows=6004 width=46)
                                 Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=67797.76..621933.39 rows=6004 width=46)
                                       Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                       ->  Hash Join  (cost=67796.19..621819.25 rows=6004 width=20)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Hash Join  (cost=63325.19..617265.70 rows=6004 width=20)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Nested Loop  (cost=1.00..553768.89 rows=30019 width=24)
                                                         ->  Nested Loop  (cost=0.56..210353.00 rows=99980 width=20)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..47230.89 rows=3333 width=4)
                                                                     Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..48.63 rows=31 width=24)
                                                                     Index Cond: (l_partkey = part.p_partkey)
                                                         ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=12)
                                                               Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Hash  (cost=59574.24..59574.24 rows=299996 width=4)
                                                         ->  Hash Join  (cost=2.53..59574.24 rows=299996 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..50946.82 rows=1499982 width=8)
                                                               ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(41 rows)

query 9 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1315375.86..1315375.86 rows=1 width=66)
   ->  Sort  (cost=1315375.86..1315526.24 rows=60150 width=66)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
         ->  Finalize HashAggregate  (cost=1314022.49..1315075.11 rows=60150 width=66)
               Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Gather  (cost=1286503.86..1311616.49 rows=240600 width=66)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=1285503.86..1286556.49 rows=60150 width=66)
                           Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
                           ->  Hash Join  (cost=663240.76..1272248.94 rows=757424 width=57)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=5848.56..514007.12 rows=757424 width=53)
                                       Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                       ->  Hash Join  (cost=5847.99..153579.42 rows=100968 width=48)
                                             Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                             ->  Nested Loop  (cost=0.43..146343.55 rows=100968 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47230.89 rows=25252 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.73 rows=19 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Hash  (cost=4597.56..4597.56 rows=100000 width=30)
                                                   ->  Hash Join  (cost=1.56..4597.56 rows=100000 width=30)
                                                         Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                         ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                                         ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..3.56 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Hash  (cost=411279.20..411279.20 rows=15001120 width=8)
                                       ->  Seq Scan on orders  (cost=0.00..411279.20 rows=15001120 width=8)
(30 rows)

query 10 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1201986.85..1201986.90 rows=20 width=202)
   ->  Sort  (cost=1201986.85..1203496.51 rows=603863 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1169312.04..1185918.27 rows=603863 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Sort  (cost=1169312.04..1170821.70 rows=603863 width=182)
                     Sort Key: customer.c_custkey, nation.n_name
                     ->  Gather  (cost=102925.72..1076830.28 rows=603863 width=182)
                           Workers Planned: 4
                           ->  Hash Join  (cost=101925.72..1015443.98 rows=150966 width=182)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=101924.16..1013366.64 rows=150966 width=160)
                                       ->  Hash Join  (cost=101923.60..454995.23 rows=154068 width=152)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..317522.20 rows=154068 width=8)
                                                   Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Hash  (cost=50946.82..50946.82 rows=1499982 width=148)
                                                   ->  Seq Scan on customer  (cost=0.00..50946.82 rows=1499982 width=148)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=488296.13..488296.13 rows=1 width=36)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=207433.85..207433.86 rows=1 width=32)
           ->  Gather  (cost=207433.42..207433.83 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206433.42..206433.43 rows=1 width=32)
                       ->  Hash Join  (cost=2323.46..205833.66 rows=79967 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195213.66 rows=1999166 width=14)
                             ->  Hash  (cost=2273.46..2273.46 rows=4000 width=4)
                                   ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=49.29..2232.15 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=280862.26..281661.93 rows=319867 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=268067.58..279262.93 rows=319867 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $1)
               ->  Sort  (cost=268067.58..268867.25 rows=319867 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Gather  (cost=3323.46..238820.36 rows=319867 width=14)
                           Workers Planned: 4
                           ->  Hash Join  (cost=2323.46..205833.66 rows=79967 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195213.66 rows=1999166 width=18)
                                 ->  Hash  (cost=2273.46..2273.46 rows=4000 width=4)
                                       ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
(37 rows)

query 12 run 1
SET
SET
SET
                                                                                                                          QUERY PLAN                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1714518.58..1714518.63 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1714518.58..1714518.93 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=1714518.58..1714518.65 rows=28 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Gather  (cost=1713092.78..1714517.91 rows=28 width=27)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1712092.78..1713515.11 rows=7 width=27)
                           Group Key: lineitem.l_shipmode
                           ->  Sort  (cost=1712092.78..1712270.56 rows=71113 width=27)
                                 Sort Key: lineitem.l_shipmode
                                 ->  Nested Loop  (cost=0.43..1706361.84 rows=71113 width=27)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1462576.20 rows=71113 width=15)
                                             Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..3.42 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(16 rows)

query 13 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2775862.13..2775862.13 rows=1 width=16)
   ->  Sort  (cost=2775862.13..2775862.63 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=2775859.13..2775861.13 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=2368453.21..2753359.40 rows=1499982 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=2368453.21..2663361.48 rows=14999621 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.16 rows=1499982 width=4)
                           ->  Materialize  (cost=2368452.78..2443450.88 rows=14999621 width=8)
                                 ->  Sort  (cost=2368452.78..2405951.83 rows=14999621 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..448782.00 rows=14999621 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(15 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=810013.43..810013.45 rows=1 width=32)
   ->  Aggregate  (cost=810013.43..810013.45 rows=1 width=32)
         ->  Hash Join  (cost=111589.55..796978.41 rows=744858 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=11937.36..665205.35 rows=744858 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..11751.15 rows=744858 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.64..60980.64 rows=1999964 width=25)
                     ->  Seq Scan on part  (cost=0.00..60980.64 rows=1999964 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2643807.91..2643808.43 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1206604.83..1206604.84 rows=1 width=32)
           ->  HashAggregate  (cost=1204109.23..1205357.03 rows=99824 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=35139.40..1182183.05 rows=2192618 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34591.25 rows=2192618 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1437203.07..1489184.33 rows=99824 width=103)
         Merge Cond: (lineitem.l_suppkey = supplier.s_suppkey)
         ->  GroupAggregate  (cost=1437202.77..1482552.49 rows=99824 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Sort  (cost=1437202.77..1442684.32 rows=2192618 width=16)
                     Sort Key: lineitem.l_suppkey
                     ->  Bitmap Heap Scan on lineitem  (cost=35139.40..1182183.05 rows=2192618 width=16)
                           Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34591.25 rows=2192618 width=0)
                                 Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=71)
(21 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=361539.37..361539.37 rows=1 width=44)
   ->  Sort  (cost=361539.37..361922.79 rows=153371 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=351861.03..360772.51 rows=153371 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=351861.03..353336.58 rows=590222 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=91165.50..284908.60 rows=590222 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176318.60 rows=3998332 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=84003.68..84003.68 rows=295229 width=40)
                                 ->  Gather  (cost=1000.00..84003.68 rows=295229 width=40)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.78 rows=73807 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5365230.88..5365230.89 rows=1 width=32)
   ->  Aggregate  (cost=5365230.88..5365230.89 rows=1 width=32)
         ->  Merge Join  (cost=5234230.41..5365185.99 rows=17957 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=5151954.50..5257882.47 rows=1925963 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=5151954.50..5171214.13 rows=7703852 width=36)
                           Sort Key: lineitem_1.l_partkey
                           ->  Gather  (cost=3228385.45..4135322.92 rows=7703852 width=36)
                                 Workers Planned: 4
                                 ->  Partial GroupAggregate  (cost=3227385.45..3363937.72 rows=1925963 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Sort  (cost=3227385.45..3264878.03 rows=14997031 width=9)
                                             Sort Key: lineitem_1.l_partkey
                                             ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275113.31 rows=14997031 width=9)
               ->  Sort  (cost=82275.90..82415.75 rows=55940 width=21)
                     Sort Key: lineitem.l_partkey
                     ->  Gather  (cost=1000.57..77864.59 rows=55940 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.56..71270.59 rows=13985 width=21)
                                 ->  Parallel Seq Scan on part  (cost=0.00..48480.86 rows=466 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..48.59 rows=31 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(25 rows)

query 18 run 1
SET
SET
SET
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=13508678.74..13508678.99 rows=100 width=71)
   ->  Sort  (cost=13508678.74..13583663.90 rows=29994062 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=11687460.86..12362327.26 rows=29994062 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=11687460.86..11762446.02 rows=29994062 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=78532.45..7369327.27 rows=29994062 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=46.86..6459558.33 rows=29994062 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Semi Join  (cost=1.00..3719500.24 rows=7500560 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..547982.24 rows=15001120 width=20)
                                       ->  Materialize  (cost=0.56..2946552.32 rows=14997031 width=4)
                                             ->  GroupAggregate  (cost=0.56..2759089.43 rows=14997031 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271685.93 rows=59988124 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2271685.93 rows=59988124 width=9)
                           ->  Hash  (cost=50946.82..50946.82 rows=1499982 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..50946.82 rows=1499982 width=23)
(22 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=123716.88..123716.89 rows=1 width=32)
   ->  Finalize Aggregate  (cost=123716.88..123716.89 rows=1 width=32)
         ->  Gather  (cost=123716.45..123716.86 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=122716.45..122716.46 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..122714.26 rows=292 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.62 rows=1196 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..50.56 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2921731.85..2921731.85 rows=1 width=51)
   ->  Sort  (cost=2921731.85..2921736.85 rows=2000 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2681378.34..2921721.85 rows=2000 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2681378.34..2917069.54 rows=3 width=8)
                     ->  Merge Join  (cost=2681378.34..2917069.53 rows=3 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2548062.94..2710764.72 rows=4825563 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=2548062.94..2570642.52 rows=9031834 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=144740.86..1405361.37 rows=9031834 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..142482.90 rows=9031834 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=133315.40..133517.34 rows=80776 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=1000.43..126731.50 rows=80776 width=16)
                                       ->  Gather  (cost=1000.00..50251.09 rows=20202 width=4)
                                             Workers Planned: 4
                                             ->  Parallel Seq Scan on part  (cost=0.00..47230.89 rows=5050 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.60 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(31 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2070956.40..2070956.40 rows=1 width=34)
   ->  Sort  (cost=2070956.40..2070956.40 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=2070956.37..2070956.39 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=2070956.37..2070956.37 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=3325.02..2070956.36 rows=1 width=26)
                           ->  Nested Loop  (cost=3324.46..2070949.63 rows=1 width=34)
                                 ->  Gather  (cost=3324.02..2070946.18 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=2324.02..2069946.08 rows=1 width=38)
                                             ->  Hash Join  (cost=2323.46..1335675.23 rows=199960 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312605.89 rows=4999010 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.63 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.44 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.64 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 22 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=133069.40..133069.43 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Finalize Aggregate  (cost=46820.92..46820.93 rows=1 width=32)
           ->  Gather  (cost=46820.49..46820.90 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.49..45820.50 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.63 rows=11942 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86248.47..86456.64 rows=7570 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=86248.47..86267.39 rows=7570 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..85760.73 rows=7570 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75321.53 rows=17500 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.18 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

