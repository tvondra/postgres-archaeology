query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191567.70..191567.91 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191567.70..191568.94 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=191567.70..191567.76 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=191564.58..191567.15 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=190564.58..190564.75 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.38 rows=1481255 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=69511.54..69511.54 rows=1 width=192)
   ->  Sort  (cost=69511.54..69511.54 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=44372.64..69511.53 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=1039 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Sort  (cost=44372.20..44772.20 rows=160000 width=172)
                     Sort Key: partsupp.ps_partkey
                     ->  Hash Join  (cost=408.03..30542.03 rows=160000 width=172)
                           Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..25534.00 rows=800000 width=14)
                           ->  Hash  (cost=383.03..383.03 rows=2000 width=166)
                                 ->  Hash Join  (cost=2.53..383.03 rows=2000 width=166)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=144)
                                       ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                             ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                   Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=18.52..18.53 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.52 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.41 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.74 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(38 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=267457.41..267457.44 rows=10 width=44)
   ->  Sort  (cost=267457.41..268246.02 rows=315444 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=251177.46..260640.78 rows=315444 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=251177.46..251966.07 rows=315444 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Gather  (cost=6849.68..222366.35 rows=315444 width=24)
                           Workers Planned: 3
                           ->  Nested Loop  (cost=5849.68..189821.95 rows=101756 width=24)
                                 ->  Hash Join  (cost=5849.25..39364.98 rows=46663 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..32179.39 rows=231924 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=5472.00..5472.00 rows=30180 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..5472.00 rows=30180 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.20 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 4 run 1
SET
SET
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=84227.78..84227.82 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=84227.78..84227.95 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=84227.78..84227.82 rows=15 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=84225.94..84227.49 rows=15 width=24)
                     Workers Planned: 3
                     ->  Partial HashAggregate  (cost=83225.94..83225.99 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=0.43..83137.97 rows=17595 width=16)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=17595 width=20)
                                       Filter: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.22 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=89272.22..89272.22 rows=1 width=58)
   ->  Sort  (cost=89272.22..89272.28 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=89271.03..89272.10 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=89271.03..89271.22 rows=75 width=58)
                     Sort Key: nation.n_name
                     ->  Gather  (cost=89231.83..89268.70 rows=75 width=58)
                           Workers Planned: 3
                           ->  Partial GroupAggregate  (cost=88231.83..88261.20 rows=25 width=58)
                                 Group Key: nation.n_name
                                 ->  Sort  (cost=88231.83..88237.64 rows=2324 width=38)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=6810.46..88101.90 rows=2324 width=38)
                                             Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                             ->  Nested Loop  (cost=6337.46..87169.87 rows=58105 width=50)
                                                   ->  Hash Join  (cost=6337.03..40143.63 rows=14523 width=38)
                                                         Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=72614 width=8)
                                                               Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Hash  (cost=5962.03..5962.03 rows=30000 width=38)
                                                               ->  Hash Join  (cost=2.53..5962.03 rows=30000 width=38)
                                                                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                                     ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                                     ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                                           ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                                                 Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                                 ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                             Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.20 rows=4 width=20)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                             ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=108560.33..108560.34 rows=1 width=32)
   ->  Aggregate  (cost=108560.33..108560.34 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=21177.18..107968.95 rows=118276 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21147.61 rows=118276 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=166544.79..166544.83 rows=1 width=92)
   ->  GroupAggregate  (cost=166544.79..166756.12 rows=6038 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=166544.79..166559.89 rows=6038 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Gather  (cost=7311.23..166165.61 rows=6038 width=72)
                     Workers Planned: 3
                     ->  Hash Join  (cost=6311.23..164541.36 rows=1948 width=72)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                           ->  Nested Loop  (cost=5931.33..163901.33 rows=46803 width=46)
                                 ->  Hash Join  (cost=5930.90..39102.23 rows=38710 width=30)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=8)
                                       ->  Hash  (cost=5780.90..5780.90 rows=12000 width=30)
                                             ->  Hash Join  (cost=1.40..5780.90 rows=12000 width=30)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                               Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.21 rows=1 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=369.90..369.90 rows=800 width=30)
                                 ->  Hash Join  (cost=1.40..369.90 rows=800 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(31 rows)

query 8 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=81087.39..81087.44 rows=1 width=40)
   ->  GroupAggregate  (cost=81087.39..81196.38 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=81087.39..81093.49 rows=2438 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Gather  (cost=51115.17..80950.24 rows=2438 width=46)
                     Workers Planned: 2
                     ->  Hash Join  (cost=50115.17..79699.33 rows=1016 width=46)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Hash Join  (cost=50113.61..79678.71 rows=1016 width=20)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Hash Join  (cost=49665.61..79216.74 rows=1016 width=20)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Nested Loop  (cost=0.43..29478.91 rows=16666 width=20)
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=555 width=4)
                                                   Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..43.55 rows=30 width=24)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Hash  (cost=48522.33..48522.33 rows=91428 width=8)
                                             ->  Hash Join  (cost=12905.65..48522.33 rows=91428 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Bitmap Heap Scan on orders  (cost=6568.62..39556.74 rows=457141 width=12)
                                                         Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6454.34 rows=457141 width=0)
                                                               Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Hash  (cost=5962.03..5962.03 rows=30000 width=4)
                                                         ->  Hash Join  (cost=2.53..5962.03 rows=30000 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                               ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(40 rows)

query 9 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=198629.61..198629.61 rows=1 width=66)
   ->  Sort  (cost=198629.61..198779.98 rows=60150 width=66)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
         ->  Finalize HashAggregate  (cost=197276.23..198328.86 rows=60150 width=66)
               Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Gather  (cost=182990.61..196073.23 rows=120300 width=66)
                     Workers Planned: 2
                     ->  Partial HashAggregate  (cost=181990.61..183043.23 rows=60150 width=66)
                           Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
                           ->  Hash Join  (cost=66328.92..178896.54 rows=176804 width=57)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=587.92..100305.87 rows=176804 width=53)
                                       Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                       ->  Hash Join  (cost=587.49..25163.16 rows=23568 width=48)
                                             Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                             ->  Nested Loop  (cost=0.42..24252.04 rows=23568 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=5892 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..3.20 rows=4 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Hash  (cost=462.06..462.06 rows=10000 width=30)
                                                   ->  Hash Join  (cost=1.56..462.06 rows=10000 width=30)
                                                         Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                                         ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..3.18 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Hash  (cost=41131.00..41131.00 rows=1500000 width=8)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
(30 rows)

query 10 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=112509.28..112509.33 rows=20 width=202)
   ->  Sort  (cost=112509.28..112655.39 rows=58445 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=110223.52..110954.08 rows=58445 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=7973.99..109492.96 rows=58445 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=6973.99..102648.46 rows=18853 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=6972.43..102387.66 rows=18853 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=0.43..95156.44 rows=18853 width=16)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=19116 width=8)
                                             Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.22 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                       ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(21 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22743.58..22743.58 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=10891.78..10891.80 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..10651.78 rows=32000 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..25.25 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=11851.78..11931.78 rows=32000 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=11211.78..11691.78 rows=32000 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..10651.78 rows=32000 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..25.25 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                                                          QUERY PLAN                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=170700.00..170700.05 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=170700.00..170700.35 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=170700.00..170700.07 rows=28 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Gather  (cost=170550.59..170699.32 rows=28 width=27)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=169550.59..169696.52 rows=7 width=27)
                           Group Key: lineitem.l_shipmode
                           ->  Sort  (cost=169550.59..169568.83 rows=7293 width=27)
                                 Sort Key: lineitem.l_shipmode
                                 ->  Nested Loop  (cost=0.43..169082.67 rows=7293 width=27)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..146317.89 rows=7293 width=15)
                                             Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..3.11 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(16 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=81221.56..81221.57 rows=1 width=16)
   ->  Sort  (cost=81221.56..81222.06 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=81218.56..81220.56 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=77468.56..78968.56 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..70044.26 rows=1484861 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484861 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=77973.12..77973.13 rows=1 width=32)
   ->  Aggregate  (cost=77973.12..77973.13 rows=1 width=32)
         ->  Hash Join  (cost=9808.08..76654.82 rows=75331 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1209.08..67020.02 rows=75331 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1190.24 rows=75331 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=246782.11..246782.17 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122201.66..122201.67 rows=1 width=32)
           ->  HashAggregate  (cost=121952.58..122077.12 rows=9963 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3669.78..119663.46 rows=228912 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3612.55 rows=228912 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=124580.44..125173.39 rows=9963 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=124580.16..124605.06 rows=9963 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=123669.42..123918.50 rows=9963 width=36)
                     ->  HashAggregate  (cost=123669.42..123818.87 rows=9963 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3669.78..119663.46 rows=228912 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3612.55 rows=228912 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=34736.13..34736.13 rows=1 width=44)
   ->  Sort  (cost=34736.13..34775.70 rows=15826 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=33773.64..34657.00 rows=15826 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=33773.64..33918.66 rows=58008 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9809.98..29184.06 rows=58008 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17642.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29004 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29004 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=507348.06..507348.07 rows=1 width=32)
   ->  Aggregate  (cost=507348.06..507348.07 rows=1 width=32)
         ->  Merge Join  (cost=493936.03..507342.94 rows=2049 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=482520.65..493356.75 rows=197020 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=482520.65..484490.85 rows=788080 width=36)
                           Sort Key: lineitem_1.l_partkey
                           ->  Gather  (cost=298959.53..391482.91 rows=788080 width=36)
                                 Workers Planned: 4
                                 ->  Partial GroupAggregate  (cost=297959.53..311674.91 rows=197020 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Sort  (cost=297959.53..301710.41 rows=1500351 width=9)
                                             Sort Key: lineitem_1.l_partkey
                                             ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..127563.51 rows=1500351 width=9)
               ->  Sort  (cost=11415.38..11430.98 rows=6241 width=21)
                     Sort Key: lineitem.l_partkey
                     ->  Gather  (cost=1000.43..11021.96 rows=6241 width=21)
                           Workers Planned: 2
                           ->  Nested Loop  (cost=0.43..9397.86 rows=2600 width=21)
                                 ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=87 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.24 rows=30 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(25 rows)

query 18 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1258816.31..1258816.56 rows=100 width=71)
   ->  Sort  (cost=1258816.31..1266318.07 rows=3000702 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1076615.84..1144131.64 rows=3000702 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=1076615.84..1084117.60 rows=3000702 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=7007.20..694445.79 rows=3000702 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=35.20..646214.14 rows=3000702 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Semi Join  (cost=0.86..372093.58 rows=750000 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..54805.93 rows=1500000 width=20)
                                       ->  Materialize  (cost=0.43..294783.27 rows=1500351 width=4)
                                             ->  GroupAggregate  (cost=0.43..276028.88 rows=1500351 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227267.48 rows=6001403 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..227267.48 rows=6001403 width=9)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 19 run 1
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

 Limit  (cost=18067.53..18067.54 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18067.53..18067.54 rows=1 width=32)
         ->  Gather  (cost=18067.31..18067.52 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17067.31..17067.32 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17066.96 rows=46 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=202 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.65 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=280685.60..280685.61 rows=1 width=51)
   ->  Sort  (cost=280685.60..280686.10 rows=200 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=256258.68..280684.60 rows=200 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=256258.68..280229.29 rows=1 width=8)
                     ->  Merge Join  (cost=256258.68..280229.29 rows=1 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=243369.91..259959.46 rows=488029 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=243369.91..245687.19 rows=926911 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=14856.27..141319.94 rows=926911 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14624.54 rows=926911 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=12888.76..12908.96 rows=8080 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=1000.42..12364.37 rows=8080 width=16)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..2.94 rows=4 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(31 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=203122.89..203122.89 rows=1 width=34)
   ->  Sort  (cost=203122.89..203122.89 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=203122.86..203122.88 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=203122.86..203122.86 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=1236.87..203122.85 rows=1 width=26)
                           ->  Nested Loop  (cost=1236.44..203116.48 rows=1 width=34)
                                 ->  Gather  (cost=1236.01..203113.16 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=236.01..202113.06 rows=1 width=38)
                                             ->  Hash Join  (cost=235.58..133625.45 rows=20005 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131314.38 rows=500117 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                         ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..3.38 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.31 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..3.39 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 22 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14817.18..14817.20 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Finalize Aggregate  (cost=6242.82..6242.83 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1987 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8574.35..8594.97 rows=750 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8574.35..8576.22 rows=750 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8538.53 rows=750 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.96 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

