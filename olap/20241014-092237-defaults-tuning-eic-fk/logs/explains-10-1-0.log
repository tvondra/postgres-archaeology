query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=424416.66..424416.66 rows=1 width=236)
   ->  Sort  (cost=424416.66..424416.67 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=424416.46..424416.62 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187578.10 rows=5920959 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=65641.98..65641.99 rows=1 width=192)
   ->  Sort  (cost=65641.98..65641.99 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=44372.60..65641.97 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=781 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Sort  (cost=44372.18..44772.18 rows=160000 width=172)
                     Sort Key: partsupp.ps_partkey
                     ->  Hash Join  (cost=408.01..30542.01 rows=160000 width=172)
                           Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..25534.00 rows=800000 width=14)
                           ->  Hash  (cost=383.01..383.01 rows=2000 width=166)
                                 ->  Hash Join  (cost=2.51..383.01 rows=2000 width=166)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=144)
                                       ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                             ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                   Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(38 rows)

query 3 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=301403.25..301403.28 rows=10 width=44)
   ->  Sort  (cost=301403.25..302191.81 rows=315425 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=285124.28..294587.03 rows=315425 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=285124.28..285912.84 rows=315425 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=53321.94..256315.04 rows=315425 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..187578.10 rows=3269736 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=51513.16..51513.16 rows=144702 width=12)
                                 ->  Hash Join  (cost=14435.37..51513.16 rows=144702 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=8588.50..43766.39 rows=723751 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8407.56 rows=723751 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=5472.00..5472.00 rows=29990 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..5472.00 rows=29990 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 4 run 1
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=188724.78..188724.78 rows=1 width=24)
   ->  Sort  (cost=188724.78..188724.79 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=188724.70..188724.75 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=817.36..188440.56 rows=56829 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=816.92..27800.36 rows=56829 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..802.72 rows=56829 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.22 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=195474.96..195474.96 rows=1 width=58)
   ->  Sort  (cost=195474.96..195475.02 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=195380.27..195474.83 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=195380.27..195399.12 rows=7540 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=10198.10..194894.68 rows=7540 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=9725.10..193431.16 rows=188669 width=50)
                                 ->  Hash Join  (cost=9724.67..40748.09 rows=47156 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=3387.66..33055.35 rows=235779 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..3328.72 rows=235779 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=5962.01..5962.01 rows=30000 width=38)
                                             ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.20 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=109743.90..109743.91 rows=1 width=32)
   ->  Aggregate  (cost=109743.90..109743.91 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=21421.76..109140.82 rows=120616 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21391.61 rows=120616 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=232617.96..232618.00 rows=1 width=92)
   ->  GroupAggregate  (cost=232617.96..232825.30 rows=5924 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=232617.96..232632.77 rows=5924 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=84075.67..232246.76 rows=5924 width=72)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=28910.77..176290.73 rows=142349 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=28545.67..167822.84 rows=1781145 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..28100.38 rows=1781145 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=355.10..355.10 rows=800 width=30)
                                 ->  Hash Join  (cost=1.40..355.10 rows=800 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=53664.90..53664.90 rows=120000 width=30)
                           ->  Hash Join  (cost=5708.90..53664.90 rows=120000 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                 ->  Hash  (cost=5558.90..5558.90 rows=12000 width=30)
                                       ->  Hash Join  (cost=1.40..5558.90 rows=12000 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(32 rows)

query 8 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=116008.78..116008.82 rows=1 width=40)
   ->  GroupAggregate  (cost=116008.78..116116.15 rows=2386 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=116008.78..116014.74 rows=2386 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Nested Loop  (cost=49766.46..115874.92 rows=2386 width=46)
                     Join Filter: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=49766.46..114999.81 rows=2386 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=49318.46..114545.54 rows=2389 width=20)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.43..65053.63 rows=40000 width=20)
                                       ->  Seq Scan on part  (cost=0.00..6599.00 rows=1333 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..43.55 rows=30 width=24)
                                             Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=48198.28..48198.28 rows=89580 width=8)
                                       ->  Hash Join  (cost=12773.39..48198.28 rows=89580 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=6436.38..39285.85 rows=447898 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6324.41 rows=447898 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=5962.01..5962.01 rows=30000 width=4)
                                                   ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(38 rows)

query 9 run 1
SET
SET
SET
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=249367.77..249367.77 rows=1 width=66)
   ->  Sort  (cost=249367.77..249518.08 rows=60125 width=66)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
         ->  HashAggregate  (cost=248014.96..249067.15 rows=60125 width=66)
               Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Hash Join  (cost=72916.26..242715.96 rows=302800 width=57)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=72914.70..240270.80 rows=302800 width=31)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Nested Loop  (cost=7173.69..163734.95 rows=302800 width=31)
                                 Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                 ->  Hash Join  (cost=7173.26..34913.41 rows=40404 width=26)
                                       Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                       ->  Hash Join  (cost=6725.26..34359.31 rows=40404 width=18)
                                             Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                             ->  Seq Scan on partsupp  (cost=0.00..25534.00 rows=800000 width=14)
                                             ->  Hash  (cost=6599.00..6599.00 rows=10101 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..6599.00 rows=10101 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..3.18 rows=1 width=29)
                                       Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                           ->  Hash  (cost=41131.00..41131.00 rows=1500000 width=8)
                                 ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 10 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=209119.23..209119.28 rows=20 width=202)
   ->  Sort  (cost=209119.23..209249.63 rows=52160 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=207079.27..207731.27 rows=52160 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Hash Join  (cost=7736.99..206427.27 rows=52160 width=182)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=7735.43..206265.58 rows=52160 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Nested Loop  (cost=763.43..199156.66 rows=52160 width=16)
                                 ->  Bitmap Heap Scan on orders  (cost=763.00..27689.46 rows=53031 width=8)
                                       Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..749.74 rows=53031 width=0)
                                             Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..3.22 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(21 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22744.76..22744.77 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=10892.38..10892.39 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..10652.37 rows=32000 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..25.25 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=11852.37..11932.37 rows=32000 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=11212.37..11692.37 rows=32000 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..10652.37 rows=32000 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..25.25 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=310787.87..310869.22 rows=1 width=27)
   ->  GroupAggregate  (cost=310787.87..311357.30 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=310787.87..310859.04 rows=28468 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Merge Join  (cost=249702.89..308681.66 rows=28468 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..54805.93 rows=1500000 width=20)
                     ->  Sort  (cost=249698.79..249769.96 rows=28468 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..247592.58 rows=28468 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(12 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64702.57..64702.58 rows=1 width=16)
   ->  Sort  (cost=64702.57..64703.07 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64699.57..64701.57 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60949.57..62449.57 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53525.28 rows=1484858 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484858 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=75947.13..75947.14 rows=1 width=32)
   ->  Aggregate  (cost=75947.13..75947.14 rows=1 width=32)
         ->  Hash Join  (cost=9775.80..74663.45 rows=73353 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1176.80..65871.90 rows=73353 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1158.46 rows=73353 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=244185.15..244185.21 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=120933.75..120933.76 rows=1 width=32)
           ->  HashAggregate  (cost=120683.50..120808.62 rows=10010 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3532.00..118480.51 rows=220299 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3476.92 rows=220299 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=123251.40..123845.05 rows=10010 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=123251.11..123276.14 rows=10010 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=122335.74..122585.99 rows=10010 width=36)
                     ->  HashAggregate  (cost=122335.74..122485.89 rows=10010 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3532.00..118480.51 rows=220299 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3476.92 rows=220299 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=33780.71..33780.71 rows=1 width=44)
   ->  Sort  (cost=33780.71..33820.49 rows=15910 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=32808.24..33701.16 rows=15910 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=32808.24..32955.00 rows=58706 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9814.34..28158.36 rows=58706 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17642.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29353 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29353 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=982960.40..982960.41 rows=1 width=32)
   ->  Aggregate  (cost=982960.40..982960.41 rows=1 width=32)
         ->  Merge Join  (cost=914178.73..982955.45 rows=1978 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  GroupAggregate  (cost=914177.88..962169.76 rows=198735 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=914177.88..929181.50 rows=6001448 width=9)
                           Sort Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..172574.48 rows=6001448 width=9)
               ->  Materialize  (cost=0.85..18212.41 rows=5971 width=21)
                     ->  Nested Loop  (cost=0.85..18197.48 rows=5971 width=21)
                           ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=199 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.29 rows=30 width=17)
                                 Index Cond: (l_partkey = part.p_partkey)
(16 rows)

query 18 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1856139.36..1856139.61 rows=100 width=71)
   ->  Sort  (cost=1856139.36..1871146.60 rows=6002896 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1491647.83..1626712.99 rows=6002896 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=1491647.83..1506655.07 rows=6002896 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=6996.60..697094.97 rows=6002896 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=24.60..674364.92 rows=6002896 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Join  (cost=0.86..368343.99 rows=1500362 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..54805.93 rows=1500000 width=20)
                                       ->  GroupAggregate  (cost=0.43..276029.92 rows=1500362 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227268.15 rows=6001448 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..227268.15 rows=6001448 width=9)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(21 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=35760.44..35760.45 rows=1 width=32)
   ->  Aggregate  (cost=35760.44..35760.45 rows=1 width=32)
         ->  Nested Loop  (cost=0.43..35759.57 rows=115 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=497 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.59 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=274554.52..274554.53 rows=1 width=51)
   ->  Sort  (cost=274554.52..274554.53 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=237196.16..274554.51 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=237196.16..274099.20 rows=1 width=8)
                     ->  Merge Join  (cost=237196.16..274099.20 rows=1 width=8)
                           Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                           Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity)))))
                           ->  GroupAggregate  (cost=237195.32..253224.83 rows=478476 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=237195.32..239408.41 rows=885237 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=14187.61..140026.17 rows=885237 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..13966.30 rows=885237 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Materialize  (cost=0.84..14468.32 rows=8080 width=16)
                                 ->  Nested Loop  (cost=0.84..14448.12 rows=8080 width=16)
                                       ->  Index Scan using part_pkey on part  (cost=0.42..8426.42 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..2.94 rows=4 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(28 rows)

query 21 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=390710.72..390710.73 rows=1 width=34)
   ->  Sort  (cost=390710.72..390710.73 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=390710.69..390710.71 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=390710.69..390710.70 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=57113.82..390710.68 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=57113.38..390707.28 rows=1 width=34)
                                 Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                 ->  Hash Join  (cost=57112.95..257309.09 rows=38965 width=38)
                                       Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                       ->  Hash Join  (cost=235.58..196114.88 rows=79939 width=34)
                                             Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                             ->  Seq Scan on lineitem l1  (cost=0.00..187578.10 rows=2000483 width=8)
                                                   Filter: (l_receiptdate > l_commitdate)
                                             ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                   ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                               Filter: (n_name = 'PERU'::bpchar)
                                                         ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                               Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                     Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Hash  (cost=44881.00..44881.00 rows=731150 width=4)
                                             ->  Seq Scan on orders  (cost=0.00..44881.00 rows=731150 width=4)
                                                   Filter: (o_orderstatus = 'F'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..3.37 rows=4 width=8)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..3.39 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(32 rows)

query 22 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16122.81..16122.84 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7546.45..7546.46 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4778 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8576.36..8596.71 rows=740 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8576.36..8578.21 rows=740 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8541.09 rows=740 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.96 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

