query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3948734.24..3948734.25 rows=1 width=236)
   ->  Sort  (cost=3948734.24..3948734.26 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3948734.05..3948734.21 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874962.70 rows=59250610 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1095075.71..1095075.71 rows=1 width=192)
   ->  Sort  (cost=1095075.71..1095075.71 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=558192.09..1095075.70 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89210.65 rows=8214 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=558191.66..566194.79 rows=1600627 width=172)
                     ->  Sort  (cost=558191.66..562193.23 rows=1600627 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.51..305319.90 rows=1600627 width=172)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255253.36 rows=8003136 width=14)
                                 ->  Hash  (cost=3798.51..3798.51 rows=20000 width=166)
                                       ->  Hash Join  (cost=2.51..3798.51 rows=20000 width=166)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(40 rows)

query 3 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3183167.90..3183167.92 rows=10 width=44)
   ->  Sort  (cost=3183167.90..3190952.53 rows=3113854 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3040464.98..3115878.63 rows=3113854 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 16
               ->  Hash Join  (cost=519405.33..2876744.38 rows=3113854 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874962.70 rows=32873016 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=494706.73..494706.73 rows=1420848 width=12)
                           ->  Hash Join  (cost=123831.53..494706.73 rows=1420848 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=65456.77..417309.18 rows=7246753 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..63645.08 rows=7246753 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54698.26..54698.26 rows=294120 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54698.26 rows=294120 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 4 run 1
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2043385.86..2043385.86 rows=1 width=24)
   ->  Sort  (cost=2043385.86..2043385.87 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=2043385.78..2043385.83 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=6390.28..2040616.54 rows=553849 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=6389.72..275967.40 rows=553979 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6251.23 rows=553979 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.61 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2069273.48..2069273.48 rows=1 width=58)
   ->  Sort  (cost=2069273.48..2069273.54 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2068366.93..2069273.36 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=2068366.93..2068548.15 rows=72489 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=94175.82..2062515.08 rows=72489 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=89454.82..2048280.96 rows=1812021 width=50)
                                 ->  Hash Join  (cost=89454.25..397732.57 rows=453112 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=26127.90..321379.27 rows=2265558 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25561.52 rows=2265558 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59576.10..59576.10 rows=300020 width=38)
                                             ->  Hash Join  (cost=2.51..59576.10 rows=300020 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50948.01 rows=1500101 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..3.60 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1974326.73..1974326.74 rows=1 width=32)
   ->  Aggregate  (cost=1974326.73..1974326.74 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=212351.00..1968312.85 rows=1202775 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..212050.30 rows=1202775 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2719380.36..2719380.48 rows=1 width=116)
   ->  GroupAggregate  (cost=2719380.36..2720605.62 rows=10012 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2719380.36..2719533.94 rows=61433 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563404.93..2714494.37 rows=61433 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2112513.70 rows=1476179 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024926.64 rows=18452232 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536571.62..536571.62 rows=1199993 width=30)
                           ->  Hash Join  (cost=57054.82..536571.62 rows=1199993 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411267.18 rows=14999918 width=8)
                                 ->  Hash  (cost=55554.72..55554.72 rows=120008 width=30)
                                       ->  Hash Join  (cost=1.40..55554.72 rows=120008 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50948.01 rows=1500101 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 8 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1248619.70..1248619.94 rows=1 width=64)
   ->  GroupAggregate  (cost=1248619.70..1249209.15 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=1248619.70..1248679.85 rows=24059 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=897874.58..1246868.89 rows=24059 width=70)
                     ->  Hash Join  (cost=897874.43..1246197.77 rows=24059 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=893403.43..1241663.62 rows=24059 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=830077.09..1177645.58 rows=120294 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=52340.43..381686.47 rows=4538536 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..51205.79 rows=4538536 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=772767.01..772767.01 rows=397572 width=20)
                                             ->  Nested Loop  (cost=0.44..772767.01 rows=397572 width=20)
                                                   ->  Seq Scan on part  (cost=0.00..65979.89 rows=13255 width=4)
                                                         Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.98 rows=34 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59576.10..59576.10 rows=300020 width=4)
                                       ->  Hash Join  (cost=2.51..59576.10 rows=300020 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50948.01 rows=1500101 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.91 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 9 run 1
SET
SET
SET
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2879887.91..2879887.91 rows=1 width=90)
   ->  Sort  (cost=2879887.91..2880038.29 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=2878684.91..2879587.16 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=729328.13..2815063.70 rows=3635498 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=729326.57..2794812.41 rows=3635498 width=31)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Nested Loop  (cost=71966.41..2019609.07 rows=3635498 width=31)
                                 Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                 ->  Hash Join  (cost=71965.97..349500.90 rows=485040 width=26)
                                       Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                       ->  Hash Join  (cost=67494.97..343756.61 rows=485040 width=18)
                                             Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                             ->  Seq Scan on partsupp  (cost=0.00..255253.36 rows=8003136 width=14)
                                             ->  Hash  (cost=65979.89..65979.89 rows=121207 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..65979.89 rows=121207 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                       ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..3.43 rows=1 width=29)
                                       Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                           ->  Hash  (cost=411267.18..411267.18 rows=14999918 width=8)
                                 ->  Seq Scan on orders  (cost=0.00..411267.18 rows=14999918 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2397760.63..2397760.68 rows=20 width=201)
   ->  Sort  (cost=2397760.63..2399185.41 rows=569913 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2251825.53..2382595.45 rows=569913 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=2251825.53..2368347.62 rows=569913 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=2251825.36..2342701.54 rows=569913 width=181)
                           ->  Merge Join  (cost=2251825.21..2328746.54 rows=569913 width=159)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..64623.44 rows=1500101 width=147)
                                 ->  Sort  (cost=2251824.42..2253249.20 rows=569913 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=284229.11..2197339.65 rows=569913 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Seq Scan on lineitem  (cost=0.00..1874962.70 rows=14532506 width=16)
                                                   Filter: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=276876.07..276876.07 rows=588243 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=6784.43..276876.07 rows=588243 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6637.37 rows=588243 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..0.91 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
(28 rows)

query 11 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=606711.33..606711.33 rows=1 width=36)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=293178.77..293178.78 rows=1 width=32)
           ->  Hash Join  (cost=2311.46..290777.83 rows=320125 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255253.36 rows=8003136 width=14)
                 ->  Hash  (cost=2261.46..2261.46 rows=4000 width=4)
                       ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=37.29..2220.15 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=313532.55..313799.32 rows=106708 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=305070.91..312999.01 rows=106708 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2311.46..290777.83 rows=320125 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255253.36 rows=8003136 width=18)
                     ->  Hash  (cost=2261.46..2261.46 rows=4000 width=4)
                           ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
(31 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3031221.74..3032045.59 rows=1 width=27)
   ->  GroupAggregate  (cost=3031221.74..3036988.67 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=3031221.74..3031942.60 rows=288343 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Hash Join  (cost=2478422.75..3005072.74 rows=288343 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411267.18 rows=14999918 width=20)
                     ->  Hash  (cost=2474818.46..2474818.46 rows=288343 width=15)
                           ->  Seq Scan on lineitem  (cost=0.00..2474818.46 rows=288343 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1344961.16..1344961.16 rows=1 width=16)
   ->  Sort  (cost=1344961.16..1344961.66 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1344958.16..1344960.16 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1193819.89..1322456.64 rows=1500101 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=53287.21..659731.90 rows=14545375 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448766.97 rows=14545375 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=28675.94..28675.94 rows=1500101 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28675.94 rows=1500101 width=4)
(14 rows)

query 14 run 1
SET
SET
SET
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1224877.03..1224877.04 rows=1 width=32)
   ->  Aggregate  (cost=1224877.03..1224877.04 rows=1 width=32)
         ->  Hash Join  (cost=99651.56..1212231.33 rows=722611 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..1089953.48 rows=722611 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.11..60980.11 rows=1999911 width=25)
                     ->  Seq Scan on part  (cost=0.00..60980.11 rows=1999911 width=25)
(8 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3775050.16..3775059.02 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1888007.51..1888007.52 rows=1 width=32)
           ->  HashAggregate  (cost=1885526.69..1886767.10 rows=99233 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=38139.31..1861740.60 rows=2378609 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..37544.65 rows=2378609 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1887042.64..1891435.58 rows=496 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=71)
         ->  Sort  (cost=1887042.35..1887043.59 rows=496 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1885526.69..1887020.14 rows=496 width=36)
                     ->  HashAggregate  (cost=1885526.69..1887015.18 rows=496 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=38139.31..1861740.60 rows=2378609 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..37544.65 rows=2378609 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=359603.74..359603.74 rows=1 width=44)
   ->  Sort  (cost=359603.74..359989.60 rows=154344 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=349789.23..358832.02 rows=154344 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=349789.23..351289.10 rows=599948 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98198.27..281662.79 rows=599948 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176431.84 rows=4001568 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90978.77..90978.77 rows=299843 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90978.77 rows=299843 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=4887092.18..4887092.19 rows=1 width=32)
   ->  Aggregate  (cost=4887092.18..4887092.19 rows=1 width=32)
         ->  Nested Loop  (cost=4174339.00..4887046.96 rows=18086 width=8)
               Join Filter: (lineitem.l_partkey = part.p_partkey)
               ->  Hash Join  (cost=4174338.56..4791057.46 rows=1809 width=40)
                     Hash Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=4103333.12..4715446.57 rows=1754454 width=36)
                           Group Key: lineitem_1.l_partkey
                           Planned Partitions: 16
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..1724998.76 rows=59985576 width=9)
                     ->  Hash  (cost=70979.66..70979.66 rows=2062 width=4)
                           ->  Seq Scan on part  (cost=0.00..70979.66 rows=2062 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.92 rows=11 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(16 rows)

query 18 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8725209.82..8725210.07 rows=100 width=71)
   ->  Sort  (cost=8725209.82..8775186.06 rows=19990494 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7359910.94..7961187.51 rows=19990494 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 128
               ->  Hash Join  (cost=78899.30..6283079.25 rows=19990494 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=410.03..5870016.78 rows=19990494 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3340286.47 rows=4998798 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547964.21 rows=14999918 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692337.49 rows=4998798 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167463.70 rows=59985576 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167463.70 rows=59985576 width=9)
                     ->  Hash  (cost=50948.01..50948.01 rows=1500101 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50948.01 rows=1500101 width=23)
(20 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=395385.75..395385.76 rows=1 width=32)
   ->  Aggregate  (cost=395385.75..395385.76 rows=1 width=32)
         ->  Nested Loop  (cost=0.44..395377.28 rows=1129 width=12)
               ->  Seq Scan on part  (cost=0.00..125977.22 rows=4890 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..55.08 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2728544.36..2728544.37 rows=1 width=51)
   ->  Sort  (cost=2728544.36..2728544.37 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2524822.16..2728544.35 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2524822.16..2723892.05 rows=3 width=8)
                     ->  Hash Join  (cost=2524822.16..2723892.03 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2381863.26..2544479.28 rows=4860496 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Bitmap Heap Scan on lineitem  (cost=147288.68..1994681.05 rows=9186158 width=13)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..144992.15 rows=9186158 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=141746.31..141746.31 rows=80839 width=16)
                                 ->  Nested Loop  (cost=0.43..141746.31 rows=80839 width=16)
                                       ->  Seq Scan on part  (cost=0.00..65979.89 rows=20201 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.57 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(27 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3771453.43..3771453.44 rows=1 width=34)
   ->  Sort  (cost=3771453.43..3771453.44 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=3771453.40..3771453.42 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=3771453.40..3771453.41 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=1976501.94..3771453.39 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop Anti Join  (cost=1976501.37..3771449.75 rows=1 width=38)
                                 ->  Hash Join  (cost=1976500.81..2519936.86 rows=389773 width=38)
                                       Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..448766.97 rows=7309960 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                                       ->  Hash  (cost=1960254.21..1960254.21 rows=799808 width=34)
                                             ->  Hash Join  (cost=2311.46..1960254.21 rows=799808 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Seq Scan on lineitem l1  (cost=0.00..1874962.70 rows=19995192 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2261.46..2261.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.64 rows=1 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.62 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 22 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161813.22..161813.25 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75444.14..75444.15 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75324.65 rows=47794 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86369.07..86562.39 rows=7030 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86369.07..86386.64 rows=7030 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..85919.88 rows=7030 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75324.65 rows=17501 width=26)
                           Filter: ((c_acctbal > $0) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.16 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

