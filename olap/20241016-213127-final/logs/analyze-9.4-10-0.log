query 1 run 1
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4245826.43..4245826.43 rows=1 width=25) (actual time=102519.771..102519.771 rows=1 loops=1)
   ->  Sort  (cost=4245826.43..4245826.44 rows=6 width=25) (actual time=102519.769..102519.769 rows=1 loops=1)
         Sort Key: l_returnflag, l_linestatus
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=4245826.23..4245826.40 rows=6 width=25) (actual time=102519.729..102519.735 rows=4 loops=1)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1875033.95 rows=59269807 width=25) (actual time=0.542..11909.331 rows=59284448 loops=1)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
                     Rows Removed by Filter: 701604
 Planning time: 19.184 ms
 Execution time: 102519.825 ms
(11 rows)

SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4245826.43..4245826.43 rows=1 width=25) (actual time=100525.756..100525.756 rows=1 loops=1)
   ->  Sort  (cost=4245826.43..4245826.44 rows=6 width=25) (actual time=100525.756..100525.756 rows=1 loops=1)
         Sort Key: l_returnflag, l_linestatus
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=4245826.23..4245826.40 rows=6 width=25) (actual time=100525.724..100525.729 rows=4 loops=1)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1875033.95 rows=59269807 width=25) (actual time=0.020..10197.744 rows=59284448 loops=1)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
                     Rows Removed by Filter: 701604
 Planning time: 0.703 ms
 Execution time: 100525.806 ms
(11 rows)

query 2 run 1
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=942516.87..942516.87 rows=1 width=192) (actual time=4908.848..4908.857 rows=100 loops=1)
   ->  Sort  (cost=942516.87..942516.87 rows=1 width=192) (actual time=4908.848..4908.854 rows=100 loops=1)
         Sort Key: supplier.s_acctbal, nation.n_name, supplier.s_name, part.p_partkey
         Sort Method: top-N heapsort  Memory: 51kB
         ->  Merge Join  (cost=491707.11..942516.86 rows=1 width=192) (actual time=3918.526..4906.373 rows=4737 loops=1)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               Rows Removed by Join Filter: 1661
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.55..54701.09 rows=8838 width=30) (actual time=1.100..196.951 rows=8046 loops=1)
                     Index Cond: (p_size = 16)
                     Filter: ((p_type)::text ~~ '%NICKEL'::text)
                     Rows Removed by Filter: 32185
                     Heap Fetches: 0
               ->  Materialize  (cost=491700.37..499633.26 rows=1586578 width=172) (actual time=3915.468..4311.000 rows=1603828 loops=1)
                     ->  Sort  (cost=491700.37..495666.81 rows=1586578 width=172) (actual time=3915.466..4175.694 rows=1603828 loops=1)
                           Sort Key: partsupp.ps_partkey
                           Sort Method: external sort  Disk: 293160kB
                           ->  Hash Join  (cost=4048.96..231465.27 rows=1586578 width=172) (actual time=41.265..2695.262 rows=1604080 loops=1)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181562.85 rows=7996828 width=14) (actual time=0.449..977.196 rows=8000000 loops=1)
                                       Heap Fetches: 0
                                 ->  Hash  (cost=3798.53..3798.53 rows=20000 width=166) (actual time=40.798..40.798 rows=20051 loops=1)
                                       Buckets: 2048  Batches: 1  Memory Usage: 3955kB
                                       ->  Hash Join  (cost=2.53..3798.53 rows=20000 width=166) (actual time=0.032..35.964 rows=20051 loops=1)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144) (actual time=0.004..24.570 rows=100000 loops=1)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30) (actual time=0.024..0.024 rows=5 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30) (actual time=0.013..0.022 rows=5 loops=1)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34) (actual time=0.001..0.003 rows=25 loops=1)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.008..0.008 rows=1 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.005..0.007 rows=1 loops=1)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                                                     Rows Removed by Filter: 4
               SubPlan 1
                 ->  Aggregate  (cost=54.78..54.79 rows=1 width=6) (actual time=0.034..0.034 rows=1 loops=6398)
                       ->  Nested Loop  (cost=2.54..54.77 rows=4 width=6) (actual time=0.017..0.033 rows=2 loops=6398)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             Rows Removed by Join Filter: 2
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=6398)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                                   Rows Removed by Filter: 4
                             ->  Hash Join  (cost=2.54..53.47 rows=19 width=10) (actual time=0.008..0.031 rows=4 loops=6398)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.97..51.64 rows=19 width=10) (actual time=0.007..0.029 rows=4 loops=6398)
                                         ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10) (actual time=0.002..0.003 rows=4 loops=6398)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                               Heap Fetches: 0
                                         ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.54..2.56 rows=1 width=8) (actual time=0.006..0.006 rows=1 loops=25592)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                               Heap Fetches: 0
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8) (actual time=0.009..0.009 rows=25 loops=1)
                                         Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.003..0.003 rows=25 loops=1)
 Planning time: 21.922 ms
 Execution time: 4947.614 ms
(58 rows)

SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=942516.87..942516.87 rows=1 width=192) (actual time=4250.611..4250.622 rows=100 loops=1)
   ->  Sort  (cost=942516.87..942516.87 rows=1 width=192) (actual time=4250.611..4250.616 rows=100 loops=1)
         Sort Key: supplier.s_acctbal, nation.n_name, supplier.s_name, part.p_partkey
         Sort Method: top-N heapsort  Memory: 51kB
         ->  Merge Join  (cost=491707.11..942516.86 rows=1 width=192) (actual time=3528.699..4248.384 rows=4737 loops=1)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               Rows Removed by Join Filter: 1661
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.55..54701.09 rows=8838 width=30) (actual time=0.019..60.079 rows=8046 loops=1)
                     Index Cond: (p_size = 16)
                     Filter: ((p_type)::text ~~ '%NICKEL'::text)
                     Rows Removed by Filter: 32185
                     Heap Fetches: 0
               ->  Materialize  (cost=491700.37..499633.26 rows=1586578 width=172) (actual time=3528.564..3914.586 rows=1603828 loops=1)
                     ->  Sort  (cost=491700.37..495666.81 rows=1586578 width=172) (actual time=3528.561..3780.369 rows=1603828 loops=1)
                           Sort Key: partsupp.ps_partkey
                           Sort Method: external sort  Disk: 293160kB
                           ->  Hash Join  (cost=4048.96..231465.27 rows=1586578 width=172) (actual time=23.966..2328.945 rows=1604080 loops=1)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181562.85 rows=7996828 width=14) (actual time=0.018..719.107 rows=8000000 loops=1)
                                       Heap Fetches: 0
                                 ->  Hash  (cost=3798.53..3798.53 rows=20000 width=166) (actual time=23.936..23.936 rows=20051 loops=1)
                                       Buckets: 2048  Batches: 1  Memory Usage: 3955kB
                                       ->  Hash Join  (cost=2.53..3798.53 rows=20000 width=166) (actual time=0.015..19.367 rows=20051 loops=1)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144) (actual time=0.002..5.222 rows=100000 loops=1)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30) (actual time=0.012..0.012 rows=5 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30) (actual time=0.007..0.011 rows=5 loops=1)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34) (actual time=0.001..0.003 rows=25 loops=1)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=1)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                                                     Rows Removed by Filter: 4
               SubPlan 1
                 ->  Aggregate  (cost=54.78..54.79 rows=1 width=6) (actual time=0.015..0.015 rows=1 loops=6398)
                       ->  Nested Loop  (cost=2.54..54.77 rows=4 width=6) (actual time=0.008..0.014 rows=2 loops=6398)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             Rows Removed by Join Filter: 2
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=6398)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                                   Rows Removed by Filter: 4
                             ->  Hash Join  (cost=2.54..53.47 rows=19 width=10) (actual time=0.005..0.012 rows=4 loops=6398)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.97..51.64 rows=19 width=10) (actual time=0.004..0.011 rows=4 loops=6398)
                                         ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10) (actual time=0.002..0.002 rows=4 loops=6398)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                               Heap Fetches: 0
                                         ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.54..2.56 rows=1 width=8) (actual time=0.002..0.002 rows=1 loops=25592)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                               Heap Fetches: 0
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8) (actual time=0.008..0.008 rows=25 loops=1)
                                         Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.001..0.003 rows=25 loops=1)
 Planning time: 1.782 ms
 Execution time: 4290.649 ms
(58 rows)

query 3 run 1
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3552957.40..3552957.43 rows=10 width=24) (actual time=27714.851..27714.851 rows=10 loops=1)
   ->  Sort  (cost=3552957.40..3560833.52 rows=3150447 width=24) (actual time=27714.849..27714.849 rows=10 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         Sort Method: top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=3390363.97..3484877.38 rows=3150447 width=24) (actual time=27537.632..27697.036 rows=113934 loops=1)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=3390363.97..3398240.08 rows=3150447 width=24) (actual time=27537.617..27549.490 rows=301530 loops=1)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     Sort Method: quicksort  Memory: 31119kB
                     ->  Hash Join  (cost=647103.88..3004168.50 rows=3150447 width=24) (actual time=7913.978..27439.285 rows=301530 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1875033.95 rows=32813386 width=16) (actual time=0.003..12092.624 rows=32534229 loops=1)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                                 Rows Removed by Filter: 27451823
                           ->  Hash  (cost=622070.44..622070.44 rows=1440115 width=12) (actual time=7911.595..7911.595 rows=1451805 loops=1)
                                 Buckets: 131072  Batches: 4  Memory Usage: 15620kB
                                 ->  Hash Join  (cost=58392.14..622070.44 rows=1440115 width=12) (actual time=515.592..7672.566 rows=1451805 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..448761.43 rows=7310235 width=16) (actual time=0.002..2347.761 rows=7239437 loops=1)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                             Rows Removed by Filter: 7760563
                                       ->  Hash  (cost=54698.16..54698.16 rows=295518 width=4) (actual time=515.564..515.564 rows=300276 loops=1)
                                             Buckets: 32768  Batches: 1  Memory Usage: 10557kB
                                             ->  Seq Scan on customer  (cost=0.00..54698.16 rows=295518 width=4) (actual time=0.001..470.330 rows=300276 loops=1)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                                   Rows Removed by Filter: 1199724
 Planning time: 27.285 ms
 Execution time: 27714.945 ms
(28 rows)

SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3552957.40..3552957.43 rows=10 width=24) (actual time=24687.740..24687.741 rows=10 loops=1)
   ->  Sort  (cost=3552957.40..3560833.52 rows=3150447 width=24) (actual time=24687.739..24687.740 rows=10 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         Sort Method: top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=3390363.97..3484877.38 rows=3150447 width=24) (actual time=24506.438..24669.248 rows=113934 loops=1)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=3390363.97..3398240.08 rows=3150447 width=24) (actual time=24506.423..24518.443 rows=301530 loops=1)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     Sort Method: quicksort  Memory: 31119kB
                     ->  Hash Join  (cost=647103.88..3004168.50 rows=3150447 width=24) (actual time=7013.265..24409.902 rows=301530 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1875033.95 rows=32813386 width=16) (actual time=0.003..10134.047 rows=32534229 loops=1)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                                 Rows Removed by Filter: 27451823
                           ->  Hash  (cost=622070.44..622070.44 rows=1440115 width=12) (actual time=7012.268..7012.268 rows=1451805 loops=1)
                                 Buckets: 131072  Batches: 4  Memory Usage: 15620kB
                                 ->  Hash Join  (cost=58392.14..622070.44 rows=1440115 width=12) (actual time=259.359..6785.245 rows=1451805 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..448761.43 rows=7310235 width=16) (actual time=0.003..1912.605 rows=7239437 loops=1)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                             Rows Removed by Filter: 7760563
                                       ->  Hash  (cost=54698.16..54698.16 rows=295518 width=4) (actual time=259.330..259.330 rows=300276 loops=1)
                                             Buckets: 32768  Batches: 1  Memory Usage: 10557kB
                                             ->  Seq Scan on customer  (cost=0.00..54698.16 rows=295518 width=4) (actual time=0.001..226.058 rows=300276 loops=1)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                                   Rows Removed by Filter: 1199724
 Planning time: 1.212 ms
 Execution time: 24687.820 ms
(28 rows)

query 4 run 1
SET
SET
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1232472.86..1232472.87 rows=1 width=16) (actual time=16434.785..16434.786 rows=1 loops=1)
   ->  Sort  (cost=1232472.86..1232472.87 rows=1 width=16) (actual time=16434.785..16434.785 rows=1 loops=1)
         Sort Key: orders.o_orderpriority
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=1232472.84..1232472.85 rows=1 width=16) (actual time=16434.752..16434.754 rows=5 loops=1)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=334995.82..1229562.08 rows=582152 width=16) (actual time=4999.176..16308.883 rows=513822 loops=1)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=334914.05..336369.59 rows=582216 width=20) (actual time=4998.385..5092.423 rows=560424 loops=1)
                           Sort Key: orders.o_orderkey
                           Sort Method: external sort  Disk: 16448kB
                           ->  Bitmap Heap Scan on orders  (cost=9162.15..279163.39 rows=582216 width=20) (actual time=162.289..4656.201 rows=560424 loops=1)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 Heap Blocks: exact=231887
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..9016.59 rows=582216 width=0) (actual time=113.518..113.518 rows=560424 loops=1)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using q4_idx_1 on lineitem  (cost=0.56..833982.67 rows=19997092 width=4) (actual time=0.740..8941.767 rows=37929279 loops=1)
 Planning time: 21.812 ms
 Execution time: 16437.275 ms
(19 rows)

SET
SET
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1232472.86..1232472.87 rows=1 width=16) (actual time=10779.079..10779.079 rows=1 loops=1)
   ->  Sort  (cost=1232472.86..1232472.87 rows=1 width=16) (actual time=10779.077..10779.077 rows=1 loops=1)
         Sort Key: orders.o_orderpriority
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=1232472.84..1232472.85 rows=1 width=16) (actual time=10779.045..10779.047 rows=5 loops=1)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=334995.82..1229562.08 rows=582152 width=16) (actual time=1774.692..10662.678 rows=513822 loops=1)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=334914.05..336369.59 rows=582216 width=20) (actual time=1774.632..1858.922 rows=560424 loops=1)
                           Sort Key: orders.o_orderkey
                           Sort Method: external sort  Disk: 16448kB
                           ->  Bitmap Heap Scan on orders  (cost=9162.15..279163.39 rows=582216 width=20) (actual time=160.571..1490.980 rows=560424 loops=1)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 Heap Blocks: exact=231887
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..9016.59 rows=582216 width=0) (actual time=111.759..111.759 rows=560424 loops=1)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using q4_idx_1 on lineitem  (cost=0.56..833982.67 rows=19997092 width=4) (actual time=0.042..6596.984 rows=37929279 loops=1)
 Planning time: 1.450 ms
 Execution time: 10781.478 ms
(19 rows)

query 5 run 1
SET
SET
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1673967.18..1673967.18 rows=1 width=38) (actual time=11734.820..11734.821 rows=1 loops=1)
   ->  Sort  (cost=1673967.18..1673967.24 rows=25 width=38) (actual time=11734.819..11734.819 rows=1 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=1673966.74..1673967.05 rows=25 width=38) (actual time=11734.799..11734.800 rows=5 loops=1)
               Group Key: nation.n_name
               ->  Hash Join  (cost=104133.37..1673232.92 rows=73382 width=38) (actual time=1124.088..11637.549 rows=72033 loops=1)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Nested Loop  (cost=99412.37..1631088.08 rows=1834501 width=50) (actual time=1080.331..10607.058 rows=1815327 loops=1)
                           ->  Hash Join  (cost=99411.81..408267.42 rows=458676 width=38) (actual time=1079.415..7392.197 rows=453399 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=36085.57..331754.25 rows=2293379 width=8) (actual time=501.787..4913.818 rows=2276638 loops=1)
                                       Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       Heap Blocks: exact=261246
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..35512.22 rows=2293379 width=0) (actual time=447.112..447.112 rows=2276638 loops=1)
                                             Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Hash  (cost=59576.00..59576.00 rows=300019 width=38) (actual time=577.449..577.449 rows=299436 loops=1)
                                       Buckets: 32768  Batches: 1  Memory Usage: 21055kB
                                       ->  Hash Join  (cost=2.53..59576.00 rows=300019 width=38) (actual time=0.024..520.126 rows=299436 loops=1)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.93 rows=1500093 width=8) (actual time=0.002..358.690 rows=1500000 loops=1)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30) (actual time=0.018..0.018 rows=5 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30) (actual time=0.013..0.016 rows=5 loops=1)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34) (actual time=0.001..0.001 rows=25 loops=1)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.006..0.007 rows=1 loops=1)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                                                     Rows Removed by Filter: 4
                           ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.63 rows=4 width=20) (actual time=0.006..0.006 rows=4 loops=453399)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Heap Fetches: 0
                     ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8) (actual time=42.232..42.232 rows=100000 loops=1)
                           Buckets: 16384  Batches: 1  Memory Usage: 3907kB
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8) (actual time=0.001..28.887 rows=100000 loops=1)
 Planning time: 34.650 ms
 Execution time: 11735.033 ms
(39 rows)

SET
SET
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1673967.18..1673967.18 rows=1 width=38) (actual time=6961.105..6961.105 rows=1 loops=1)
   ->  Sort  (cost=1673967.18..1673967.24 rows=25 width=38) (actual time=6961.104..6961.104 rows=1 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=1673966.74..1673967.05 rows=25 width=38) (actual time=6961.083..6961.084 rows=5 loops=1)
               Group Key: nation.n_name
               ->  Hash Join  (cost=104133.37..1673232.92 rows=73382 width=38) (actual time=960.683..6889.354 rows=72033 loops=1)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Nested Loop  (cost=99412.37..1631088.08 rows=1834501 width=50) (actual time=925.246..5920.745 rows=1815327 loops=1)
                           ->  Hash Join  (cost=99411.81..408267.42 rows=458676 width=38) (actual time=925.186..4009.082 rows=453399 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=36085.57..331754.25 rows=2293379 width=8) (actual time=472.218..1784.649 rows=2276638 loops=1)
                                       Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       Heap Blocks: exact=261246
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..35512.22 rows=2293379 width=0) (actual time=417.822..417.822 rows=2276638 loops=1)
                                             Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Hash  (cost=59576.00..59576.00 rows=300019 width=38) (actual time=452.891..452.891 rows=299436 loops=1)
                                       Buckets: 32768  Batches: 1  Memory Usage: 21055kB
                                       ->  Hash Join  (cost=2.53..59576.00 rows=300019 width=38) (actual time=0.025..400.356 rows=299436 loops=1)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.93 rows=1500093 width=8) (actual time=0.002..244.256 rows=1500000 loops=1)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30) (actual time=0.019..0.019 rows=5 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30) (actual time=0.014..0.018 rows=5 loops=1)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34) (actual time=0.002..0.002 rows=25 loops=1)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.006..0.007 rows=1 loops=1)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                                                     Rows Removed by Filter: 4
                           ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.63 rows=4 width=20) (actual time=0.003..0.004 rows=4 loops=453399)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Heap Fetches: 0
                     ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8) (actual time=35.172..35.172 rows=100000 loops=1)
                           Buckets: 16384  Batches: 1  Memory Usage: 3907kB
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8) (actual time=0.002..22.114 rows=100000 loops=1)
 Planning time: 3.924 ms
 Execution time: 6961.304 ms
(39 rows)

query 6 run 1
SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1170987.90..1170987.91 rows=1 width=12) (actual time=14788.425..14788.425 rows=1 loops=1)
   ->  Aggregate  (cost=1170987.90..1170987.91 rows=1 width=12) (actual time=14788.424..14788.424 rows=1 loops=1)
         ->  Bitmap Heap Scan on lineitem  (cost=230741.15..1165063.88 rows=1184804 width=12) (actual time=1389.985..14179.745 rows=1194558 loops=1)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               Rows Removed by Index Recheck: 21866393
               Heap Blocks: exact=238202 lossy=424766
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..230444.95 rows=1184804 width=0) (actual time=1338.964..1338.964 rows=1194558 loops=1)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
 Planning time: 16.992 ms
 Execution time: 14788.459 ms
(10 rows)

SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1170987.90..1170987.91 rows=1 width=12) (actual time=8523.451..8523.451 rows=1 loops=1)
   ->  Aggregate  (cost=1170987.90..1170987.91 rows=1 width=12) (actual time=8523.449..8523.449 rows=1 loops=1)
         ->  Bitmap Heap Scan on lineitem  (cost=230741.15..1165063.88 rows=1184804 width=12) (actual time=1246.615..8101.023 rows=1194558 loops=1)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               Rows Removed by Index Recheck: 21866393
               Heap Blocks: exact=238202 lossy=424766
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..230444.95 rows=1184804 width=0) (actual time=1196.404..1196.404 rows=1194558 loops=1)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
 Planning time: 1.000 ms
 Execution time: 8523.483 ms
(10 rows)

query 7 run 1
SET
SET
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2528821.95..2528821.96 rows=1 width=68) (actual time=39398.253..39398.253 rows=1 loops=1)
   ->  Sort  (cost=2528821.95..2528829.59 rows=3054 width=68) (actual time=39398.253..39398.253 rows=1 loops=1)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=2528753.24..2528806.68 rows=3054 width=68) (actual time=39398.205..39398.211 rows=4 loops=1)
               Group Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
               ->  Hash Join  (cost=1004977.19..2527844.28 rows=60597 width=68) (actual time=11823.590..39326.698 rows=57794 loops=1)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     Rows Removed by Join Filter: 58158
                     ->  Hash Join  (cost=330493.52..1811468.55 rows=1456090 width=46) (actual time=3194.477..29510.920 rows=1455694 loops=1)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=326716.12..1724876.02 rows=18201127 width=24) (actual time=3160.257..25498.854 rows=18230325 loops=1)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 Rows Removed by Index Recheck: 30957726
                                 Heap Blocks: exact=274040 lossy=846026
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..322165.84 rows=18201127 width=0) (actual time=3102.346..3102.346 rows=18230325 loops=1)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3677.40..3677.40 rows=8000 width=30) (actual time=34.163..34.163 rows=7981 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 484kB
                                 ->  Hash Join  (cost=1.40..3677.40 rows=8000 width=30) (actual time=0.013..32.685 rows=7981 loops=1)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8) (actual time=0.002..23.322 rows=100000 loops=1)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30) (actual time=0.008..0.008 rows=2 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30) (actual time=0.005..0.006 rows=2 loops=1)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                   Rows Removed by Filter: 23
                     ->  Hash  (cost=651281.20..651281.20 rows=1199958 width=30) (actual time=8624.773..8624.773 rows=1191175 loops=1)
                           Buckets: 65536  Batches: 4  Memory Usage: 18064kB
                           ->  Hash Join  (cost=59274.84..651281.20 rows=1199958 width=30) (actual time=515.436..8370.924 rows=1191175 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411262.74 rows=14999474 width=8) (actual time=0.002..1586.549 rows=15000000 loops=1)
                                 ->  Hash  (cost=57774.75..57774.75 rows=120007 width=30) (actual time=515.410..515.410 rows=119622 loops=1)
                                       Buckets: 16384  Batches: 1  Memory Usage: 7243kB
                                       ->  Hash Join  (cost=1.40..57774.75 rows=120007 width=30) (actual time=0.014..491.046 rows=119622 loops=1)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.93 rows=1500093 width=8) (actual time=0.001..352.009 rows=1500000 loops=1)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30) (actual time=0.009..0.009 rows=2 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30) (actual time=0.006..0.008 rows=2 loops=1)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                                         Rows Removed by Filter: 23
 Planning time: 35.815 ms
 Execution time: 39398.411 ms
(45 rows)

SET
SET
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2528821.95..2528821.96 rows=1 width=68) (actual time=25285.973..25285.973 rows=1 loops=1)
   ->  Sort  (cost=2528821.95..2528829.59 rows=3054 width=68) (actual time=25285.972..25285.972 rows=1 loops=1)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=2528753.24..2528806.68 rows=3054 width=68) (actual time=25285.926..25285.933 rows=4 loops=1)
               Group Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
               ->  Hash Join  (cost=1004977.19..2527844.28 rows=60597 width=68) (actual time=10594.199..25229.553 rows=57794 loops=1)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     Rows Removed by Join Filter: 58158
                     ->  Hash Join  (cost=330493.52..1811468.55 rows=1456090 width=46) (actual time=2856.487..16564.940 rows=1455694 loops=1)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=326716.12..1724876.02 rows=18201127 width=24) (actual time=2830.484..13681.037 rows=18230325 loops=1)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 Rows Removed by Index Recheck: 30957726
                                 Heap Blocks: exact=274040 lossy=846026
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..322165.84 rows=18201127 width=0) (actual time=2772.356..2772.356 rows=18230325 loops=1)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3677.40..3677.40 rows=8000 width=30) (actual time=25.979..25.979 rows=7981 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 484kB
                                 ->  Hash Join  (cost=1.40..3677.40 rows=8000 width=30) (actual time=0.012..24.549 rows=7981 loops=1)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8) (actual time=0.001..15.327 rows=100000 loops=1)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30) (actual time=0.008..0.008 rows=2 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30) (actual time=0.006..0.008 rows=2 loops=1)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                   Rows Removed by Filter: 23
                     ->  Hash  (cost=651281.20..651281.20 rows=1199958 width=30) (actual time=7735.251..7735.251 rows=1191175 loops=1)
                           Buckets: 65536  Batches: 4  Memory Usage: 18064kB
                           ->  Hash Join  (cost=59274.84..651281.20 rows=1199958 width=30) (actual time=384.837..7493.978 rows=1191175 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411262.74 rows=14999474 width=8) (actual time=0.003..1208.116 rows=15000000 loops=1)
                                 ->  Hash  (cost=57774.75..57774.75 rows=120007 width=30) (actual time=384.816..384.816 rows=119622 loops=1)
                                       Buckets: 16384  Batches: 1  Memory Usage: 7243kB
                                       ->  Hash Join  (cost=1.40..57774.75 rows=120007 width=30) (actual time=0.013..363.477 rows=119622 loops=1)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.93 rows=1500093 width=8) (actual time=0.001..229.525 rows=1500000 loops=1)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30) (actual time=0.009..0.009 rows=2 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30) (actual time=0.006..0.007 rows=2 loops=1)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                                         Rows Removed by Filter: 23
 Planning time: 3.119 ms
 Execution time: 25286.196 ms
(45 rows)

query 8 run 1
SET
SET
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=622001.09..622001.10 rows=1 width=42) (actual time=13115.641..13115.641 rows=1 loops=1)
   ->  Sort  (cost=622001.09..622002.91 rows=728 width=42) (actual time=13115.640..13115.640 rows=1 loops=1)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         Sort Method: quicksort  Memory: 25kB
         ->  HashAggregate  (cost=621981.07..621997.45 rows=728 width=42) (actual time=13115.625..13115.626 rows=2 loops=1)
               Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Hash Join  (cost=509485.66..621497.19 rows=24194 width=42) (actual time=8873.956..13075.727 rows=23842 loops=1)
                     Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=509484.10..621041.99 rows=24194 width=20) (actual time=8873.932..13055.314 rows=23842 loops=1)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=505013.10..616087.11 rows=24194 width=20) (actual time=8833.753..12995.446 rows=23842 loops=1)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=1.12..101100.42 rows=399939 width=20) (actual time=3.260..3895.787 rows=389521 loops=1)
                                       ->  Index Only Scan using q2_idx_1 on part  (cost=0.55..54313.60 rows=13333 width=4) (actual time=2.393..184.516 rows=13011 loops=1)
                                             Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                             Heap Fetches: 0
                                       ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.19 rows=32 width=24) (actual time=0.224..0.279 rows=30 loops=13011)
                                             Index Cond: (l_partkey = part.p_partkey)
                                             Heap Fetches: 0
                                 ->  Hash  (cost=490124.57..490124.57 rows=907393 width=8) (actual time=8828.881..8828.881 rows=910360 loops=1)
                                       Buckets: 131072  Batches: 2  Memory Usage: 17786kB
                                       ->  Hash Join  (cost=134714.55..490124.57 rows=907393 width=8) (actual time=1499.651..8617.672 rows=910360 loops=1)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=71388.32..400710.78 rows=4536964 width=12) (actual time=932.219..4733.208 rows=4557513 loops=1)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   Heap Blocks: exact=261268
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..70254.07 rows=4536964 width=0) (actual time=877.379..877.379 rows=4557513 loops=1)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59576.00..59576.00 rows=300019 width=4) (actual time=567.397..567.397 rows=299436 loops=1)
                                                   Buckets: 32768  Batches: 1  Memory Usage: 10528kB
                                                   ->  Hash Join  (cost=2.53..59576.00 rows=300019 width=4) (actual time=0.024..520.315 rows=299436 loops=1)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50947.93 rows=1500093 width=8) (actual time=0.002..359.819 rows=1500000 loops=1)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4) (actual time=0.017..0.017 rows=5 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4) (actual time=0.012..0.016 rows=5 loops=1)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.001..0.002 rows=25 loops=1)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.007..0.007 rows=1 loops=1)
                                                                           Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.006..0.007 rows=1 loops=1)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                                                 Rows Removed by Filter: 4
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8) (actual time=40.171..40.171 rows=100000 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 3907kB
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8) (actual time=0.001..28.467 rows=100000 loops=1)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.009..0.009 rows=25 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 2kB
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30) (actual time=0.003..0.004 rows=25 loops=1)
 Planning time: 37.461 ms
 Execution time: 13115.966 ms
(51 rows)

SET
SET
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=622001.09..622001.10 rows=1 width=42) (actual time=6822.609..6822.610 rows=1 loops=1)
   ->  Sort  (cost=622001.09..622002.91 rows=728 width=42) (actual time=6822.608..6822.608 rows=1 loops=1)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         Sort Method: quicksort  Memory: 25kB
         ->  HashAggregate  (cost=621981.07..621997.45 rows=728 width=42) (actual time=6822.594..6822.595 rows=2 loops=1)
               Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Hash Join  (cost=509485.66..621497.19 rows=24194 width=42) (actual time=6310.906..6802.775 rows=23842 loops=1)
                     Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=509484.10..621041.99 rows=24194 width=20) (actual time=6310.884..6793.386 rows=23842 loops=1)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=505013.10..616087.11 rows=24194 width=20) (actual time=6278.012..6744.509 rows=23842 loops=1)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=1.12..101100.42 rows=399939 width=20) (actual time=0.109..270.649 rows=389521 loops=1)
                                       ->  Index Only Scan using q2_idx_1 on part  (cost=0.55..54313.60 rows=13333 width=4) (actual time=0.082..87.023 rows=13011 loops=1)
                                             Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                             Heap Fetches: 0
                                       ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.19 rows=32 width=24) (actual time=0.006..0.011 rows=30 loops=13011)
                                             Index Cond: (l_partkey = part.p_partkey)
                                             Heap Fetches: 0
                                 ->  Hash  (cost=490124.57..490124.57 rows=907393 width=8) (actual time=6277.643..6277.643 rows=910360 loops=1)
                                       Buckets: 131072  Batches: 2  Memory Usage: 17786kB
                                       ->  Hash Join  (cost=134714.55..490124.57 rows=907393 width=8) (actual time=1299.618..6100.184 rows=910360 loops=1)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=71388.32..400710.78 rows=4536964 width=12) (actual time=869.793..2498.965 rows=4557513 loops=1)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   Heap Blocks: exact=261268
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..70254.07 rows=4536964 width=0) (actual time=815.084..815.084 rows=4557513 loops=1)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59576.00..59576.00 rows=300019 width=4) (actual time=429.789..429.789 rows=299436 loops=1)
                                                   Buckets: 32768  Batches: 1  Memory Usage: 10528kB
                                                   ->  Hash Join  (cost=2.53..59576.00 rows=300019 width=4) (actual time=0.023..386.918 rows=299436 loops=1)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50947.93 rows=1500093 width=8) (actual time=0.001..231.913 rows=1500000 loops=1)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4) (actual time=0.017..0.017 rows=5 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4) (actual time=0.012..0.016 rows=5 loops=1)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.001..0.004 rows=25 loops=1)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.006..0.006 rows=1 loops=1)
                                                                           Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.005..0.005 rows=1 loops=1)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                                                 Rows Removed by Filter: 4
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8) (actual time=32.864..32.864 rows=100000 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 3907kB
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8) (actual time=0.001..20.920 rows=100000 loops=1)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.010..0.010 rows=25 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 2kB
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30) (actual time=0.003..0.005 rows=25 loops=1)
 Planning time: 3.681 ms
 Execution time: 6822.927 ms
(51 rows)

query 9 run 1
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=834837.36..834837.36 rows=1 width=53) (actual time=73066.638..73066.638 rows=1 loops=1)
   ->  Sort  (cost=834837.36..834837.68 rows=128 width=53) (actual time=73066.637..73066.637 rows=1 loops=1)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=834834.48..834836.72 rows=128 width=53) (actual time=73066.538..73066.564 rows=175 loops=1)
               Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=51.51..834832.24 rows=128 width=53) (actual time=5.164..68705.416 rows=3248192 loops=1)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     Rows Removed by Join Filter: 77956608
                     ->  Nested Loop  (cost=51.51..834782.29 rows=128 width=31) (actual time=4.403..58032.871 rows=3248192 loops=1)
                           ->  Nested Loop  (cost=51.07..834215.87 rows=128 width=31) (actual time=3.856..17325.515 rows=3248192 loops=1)
                                 ->  Merge Join  (cost=50.53..833889.25 rows=128 width=35) (actual time=3.631..11336.201 rows=3248192 loops=1)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       Rows Removed by Join Filter: 9744576
                                       ->  Nested Loop  (cost=1.12..418881.09 rows=3029857 width=33) (actual time=3.095..6359.662 rows=3248192 loops=1)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.55..64481.89 rows=101008 width=4) (actual time=0.240..493.335 rows=108312 loops=1)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   Rows Removed by Filter: 1891688
                                                   Heap Fetches: 0
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.19 rows=32 width=29) (actual time=0.034..0.051 rows=30 loops=108312)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                                   Heap Fetches: 0
                                       ->  Materialize  (cost=0.43..201554.92 rows=7996828 width=14) (actual time=0.491..2386.793 rows=20559501 loops=1)
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181562.85 rows=7996828 width=14) (actual time=0.486..939.819 rows=7999981 loops=1)
                                                   Heap Fetches: 0
                                 ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.54..2.54 rows=1 width=8) (actual time=0.001..0.002 rows=1 loops=3248192)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       Heap Fetches: 0
                           ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.42 rows=1 width=8) (actual time=0.012..0.012 rows=1 loops=3248192)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30) (actual time=0.000..0.001 rows=25 loops=3248192)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30) (actual time=0.003..0.006 rows=25 loops=1)
 Planning time: 36.619 ms
 Execution time: 73066.734 ms
(35 rows)

SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=834837.36..834837.36 rows=1 width=53) (actual time=39843.015..39843.015 rows=1 loops=1)
   ->  Sort  (cost=834837.36..834837.68 rows=128 width=53) (actual time=39843.015..39843.015 rows=1 loops=1)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=834834.48..834836.72 rows=128 width=53) (actual time=39842.917..39842.940 rows=175 loops=1)
               Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=51.51..834832.24 rows=128 width=53) (actual time=0.193..35987.637 rows=3248192 loops=1)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     Rows Removed by Join Filter: 77956608
                     ->  Nested Loop  (cost=51.51..834782.29 rows=128 width=31) (actual time=0.178..26018.392 rows=3248192 loops=1)
                           ->  Nested Loop  (cost=51.07..834215.87 rows=128 width=31) (actual time=0.163..12509.459 rows=3248192 loops=1)
                                 ->  Merge Join  (cost=50.53..833889.25 rows=128 width=35) (actual time=0.146..7049.684 rows=3248192 loops=1)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       Rows Removed by Join Filter: 9744576
                                       ->  Nested Loop  (cost=1.12..418881.09 rows=3029857 width=33) (actual time=0.078..2432.576 rows=3248192 loops=1)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.55..64481.89 rows=101008 width=4) (actual time=0.039..439.340 rows=108312 loops=1)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   Rows Removed by Filter: 1891688
                                                   Heap Fetches: 0
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.19 rows=32 width=29) (actual time=0.005..0.015 rows=30 loops=108312)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                                   Heap Fetches: 0
                                       ->  Materialize  (cost=0.43..201554.92 rows=7996828 width=14) (actual time=0.048..2213.396 rows=20559501 loops=1)
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181562.85 rows=7996828 width=14) (actual time=0.046..842.000 rows=7999981 loops=1)
                                                   Heap Fetches: 0
                                 ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.54..2.54 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=3248192)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       Heap Fetches: 0
                           ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.42 rows=1 width=8) (actual time=0.004..0.004 rows=1 loops=3248192)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30) (actual time=0.000..0.001 rows=25 loops=3248192)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30) (actual time=0.002..0.004 rows=25 loops=1)
 Planning time: 5.340 ms
 Execution time: 39843.101 ms
(35 rows)

query 10 run 1
SET
SET
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1852013.62..1852013.67 rows=20 width=182) (actual time=19271.564..19271.567 rows=20 loops=1)
   ->  Sort  (cost=1852013.62..1853424.46 rows=564335 width=182) (actual time=19271.563..19271.564 rows=20 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method: top-N heapsort  Memory: 30kB
         ->  GroupAggregate  (cost=1814423.47..1836996.87 rows=564335 width=182) (actual time=17707.428..19176.695 rows=381205 loops=1)
               Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
               ->  Sort  (cost=1814423.47..1815834.31 rows=564335 width=182) (actual time=17707.407..18262.135 rows=1145402 loops=1)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     Sort Method: external merge  Disk: 218232kB
                     ->  Hash Join  (cost=436451.95..1724689.51 rows=564335 width=182) (actual time=5964.120..12329.848 rows=1145402 loops=1)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=436450.39..1716928.34 rows=564335 width=160) (actual time=5964.109..12132.874 rows=1145402 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Merge Join  (cost=334522.30..1568088.80 rows=564335 width=16) (actual time=5032.959..10362.054 rows=1145402 loops=1)
                                       Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Sort  (cost=334409.21..335855.30 rows=578434 width=8) (actual time=5031.822..5095.446 rows=573160 loops=1)
                                             Sort Key: orders.o_orderkey
                                             Sort Method: external sort  Disk: 10096kB
                                             ->  Bitmap Heap Scan on orders  (cost=9103.38..279047.89 rows=578434 width=8) (actual time=165.010..4742.068 rows=573160 loops=1)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   Heap Blocks: exact=233346
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8958.77 rows=578434 width=0) (actual time=115.010..115.010 rows=573160 loops=1)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1188559.85 rows=14633872 width=16) (actual time=1.080..4395.418 rows=14808183 loops=1)
                                             Index Cond: (l_returnflag = 'R'::bpchar)
                                             Heap Fetches: 0
                                 ->  Hash  (cost=50947.93..50947.93 rows=1500093 width=148) (actual time=930.584..930.584 rows=1500000 loops=1)
                                       Buckets: 32768  Batches: 16  Memory Usage: 16828kB
                                       ->  Seq Scan on customer  (cost=0.00..50947.93 rows=1500093 width=148) (actual time=0.001..490.819 rows=1500000 loops=1)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.008..0.008 rows=25 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 2kB
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30) (actual time=0.002..0.004 rows=25 loops=1)
 Planning time: 26.062 ms
 Execution time: 19306.981 ms
(34 rows)

SET
SET
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1852013.62..1852013.67 rows=20 width=182) (actual time=15194.378..15194.381 rows=20 loops=1)
   ->  Sort  (cost=1852013.62..1853424.46 rows=564335 width=182) (actual time=15194.377..15194.379 rows=20 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method: top-N heapsort  Memory: 30kB
         ->  GroupAggregate  (cost=1814423.47..1836996.87 rows=564335 width=182) (actual time=13660.218..15100.000 rows=381205 loops=1)
               Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
               ->  Sort  (cost=1814423.47..1815834.31 rows=564335 width=182) (actual time=13660.198..14208.556 rows=1145402 loops=1)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     Sort Method: external merge  Disk: 218232kB
                     ->  Hash Join  (cost=436451.95..1724689.51 rows=564335 width=182) (actual time=2483.577..8282.311 rows=1145402 loops=1)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=436450.39..1716928.34 rows=564335 width=160) (actual time=2483.565..8085.579 rows=1145402 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Merge Join  (cost=334522.30..1568088.80 rows=564335 width=16) (actual time=1686.158..6458.677 rows=1145402 loops=1)
                                       Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Sort  (cost=334409.21..335855.30 rows=578434 width=8) (actual time=1686.073..1747.332 rows=573160 loops=1)
                                             Sort Key: orders.o_orderkey
                                             Sort Method: external sort  Disk: 10096kB
                                             ->  Bitmap Heap Scan on orders  (cost=9103.38..279047.89 rows=578434 width=8) (actual time=153.132..1429.447 rows=573160 loops=1)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   Heap Blocks: exact=233346
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8958.77 rows=578434 width=0) (actual time=103.235..103.235 rows=573160 loops=1)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1188559.85 rows=14633872 width=16) (actual time=0.058..3855.923 rows=14808183 loops=1)
                                             Index Cond: (l_returnflag = 'R'::bpchar)
                                             Heap Fetches: 0
                                 ->  Hash  (cost=50947.93..50947.93 rows=1500093 width=148) (actual time=796.965..796.965 rows=1500000 loops=1)
                                       Buckets: 32768  Batches: 16  Memory Usage: 16828kB
                                       ->  Seq Scan on customer  (cost=0.00..50947.93 rows=1500093 width=148) (actual time=0.001..363.727 rows=1500000 loops=1)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.009..0.009 rows=25 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 2kB
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30) (actual time=0.003..0.004 rows=25 loops=1)
 Planning time: 2.408 ms
 Execution time: 15231.418 ms
(34 rows)

query 11 run 1
SET
SET
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=686255.38..686255.38 rows=1 width=14) (actual time=3838.536..3838.536 rows=0 loops=1)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=323076.84..323076.85 rows=1 width=10) (actual time=1675.555..1675.555 rows=1 loops=1)
           ->  Hash Join  (cost=2357.31..320696.96 rows=317316 width=10) (actual time=2.720..1558.869 rows=320800 loops=1)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255190.28 rows=7996828 width=14) (actual time=0.031..686.517 rows=8000000 loops=1)
                 ->  Hash  (cost=2307.31..2307.31 rows=4000 width=4) (actual time=2.659..2.659 rows=4010 loops=1)
                       Buckets: 1024  Batches: 1  Memory Usage: 141kB
                       ->  Nested Loop  (cost=55.29..2307.31 rows=4000 width=4) (actual time=0.495..2.306 rows=4010 loops=1)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4) (actual time=0.006..0.007 rows=1 loops=1)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                   Rows Removed by Filter: 24
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=55.29..2266.00 rows=4000 width=8) (actual time=0.485..1.927 rows=4010 loops=1)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   Heap Blocks: exact=1869
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.29 rows=4000 width=0) (actual time=0.309..0.309 rows=4010 loops=1)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=363178.53..363971.82 rows=317316 width=14) (actual time=3838.534..3838.534 rows=0 loops=1)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)))
         Sort Method: quicksort  Memory: 25kB
         ->  GroupAggregate  (cost=349692.60..361591.95 rows=317316 width=14) (actual time=3838.524..3838.524 rows=0 loops=1)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $1)
               Rows Removed by Filter: 301833
               ->  Sort  (cost=349692.60..350485.89 rows=317316 width=14) (actual time=1997.205..2008.252 rows=320800 loops=1)
                     Sort Key: partsupp.ps_partkey
                     Sort Method: quicksort  Memory: 25961kB
                     ->  Hash Join  (cost=2357.31..320696.96 rows=317316 width=14) (actual time=23.075..1954.113 rows=320800 loops=1)
                           Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..255190.28 rows=7996828 width=18) (actual time=0.305..999.034 rows=8000000 loops=1)
                           ->  Hash  (cost=2307.31..2307.31 rows=4000 width=4) (actual time=22.683..22.683 rows=4010 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 141kB
                                 ->  Nested Loop  (cost=55.29..2307.31 rows=4000 width=4) (actual time=1.803..21.975 rows=4010 loops=1)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.011..0.015 rows=1 loops=1)
                                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             Rows Removed by Filter: 24
                                       ->  Bitmap Heap Scan on supplier  (cost=55.29..2266.00 rows=4000 width=8) (actual time=1.787..21.313 rows=4010 loops=1)
                                             Recheck Cond: (s_nationkey = nation.n_nationkey)
                                             Heap Blocks: exact=1869
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.29 rows=4000 width=0) (actual time=1.565..1.565 rows=4010 loops=1)
                                                   Index Cond: (s_nationkey = nation.n_nationkey)
 Planning time: 14.695 ms
 Execution time: 3838.603 ms
(43 rows)

SET
SET
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=686255.38..686255.38 rows=1 width=14) (actual time=3435.420..3435.420 rows=0 loops=1)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=323076.84..323076.85 rows=1 width=10) (actual time=1688.301..1688.301 rows=1 loops=1)
           ->  Hash Join  (cost=2357.31..320696.96 rows=317316 width=10) (actual time=2.696..1574.129 rows=320800 loops=1)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255190.28 rows=7996828 width=14) (actual time=0.031..685.030 rows=8000000 loops=1)
                 ->  Hash  (cost=2307.31..2307.31 rows=4000 width=4) (actual time=2.637..2.637 rows=4010 loops=1)
                       Buckets: 1024  Batches: 1  Memory Usage: 141kB
                       ->  Nested Loop  (cost=55.29..2307.31 rows=4000 width=4) (actual time=0.488..2.281 rows=4010 loops=1)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4) (actual time=0.005..0.006 rows=1 loops=1)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                   Rows Removed by Filter: 24
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=55.29..2266.00 rows=4000 width=8) (actual time=0.480..1.856 rows=4010 loops=1)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   Heap Blocks: exact=1869
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.29 rows=4000 width=0) (actual time=0.306..0.306 rows=4010 loops=1)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=363178.53..363971.82 rows=317316 width=14) (actual time=3435.420..3435.420 rows=0 loops=1)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)))
         Sort Method: quicksort  Memory: 25kB
         ->  GroupAggregate  (cost=349692.60..361591.95 rows=317316 width=14) (actual time=3435.400..3435.400 rows=0 loops=1)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $1)
               Rows Removed by Filter: 301833
               ->  Sort  (cost=349692.60..350485.89 rows=317316 width=14) (actual time=1581.613..1592.630 rows=320800 loops=1)
                     Sort Key: partsupp.ps_partkey
                     Sort Method: quicksort  Memory: 25961kB
                     ->  Hash Join  (cost=2357.31..320696.96 rows=317316 width=14) (actual time=3.496..1540.713 rows=320800 loops=1)
                           Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..255190.28 rows=7996828 width=18) (actual time=0.042..676.580 rows=8000000 loops=1)
                           ->  Hash  (cost=2307.31..2307.31 rows=4000 width=4) (actual time=3.429..3.429 rows=4010 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 141kB
                                 ->  Nested Loop  (cost=55.29..2307.31 rows=4000 width=4) (actual time=0.507..3.024 rows=4010 loops=1)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.005..0.006 rows=1 loops=1)
                                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             Rows Removed by Filter: 24
                                       ->  Bitmap Heap Scan on supplier  (cost=55.29..2266.00 rows=4000 width=8) (actual time=0.499..2.618 rows=4010 loops=1)
                                             Recheck Cond: (s_nationkey = nation.n_nationkey)
                                             Heap Blocks: exact=1869
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.29 rows=4000 width=0) (actual time=0.318..0.318 rows=4010 loops=1)
                                                   Index Cond: (s_nationkey = nation.n_nationkey)
 Planning time: 0.890 ms
 Execution time: 3435.695 ms
(43 rows)

query 12 run 1
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1193096.26..1193096.26 rows=1 width=27) (actual time=37589.935..37589.935 rows=1 loops=1)
   ->  Sort  (cost=1193096.26..1193096.26 rows=1 width=27) (actual time=37589.933..37589.933 rows=1 loops=1)
         Sort Key: lineitem.l_shipmode
         Sort Method: quicksort  Memory: 25kB
         ->  HashAggregate  (cost=1193096.24..1193096.25 rows=1 width=27) (actual time=37589.921..37589.922 rows=2 loops=1)
               Group Key: lineitem.l_shipmode
               ->  Merge Join  (cost=577893.22..1188099.76 rows=285513 width=27) (actual time=33784.301..37431.158 rows=311258 loops=1)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..568523.55 rows=14999474 width=20) (actual time=0.354..2680.089 rows=14999967 loops=1)
                     ->  Sort  (cost=577892.65..578606.43 rows=285513 width=15) (actual time=33783.860..33808.409 rows=311258 loops=1)
                           Sort Key: lineitem.l_orderkey
                           Sort Method: quicksort  Memory: 25513kB
                           ->  Index Scan using q12_idx_1 on lineitem  (cost=0.56..552020.61 rows=285513 width=15) (actual time=2.324..33551.239 rows=311258 loops=1)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 Planning time: 22.598 ms
 Execution time: 37590.018 ms
(16 rows)

SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1193096.26..1193096.26 rows=1 width=27) (actual time=5417.343..5417.343 rows=1 loops=1)
   ->  Sort  (cost=1193096.26..1193096.26 rows=1 width=27) (actual time=5417.342..5417.342 rows=1 loops=1)
         Sort Key: lineitem.l_shipmode
         Sort Method: quicksort  Memory: 25kB
         ->  HashAggregate  (cost=1193096.24..1193096.25 rows=1 width=27) (actual time=5417.331..5417.332 rows=2 loops=1)
               Group Key: lineitem.l_shipmode
               ->  Merge Join  (cost=577893.22..1188099.76 rows=285513 width=27) (actual time=2166.146..5262.857 rows=311258 loops=1)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..568523.55 rows=14999474 width=20) (actual time=0.023..2154.370 rows=14999967 loops=1)
                     ->  Sort  (cost=577892.65..578606.43 rows=285513 width=15) (actual time=2166.090..2190.156 rows=311258 loops=1)
                           Sort Key: lineitem.l_orderkey
                           Sort Method: quicksort  Memory: 25513kB
                           ->  Index Scan using q12_idx_1 on lineitem  (cost=0.56..552020.61 rows=285513 width=15) (actual time=0.048..2058.652 rows=311258 loops=1)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 Planning time: 1.460 ms
 Execution time: 5417.430 ms
(16 rows)

query 13 run 1
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2768508.48..2768508.48 rows=1 width=8) (actual time=23172.275..23172.275 rows=1 loops=1)
   ->  Sort  (cost=2768508.48..2768508.98 rows=200 width=8) (actual time=23172.274..23172.274 rows=1 loops=1)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=2768505.48..2768507.48 rows=200 width=8) (actual time=23172.258..23172.264 rows=46 loops=1)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=2362451.10..2746004.08 rows=1500093 width=8) (actual time=13693.398..22969.721 rows=1500000 loops=1)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=2362451.10..2656762.83 rows=14848065 width=8) (actual time=13693.383..21748.193 rows=15337604 loops=1)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30733.82 rows=1500093 width=4) (actual time=0.417..184.964 rows=1500000 loops=1)
                                 Heap Fetches: 0
                           ->  Materialize  (cost=2362448.47..2436688.80 rows=14848065 width=8) (actual time=13692.961..19596.423 rows=14837583 loops=1)
                                 ->  Sort  (cost=2362448.47..2399568.63 rows=14848065 width=8) (actual time=13692.958..18209.516 rows=14837583 loops=1)
                                       Sort Key: orders.o_custkey
                                       Sort Method: external merge  Disk: 260888kB
                                       ->  Seq Scan on orders  (cost=0.00..448761.43 rows=14848065 width=8) (actual time=0.297..5218.992 rows=14837583 loops=1)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                                             Rows Removed by Filter: 162417
 Planning time: 11.527 ms
 Execution time: 23208.112 ms
(21 rows)

SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2768508.48..2768508.48 rows=1 width=8) (actual time=22457.426..22457.426 rows=1 loops=1)
   ->  Sort  (cost=2768508.48..2768508.98 rows=200 width=8) (actual time=22457.424..22457.424 rows=1 loops=1)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=2768505.48..2768507.48 rows=200 width=8) (actual time=22457.408..22457.415 rows=46 loops=1)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=2362451.10..2746004.08 rows=1500093 width=8) (actual time=13033.656..22258.965 rows=1500000 loops=1)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=2362451.10..2656762.83 rows=14848065 width=8) (actual time=13033.639..21039.517 rows=15337604 loops=1)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30733.82 rows=1500093 width=4) (actual time=0.024..146.616 rows=1500000 loops=1)
                                 Heap Fetches: 0
                           ->  Materialize  (cost=2362448.47..2436688.80 rows=14848065 width=8) (actual time=13033.610..18922.679 rows=14837583 loops=1)
                                 ->  Sort  (cost=2362448.47..2399568.63 rows=14848065 width=8) (actual time=13033.608..17543.540 rows=14837583 loops=1)
                                       Sort Key: orders.o_custkey
                                       Sort Method: external merge  Disk: 260888kB
                                       ->  Seq Scan on orders  (cost=0.00..448761.43 rows=14848065 width=8) (actual time=0.028..4758.558 rows=14837583 loops=1)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                                             Rows Removed by Filter: 162417
 Planning time: 0.561 ms
 Execution time: 22492.838 ms
(21 rows)

query 14 run 1
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=936361.26..936361.28 rows=1 width=33) (actual time=8317.181..8317.182 rows=1 loops=1)
   ->  Aggregate  (cost=936361.26..936361.28 rows=1 width=33) (actual time=8317.172..8317.172 rows=1 loops=1)
         ->  Hash Join  (cost=114136.51..922242.08 rows=806810 width=33) (actual time=1121.428..7793.685 rows=772942 loops=1)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=14484.37..782884.71 rows=806810 width=16) (actual time=280.391..5982.026 rows=772942 loops=1)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     Heap Blocks: exact=416569
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14282.67 rows=806810 width=0) (actual time=185.659..185.659 rows=772942 loops=1)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.62..60980.62 rows=1999962 width=25) (actual time=840.166..840.166 rows=2000000 loops=1)
                     Buckets: 65536  Batches: 4  Memory Usage: 28922kB
                     ->  Seq Scan on part  (cost=0.00..60980.62 rows=1999962 width=25) (actual time=0.003..527.988 rows=2000000 loops=1)
 Planning time: 23.380 ms
 Execution time: 8317.428 ms
(14 rows)

SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=936361.26..936361.28 rows=1 width=33) (actual time=4339.159..4339.159 rows=1 loops=1)
   ->  Aggregate  (cost=936361.26..936361.28 rows=1 width=33) (actual time=4339.158..4339.158 rows=1 loops=1)
         ->  Hash Join  (cost=114136.51..922242.08 rows=806810 width=33) (actual time=954.220..3873.872 rows=772942 loops=1)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=14484.37..782884.71 rows=806810 width=16) (actual time=270.317..2328.346 rows=772942 loops=1)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     Heap Blocks: exact=416569
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14282.67 rows=806810 width=0) (actual time=176.445..176.445 rows=772942 loops=1)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.62..60980.62 rows=1999962 width=25) (actual time=683.526..683.526 rows=2000000 loops=1)
                     Buckets: 65536  Batches: 4  Memory Usage: 28922kB
                     ->  Seq Scan on part  (cost=0.00..60980.62 rows=1999962 width=25) (actual time=0.003..383.883 rows=2000000 loops=1)
 Planning time: 1.415 ms
 Execution time: 4339.263 ms
(14 rows)

query 15 run 1
SET
SET
CREATE VIEW
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2464064.88..2464066.11 rows=1 width=103) (actual time=23042.209..23042.209 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1223350.22..1223350.23 rows=1 width=32) (actual time=7860.110..7860.110 rows=1 loops=1)
           ->  HashAggregate  (cost=1223256.62..1223303.42 rows=3744 width=16) (actual time=7825.621..7854.072 rows=100000 loops=1)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=41005.07..1200413.20 rows=2284342 width=16) (actual time=546.114..5983.956 rows=2265714 loops=1)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       Rows Removed by Index Recheck: 21153354
                       Heap Blocks: exact=243444 lossy=424814
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40433.99 rows=2284342 width=0) (actual time=493.558..493.558 rows=2265714 loops=1)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1240714.65..1245294.81 rows=3744 width=103) (actual time=23042.207..23042.207 rows=1 loops=1)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=71) (actual time=0.362..17.181 rows=69998 loops=1)
         ->  Sort  (cost=1240714.36..1240723.72 rows=3744 width=36) (actual time=23020.797..23020.797 rows=1 loops=1)
               Sort Key: revenue0.supplier_no
               Sort Method: quicksort  Memory: 25kB
               ->  Subquery Scan on revenue0  (cost=1240389.19..1240492.15 rows=3744 width=36) (actual time=23004.618..23020.787 rows=1 loops=1)
                     ->  HashAggregate  (cost=1240389.19..1240454.71 rows=3744 width=16) (actual time=23004.616..23020.784 rows=1 loops=1)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))) = $0)
                           Rows Removed by Filter: 99999
                           ->  Bitmap Heap Scan on lineitem  (cost=41005.07..1200413.20 rows=2284342 width=16) (actual time=614.330..12658.654 rows=2265714 loops=1)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 Rows Removed by Index Recheck: 21153354
                                 Heap Blocks: exact=243444 lossy=424814
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40433.99 rows=2284342 width=0) (actual time=561.582..561.582 rows=2265714 loops=1)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 Planning time: 19.944 ms
 Execution time: 23042.532 ms
(30 rows)

DROP VIEW
SET
SET
CREATE VIEW
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2464064.88..2464066.11 rows=1 width=103) (actual time=16344.981..16344.981 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1223350.22..1223350.23 rows=1 width=32) (actual time=7860.329..7860.329 rows=1 loops=1)
           ->  HashAggregate  (cost=1223256.62..1223303.42 rows=3744 width=16) (actual time=7825.906..7854.171 rows=100000 loops=1)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=41005.07..1200413.20 rows=2284342 width=16) (actual time=541.238..5994.293 rows=2265714 loops=1)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       Rows Removed by Index Recheck: 21153354
                       Heap Blocks: exact=243444 lossy=424814
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40433.99 rows=2284342 width=0) (actual time=488.888..488.888 rows=2265714 loops=1)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1240714.65..1245294.81 rows=3744 width=103) (actual time=16344.980..16344.980 rows=1 loops=1)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=71) (actual time=0.023..10.621 rows=69998 loops=1)
         ->  Sort  (cost=1240714.36..1240723.72 rows=3744 width=36) (actual time=16330.526..16330.526 rows=1 loops=1)
               Sort Key: revenue0.supplier_no
               Sort Method: quicksort  Memory: 25kB
               ->  Subquery Scan on revenue0  (cost=1240389.19..1240492.15 rows=3744 width=36) (actual time=16314.453..16330.520 rows=1 loops=1)
                     ->  HashAggregate  (cost=1240389.19..1240454.71 rows=3744 width=16) (actual time=16314.453..16330.520 rows=1 loops=1)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))) = $0)
                           Rows Removed by Filter: 99999
                           ->  Bitmap Heap Scan on lineitem  (cost=41005.07..1200413.20 rows=2284342 width=16) (actual time=568.959..6569.290 rows=2265714 loops=1)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 Rows Removed by Index Recheck: 21153354
                                 Heap Blocks: exact=243444 lossy=424814
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40433.99 rows=2284342 width=0) (actual time=517.070..517.070 rows=2265714 loops=1)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 Planning time: 1.521 ms
 Execution time: 16345.332 ms
(30 rows)

DROP VIEW
query 16 run 1
SET
SET
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=389488.17..389488.18 rows=1 width=40) (actual time=18815.170..18815.171 rows=1 loops=1)
   ->  Sort  (cost=389488.17..389555.54 rows=26947 width=40) (actual time=18815.169..18815.169 rows=1 loops=1)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         Sort Method: top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=381900.98..389353.44 rows=26947 width=40) (actual time=16709.752..18810.529 rows=27838 loops=1)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=381900.98..383337.58 rows=574639 width=40) (actual time=16709.623..18511.487 rows=1186319 loops=1)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     Sort Method: external merge  Disk: 60504kB
                     ->  Merge Join  (cost=3482.86..315705.16 rows=574639 width=40) (actual time=37.931..3089.380 rows=1186319 loops=1)
                           Merge Cond: (part.p_partkey = partsupp.ps_partkey)
                           ->  Index Scan using part_pkey on part  (cost=0.43..111955.29 rows=287428 width=40) (actual time=0.259..1110.678 rows=296733 loops=1)
                                 Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
                                 Rows Removed by Filter: 1703267
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..187289.95 rows=3998414 width=8) (actual time=37.658..1480.166 rows=7995493 loops=1)
                                 Filter: (NOT (hashed SubPlan 1))
                                 Rows Removed by Filter: 4480
                                 Heap Fetches: 0
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4) (actual time=1.135..37.126 rows=56 loops=1)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                         Rows Removed by Filter: 99944
 Planning time: 16.171 ms
 Execution time: 18823.439 ms
(24 rows)

SET
SET
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=389488.17..389488.18 rows=1 width=40) (actual time=18196.737..18196.737 rows=1 loops=1)
   ->  Sort  (cost=389488.17..389555.54 rows=26947 width=40) (actual time=18196.736..18196.736 rows=1 loops=1)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         Sort Method: top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=381900.98..389353.44 rows=26947 width=40) (actual time=16084.327..18192.127 rows=27838 loops=1)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=381900.98..383337.58 rows=574639 width=40) (actual time=16084.199..17886.169 rows=1186319 loops=1)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     Sort Method: external merge  Disk: 60504kB
                     ->  Merge Join  (cost=3482.86..315705.16 rows=574639 width=40) (actual time=21.374..2545.651 rows=1186319 loops=1)
                           Merge Cond: (part.p_partkey = partsupp.ps_partkey)
                           ->  Index Scan using part_pkey on part  (cost=0.43..111955.29 rows=287428 width=40) (actual time=0.018..784.299 rows=296733 loops=1)
                                 Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
                                 Rows Removed by Filter: 1703267
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..187289.95 rows=3998414 width=8) (actual time=21.344..1282.489 rows=7995493 loops=1)
                                 Filter: (NOT (hashed SubPlan 1))
                                 Rows Removed by Filter: 4480
                                 Heap Fetches: 0
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4) (actual time=0.087..21.294 rows=56 loops=1)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                         Rows Removed by Filter: 99944
 Planning time: 0.769 ms
 Execution time: 18205.555 ms
(24 rows)

query 17 run 1
SET
SET
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1790879.14..1790879.16 rows=1 width=8) (actual time=21794.211..21794.212 rows=1 loops=1)
   ->  Aggregate  (cost=1790879.14..1790879.16 rows=1 width=8) (actual time=21794.209..21794.209 rows=1 loops=1)
         ->  Nested Loop  (cost=71100.06..1790828.89 rows=20101 width=8) (actual time=524.162..21790.994 rows=5319 loops=1)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71099.50..1784520.29 rows=2010 width=40) (actual time=523.415..20732.579 rows=1996 loops=1)
                     Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  GroupAggregate  (cost=0.56..1689927.61 rows=1877035 width=9) (actual time=3.303..20082.429 rows=1999333 loops=1)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361815.71 rows=59991276 width=9) (actual time=0.815..11367.441 rows=59965994 loops=1)
                                 Heap Fetches: 0
                     ->  Sort  (cost=71098.93..71104.29 rows=2142 width=4) (actual time=513.501..514.442 rows=1996 loops=1)
                           Sort Key: part.p_partkey
                           Sort Method: quicksort  Memory: 142kB
                           ->  Seq Scan on part  (cost=0.00..70980.43 rows=2142 width=4) (actual time=0.731..512.770 rows=1996 loops=1)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 Rows Removed by Filter: 1998004
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.00 rows=11 width=17) (actual time=0.487..0.527 rows=3 loops=1996)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
                     Heap Fetches: 0
 Planning time: 25.994 ms
 Execution time: 21794.259 ms
(21 rows)

SET
SET
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1790879.14..1790879.16 rows=1 width=8) (actual time=19602.835..19602.835 rows=1 loops=1)
   ->  Aggregate  (cost=1790879.14..1790879.16 rows=1 width=8) (actual time=19602.835..19602.835 rows=1 loops=1)
         ->  Nested Loop  (cost=71100.06..1790828.89 rows=20101 width=8) (actual time=370.631..19601.695 rows=5319 loops=1)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71099.50..1784520.29 rows=2010 width=40) (actual time=370.601..19569.797 rows=1996 loops=1)
                     Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  GroupAggregate  (cost=0.56..1689927.61 rows=1877035 width=9) (actual time=0.082..19085.892 rows=1999333 loops=1)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361815.71 rows=59991276 width=9) (actual time=0.053..10484.589 rows=59965994 loops=1)
                                 Heap Fetches: 0
                     ->  Sort  (cost=71098.93..71104.29 rows=2142 width=4) (actual time=364.470..364.809 rows=1996 loops=1)
                           Sort Key: part.p_partkey
                           Sort Method: quicksort  Memory: 142kB
                           ->  Seq Scan on part  (cost=0.00..70980.43 rows=2142 width=4) (actual time=0.142..363.939 rows=1996 loops=1)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 Rows Removed by Filter: 1998004
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.00 rows=11 width=17) (actual time=0.014..0.015 rows=3 loops=1996)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
                     Heap Fetches: 0
 Planning time: 1.479 ms
 Execution time: 19602.878 ms
(21 rows)

query 18 run 1
SET
SET
                                                                                                QUERY PLAN                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10179311.15..10179314.15 rows=100 width=44) (actual time=28445.434..28445.720 rows=99 loops=1)
   ->  GroupAggregate  (cost=10179311.15..11079180.29 rows=29995638 width=44) (actual time=28445.433..28445.716 rows=99 loops=1)
         Group Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
         ->  Sort  (cost=10179311.15..10254300.24 rows=29995638 width=44) (actual time=28444.627..28444.649 rows=693 loops=1)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               Sort Method: quicksort  Memory: 79kB
               ->  Hash Join  (cost=78629.51..5795030.46 rows=29995638 width=44) (actual time=4434.882..28443.381 rows=693 loops=1)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=140.42..4697740.61 rows=29995638 width=25) (actual time=622.610..27720.331 rows=693 loops=1)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=1.00..2867707.08 rows=7499737 width=24) (actual time=470.086..20467.860 rows=99 loops=1)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..568523.55 rows=14999474 width=20) (actual time=0.293..3108.142 rows=14982724 loops=1)
                                 ->  Materialize  (cost=0.56..2074212.11 rows=14997819 width=4) (actual time=365.009..16507.217 rows=99 loops=1)
                                       ->  GroupAggregate  (cost=0.56..1886739.37 rows=14997819 width=9) (actual time=365.007..16507.105 rows=99 loops=1)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > 313::numeric)
                                             Rows Removed by Filter: 14999901
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361815.71 rows=59991276 width=9) (actual time=0.825..6073.898 rows=59986052 loops=1)
                                                   Heap Fetches: 0
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361815.71 rows=59991276 width=9) (actual time=0.011..4708.540 rows=59916431 loops=1)
                                 Heap Fetches: 0
                     ->  Hash  (cost=50947.93..50947.93 rows=1500093 width=23) (actual time=652.178..652.178 rows=1500000 loops=1)
                           Buckets: 65536  Batches: 4  Memory Usage: 20537kB
                           ->  Seq Scan on customer  (cost=0.00..50947.93 rows=1500093 width=23) (actual time=0.003..412.502 rows=1500000 loops=1)
 Planning time: 29.455 ms
 Execution time: 28445.796 ms
(27 rows)

SET
SET
                                                                                                QUERY PLAN                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10179311.15..10179314.15 rows=100 width=44) (actual time=26922.104..26922.355 rows=99 loops=1)
   ->  GroupAggregate  (cost=10179311.15..11079180.29 rows=29995638 width=44) (actual time=26922.102..26922.348 rows=99 loops=1)
         Group Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
         ->  Sort  (cost=10179311.15..10254300.24 rows=29995638 width=44) (actual time=26922.088..26922.108 rows=693 loops=1)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               Sort Method: quicksort  Memory: 79kB
               ->  Hash Join  (cost=78629.51..5795030.46 rows=29995638 width=44) (actual time=4044.362..26920.823 rows=693 loops=1)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=140.42..4697740.61 rows=29995638 width=25) (actual time=574.905..26333.128 rows=693 loops=1)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=1.00..2867707.08 rows=7499737 width=24) (actual time=421.750..19076.855 rows=99 loops=1)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..568523.55 rows=14999474 width=20) (actual time=0.028..2350.580 rows=14982724 loops=1)
                                 ->  Materialize  (cost=0.56..2074212.11 rows=14997819 width=4) (actual time=345.083..15896.314 rows=99 loops=1)
                                       ->  GroupAggregate  (cost=0.56..1886739.37 rows=14997819 width=9) (actual time=345.080..15896.204 rows=99 loops=1)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > 313::numeric)
                                             Rows Removed by Filter: 14999901
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361815.71 rows=59991276 width=9) (actual time=0.062..5527.047 rows=59986052 loops=1)
                                                   Heap Fetches: 0
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361815.71 rows=59991276 width=9) (actual time=0.009..4714.003 rows=59916431 loops=1)
                                 Heap Fetches: 0
                     ->  Hash  (cost=50947.93..50947.93 rows=1500093 width=23) (actual time=518.773..518.773 rows=1500000 loops=1)
                           Buckets: 65536  Batches: 4  Memory Usage: 20537kB
                           ->  Seq Scan on customer  (cost=0.00..50947.93 rows=1500093 width=23) (actual time=0.003..287.352 rows=1500000 loops=1)
 Planning time: 1.948 ms
 Execution time: 26922.424 ms
(27 rows)

query 19 run 1
SET
SET


 Limit  (cost=143058.18..143058.19 rows=1 width=12) (actual time=3549.831..3549.831 rows=1 loops=1)
   ->  Aggregate  (cost=143058.18..143058.19 rows=1 width=12) (actual time=3549.831..3549.831 rows=1 loops=1)
         ->  Nested Loop  (cost=0.69..143049.89 rows=1105 width=12) (actual time=14.523..3546.872 rows=1063 loops=1)
               ->  Seq Scan on part  (cost=0.00..125979.39 rows=4725 width=30) (actual time=0.938..1030.227 rows=4781 loops=1)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                     Rows Removed by Filter: 1995219
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.69..3.60 rows=1 width=21) (actual time=0.503..0.525 rows=0 loops=4781)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric) AND (part.p_size <= 15))))
                     Rows Removed by Filter: 7
                     Heap Fetches: 0
 Planning time: 25.635 ms
 Execution time: 3549.876 ms
(13 rows)

SET
SET


 Limit  (cost=143058.18..143058.19 rows=1 width=12) (actual time=652.860..652.861 rows=1 loops=1)
   ->  Aggregate  (cost=143058.18..143058.19 rows=1 width=12) (actual time=652.860..652.860 rows=1 loops=1)
         ->  Nested Loop  (cost=0.69..143049.89 rows=1105 width=12) (actual time=1.602..652.016 rows=1063 loops=1)
               ->  Seq Scan on part  (cost=0.00..125979.39 rows=4725 width=30) (actual time=0.267..607.372 rows=4781 loops=1)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                     Rows Removed by Filter: 1995219
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.69..3.60 rows=1 width=21) (actual time=0.008..0.009 rows=0 loops=4781)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric) AND (part.p_size <= 15))))
                     Rows Removed by Filter: 7
                     Heap Fetches: 0
 Planning time: 2.915 ms
 Execution time: 652.907 ms
(13 rows)

query 20 run 1
SET
SET
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2864064.31..2864064.31 rows=1 width=51) (actual time=52285.081..52285.082 rows=1 loops=1)
   ->  Sort  (cost=2864064.31..2864069.31 rows=2000 width=51) (actual time=52285.081..52285.081 rows=1 loops=1)
         Sort Key: supplier.s_name
         Sort Method: top-N heapsort  Memory: 25kB
         ->  Nested Loop Semi Join  (cost=2602623.38..2864054.31 rows=2000 width=51) (actual time=28448.839..52283.058 rows=1821 loops=1)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               Rows Removed by Join Filter: 182001415
               ->  Nested Loop  (cost=55.29..2307.31 rows=4000 width=55) (actual time=2.041..25.290 rows=4095 loops=1)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.005..0.008 rows=1 loops=1)
                           Filter: (n_name = 'IRAQ'::bpchar)
                           Rows Removed by Filter: 24
                     ->  Bitmap Heap Scan on supplier  (cost=55.29..2266.00 rows=4000 width=59) (actual time=2.034..24.326 rows=4095 loops=1)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           Heap Blocks: exact=1865
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.29 rows=4000 width=0) (actual time=1.549..1.549 rows=4095 loops=1)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2602568.09..2860067.07 rows=28 width=8) (actual time=6.618..9.873 rows=44445 loops=4095)
                     ->  Merge Join  (cost=2602568.09..2860066.93 rows=28 width=8) (actual time=27101.462..34568.847 rows=59002 loops=1)
                           Merge Cond: (partsupp.ps_partkey = lineitem.l_partkey)
                           Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity)))))
                           Rows Removed by Join Filter: 177498
                           ->  Nested Loop  (cost=0.98..122620.39 rows=381601 width=16) (actual time=0.959..507.593 rows=86872 loops=1)
                                 ->  Index Only Scan using q20_idx_2 on part  (cost=0.55..64481.89 rows=20202 width=4) (actual time=0.658..272.176 rows=21718 loops=1)
                                       Filter: ((p_name)::text ~~ 'olive%'::text)
                                       Rows Removed by Filter: 1978282
                                       Heap Fetches: 0
                                 ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.69 rows=19 width=12) (actual time=0.009..0.010 rows=4 loops=21718)
                                       Index Cond: (ps_partkey = part.p_partkey)
                                       Heap Fetches: 0
                           ->  Materialize  (cost=2602567.11..2719703.76 rows=918719 width=40) (actual time=27100.154..33651.493 rows=5625848 loops=1)
                                 ->  GroupAggregate  (cost=2602567.11..2708219.77 rows=918719 width=13) (actual time=27100.151..33030.338 rows=5448473 loops=1)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Sort  (cost=2602567.11..2625535.08 rows=9187188 width=13) (actual time=27100.135..30068.435 rows=9123091 loops=1)
                                             Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                             Sort Method: external merge  Disk: 205048kB
                                             ->  Bitmap Heap Scan on lineitem  (cost=164913.24..1427864.06 rows=9187188 width=13) (actual time=1914.532..20323.187 rows=9123688 loops=1)
                                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                   Rows Removed by Index Recheck: 27869248
                                                   Heap Blocks: exact=412819 lossy=635976
                                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..162616.45 rows=9187188 width=0) (actual time=1821.657..1821.657 rows=9123688 loops=1)
                                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
 Planning time: 26.548 ms
 Execution time: 52313.142 ms
(43 rows)

SET
SET
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2864064.31..2864064.31 rows=1 width=51) (actual time=41735.075..41735.076 rows=1 loops=1)
   ->  Sort  (cost=2864064.31..2864069.31 rows=2000 width=51) (actual time=41735.074..41735.074 rows=1 loops=1)
         Sort Key: supplier.s_name
         Sort Method: top-N heapsort  Memory: 25kB
         ->  Nested Loop Semi Join  (cost=2602623.38..2864054.31 rows=2000 width=51) (actual time=18046.345..41733.207 rows=1821 loops=1)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               Rows Removed by Join Filter: 182001415
               ->  Nested Loop  (cost=55.29..2307.31 rows=4000 width=55) (actual time=0.595..10.195 rows=4095 loops=1)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.005..0.009 rows=1 loops=1)
                           Filter: (n_name = 'IRAQ'::bpchar)
                           Rows Removed by Filter: 24
                     ->  Bitmap Heap Scan on supplier  (cost=55.29..2266.00 rows=4000 width=59) (actual time=0.587..9.500 rows=4095 loops=1)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           Heap Blocks: exact=1865
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.29 rows=4000 width=0) (actual time=0.402..0.402 rows=4095 loops=1)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2602568.09..2860067.07 rows=28 width=8) (actual time=4.088..7.303 rows=44445 loops=4095)
                     ->  Merge Join  (cost=2602568.09..2860066.93 rows=28 width=8) (actual time=16739.884..24028.897 rows=59002 loops=1)
                           Merge Cond: (partsupp.ps_partkey = lineitem.l_partkey)
                           Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity)))))
                           Rows Removed by Join Filter: 177498
                           ->  Nested Loop  (cost=0.98..122620.39 rows=381601 width=16) (actual time=0.039..357.981 rows=86872 loops=1)
                                 ->  Index Only Scan using q20_idx_2 on part  (cost=0.55..64481.89 rows=20202 width=4) (actual time=0.027..247.949 rows=21718 loops=1)
                                       Filter: ((p_name)::text ~~ 'olive%'::text)
                                       Rows Removed by Filter: 1978282
                                       Heap Fetches: 0
                                 ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.69 rows=19 width=12) (actual time=0.004..0.004 rows=4 loops=21718)
                                       Index Cond: (ps_partkey = part.p_partkey)
                                       Heap Fetches: 0
                           ->  Materialize  (cost=2602567.11..2719703.76 rows=918719 width=40) (actual time=16739.497..23264.550 rows=5625848 loops=1)
                                 ->  GroupAggregate  (cost=2602567.11..2708219.77 rows=918719 width=13) (actual time=16739.495..22644.960 rows=5448473 loops=1)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Sort  (cost=2602567.11..2625535.08 rows=9187188 width=13) (actual time=16739.480..19691.395 rows=9123091 loops=1)
                                             Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                             Sort Method: external merge  Disk: 205048kB
                                             ->  Bitmap Heap Scan on lineitem  (cost=164913.24..1427864.06 rows=9187188 width=13) (actual time=1749.600..10921.991 rows=9123688 loops=1)
                                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                   Rows Removed by Index Recheck: 27869248
                                                   Heap Blocks: exact=412819 lossy=635976
                                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..162616.45 rows=9187188 width=0) (actual time=1657.358..1657.358 rows=9123688 loops=1)
                                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
 Planning time: 2.321 ms
 Execution time: 41761.892 ms
(43 rows)

query 21 run 1
SET
SET
                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3046369.76..3046369.76 rows=1 width=26) (actual time=18541.195..18541.204 rows=100 loops=1)
   ->  Sort  (cost=3046369.76..3046369.76 rows=1 width=26) (actual time=18541.195..18541.200 rows=100 loops=1)
         Sort Key: (count(*)), supplier.s_name
         Sort Method: top-N heapsort  Memory: 32kB
         ->  HashAggregate  (cost=3046369.74..3046369.75 rows=1 width=26) (actual time=18539.197..18539.821 rows=3991 loops=1)
               Group Key: supplier.s_name
               ->  Nested Loop Anti Join  (cost=2502.91..3046369.73 rows=1 width=26) (actual time=39.311..18514.180 rows=39281 loops=1)
                     ->  Nested Loop Semi Join  (cost=2502.35..3046364.99 rows=1 width=34) (actual time=39.307..17370.029 rows=704306 loops=1)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           Rows Removed by Join Filter: 80163
                           ->  Hash Join  (cost=2501.78..1990099.12 rows=393170 width=38) (actual time=39.292..16077.402 rows=730985 loops=1)
                                 Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                 ->  Merge Join  (cost=144.47..1946950.46 rows=9829238 width=12) (actual time=0.573..14051.325 rows=18321400 loops=1)
                                       Merge Cond: (orders.o_orderkey = l1.l_orderkey)
                                       ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..268485.91 rows=7372742 width=4) (actual time=0.270..1300.481 rows=7309184 loops=1)
                                             Index Cond: (o_orderstatus = 'F'::bpchar)
                                             Heap Fetches: 0
                                       ->  Index Only Scan using q21_idx_1 on lineitem l1  (cost=0.56..1511793.90 rows=19997092 width=8) (actual time=0.295..8769.032 rows=37929347 loops=1)
                                             Filter: (l_receiptdate > l_commitdate)
                                             Rows Removed by Filter: 22056704
                                             Heap Fetches: 0
                                 ->  Hash  (cost=2307.31..2307.31 rows=4000 width=30) (actual time=38.678..38.678 rows=3991 loops=1)
                                       Buckets: 1024  Batches: 1  Memory Usage: 250kB
                                       ->  Nested Loop  (cost=55.29..2307.31 rows=4000 width=30) (actual time=1.840..37.463 rows=3991 loops=1)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.008..0.012 rows=1 loops=1)
                                                   Filter: (n_name = 'PERU'::bpchar)
                                                   Rows Removed by Filter: 24
                                             ->  Bitmap Heap Scan on supplier  (cost=55.29..2266.00 rows=4000 width=34) (actual time=1.827..36.625 rows=3991 loops=1)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   Heap Blocks: exact=1865
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.29 rows=4000 width=0) (actual time=1.651..1.651 rows=3991 loops=1)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.64 rows=4 width=8) (actual time=0.001..0.001 rows=1 loops=730985)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Heap Fetches: 0
                     ->  Index Only Scan using q21_idx_1 on lineitem l3  (cost=0.56..2.65 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=704306)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           Rows Removed by Filter: 2
                           Heap Fetches: 0
 Planning time: 25.893 ms
 Execution time: 18541.302 ms
(42 rows)

SET
SET
                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3046369.76..3046369.76 rows=1 width=26) (actual time=17215.569..17215.577 rows=100 loops=1)
   ->  Sort  (cost=3046369.76..3046369.76 rows=1 width=26) (actual time=17215.567..17215.570 rows=100 loops=1)
         Sort Key: (count(*)), supplier.s_name
         Sort Method: top-N heapsort  Memory: 32kB
         ->  HashAggregate  (cost=3046369.74..3046369.75 rows=1 width=26) (actual time=17213.578..17214.190 rows=3991 loops=1)
               Group Key: supplier.s_name
               ->  Nested Loop Anti Join  (cost=2502.91..3046369.73 rows=1 width=26) (actual time=13.531..17189.805 rows=39281 loops=1)
                     ->  Nested Loop Semi Join  (cost=2502.35..3046364.99 rows=1 width=34) (actual time=13.526..16065.513 rows=704306 loops=1)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           Rows Removed by Join Filter: 80163
                           ->  Hash Join  (cost=2501.78..1990099.12 rows=393170 width=38) (actual time=13.513..14834.473 rows=730985 loops=1)
                                 Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                 ->  Merge Join  (cost=144.47..1946950.46 rows=9829238 width=12) (actual time=0.055..12951.651 rows=18321400 loops=1)
                                       Merge Cond: (orders.o_orderkey = l1.l_orderkey)
                                       ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..268485.91 rows=7372742 width=4) (actual time=0.029..1142.263 rows=7309184 loops=1)
                                             Index Cond: (o_orderstatus = 'F'::bpchar)
                                             Heap Fetches: 0
                                       ->  Index Only Scan using q21_idx_1 on lineitem l1  (cost=0.56..1511793.90 rows=19997092 width=8) (actual time=0.022..7897.288 rows=37929347 loops=1)
                                             Filter: (l_receiptdate > l_commitdate)
                                             Rows Removed by Filter: 22056704
                                             Heap Fetches: 0
                                 ->  Hash  (cost=2307.31..2307.31 rows=4000 width=30) (actual time=13.430..13.430 rows=3991 loops=1)
                                       Buckets: 1024  Batches: 1  Memory Usage: 250kB
                                       ->  Nested Loop  (cost=55.29..2307.31 rows=4000 width=30) (actual time=0.573..12.704 rows=3991 loops=1)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.004..0.007 rows=1 loops=1)
                                                   Filter: (n_name = 'PERU'::bpchar)
                                                   Rows Removed by Filter: 24
                                             ->  Bitmap Heap Scan on supplier  (cost=55.29..2266.00 rows=4000 width=34) (actual time=0.566..12.124 rows=3991 loops=1)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   Heap Blocks: exact=1865
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.29 rows=4000 width=0) (actual time=0.389..0.389 rows=3991 loops=1)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.64 rows=4 width=8) (actual time=0.001..0.001 rows=1 loops=730985)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Heap Fetches: 0
                     ->  Index Only Scan using q21_idx_1 on lineitem l3  (cost=0.56..2.65 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=704306)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           Rows Removed by Filter: 2
                           Heap Fetches: 0
 Planning time: 2.641 ms
 Execution time: 17215.679 ms
(42 rows)

query 22 run 1
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162229.38..162229.38 rows=1 width=22) (actual time=2306.310..2306.310 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75443.90..75443.91 rows=1 width=6) (actual time=1049.867..1049.867 rows=1 loops=1)
           ->  Seq Scan on customer customer_1  (cost=0.00..75324.44 rows=47782 width=6) (actual time=0.007..989.535 rows=382426 loops=1)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                 Rows Removed by Filter: 1117574
   ->  Sort  (cost=86785.47..86803.91 rows=7374 width=22) (actual time=2306.309..2306.309 rows=1 loops=1)
         Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=86619.56..86748.60 rows=7374 width=22) (actual time=2306.270..2306.279 rows=7 loops=1)
               Group Key: "substring"((customer.c_phone)::text, 1, 2)
               ->  Nested Loop Anti Join  (cost=0.43..86564.25 rows=7374 width=22) (actual time=1049.914..2278.933 rows=63509 loops=1)
                     ->  Seq Scan on customer  (cost=0.00..75324.44 rows=17501 width=26) (actual time=1049.893..1609.709 rows=191129 loops=1)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                           Rows Removed by Filter: 1308871
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.64 rows=17 width=4) (actual time=0.003..0.003 rows=1 loops=191129)
                           Index Cond: (o_custkey = customer.c_custkey)
                           Heap Fetches: 0
 Planning time: 12.233 ms
 Execution time: 2306.377 ms
(20 rows)

SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162229.38..162229.38 rows=1 width=22) (actual time=1665.536..1665.536 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75443.90..75443.91 rows=1 width=6) (actual time=797.786..797.786 rows=1 loops=1)
           ->  Seq Scan on customer customer_1  (cost=0.00..75324.44 rows=47782 width=6) (actual time=0.006..744.447 rows=382426 loops=1)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                 Rows Removed by Filter: 1117574
   ->  Sort  (cost=86785.47..86803.91 rows=7374 width=22) (actual time=1665.536..1665.536 rows=1 loops=1)
         Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=86619.56..86748.60 rows=7374 width=22) (actual time=1665.501..1665.512 rows=7 loops=1)
               Group Key: "substring"((customer.c_phone)::text, 1, 2)
               ->  Nested Loop Anti Join  (cost=0.43..86564.25 rows=7374 width=22) (actual time=797.823..1644.237 rows=63509 loops=1)
                     ->  Seq Scan on customer  (cost=0.00..75324.44 rows=17501 width=26) (actual time=797.811..1314.598 rows=191129 loops=1)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                           Rows Removed by Filter: 1308871
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.64 rows=17 width=4) (actual time=0.001..0.001 rows=1 loops=191129)
                           Index Cond: (o_custkey = customer.c_custkey)
                           Heap Fetches: 0
 Planning time: 0.623 ms
 Execution time: 1665.586 ms
(20 rows)

