query 1 run 1
SET
SET
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=341868.40..341868.40 rows=1 width=33) (actual time=16916.899..16916.900 rows=1 loops=1)
   ->  Sort  (cost=341868.40..341868.42 rows=6 width=33) (actual time=16916.898..16916.898 rows=1 loops=1)
         Sort Key: l_returnflag, l_linestatus
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=341868.10..341868.37 rows=6 width=33) (actual time=16916.868..16916.873 rows=4 loops=1)
               ->  Seq Scan on lineitem  (cost=0.00..193582.67 rows=5931417 width=33) (actual time=0.388..1359.522 rows=5930957 loops=1)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 Total runtime: 16917.003 ms
(8 rows)

SET
SET
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=341868.40..341868.40 rows=1 width=33) (actual time=16784.759..16784.759 rows=1 loops=1)
   ->  Sort  (cost=341868.40..341868.42 rows=6 width=33) (actual time=16784.758..16784.758 rows=1 loops=1)
         Sort Key: l_returnflag, l_linestatus
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=341868.10..341868.37 rows=6 width=33) (actual time=16784.730..16784.735 rows=4 loops=1)
               ->  Seq Scan on lineitem  (cost=0.00..193582.67 rows=5931417 width=33) (actual time=0.020..1163.072 rows=5930957 loops=1)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 Total runtime: 16784.816 ms
(8 rows)

query 2 run 1
SET
SET
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=69884.63..69884.64 rows=1 width=194) (actual time=622.200..622.212 rows=100 loops=1)
   ->  Sort  (cost=69884.63..69884.64 rows=1 width=194) (actual time=622.199..622.202 rows=100 loops=1)
         Sort Key: public.supplier.s_acctbal, public.nation.n_name, public.supplier.s_name, part.p_partkey
         Sort Method:  top-N heapsort  Memory: 53kB
         ->  Merge Join  (cost=45648.67..69884.62 rows=1 width=194) (actual time=450.566..621.528 rows=489 loops=1)
               Merge Cond: (part.p_partkey = public.partsupp.ps_partkey)
               Join Filter: (public.partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using q2_idx_1 on part  (cost=0.00..7832.16 rows=823 width=30) (actual time=0.653..47.964 rows=799 loops=1)
                     Index Cond: (p_size = 16)
                     Filter: ((p_type)::text ~~ '%NICKEL'::text)
               ->  Sort  (cost=45648.67..46048.03 rows=159744 width=176) (actual time=447.952..474.587 rows=162846 loops=1)
                     Sort Key: public.partsupp.ps_partkey
                     Sort Method:  external sort  Disk: 31112kB
                     ->  Hash Join  (cost=410.03..31842.47 rows=159744 width=176) (actual time=5.102..312.250 rows=162880 loops=1)
                           Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..25835.00 rows=800000 width=16) (actual time=0.001..182.466 rows=800000 loops=1)
                           ->  Hash  (cost=385.03..385.03 rows=2000 width=168) (actual time=5.090..5.090 rows=2036 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 407kB
                                 ->  Hash Join  (cost=2.53..385.03 rows=2000 width=168) (actual time=0.014..4.455 rows=2036 loops=1)
                                       Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..325.00 rows=10000 width=146) (actual time=0.001..3.241 rows=10000 loops=1)
                                       ->  Hash  (cost=2.47..2.47 rows=5 width=30) (actual time=0.011..0.011 rows=5 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                             ->  Hash Join  (cost=1.07..2.47 rows=5 width=30) (actual time=0.007..0.010 rows=5 loops=1)
                                                   Hash Cond: (public.nation.n_regionkey = public.region.r_regionkey)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34) (actual time=0.001..0.001 rows=25 loops=1)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=1)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=1)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=23.73..23.74 rows=1 width=8) (actual time=0.129..0.129 rows=1 loops=650)
                       ->  Nested Loop  (cost=0.00..23.72 rows=1 width=8) (actual time=0.117..0.127 rows=2 loops=650)
                             Join Filter: (public.nation.n_regionkey = public.region.r_regionkey)
                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=650)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.00..22.61 rows=4 width=12) (actual time=0.111..0.124 rows=4 loops=650)
                                   ->  Nested Loop  (cost=0.00..21.49 rows=4 width=12) (actual time=0.110..0.120 rows=4 loops=650)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..4.36 rows=4 width=12) (actual time=0.106..0.107 rows=4 loops=650)
                                               Index Cond: ($0 = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..4.27 rows=1 width=8) (actual time=0.003..0.003 rows=1 loops=2600)
                                               Index Cond: (public.supplier.s_suppkey = public.partsupp.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation  (cost=0.00..0.27 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=2600)
                                         Index Cond: (public.nation.n_nationkey = public.supplier.s_nationkey)
 Total runtime: 626.555 ms
(45 rows)

SET
SET
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=69884.63..69884.64 rows=1 width=194) (actual time=422.005..422.017 rows=100 loops=1)
   ->  Sort  (cost=69884.63..69884.64 rows=1 width=194) (actual time=422.005..422.011 rows=100 loops=1)
         Sort Key: public.supplier.s_acctbal, public.nation.n_name, public.supplier.s_name, part.p_partkey
         Sort Method:  top-N heapsort  Memory: 53kB
         ->  Merge Join  (cost=45648.67..69884.62 rows=1 width=194) (actual time=353.793..421.521 rows=489 loops=1)
               Merge Cond: (part.p_partkey = public.partsupp.ps_partkey)
               Join Filter: (public.partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using q2_idx_1 on part  (cost=0.00..7832.16 rows=823 width=30) (actual time=0.020..16.323 rows=799 loops=1)
                     Index Cond: (p_size = 16)
                     Filter: ((p_type)::text ~~ '%NICKEL'::text)
               ->  Sort  (cost=45648.67..46048.03 rows=159744 width=176) (actual time=353.680..379.556 rows=162846 loops=1)
                     Sort Key: public.partsupp.ps_partkey
                     Sort Method:  external sort  Disk: 31112kB
                     ->  Hash Join  (cost=410.03..31842.47 rows=159744 width=176) (actual time=3.324..222.257 rows=162880 loops=1)
                           Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..25835.00 rows=800000 width=16) (actual time=0.001..41.539 rows=800000 loops=1)
                           ->  Hash  (cost=385.03..385.03 rows=2000 width=168) (actual time=3.313..3.313 rows=2036 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 407kB
                                 ->  Hash Join  (cost=2.53..385.03 rows=2000 width=168) (actual time=0.014..2.685 rows=2036 loops=1)
                                       Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..325.00 rows=10000 width=146) (actual time=0.000..0.684 rows=10000 loops=1)
                                       ->  Hash  (cost=2.47..2.47 rows=5 width=30) (actual time=0.011..0.011 rows=5 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                             ->  Hash Join  (cost=1.07..2.47 rows=5 width=30) (actual time=0.006..0.010 rows=5 loops=1)
                                                   Hash Cond: (public.nation.n_regionkey = public.region.r_regionkey)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34) (actual time=0.000..0.001 rows=25 loops=1)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=1)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=1)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=23.73..23.74 rows=1 width=8) (actual time=0.018..0.018 rows=1 loops=650)
                       ->  Nested Loop  (cost=0.00..23.72 rows=1 width=8) (actual time=0.011..0.016 rows=2 loops=650)
                             Join Filter: (public.nation.n_regionkey = public.region.r_regionkey)
                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=650)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.00..22.61 rows=4 width=12) (actual time=0.007..0.014 rows=4 loops=650)
                                   ->  Nested Loop  (cost=0.00..21.49 rows=4 width=12) (actual time=0.006..0.011 rows=4 loops=650)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..4.36 rows=4 width=12) (actual time=0.005..0.005 rows=4 loops=650)
                                               Index Cond: ($0 = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..4.27 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=2600)
                                               Index Cond: (public.supplier.s_suppkey = public.partsupp.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation  (cost=0.00..0.27 rows=1 width=8) (actual time=0.000..0.001 rows=1 loops=2600)
                                         Index Cond: (public.nation.n_nationkey = public.supplier.s_nationkey)
 Total runtime: 426.108 ms
(45 rows)

query 3 run 1
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=316905.37..316905.39 rows=10 width=28) (actual time=2526.002..2526.003 rows=10 loops=1)
   ->  Sort  (cost=316905.37..317692.86 rows=314997 width=28) (actual time=2526.000..2526.000 rows=10 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=300648.49..310098.40 rows=314997 width=28) (actual time=2506.163..2523.848 rows=11612 loops=1)
               ->  Sort  (cost=300648.49..301435.98 rows=314997 width=28) (actual time=2506.149..2507.268 rows=30533 loops=1)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     Sort Method:  quicksort  Memory: 3154kB
                     ->  Hash Join  (cost=62926.34..271881.42 rows=314997 width=28) (actual time=660.883..2498.121 rows=30533 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..193582.67 rows=3259315 width=20) (actual time=0.003..1141.471 rows=3261873 loops=1)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=61113.87..61113.87 rows=144998 width=12) (actual time=659.906..659.906 rows=146063 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 6277kB
                                 ->  Hash Join  (cost=5881.00..61113.87 rows=144998 width=12) (actual time=54.408..635.281 rows=146063 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..45583.00 rows=728879 width=16) (actual time=0.001..356.166 rows=722275 loops=1)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=5508.00..5508.00 rows=29840 width=4) (actual time=54.182..54.182 rows=30142 loops=1)
                                             Buckets: 4096  Batches: 1  Memory Usage: 1060kB
                                             ->  Seq Scan on customer  (cost=0.00..5508.00 rows=29840 width=4) (actual time=0.002..50.211 rows=30142 loops=1)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
 Total runtime: 2526.054 ms
(23 rows)

SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=316905.37..316905.39 rows=10 width=28) (actual time=2055.325..2055.327 rows=10 loops=1)
   ->  Sort  (cost=316905.37..317692.86 rows=314997 width=28) (actual time=2055.324..2055.324 rows=10 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=300648.49..310098.40 rows=314997 width=28) (actual time=2035.271..2053.211 rows=11612 loops=1)
               ->  Sort  (cost=300648.49..301435.98 rows=314997 width=28) (actual time=2035.258..2036.404 rows=30533 loops=1)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     Sort Method:  quicksort  Memory: 3154kB
                     ->  Hash Join  (cost=62926.34..271881.42 rows=314997 width=28) (actual time=460.774..2027.673 rows=30533 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..193582.67 rows=3259315 width=20) (actual time=0.003..918.887 rows=3261873 loops=1)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=61113.87..61113.87 rows=144998 width=12) (actual time=460.306..460.306 rows=146063 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 6277kB
                                 ->  Hash Join  (cost=5881.00..61113.87 rows=144998 width=12) (actual time=34.845..439.882 rows=146063 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..45583.00 rows=728879 width=16) (actual time=0.003..257.871 rows=722275 loops=1)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=5508.00..5508.00 rows=29840 width=4) (actual time=34.826..34.826 rows=30142 loops=1)
                                             Buckets: 4096  Batches: 1  Memory Usage: 1060kB
                                             ->  Seq Scan on customer  (cost=0.00..5508.00 rows=29840 width=4) (actual time=0.002..31.408 rows=30142 loops=1)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
 Total runtime: 2055.375 ms
(23 rows)

query 4 run 1
SET
SET
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=143905.97..143905.98 rows=1 width=16) (actual time=2143.879..2143.879 rows=1 loops=1)
   ->  Sort  (cost=143905.97..143905.98 rows=1 width=16) (actual time=2143.877..2143.877 rows=1 loops=1)
         Sort Key: orders.o_orderpriority
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=143905.95..143905.96 rows=1 width=16) (actual time=2143.854..2143.855 rows=5 loops=1)
               ->  Merge Semi Join  (cost=33230.90..143614.94 rows=58201 width=16) (actual time=504.957..2127.156 rows=51398 loops=1)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=33229.15..33374.66 rows=58201 width=20) (actual time=504.390..510.351 rows=55973 loops=1)
                           Sort Key: orders.o_orderkey
                           Sort Method:  quicksort  Memory: 5909kB
                           ->  Bitmap Heap Scan on orders  (cost=916.89..28622.91 rows=58201 width=20) (actual time=13.531..489.595 rows=55973 loops=1)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..902.34 rows=58201 width=0) (actual time=10.314..10.314 rows=55973 loops=1)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using q4_idx_1 on lineitem  (cost=0.00..104325.65 rows=2000418 width=4) (actual time=0.520..1366.317 rows=3793256 loops=1)
 Total runtime: 2143.937 ms
(16 rows)

SET
SET
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=143905.97..143905.98 rows=1 width=16) (actual time=1142.034..1142.035 rows=1 loops=1)
   ->  Sort  (cost=143905.97..143905.98 rows=1 width=16) (actual time=1142.033..1142.033 rows=1 loops=1)
         Sort Key: orders.o_orderpriority
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=143905.95..143905.96 rows=1 width=16) (actual time=1142.011..1142.012 rows=5 loops=1)
               ->  Merge Semi Join  (cost=33230.90..143614.94 rows=58201 width=16) (actual time=92.906..1129.888 rows=51398 loops=1)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=33229.15..33374.66 rows=58201 width=20) (actual time=92.874..98.115 rows=55973 loops=1)
                           Sort Key: orders.o_orderkey
                           Sort Method:  quicksort  Memory: 5909kB
                           ->  Bitmap Heap Scan on orders  (cost=916.89..28622.91 rows=58201 width=20) (actual time=9.482..84.727 rows=55973 loops=1)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..902.34 rows=58201 width=0) (actual time=6.296..6.296 rows=55973 loops=1)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using q4_idx_1 on lineitem  (cost=0.00..104325.65 rows=2000418 width=4) (actual time=0.018..801.093 rows=3793256 loops=1)
 Total runtime: 1142.095 ms
(16 rows)

query 5 run 1
SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=247241.30..247241.30 rows=1 width=42) (actual time=2643.662..2643.662 rows=1 loops=1)
   ->  Sort  (cost=247241.30..247241.36 rows=25 width=42) (actual time=2643.662..2643.662 rows=1 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=247240.74..247241.18 rows=25 width=42) (actual time=2643.650..2643.650 rows=5 loops=1)
               ->  Hash Join  (cost=10487.04..247203.77 rows=7394 width=42) (actual time=98.381..2628.876 rows=7540 loops=1)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Nested Loop  (cost=10012.04..241108.67 rows=184872 width=54) (actual time=93.316..2506.362 rows=182435 loops=1)
                           ->  Hash Join  (cost=10012.04..41929.02 rows=46218 width=38) (actual time=92.429..831.214 rows=45297 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=3639.00..33938.35 rows=231090 width=8) (actual time=32.171..610.399 rows=226645 loops=1)
                                       Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..3581.23 rows=231090 width=0) (actual time=28.327..28.327 rows=226645 loops=1)
                                             Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Hash  (cost=5998.03..5998.03 rows=30000 width=38) (actual time=60.232..60.232 rows=29952 loops=1)
                                       Buckets: 4096  Batches: 1  Memory Usage: 2106kB
                                       ->  Hash Join  (cost=2.53..5998.03 rows=30000 width=38) (actual time=0.026..55.340 rows=29952 loops=1)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5133.00 rows=150000 width=8) (actual time=0.002..38.340 rows=150000 loops=1)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30) (actual time=0.020..0.020 rows=5 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30) (actual time=0.014..0.018 rows=5 loops=1)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34) (actual time=0.001..0.001 rows=25 loops=1)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.006..0.007 rows=1 loops=1)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..4.26 rows=4 width=24) (actual time=0.033..0.036 rows=4 loops=45297)
                                 Index Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Hash  (cost=325.00..325.00 rows=10000 width=8) (actual time=5.017..5.017 rows=10000 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 391kB
                           ->  Seq Scan on supplier  (cost=0.00..325.00 rows=10000 width=8) (actual time=0.002..3.715 rows=10000 loops=1)
 Total runtime: 2643.735 ms
(34 rows)

SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=247241.30..247241.30 rows=1 width=42) (actual time=544.157..544.157 rows=1 loops=1)
   ->  Sort  (cost=247241.30..247241.36 rows=25 width=42) (actual time=544.157..544.157 rows=1 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=247240.74..247241.18 rows=25 width=42) (actual time=544.145..544.145 rows=5 loops=1)
               ->  Hash Join  (cost=10487.04..247203.77 rows=7394 width=42) (actual time=68.721..536.492 rows=7540 loops=1)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Nested Loop  (cost=10012.04..241108.67 rows=184872 width=54) (actual time=65.652..494.539 rows=182435 loops=1)
                           ->  Hash Join  (cost=10012.04..41929.02 rows=46218 width=38) (actual time=65.635..255.467 rows=45297 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=3639.00..33938.35 rows=231090 width=8) (actual time=24.650..141.461 rows=226645 loops=1)
                                       Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..3581.23 rows=231090 width=0) (actual time=20.902..20.902 rows=226645 loops=1)
                                             Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Hash  (cost=5998.03..5998.03 rows=30000 width=38) (actual time=40.971..40.971 rows=29952 loops=1)
                                       Buckets: 4096  Batches: 1  Memory Usage: 2106kB
                                       ->  Hash Join  (cost=2.53..5998.03 rows=30000 width=38) (actual time=0.023..36.576 rows=29952 loops=1)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5133.00 rows=150000 width=8) (actual time=0.002..7.937 rows=150000 loops=1)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30) (actual time=0.017..0.017 rows=5 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30) (actual time=0.012..0.017 rows=5 loops=1)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34) (actual time=0.001..0.001 rows=25 loops=1)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.008..0.008 rows=1 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.006..0.007 rows=1 loops=1)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..4.26 rows=4 width=24) (actual time=0.004..0.005 rows=4 loops=45297)
                                 Index Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Hash  (cost=325.00..325.00 rows=10000 width=8) (actual time=3.047..3.047 rows=10000 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 391kB
                           ->  Seq Scan on supplier  (cost=0.00..325.00 rows=10000 width=8) (actual time=0.002..1.931 rows=10000 loops=1)
 Total runtime: 544.234 ms
(34 rows)

query 6 run 1
SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=122100.21..122100.22 rows=1 width=16) (actual time=1276.462..1276.463 rows=1 loops=1)
   ->  Aggregate  (cost=122100.21..122100.22 rows=1 width=16) (actual time=1276.461..1276.461 rows=1 loops=1)
         ->  Bitmap Heap Scan on lineitem  (cost=25273.17..121801.66 rows=119417 width=16) (actual time=143.272..1183.562 rows=119208 loops=1)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..25243.31 rows=119417 width=0) (actual time=131.098..131.098 rows=119208 loops=1)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
 Total runtime: 1276.490 ms
(7 rows)

SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=122100.21..122100.22 rows=1 width=16) (actual time=347.607..347.607 rows=1 loops=1)
   ->  Aggregate  (cost=122100.21..122100.22 rows=1 width=16) (actual time=347.606..347.606 rows=1 loops=1)
         ->  Bitmap Heap Scan on lineitem  (cost=25273.17..121801.66 rows=119417 width=16) (actual time=115.222..296.263 rows=119208 loops=1)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..25243.31 rows=119417 width=0) (actual time=104.176..104.176 rows=119208 loops=1)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
 Total runtime: 347.636 ms
(7 rows)

query 7 run 1
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=252227.80..252227.81 rows=1 width=72) (actual time=3541.027..3541.028 rows=1 loops=1)
   ->  Sort  (cost=252227.80..252242.44 rows=5853 width=72) (actual time=3541.026..3541.026 rows=1 loops=1)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=252066.85..252198.54 rows=5853 width=72) (actual time=3540.986..3540.997 rows=4 loops=1)
               ->  Hash Join  (cost=93169.27..252008.32 rows=5853 width=72) (actual time=947.879..3529.729 rows=5729 loops=1)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (n1.n_nationkey = supplier.s_nationkey))
                     ->  Hash Join  (cost=92694.27..247055.59 rows=146331 width=80) (actual time=942.103..3433.730 rows=145103 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=36556.45..182588.25 rows=1830987 width=28) (actual time=331.637..2364.802 rows=1828450 loops=1)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36098.70 rows=1830987 width=0) (actual time=309.200..309.200 rows=1828450 loops=1)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=54639.03..54639.03 rows=119904 width=60) (actual time=610.281..610.281 rows=118477 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 10645kB
                                 ->  Hash Join  (cost=5982.02..54639.03 rows=119904 width=60) (actual time=54.024..585.506 rows=118477 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..41833.00 rows=1500000 width=8) (actual time=0.002..282.391 rows=1500000 loops=1)
                                       ->  Hash  (cost=5832.15..5832.15 rows=11990 width=60) (actual time=54.015..54.015 rows=11896 loops=1)
                                             Buckets: 2048  Batches: 1  Memory Usage: 1069kB
                                             ->  Hash Join  (cost=16.65..5832.15 rows=11990 width=60) (actual time=0.130..51.742 rows=11896 loops=1)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5133.00 rows=150000 width=8) (actual time=0.001..37.080 rows=150000 loops=1)
                                                   ->  Hash  (cost=16.62..16.62 rows=2 width=60) (actual time=0.126..0.126 rows=2 loops=1)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                         ->  Nested Loop  (cost=0.00..16.62 rows=2 width=60) (actual time=0.083..0.125 rows=2 loops=1)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=30) (actual time=0.001..0.003 rows=25 loops=1)
                                                               ->  Materialize  (cost=0.00..1.38 rows=25 width=30) (actual time=0.000..0.001 rows=25 loops=25)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30) (actual time=0.002..0.005 rows=25 loops=1)
                     ->  Hash  (cost=325.00..325.00 rows=10000 width=8) (actual time=5.145..5.145 rows=10000 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 391kB
                           ->  Seq Scan on supplier  (cost=0.00..325.00 rows=10000 width=8) (actual time=0.002..3.954 rows=10000 loops=1)
 Total runtime: 3541.118 ms
(34 rows)

SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=252227.80..252227.81 rows=1 width=72) (actual time=1627.712..1627.712 rows=1 loops=1)
   ->  Sort  (cost=252227.80..252242.44 rows=5853 width=72) (actual time=1627.711..1627.711 rows=1 loops=1)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=252066.85..252198.54 rows=5853 width=72) (actual time=1627.675..1627.683 rows=4 loops=1)
               ->  Hash Join  (cost=93169.27..252008.32 rows=5853 width=72) (actual time=725.017..1621.039 rows=5729 loops=1)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (n1.n_nationkey = supplier.s_nationkey))
                     ->  Hash Join  (cost=92694.27..247055.59 rows=146331 width=80) (actual time=721.751..1568.030 rows=145103 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=36556.45..182588.25 rows=1830987 width=28) (actual time=255.124..740.836 rows=1828450 loops=1)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36098.70 rows=1830987 width=0) (actual time=232.602..232.602 rows=1828450 loops=1)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=54639.03..54639.03 rows=119904 width=60) (actual time=466.590..466.590 rows=118477 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 10645kB
                                 ->  Hash Join  (cost=5982.02..54639.03 rows=119904 width=60) (actual time=34.957..445.833 rows=118477 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..41833.00 rows=1500000 width=8) (actual time=0.001..69.150 rows=1500000 loops=1)
                                       ->  Hash  (cost=5832.15..5832.15 rows=11990 width=60) (actual time=34.950..34.950 rows=11896 loops=1)
                                             Buckets: 2048  Batches: 1  Memory Usage: 1069kB
                                             ->  Hash Join  (cost=16.65..5832.15 rows=11990 width=60) (actual time=0.132..33.020 rows=11896 loops=1)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5133.00 rows=150000 width=8) (actual time=0.001..7.013 rows=150000 loops=1)
                                                   ->  Hash  (cost=16.62..16.62 rows=2 width=60) (actual time=0.127..0.127 rows=2 loops=1)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                         ->  Nested Loop  (cost=0.00..16.62 rows=2 width=60) (actual time=0.083..0.124 rows=2 loops=1)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=30) (actual time=0.001..0.001 rows=25 loops=1)
                                                               ->  Materialize  (cost=0.00..1.38 rows=25 width=30) (actual time=0.000..0.001 rows=25 loops=25)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30) (actual time=0.001..0.003 rows=25 loops=1)
                     ->  Hash  (cost=325.00..325.00 rows=10000 width=8) (actual time=3.145..3.145 rows=10000 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 391kB
                           ->  Seq Scan on supplier  (cost=0.00..325.00 rows=10000 width=8) (actual time=0.002..2.013 rows=10000 loops=1)
 Total runtime: 1627.800 ms
(34 rows)

query 8 run 1
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=144097.11..144097.12 rows=1 width=46) (actual time=6492.723..6492.724 rows=1 loops=1)
   ->  Sort  (cost=144097.11..144098.94 rows=730 width=46) (actual time=6492.722..6492.722 rows=1 loops=1)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         Sort Method:  quicksort  Memory: 25kB
         ->  HashAggregate  (cost=144067.91..144093.46 rows=730 width=46) (actual time=6492.712..6492.713 rows=2 loops=1)
               ->  Hash Join  (cost=51947.60..144049.74 rows=2423 width=46) (actual time=841.882..6484.137 rows=2485 loops=1)
                     Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=51946.03..144002.75 rows=2423 width=24) (actual time=841.859..6480.224 rows=2485 loops=1)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=51496.03..143492.17 rows=2423 width=24) (actual time=836.926..6472.461 rows=2485 loops=1)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.00..91821.91 rows=39998 width=24) (actual time=3.543..5603.345 rows=39694 loops=1)
                                       ->  Index Scan using q2_idx_1 on part  (cost=0.00..6516.81 rows=1333 width=4) (actual time=1.609..86.549 rows=1320 loops=1)
                                             Index Cond: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..63.58 rows=33 width=28) (actual time=0.308..4.162 rows=30 loops=1320)
                                             Index Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  Hash  (cost=50359.80..50359.80 rows=90899 width=8) (actual time=830.267..830.267 rows=91179 loops=1)
                                       Buckets: 16384  Batches: 1  Memory Usage: 3562kB
                                       ->  Hash Join  (cost=13527.93..50359.80 rows=90899 width=8) (actual time=111.521..808.064 rows=91179 loops=1)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=7154.90..40805.31 rows=454494 width=12) (actual time=53.656..551.095 rows=457263 loops=1)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7041.27 rows=454494 width=0) (actual time=50.196..50.196 rows=457263 loops=1)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=5998.03..5998.03 rows=30000 width=4) (actual time=57.808..57.808 rows=29952 loops=1)
                                                   Buckets: 4096  Batches: 1  Memory Usage: 1053kB
                                                   ->  Hash Join  (cost=2.53..5998.03 rows=30000 width=4) (actual time=0.033..54.173 rows=29952 loops=1)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..5133.00 rows=150000 width=8) (actual time=0.002..37.776 rows=150000 loops=1)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4) (actual time=0.026..0.026 rows=5 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4) (actual time=0.015..0.024 rows=5 loops=1)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.001..0.003 rows=25 loops=1)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.008..0.008 rows=1 loops=1)
                                                                           Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.006..0.007 rows=1 loops=1)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=325.00..325.00 rows=10000 width=8) (actual time=4.929..4.929 rows=10000 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 391kB
                                 ->  Seq Scan on supplier  (cost=0.00..325.00 rows=10000 width=8) (actual time=0.000..3.816 rows=10000 loops=1)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.008..0.008 rows=25 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 2kB
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30) (actual time=0.002..0.005 rows=25 loops=1)
 Total runtime: 6492.809 ms
(45 rows)

SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=144097.11..144097.12 rows=1 width=46) (actual time=450.719..450.720 rows=1 loops=1)
   ->  Sort  (cost=144097.11..144098.94 rows=730 width=46) (actual time=450.718..450.718 rows=1 loops=1)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         Sort Method:  quicksort  Memory: 25kB
         ->  HashAggregate  (cost=144067.91..144093.46 rows=730 width=46) (actual time=450.708..450.710 rows=2 loops=1)
               ->  Hash Join  (cost=51947.60..144049.74 rows=2423 width=46) (actual time=316.816..447.918 rows=2485 loops=1)
                     Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=51946.03..144002.75 rows=2423 width=24) (actual time=316.796..446.706 rows=2485 loops=1)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=51496.03..143492.17 rows=2423 width=24) (actual time=313.787..441.824 rows=2485 loops=1)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.00..91821.91 rows=39998 width=24) (actual time=0.058..110.767 rows=39694 loops=1)
                                       ->  Index Scan using q2_idx_1 on part  (cost=0.00..6516.81 rows=1333 width=4) (actual time=0.033..13.388 rows=1320 loops=1)
                                             Index Cond: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..63.58 rows=33 width=28) (actual time=0.007..0.069 rows=30 loops=1320)
                                             Index Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  Hash  (cost=50359.80..50359.80 rows=90899 width=8) (actual time=313.658..313.658 rows=91179 loops=1)
                                       Buckets: 16384  Batches: 1  Memory Usage: 3562kB
                                       ->  Hash Join  (cost=13527.93..50359.80 rows=90899 width=8) (actual time=80.898..301.111 rows=91179 loops=1)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=7154.90..40805.31 rows=454494 width=12) (actual time=41.486..164.928 rows=457263 loops=1)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7041.27 rows=454494 width=0) (actual time=38.054..38.054 rows=457263 loops=1)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=5998.03..5998.03 rows=30000 width=4) (actual time=39.397..39.397 rows=29952 loops=1)
                                                   Buckets: 4096  Batches: 1  Memory Usage: 1053kB
                                                   ->  Hash Join  (cost=2.53..5998.03 rows=30000 width=4) (actual time=0.018..36.071 rows=29952 loops=1)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..5133.00 rows=150000 width=8) (actual time=0.001..8.423 rows=150000 loops=1)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4) (actual time=0.014..0.014 rows=5 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4) (actual time=0.009..0.014 rows=5 loops=1)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.000..0.000 rows=25 loops=1)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=1)
                                                                           Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=1)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=325.00..325.00 rows=10000 width=8) (actual time=3.006..3.006 rows=10000 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 391kB
                                 ->  Seq Scan on supplier  (cost=0.00..325.00 rows=10000 width=8) (actual time=0.000..1.973 rows=10000 loops=1)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.009..0.009 rows=25 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 2kB
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30) (actual time=0.002..0.005 rows=25 loops=1)
 Total runtime: 450.806 ms
(45 rows)

query 9 run 1
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=178976.83..178976.83 rows=1 width=61) (actual time=17948.075..17948.075 rows=1 loops=1)
   ->  Sort  (cost=178976.83..178977.08 rows=98 width=61) (actual time=17948.075..17948.075 rows=1 loops=1)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=178973.65..178976.34 rows=98 width=61) (actual time=17947.988..17948.012 rows=175 loops=1)
               ->  Nested Loop  (cost=0.00..178972.91 rows=98 width=61) (actual time=3.144..17361.712 rows=325928 loops=1)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=0.00..178934.36 rows=98 width=39) (actual time=3.117..16101.154 rows=325928 loops=1)
                           ->  Nested Loop  (cost=0.00..178544.26 rows=98 width=39) (actual time=2.061..12338.274 rows=325928 loops=1)
                                 ->  Nested Loop  (cost=0.00..178163.35 rows=98 width=43) (actual time=1.558..11689.268 rows=325928 loops=1)
                                       ->  Nested Loop  (cost=0.00..39403.89 rows=32324 width=20) (actual time=0.596..318.796 rows=43520 loops=1)
                                             ->  Seq Scan on part  (cost=0.00..6657.00 rows=8081 width=4) (actual time=0.007..85.467 rows=10880 loops=1)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..4.00 rows=4 width=16) (actual time=0.017..0.020 rows=4 loops=10880)
                                                   Index Cond: (partsupp.ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..4.28 rows=1 width=35) (actual time=0.040..0.259 rows=7 loops=43520)
                                             Index Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.87 rows=1 width=8) (actual time=0.001..0.002 rows=1 loops=325928)
                                       Index Cond: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using q21_idx_3 on orders  (cost=0.00..3.97 rows=1 width=8) (actual time=0.011..0.011 rows=1 loops=325928)
                                 Index Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30) (actual time=0.000..0.001 rows=25 loops=325928)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30) (actual time=0.003..0.014 rows=25 loops=1)
 Total runtime: 17948.138 ms
(24 rows)

SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=178976.83..178976.83 rows=1 width=61) (actual time=3462.626..3462.626 rows=1 loops=1)
   ->  Sort  (cost=178976.83..178977.08 rows=98 width=61) (actual time=3462.626..3462.626 rows=1 loops=1)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=178973.65..178976.34 rows=98 width=61) (actual time=3462.540..3462.570 rows=175 loops=1)
               ->  Nested Loop  (cost=0.00..178972.91 rows=98 width=61) (actual time=0.090..3058.691 rows=325928 loops=1)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=0.00..178934.36 rows=98 width=39) (actual time=0.079..2074.699 rows=325928 loops=1)
                           ->  Nested Loop  (cost=0.00..178544.26 rows=98 width=39) (actual time=0.066..1149.956 rows=325928 loops=1)
                                 ->  Nested Loop  (cost=0.00..178163.35 rows=98 width=43) (actual time=0.052..745.613 rows=325928 loops=1)
                                       ->  Nested Loop  (cost=0.00..39403.89 rows=32324 width=20) (actual time=0.031..115.000 rows=43520 loops=1)
                                             ->  Seq Scan on part  (cost=0.00..6657.00 rows=8081 width=4) (actual time=0.009..56.368 rows=10880 loops=1)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..4.00 rows=4 width=16) (actual time=0.004..0.005 rows=4 loops=10880)
                                                   Index Cond: (partsupp.ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..4.28 rows=1 width=35) (actual time=0.003..0.013 rows=7 loops=43520)
                                             Index Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.87 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=325928)
                                       Index Cond: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using q21_idx_3 on orders  (cost=0.00..3.97 rows=1 width=8) (actual time=0.002..0.003 rows=1 loops=325928)
                                 Index Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30) (actual time=0.000..0.001 rows=25 loops=325928)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30) (actual time=0.000..0.004 rows=25 loops=1)
 Total runtime: 3462.694 ms
(24 rows)

query 10 run 1
SET
SET
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=253228.83..253228.88 rows=20 width=188) (actual time=2115.855..2115.858 rows=20 loops=1)
   ->  Sort  (cost=253228.83..253373.84 rows=58004 width=188) (actual time=2115.854..2115.855 rows=20 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method:  top-N heapsort  Memory: 30kB
         ->  HashAggregate  (cost=250670.30..251685.37 rows=58004 width=188) (actual time=2092.732..2105.955 rows=38076 loops=1)
               ->  Hash Join  (cost=36361.34..249510.22 rows=58004 width=188) (actual time=342.180..1943.541 rows=114347 loops=1)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=36359.78..248711.10 rows=58004 width=166) (actual time=342.167..1918.062 rows=114347 loops=1)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Hash Join  (cost=29351.78..240325.50 rows=58004 width=20) (actual time=257.616..1761.741 rows=114347 loops=1)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Seq Scan on lineitem  (cost=0.00..193582.67 rows=1494312 width=20) (actual time=0.006..1115.583 rows=1478870 loops=1)
                                       Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=28623.82..28623.82 rows=58237 width=8) (actual time=256.763..256.763 rows=57111 loops=1)
                                       Buckets: 8192  Batches: 1  Memory Usage: 2231kB
                                       ->  Bitmap Heap Scan on orders  (cost=917.26..28623.82 rows=58237 width=8) (actual time=13.194..244.605 rows=57111 loops=1)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..902.70 rows=58237 width=0) (actual time=10.150..10.150 rows=57111 loops=1)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Hash  (cost=5133.00..5133.00 rows=150000 width=150) (actual time=84.542..84.542 rows=150000 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 27107kB
                                 ->  Seq Scan on customer  (cost=0.00..5133.00 rows=150000 width=150) (actual time=0.001..50.559 rows=150000 loops=1)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.008..0.008 rows=25 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 2kB
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30) (actual time=0.002..0.003 rows=25 loops=1)
 Total runtime: 2116.257 ms
(26 rows)

SET
SET
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=253228.83..253228.88 rows=20 width=188) (actual time=1647.862..1647.864 rows=20 loops=1)
   ->  Sort  (cost=253228.83..253373.84 rows=58004 width=188) (actual time=1647.860..1647.861 rows=20 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method:  top-N heapsort  Memory: 30kB
         ->  HashAggregate  (cost=250670.30..251685.37 rows=58004 width=188) (actual time=1624.782..1637.868 rows=38076 loops=1)
               ->  Hash Join  (cost=36361.34..249510.22 rows=58004 width=188) (actual time=150.637..1482.142 rows=114347 loops=1)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=36359.78..248711.10 rows=58004 width=166) (actual time=150.622..1458.383 rows=114347 loops=1)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Hash Join  (cost=29351.78..240325.50 rows=58004 width=20) (actual time=85.671..1324.289 rows=114347 loops=1)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Seq Scan on lineitem  (cost=0.00..193582.67 rows=1494312 width=20) (actual time=0.007..892.107 rows=1478870 loops=1)
                                       Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=28623.82..28623.82 rows=58237 width=8) (actual time=85.553..85.553 rows=57111 loops=1)
                                       Buckets: 8192  Batches: 1  Memory Usage: 2231kB
                                       ->  Bitmap Heap Scan on orders  (cost=917.26..28623.82 rows=58237 width=8) (actual time=8.819..78.440 rows=57111 loops=1)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..902.70 rows=58237 width=0) (actual time=5.800..5.800 rows=57111 loops=1)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Hash  (cost=5133.00..5133.00 rows=150000 width=150) (actual time=64.943..64.943 rows=150000 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 27107kB
                                 ->  Seq Scan on customer  (cost=0.00..5133.00 rows=150000 width=150) (actual time=0.001..32.506 rows=150000 loops=1)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.010..0.010 rows=25 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 2kB
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30) (actual time=0.002..0.007 rows=25 loops=1)
 Total runtime: 1648.261 ms
(26 rows)

query 11 run 1
SET
SET
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=30905.87..30905.87 rows=1 width=16) (actual time=760.102..760.102 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=14853.88..14853.90 rows=1 width=12) (actual time=29.566..29.566 rows=1 loops=1)
           ->  Nested Loop  (cost=0.00..14774.01 rows=31949 width=12) (actual time=0.013..17.265 rows=32880 loops=1)
                 ->  Nested Loop  (cost=0.00..430.71 rows=400 width=4) (actual time=0.009..0.174 rows=411 loops=1)
                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.004..0.006 rows=1 loops=1)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..424.40 rows=400 width=8) (actual time=0.003..0.123 rows=411 loops=1)
                             Index Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.00..34.86 rows=80 width=16) (actual time=0.003..0.034 rows=80 loops=411)
                       Index Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
   ->  Sort  (cost=16051.97..16131.84 rows=31949 width=16) (actual time=760.100..760.100 rows=1 loops=1)
         Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=15013.63..15892.22 rows=31949 width=16) (actual time=754.584..759.959 rows=839 loops=1)
               Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $0)
               ->  Nested Loop  (cost=0.00..14774.01 rows=31949 width=16) (actual time=0.962..696.475 rows=32880 loops=1)
                     ->  Nested Loop  (cost=0.00..430.71 rows=400 width=4) (actual time=0.681..2.950 rows=411 loops=1)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.006..0.008 rows=1 loops=1)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..424.40 rows=400 width=8) (actual time=0.673..2.863 rows=411 loops=1)
                                 Index Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.00..34.86 rows=80 width=20) (actual time=0.088..1.670 rows=80 loops=411)
                           Index Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
 Total runtime: 760.402 ms
(25 rows)

SET
SET
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=30905.87..30905.87 rows=1 width=16) (actual time=108.794..108.795 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=14853.88..14853.90 rows=1 width=12) (actual time=29.379..29.379 rows=1 loops=1)
           ->  Nested Loop  (cost=0.00..14774.01 rows=31949 width=12) (actual time=0.013..16.944 rows=32880 loops=1)
                 ->  Nested Loop  (cost=0.00..430.71 rows=400 width=4) (actual time=0.009..0.202 rows=411 loops=1)
                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.005..0.007 rows=1 loops=1)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..424.40 rows=400 width=8) (actual time=0.004..0.147 rows=411 loops=1)
                             Index Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.00..34.86 rows=80 width=16) (actual time=0.003..0.033 rows=80 loops=411)
                       Index Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
   ->  Sort  (cost=16051.97..16131.84 rows=31949 width=16) (actual time=108.792..108.792 rows=1 loops=1)
         Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=15013.63..15892.22 rows=31949 width=16) (actual time=103.240..108.668 rows=839 loops=1)
               Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $0)
               ->  Nested Loop  (cost=0.00..14774.01 rows=31949 width=16) (actual time=0.035..56.282 rows=32880 loops=1)
                     ->  Nested Loop  (cost=0.00..430.71 rows=400 width=4) (actual time=0.022..0.636 rows=411 loops=1)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.006..0.008 rows=1 loops=1)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..424.40 rows=400 width=8) (actual time=0.015..0.583 rows=411 loops=1)
                                 Index Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.00..34.86 rows=80 width=20) (actual time=0.007..0.123 rows=80 loops=411)
                           Index Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
 Total runtime: 108.875 ms
(25 rows)

query 12 run 1
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=132994.23..132994.24 rows=1 width=27) (actual time=1000.265..1000.266 rows=1 loops=1)
   ->  Sort  (cost=132994.23..132994.24 rows=1 width=27) (actual time=1000.264..1000.264 rows=1 loops=1)
         Sort Key: lineitem.l_shipmode
         Sort Method:  quicksort  Memory: 25kB
         ->  HashAggregate  (cost=132994.20..132994.22 rows=1 width=27) (actual time=1000.242..1000.243 rows=2 loops=1)
               ->  Merge Join  (cost=71068.28..132791.01 rows=27092 width=27) (actual time=493.520..981.555 rows=30953 loops=1)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..57566.33 rows=1500000 width=20) (actual time=0.664..383.575 rows=1499957 loops=1)
                     ->  Sort  (cost=71068.28..71136.02 rows=27098 width=15) (actual time=492.789..495.905 rows=30953 loops=1)
                           Sort Key: lineitem.l_orderkey
                           Sort Method:  quicksort  Memory: 2219kB
                           ->  Bitmap Heap Scan on lineitem  (cost=30839.15..69073.06 rows=27098 width=15) (actual time=105.605..482.889 rows=30953 loops=1)
                                 Recheck Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate))
                                 ->  Bitmap Index Scan on q12_idx_1  (cost=0.00..30832.37 rows=27098 width=0) (actual time=99.655..99.655 rows=30953 loops=1)
                                       Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 Total runtime: 1000.334 ms
(16 rows)

SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=132994.23..132994.24 rows=1 width=27) (actual time=513.807..513.808 rows=1 loops=1)
   ->  Sort  (cost=132994.23..132994.24 rows=1 width=27) (actual time=513.807..513.807 rows=1 loops=1)
         Sort Key: lineitem.l_shipmode
         Sort Method:  quicksort  Memory: 25kB
         ->  HashAggregate  (cost=132994.20..132994.22 rows=1 width=27) (actual time=513.786..513.786 rows=2 loops=1)
               ->  Merge Join  (cost=71068.28..132791.01 rows=27092 width=27) (actual time=153.857..498.255 rows=30953 loops=1)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..57566.33 rows=1500000 width=20) (actual time=0.017..245.949 rows=1499957 loops=1)
                     ->  Sort  (cost=71068.28..71136.02 rows=27098 width=15) (actual time=153.818..155.959 rows=30953 loops=1)
                           Sort Key: lineitem.l_orderkey
                           Sort Method:  quicksort  Memory: 2219kB
                           ->  Bitmap Heap Scan on lineitem  (cost=30839.15..69073.06 rows=27098 width=15) (actual time=82.440..149.185 rows=30953 loops=1)
                                 Recheck Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate))
                                 ->  Bitmap Index Scan on q12_idx_1  (cost=0.00..30832.37 rows=27098 width=0) (actual time=78.586..78.586 rows=30953 loops=1)
                                       Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 Total runtime: 513.865 ms
(16 rows)

query 13 run 1
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154097.16..154097.16 rows=1 width=8) (actual time=1573.729..1573.729 rows=1 loops=1)
   ->  Sort  (cost=154097.16..154097.66 rows=200 width=8) (actual time=1573.728..1573.728 rows=1 loops=1)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=154093.66..154096.16 rows=200 width=8) (actual time=1573.710..1573.715 rows=42 loops=1)
               ->  HashAggregate  (cost=149968.66..151843.66 rows=150000 width=8) (actual time=1529.785..1554.327 rows=150000 loops=1)
                     ->  Hash Left Join  (cost=69199.02..142771.45 rows=1439442 width=8) (actual time=871.764..1315.073 rows=1533923 loops=1)
                           Hash Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Seq Scan on customer  (cost=0.00..5133.00 rows=150000 width=4) (actual time=0.004..41.534 rows=150000 loops=1)
                           ->  Hash  (cost=45583.00..45583.00 rows=1439442 width=8) (actual time=871.654..871.654 rows=1483918 loops=1)
                                 Buckets: 131072  Batches: 2  Memory Usage: 29022kB
                                 ->  Seq Scan on orders  (cost=0.00..45583.00 rows=1439442 width=8) (actual time=0.385..657.971 rows=1483918 loops=1)
                                       Filter: ((o_comment)::text !~~ '%special%requests%'::text)
 Total runtime: 1574.455 ms
(14 rows)

SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154097.16..154097.16 rows=1 width=8) (actual time=1423.397..1423.397 rows=1 loops=1)
   ->  Sort  (cost=154097.16..154097.66 rows=200 width=8) (actual time=1423.395..1423.395 rows=1 loops=1)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=154093.66..154096.16 rows=200 width=8) (actual time=1423.377..1423.381 rows=42 loops=1)
               ->  HashAggregate  (cost=149968.66..151843.66 rows=150000 width=8) (actual time=1379.790..1404.224 rows=150000 loops=1)
                     ->  Hash Left Join  (cost=69199.02..142771.45 rows=1439442 width=8) (actual time=743.955..1168.004 rows=1533923 loops=1)
                           Hash Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Seq Scan on customer  (cost=0.00..5133.00 rows=150000 width=4) (actual time=0.004..29.354 rows=150000 loops=1)
                           ->  Hash  (cost=45583.00..45583.00 rows=1439442 width=8) (actual time=743.849..743.849 rows=1483918 loops=1)
                                 Buckets: 131072  Batches: 2  Memory Usage: 29022kB
                                 ->  Seq Scan on orders  (cost=0.00..45583.00 rows=1439442 width=8) (actual time=0.014..543.677 rows=1483918 loops=1)
                                       Filter: ((o_comment)::text !~~ '%special%requests%'::text)
 Total runtime: 1424.174 ms
(14 rows)

query 14 run 1
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=86700.72..86700.75 rows=1 width=37) (actual time=893.074..893.074 rows=1 loops=1)
   ->  Aggregate  (cost=86700.72..86700.75 rows=1 width=37) (actual time=893.074..893.074 rows=1 loops=1)
         ->  Hash Join  (cost=10127.43..86333.10 rows=73522 width=37) (actual time=106.932..811.598 rows=77317 loops=1)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1470.43..76205.66 rows=73522 width=20) (actual time=22.791..647.642 rows=77317 loops=1)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1452.05 rows=73522 width=0) (actual time=16.033..16.033 rows=77317 loops=1)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6157.00..6157.00 rows=200000 width=25) (actual time=84.074..84.074 rows=200000 loops=1)
                     Buckets: 32768  Batches: 1  Memory Usage: 11552kB
                     ->  Seq Scan on part  (cost=0.00..6157.00 rows=200000 width=25) (actual time=0.004..56.991 rows=200000 loops=1)
 Total runtime: 893.123 ms
(12 rows)

SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=86700.72..86700.75 rows=1 width=37) (actual time=311.835..311.835 rows=1 loops=1)
   ->  Aggregate  (cost=86700.72..86700.75 rows=1 width=37) (actual time=311.834..311.834 rows=1 loops=1)
         ->  Hash Join  (cost=10127.43..86333.10 rows=73522 width=37) (actual time=77.445..251.877 rows=77317 loops=1)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1470.43..76205.66 rows=73522 width=20) (actual time=16.624..133.483 rows=77317 loops=1)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1452.05 rows=73522 width=0) (actual time=10.712..10.712 rows=77317 loops=1)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6157.00..6157.00 rows=200000 width=25) (actual time=60.536..60.536 rows=200000 loops=1)
                     Buckets: 32768  Batches: 1  Memory Usage: 11552kB
                     ->  Seq Scan on part  (cost=0.00..6157.00 rows=200000 width=25) (actual time=0.004..35.916 rows=200000 loops=1)
 Total runtime: 311.869 ms
(12 rows)

query 15 run 1
SET
SET
CREATE VIEW
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=250359.03..250360.31 rows=1 width=103) (actual time=1835.669..1835.669 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=124896.68..124896.69 rows=1 width=32) (actual time=231.082..231.082 rows=1 loops=1)
           ->  HashAggregate  (cost=124885.73..124892.11 rows=365 width=20) (actual time=229.331..230.535 rows=10000 loops=1)
                 ->  Bitmap Heap Scan on lineitem  (cost=4373.15..123790.94 rows=218958 width=20) (actual time=33.670..93.102 rows=225954 loops=1)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4318.41 rows=218958 width=0) (actual time=23.419..23.419 rows=225954 loops=1)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=125462.34..125929.07 rows=365 width=103) (actual time=1835.669..1835.669 rows=1 loops=1)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..436.25 rows=10000 width=71) (actual time=0.580..4.394 rows=8449 loops=1)
         ->  Sort  (cost=125462.34..125463.25 rows=365 width=36) (actual time=1830.765..1830.765 rows=1 loops=1)
               Sort Key: revenue0.supplier_no
               Sort Method:  quicksort  Memory: 25kB
               ->  Subquery Scan on revenue0  (cost=125433.12..125446.81 rows=365 width=36) (actual time=1830.304..1830.757 rows=1 loops=1)
                     ->  HashAggregate  (cost=125433.12..125443.16 rows=365 width=20) (actual time=1830.303..1830.756 rows=1 loops=1)
                           Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=4373.15..123790.94 rows=218958 width=20) (actual time=54.320..1298.024 rows=225954 loops=1)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4318.41 rows=218958 width=0) (actual time=42.291..42.291 rows=225954 loops=1)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 Total runtime: 1835.747 ms
(22 rows)

DROP VIEW
SET
SET
CREATE VIEW
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=250359.03..250360.31 rows=1 width=103) (actual time=619.339..619.339 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=124896.68..124896.69 rows=1 width=32) (actual time=229.757..229.757 rows=1 loops=1)
           ->  HashAggregate  (cost=124885.73..124892.11 rows=365 width=20) (actual time=228.028..229.167 rows=10000 loops=1)
                 ->  Bitmap Heap Scan on lineitem  (cost=4373.15..123790.94 rows=218958 width=20) (actual time=33.294..93.031 rows=225954 loops=1)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4318.41 rows=218958 width=0) (actual time=23.107..23.107 rows=225954 loops=1)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=125462.34..125929.07 rows=365 width=103) (actual time=619.338..619.338 rows=1 loops=1)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..436.25 rows=10000 width=71) (actual time=0.019..1.520 rows=8449 loops=1)
         ->  Sort  (cost=125462.34..125463.25 rows=365 width=36) (actual time=617.323..617.323 rows=1 loops=1)
               Sort Key: revenue0.supplier_no
               Sort Method:  quicksort  Memory: 25kB
               ->  Subquery Scan on revenue0  (cost=125433.12..125446.81 rows=365 width=36) (actual time=616.863..617.318 rows=1 loops=1)
                     ->  HashAggregate  (cost=125433.12..125443.16 rows=365 width=20) (actual time=616.863..617.318 rows=1 loops=1)
                           Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=4373.15..123790.94 rows=218958 width=20) (actual time=40.250..239.162 rows=225954 loops=1)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4318.41 rows=218958 width=0) (actual time=28.835..28.835 rows=225954 loops=1)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 Total runtime: 619.414 ms
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=47859.42..47859.42 rows=1 width=40) (actual time=1305.812..1305.813 rows=1 loops=1)
   ->  Sort  (cost=47859.42..47866.35 rows=2775 width=40) (actual time=1305.812..1305.812 rows=1 loops=1)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=47117.13..47845.54 rows=2775 width=40) (actual time=1253.408..1302.788 rows=18220 loops=1)
               ->  Sort  (cost=47117.13..47255.87 rows=55498 width=40) (actual time=1253.388..1260.989 rows=117930 loops=1)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     Sort Method:  quicksort  Memory: 12286kB
                     ->  Hash Join  (cost=9853.86..42743.85 rows=55498 width=40) (actual time=98.096..485.354 rows=117930 loops=1)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Seq Scan on partsupp  (cost=350.00..28185.00 rows=400000 width=8) (actual time=5.217..252.394 rows=799680 loops=1)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..350.00 rows=1 width=4) (actual time=1.021..5.205 rows=4 loops=1)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9157.00..9157.00 rows=27749 width=40) (actual time=92.850..92.850 rows=29492 loops=1)
                                 Buckets: 4096  Batches: 1  Memory Usage: 2137kB
                                 ->  Seq Scan on part  (cost=0.00..9157.00 rows=27749 width=40) (actual time=0.009..87.489 rows=29492 loops=1)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 Total runtime: 1305.881 ms
(20 rows)

SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=47859.42..47859.42 rows=1 width=40) (actual time=1179.992..1179.993 rows=1 loops=1)
   ->  Sort  (cost=47859.42..47866.35 rows=2775 width=40) (actual time=1179.992..1179.992 rows=1 loops=1)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=47117.13..47845.54 rows=2775 width=40) (actual time=1127.606..1176.909 rows=18220 loops=1)
               ->  Sort  (cost=47117.13..47255.87 rows=55498 width=40) (actual time=1127.589..1135.212 rows=117930 loops=1)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     Sort Method:  quicksort  Memory: 12286kB
                     ->  Hash Join  (cost=9853.86..42743.85 rows=55498 width=40) (actual time=74.392..360.566 rows=117930 loops=1)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Seq Scan on partsupp  (cost=350.00..28185.00 rows=400000 width=8) (actual time=2.869..175.355 rows=799680 loops=1)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..350.00 rows=1 width=4) (actual time=0.111..2.861 rows=4 loops=1)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9157.00..9157.00 rows=27749 width=40) (actual time=71.498..71.498 rows=29492 loops=1)
                                 Buckets: 4096  Batches: 1  Memory Usage: 2137kB
                                 ->  Seq Scan on part  (cost=0.00..9157.00 rows=27749 width=40) (actual time=0.007..66.545 rows=29492 loops=1)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 Total runtime: 1180.050 ms
(20 rows)

query 17 run 1
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=225988.85..225988.86 rows=1 width=10) (actual time=5400.873..5400.873 rows=1 loops=1)
   ->  Aggregate  (cost=225988.85..225988.86 rows=1 width=10) (actual time=5400.873..5400.873 rows=1 loops=1)
         ->  Nested Loop  (cost=215745.50..225983.89 rows=1984 width=10) (actual time=5211.340..5400.448 rows=592 loops=1)
               ->  Hash Join  (cost=215745.50..221052.77 rows=198 width=40) (actual time=5210.440..5343.077 rows=208 loops=1)
                     Hash Cond: (public.lineitem.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=208585.81..211353.79 rows=184532 width=11) (actual time=5152.401..5273.284 rows=200000 loops=1)
                           ->  Seq Scan on lineitem  (cost=0.00..178579.54 rows=6001254 width=11) (actual time=0.302..688.333 rows=6001215 loops=1)
                     ->  Hash  (cost=7157.00..7157.00 rows=215 width=4) (actual time=57.843..57.843 rows=208 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 8kB
                           ->  Seq Scan on part  (cost=0.00..7157.00 rows=215 width=4) (actual time=0.907..57.744 rows=208 loops=1)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using q17_idx_1 on lineitem  (cost=0.00..24.74 rows=11 width=21) (actual time=0.254..0.274 rows=3 loops=208)
                     Index Cond: ((public.lineitem.l_partkey = part.p_partkey) AND (public.lineitem.l_quantity < ((0.2 * avg(public.lineitem.l_quantity)))))
 Total runtime: 5401.473 ms
(14 rows)

SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=225988.85..225988.86 rows=1 width=10) (actual time=5040.319..5040.319 rows=1 loops=1)
   ->  Aggregate  (cost=225988.85..225988.86 rows=1 width=10) (actual time=5040.318..5040.318 rows=1 loops=1)
         ->  Nested Loop  (cost=215745.50..225983.89 rows=1984 width=10) (actual time=4910.521..5040.161 rows=592 loops=1)
               ->  Hash Join  (cost=215745.50..221052.77 rows=198 width=40) (actual time=4910.499..5038.352 rows=208 loops=1)
                     Hash Cond: (public.lineitem.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=208585.81..211353.79 rows=184532 width=11) (actual time=4875.535..4992.299 rows=200000 loops=1)
                           ->  Seq Scan on lineitem  (cost=0.00..178579.54 rows=6001254 width=11) (actual time=0.026..493.665 rows=6001215 loops=1)
                     ->  Hash  (cost=7157.00..7157.00 rows=215 width=4) (actual time=34.773..34.773 rows=208 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 8kB
                           ->  Seq Scan on part  (cost=0.00..7157.00 rows=215 width=4) (actual time=0.129..34.716 rows=208 loops=1)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using q17_idx_1 on lineitem  (cost=0.00..24.74 rows=11 width=21) (actual time=0.007..0.008 rows=3 loops=208)
                     Index Cond: ((public.lineitem.l_partkey = part.p_partkey) AND (public.lineitem.l_quantity < ((0.2 * avg(public.lineitem.l_quantity)))))
 Total runtime: 5040.913 ms
(14 rows)

query 18 run 1
SET
SET
                                                                                                QUERY PLAN                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1133577.27..1133580.27 rows=100 width=48) (actual time=4888.625..4888.650 rows=9 loops=1)
   ->  GroupAggregate  (cost=1133577.27..1223577.24 rows=2999999 width=48) (actual time=4888.623..4888.648 rows=9 loops=1)
         ->  Sort  (cost=1133577.27..1141077.27 rows=2999999 width=48) (actual time=4888.612..4888.614 rows=63 loops=1)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               Sort Method:  quicksort  Memory: 33kB
               ->  Hash Join  (cost=433624.05..744909.42 rows=2999999 width=48) (actual time=3829.018..4888.483 rows=63 loops=1)
                     Hash Cond: (public.lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..178579.54 rows=6001254 width=11) (actual time=0.002..676.154 rows=6001215 loops=1)
                     ->  Hash  (cost=417657.05..417657.05 rows=750000 width=45) (actual time=3511.366..3511.366 rows=9 loops=1)
                           Buckets: 65536  Batches: 2  Memory Usage: 1kB
                           ->  Hash Join  (cost=7008.00..417657.05 rows=750000 width=45) (actual time=827.260..3510.962 rows=9 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Merge Semi Join  (cost=0.00..392836.55 rows=750000 width=26) (actual time=761.670..3445.342 rows=9 loops=1)
                                       Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.00..57566.33 rows=1500000 width=22) (actual time=0.600..305.308 rows=1201687 loops=1)
                                       ->  Materialize  (cost=0.00..312766.29 rows=1500314 width=4) (actual time=656.815..3066.031 rows=9 loops=1)
                                             ->  GroupAggregate  (cost=0.00..294012.37 rows=1500314 width=11) (actual time=656.812..3066.017 rows=9 loops=1)
                                                   Filter: (sum(public.lineitem.l_quantity) > 313::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..241501.39 rows=6001254 width=11) (actual time=1.061..1606.758 rows=6001215 loops=1)
                                 ->  Hash  (cost=5133.00..5133.00 rows=150000 width=23) (actual time=65.355..65.355 rows=150000 loops=1)
                                       Buckets: 16384  Batches: 1  Memory Usage: 8204kB
                                       ->  Seq Scan on customer  (cost=0.00..5133.00 rows=150000 width=23) (actual time=0.003..45.903 rows=150000 loops=1)
 Total runtime: 4888.708 ms
(23 rows)

SET
SET
                                                                                                QUERY PLAN                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1133577.27..1133580.27 rows=100 width=48) (actual time=4107.929..4107.953 rows=9 loops=1)
   ->  GroupAggregate  (cost=1133577.27..1223577.24 rows=2999999 width=48) (actual time=4107.929..4107.950 rows=9 loops=1)
         ->  Sort  (cost=1133577.27..1141077.27 rows=2999999 width=48) (actual time=4107.916..4107.921 rows=63 loops=1)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               Sort Method:  quicksort  Memory: 33kB
               ->  Hash Join  (cost=433624.05..744909.42 rows=2999999 width=48) (actual time=3053.198..4107.795 rows=63 loops=1)
                     Hash Cond: (public.lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..178579.54 rows=6001254 width=11) (actual time=0.002..660.983 rows=6001215 loops=1)
                     ->  Hash  (cost=417657.05..417657.05 rows=750000 width=45) (actual time=2739.804..2739.804 rows=9 loops=1)
                           Buckets: 65536  Batches: 2  Memory Usage: 1kB
                           ->  Hash Join  (cost=7008.00..417657.05 rows=750000 width=45) (actual time=627.900..2739.726 rows=9 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Merge Semi Join  (cost=0.00..392836.55 rows=750000 width=26) (actual time=584.646..2696.449 rows=9 loops=1)
                                       Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.00..57566.33 rows=1500000 width=22) (actual time=0.019..191.133 rows=1201687 loops=1)
                                       ->  Materialize  (cost=0.00..312766.29 rows=1500314 width=4) (actual time=516.001..2436.065 rows=9 loops=1)
                                             ->  GroupAggregate  (cost=0.00..294012.37 rows=1500314 width=11) (actual time=515.998..2436.052 rows=9 loops=1)
                                                   Filter: (sum(public.lineitem.l_quantity) > 313::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..241501.39 rows=6001254 width=11) (actual time=0.018..1015.638 rows=6001215 loops=1)
                                 ->  Hash  (cost=5133.00..5133.00 rows=150000 width=23) (actual time=43.012..43.012 rows=150000 loops=1)
                                       Buckets: 16384  Batches: 1  Memory Usage: 8204kB
                                       ->  Seq Scan on customer  (cost=0.00..5133.00 rows=150000 width=23) (actual time=0.003..24.768 rows=150000 loops=1)
 Total runtime: 4108.016 ms
(23 rows)

query 19 run 1
SET
SET


 Limit  (cost=313727.57..313727.59 rows=1 width=16) (actual time=1753.722..1753.722 rows=1 loops=1)
   ->  Aggregate  (cost=313727.57..313727.59 rows=1 width=16) (actual time=1753.722..1753.722 rows=1 loops=1)
         ->  Hash Join  (cost=10919.77..313727.29 rows=113 width=16) (actual time=86.699..1753.354 rows=111 loops=1)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               Join Filter: (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..298604.62 rows=111244 width=27) (actual time=0.391..1619.709 rows=89766 loops=1)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))))
               ->  Hash  (cost=9657.00..9657.00 rows=101022 width=30) (actual time=86.281..86.281 rows=60513 loops=1)
                     Buckets: 16384  Batches: 1  Memory Usage: 3783kB
                     ->  Seq Scan on part  (cost=0.00..9657.00 rows=101022 width=30) (actual time=0.003..76.224 rows=60513 loops=1)
                           Filter: ((p_size >= 1) AND (((p_size <= 5) AND (p_size >= 1)) OR ((p_size <= 10) AND (p_size >= 1)) OR ((p_size <= 15) AND (p_size >= 1))))
 Total runtime: 1753.764 ms
(12 rows)

SET
SET


 Limit  (cost=313727.57..313727.59 rows=1 width=16) (actual time=1489.641..1489.641 rows=1 loops=1)
   ->  Aggregate  (cost=313727.57..313727.59 rows=1 width=16) (actual time=1489.639..1489.639 rows=1 loops=1)
         ->  Hash Join  (cost=10919.77..313727.29 rows=113 width=16) (actual time=65.467..1489.360 rows=111 loops=1)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               Join Filter: (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..298604.62 rows=111244 width=27) (actual time=0.075..1380.084 rows=89766 loops=1)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))))
               ->  Hash  (cost=9657.00..9657.00 rows=101022 width=30) (actual time=65.366..65.366 rows=60513 loops=1)
                     Buckets: 16384  Batches: 1  Memory Usage: 3783kB
                     ->  Seq Scan on part  (cost=0.00..9657.00 rows=101022 width=30) (actual time=0.003..56.374 rows=60513 loops=1)
                           Filter: ((p_size >= 1) AND (((p_size <= 5) AND (p_size >= 1)) OR ((p_size <= 10) AND (p_size >= 1)) OR ((p_size <= 15) AND (p_size >= 1))))
 Total runtime: 1489.680 ms
(12 rows)

query 20 run 1
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=174924.27..174924.27 rows=1 width=51) (actual time=3656.016..3656.017 rows=1 loops=1)
   ->  Sort  (cost=174924.27..174924.27 rows=1 width=51) (actual time=3656.015..3656.015 rows=1 loops=1)
         Sort Key: supplier.s_name
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  Nested Loop Semi Join  (cost=171684.38..174924.26 rows=1 width=51) (actual time=3468.737..3655.808 rows=196 loops=1)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=7.35..235.88 rows=400 width=55) (actual time=1.185..3.426 rows=438 loops=1)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.005..0.008 rows=1 loops=1)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=7.35..229.57 rows=400 width=59) (actual time=1.176..3.325 rows=438 loops=1)
                           Recheck Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..7.25 rows=400 width=0) (actual time=0.879..0.879 rows=438 loops=1)
                                 Index Cond: (supplier.s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=171677.03..174652.38 rows=6 width=8) (actual time=7.273..8.051 rows=4504 loops=438)
                     ->  Hash Join  (cost=171677.03..174652.35 rows=6 width=8) (actual time=3185.719..3465.023 rows=5898 loops=1)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=157443.67..158816.89 rows=91548 width=15) (actual time=2559.758..2768.310 rows=544869 loops=1)
                                 ->  Bitmap Heap Scan on lineitem  (cost=18278.46..150577.60 rows=915476 width=15) (actual time=176.518..2024.086 rows=913487 loops=1)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..18049.59 rows=915476 width=0) (actual time=155.812..155.812 rows=913487 loops=1)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=14110.37..14110.37 rows=8199 width=16) (actual time=625.891..625.891 rows=8748 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 411kB
                                 ->  Nested Loop  (cost=6662.05..14110.37 rows=8199 width=16) (actual time=53.745..621.888 rows=8748 loops=1)
                                       ->  HashAggregate  (cost=6662.05..6682.25 rows=2020 width=4) (actual time=52.791..53.760 rows=2187 loops=1)
                                             ->  Seq Scan on part  (cost=0.00..6657.00 rows=2020 width=4) (actual time=0.094..52.008 rows=2187 loops=1)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.63 rows=4 width=12) (actual time=0.240..0.258 rows=4 loops=2187)
                                             Index Cond: (partsupp.ps_partkey = part.p_partkey)
 Total runtime: 3656.463 ms
(31 rows)

SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=174924.27..174924.27 rows=1 width=51) (actual time=1484.501..1484.501 rows=1 loops=1)
   ->  Sort  (cost=174924.27..174924.27 rows=1 width=51) (actual time=1484.500..1484.500 rows=1 loops=1)
         Sort Key: supplier.s_name
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  Nested Loop Semi Join  (cost=171684.38..174924.26 rows=1 width=51) (actual time=1299.345..1484.322 rows=196 loops=1)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=7.35..235.88 rows=400 width=55) (actual time=0.081..0.879 rows=438 loops=1)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.006..0.009 rows=1 loops=1)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=7.35..229.57 rows=400 width=59) (actual time=0.072..0.811 rows=438 loops=1)
                           Recheck Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..7.25 rows=400 width=0) (actual time=0.051..0.051 rows=438 loops=1)
                                 Index Cond: (supplier.s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=171677.03..174652.38 rows=6 width=8) (actual time=2.318..3.101 rows=4504 loops=438)
                     ->  Hash Join  (cost=171677.03..174652.35 rows=6 width=8) (actual time=1015.071..1296.891 rows=5898 loops=1)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=157443.67..158816.89 rows=91548 width=15) (actual time=966.800..1176.191 rows=544869 loops=1)
                                 ->  Bitmap Heap Scan on lineitem  (cost=18278.46..150577.60 rows=915476 width=15) (actual time=130.139..512.854 rows=913487 loops=1)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..18049.59 rows=915476 width=0) (actual time=110.488..110.488 rows=913487 loops=1)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=14110.37..14110.37 rows=8199 width=16) (actual time=48.206..48.206 rows=8748 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 411kB
                                 ->  Nested Loop  (cost=6662.05..14110.37 rows=8199 width=16) (actual time=31.701..46.694 rows=8748 loops=1)
                                       ->  HashAggregate  (cost=6662.05..6682.25 rows=2020 width=4) (actual time=31.682..32.046 rows=2187 loops=1)
                                             ->  Seq Scan on part  (cost=0.00..6657.00 rows=2020 width=4) (actual time=0.023..31.120 rows=2187 loops=1)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.63 rows=4 width=12) (actual time=0.005..0.006 rows=4 loops=2187)
                                             Index Cond: (partsupp.ps_partkey = part.p_partkey)
 Total runtime: 1485.001 ms
(31 rows)

query 21 run 1
SET
SET
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=426963.43..426963.43 rows=1 width=26) (actual time=3680.459..3680.469 rows=100 loops=1)
   ->  Sort  (cost=426963.43..426963.43 rows=1 width=26) (actual time=3680.458..3680.462 rows=100 loops=1)
         Sort Key: (count(*)), supplier.s_name
         Sort Method:  top-N heapsort  Memory: 32kB
         ->  HashAggregate  (cost=426963.40..426963.42 rows=1 width=26) (actual time=3679.929..3679.981 rows=421 loops=1)
               ->  Nested Loop Anti Join  (cost=95327.91..426963.40 rows=1 width=26) (actual time=777.117..3676.243 rows=4227 loops=1)
                     Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                     ->  Nested Loop Semi Join  (cost=95327.91..426954.72 rows=1 width=34) (actual time=776.209..3532.344 rows=73962 loops=1)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Hash Join  (cost=95327.91..248394.89 rows=39285 width=38) (actual time=775.312..3210.791 rows=76644 loops=1)
                                 Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Hash Join  (cost=40537.41..192411.37 rows=80017 width=34) (actual time=298.611..2630.132 rows=159165 loops=1)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Bitmap Heap Scan on lineitem l1  (cost=40296.53..183868.76 rows=2000418 width=8) (actual time=293.343..2257.107 rows=3793296 loops=1)
                                             Recheck Cond: (l_receiptdate > l_commitdate)
                                             ->  Bitmap Index Scan on q21_idx_2  (cost=0.00..39796.43 rows=2000418 width=0) (actual time=271.138..271.138 rows=3793296 loops=1)
                                       ->  Hash  (cost=235.88..235.88 rows=400 width=30) (actual time=4.725..4.725 rows=421 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 27kB
                                             ->  Nested Loop  (cost=7.35..235.88 rows=400 width=30) (actual time=0.910..4.628 rows=421 loops=1)
                                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.005..0.007 rows=1 loops=1)
                                                         Filter: (n_name = 'PERU'::bpchar)
                                                   ->  Bitmap Heap Scan on supplier  (cost=7.35..229.57 rows=400 width=34) (actual time=0.902..4.554 rows=421 loops=1)
                                                         Recheck Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                         ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..7.25 rows=400 width=0) (actual time=0.854..0.854 rows=421 loops=1)
                                                               Index Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Hash  (cost=45583.00..45583.00 rows=736600 width=4) (actual time=476.423..476.423 rows=729413 loops=1)
                                       Buckets: 131072  Batches: 1  Memory Usage: 25644kB
                                       ->  Seq Scan on orders  (cost=0.00..45583.00 rows=736600 width=4) (actual time=0.005..370.464 rows=729413 loops=1)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..4.49 rows=4 width=8) (actual time=0.004..0.004 rows=1 loops=76644)
                                 Index Cond: (l2.l_orderkey = orders.o_orderkey)
                     ->  Index Scan using q21_idx_2 on lineitem l3  (cost=0.00..4.33 rows=1 width=8) (actual time=0.002..0.002 rows=1 loops=73962)
                           Index Cond: (l3.l_orderkey = l1.l_orderkey)
 Total runtime: 3680.651 ms
(34 rows)

SET
SET
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=426963.43..426963.43 rows=1 width=26) (actual time=1944.430..1944.442 rows=100 loops=1)
   ->  Sort  (cost=426963.43..426963.43 rows=1 width=26) (actual time=1944.430..1944.434 rows=100 loops=1)
         Sort Key: (count(*)), supplier.s_name
         Sort Method:  top-N heapsort  Memory: 32kB
         ->  HashAggregate  (cost=426963.40..426963.42 rows=1 width=26) (actual time=1943.918..1943.972 rows=421 loops=1)
               ->  Nested Loop Anti Join  (cost=95327.91..426963.40 rows=1 width=26) (actual time=589.932..1941.140 rows=4227 loops=1)
                     Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                     ->  Nested Loop Semi Join  (cost=95327.91..426954.72 rows=1 width=34) (actual time=589.586..1823.907 rows=73962 loops=1)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Hash Join  (cost=95327.91..248394.89 rows=39285 width=38) (actual time=589.566..1642.191 rows=76644 loops=1)
                                 Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Hash Join  (cost=40537.41..192411.37 rows=80017 width=34) (actual time=236.716..1193.232 rows=159165 loops=1)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Bitmap Heap Scan on lineitem l1  (cost=40296.53..183868.76 rows=2000418 width=8) (actual time=235.492..868.516 rows=3793296 loops=1)
                                             Recheck Cond: (l_receiptdate > l_commitdate)
                                             ->  Bitmap Index Scan on q21_idx_2  (cost=0.00..39796.43 rows=2000418 width=0) (actual time=213.318..213.318 rows=3793296 loops=1)
                                       ->  Hash  (cost=235.88..235.88 rows=400 width=30) (actual time=1.175..1.175 rows=421 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 27kB
                                             ->  Nested Loop  (cost=7.35..235.88 rows=400 width=30) (actual time=0.077..0.881 rows=421 loops=1)
                                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.006..0.008 rows=1 loops=1)
                                                         Filter: (n_name = 'PERU'::bpchar)
                                                   ->  Bitmap Heap Scan on supplier  (cost=7.35..229.57 rows=400 width=34) (actual time=0.069..0.803 rows=421 loops=1)
                                                         Recheck Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                         ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..7.25 rows=400 width=0) (actual time=0.050..0.050 rows=421 loops=1)
                                                               Index Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Hash  (cost=45583.00..45583.00 rows=736600 width=4) (actual time=352.760..352.760 rows=729413 loops=1)
                                       Buckets: 131072  Batches: 1  Memory Usage: 25644kB
                                       ->  Seq Scan on orders  (cost=0.00..45583.00 rows=736600 width=4) (actual time=0.004..258.834 rows=729413 loops=1)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..4.49 rows=4 width=8) (actual time=0.002..0.002 rows=1 loops=76644)
                                 Index Cond: (l2.l_orderkey = orders.o_orderkey)
                     ->  Index Scan using q21_idx_2 on lineitem l3  (cost=0.00..4.33 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=73962)
                           Index Cond: (l3.l_orderkey = l1.l_orderkey)
 Total runtime: 1944.602 ms
(34 rows)

query 22 run 1
SET
SET
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18988.93..18988.94 rows=1 width=24) (actual time=831.461..831.462 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7582.24..7582.25 rows=1 width=8) (actual time=119.943..119.944 rows=1 loops=1)
           ->  Seq Scan on customer  (cost=0.00..7570.50 rows=4695 width=8) (actual time=0.007..103.112 rows=38017 loops=1)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Sort  (cost=11406.68..11408.50 rows=725 width=24) (actual time=831.459..831.459 rows=1 loops=1)
         Sort Key: ("substring"((public.customer.c_phone)::text, 1, 2))
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=11388.56..11403.06 rows=725 width=24) (actual time=831.433..831.437 rows=7 loops=1)
               ->  Nested Loop Anti Join  (cost=0.00..11383.12 rows=725 width=24) (actual time=119.985..825.275 rows=6397 loops=1)
                     ->  Seq Scan on customer  (cost=0.00..7570.50 rows=1724 width=28) (actual time=119.968..207.442 rows=19077 loops=1)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..24.75 rows=17 width=4) (actual time=0.032..0.032 rows=1 loops=19077)
                           Index Cond: (orders.o_custkey = public.customer.c_custkey)
 Total runtime: 831.543 ms
(15 rows)

SET
SET
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18988.93..18988.94 rows=1 width=24) (actual time=219.519..219.519 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7582.24..7582.25 rows=1 width=8) (actual time=100.070..100.070 rows=1 loops=1)
           ->  Seq Scan on customer  (cost=0.00..7570.50 rows=4695 width=8) (actual time=0.007..83.921 rows=38017 loops=1)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Sort  (cost=11406.68..11408.50 rows=725 width=24) (actual time=219.519..219.519 rows=1 loops=1)
         Sort Key: ("substring"((public.customer.c_phone)::text, 1, 2))
         Sort Method:  top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=11388.56..11403.06 rows=725 width=24) (actual time=219.495..219.496 rows=7 loops=1)
               ->  Nested Loop Anti Join  (cost=0.00..11383.12 rows=725 width=24) (actual time=100.109..216.265 rows=6397 loops=1)
                     ->  Seq Scan on customer  (cost=0.00..7570.50 rows=1724 width=28) (actual time=100.095..158.038 rows=19077 loops=1)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..24.75 rows=17 width=4) (actual time=0.003..0.003 rows=1 loops=19077)
                           Index Cond: (orders.o_custkey = public.customer.c_custkey)
 Total runtime: 219.578 ms
(15 rows)

