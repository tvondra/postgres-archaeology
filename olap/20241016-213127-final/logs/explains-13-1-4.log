query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191552.73..191553.41 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191552.73..191556.79 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=191552.73..191555.60 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=190552.67..190552.69 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=190552.43..190552.59 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131313.87 rows=1480964 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=21586.13..21586.13 rows=1 width=192)
   ->  Sort  (cost=21586.13..21586.13 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..21586.12 rows=1 width=192)
               Join Filter: (nation.n_nationkey = supplier.s_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..21583.42 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..21583.42 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..21582.14 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5442.83 rows=1031 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.64 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 3 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=233627.11..233627.13 rows=10 width=44)
   ->  Sort  (cost=233627.11..234420.84 rows=317491 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=180020.57..226766.24 rows=317491 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=180020.57..218035.24 rows=317491 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=179020.51..179218.94 rows=79373 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=37910.81..172560.99 rows=79373 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..131313.87 rows=821419 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=37326.36..37326.36 rows=46756 width=12)
                                       ->  Parallel Hash Join  (cost=4534.91..37326.36 rows=46756 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..32179.39 rows=233158 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=4378.25..4378.25 rows=12533 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12533 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29480.32..54250.36 rows=1 width=24)
   ->  GroupAggregate  (cost=29480.32..153330.52 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29480.32..153035.54 rows=58985 width=16)
               ->  Gather Merge  (cost=29479.89..36458.20 rows=58985 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28479.85..28527.42 rows=19027 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=711.02..27127.44 rows=19027 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..696.28 rows=58985 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.43..2.22 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=72009.02..72009.02 rows=1 width=58)
   ->  Sort  (cost=72009.02..72009.08 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=71969.18..72008.90 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=71969.18..72008.02 rows=75 width=58)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=70969.14..70999.17 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=70969.14..70975.09 rows=2377 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=7981.89..70835.85 rows=2377 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=7508.89..70050.86 rows=59427 width=50)
                                             ->  Parallel Hash Join  (cost=7508.46..35093.89 rows=14854 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=2768.33..30013.36 rows=74269 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..2710.77 rows=230234 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=4583.88..4583.88 rows=12500 width=38)
                                                         ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=114921.37..114921.38 rows=1 width=32)
   ->  Finalize Aggregate  (cost=114921.37..114921.38 rows=1 width=32)
         ->  Gather  (cost=114920.93..114921.34 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=113920.93..113920.94 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=22483.64..113773.45 rows=29496 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..22454.14 rows=117982 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=141399.44..141558.05 rows=1 width=92)
   ->  GroupAggregate  (cost=141399.44..1100204.95 rows=6045 width=92)
         Group Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
         ->  Nested Loop  (cost=141399.44..1100008.49 rows=6045 width=72)
               Join Filter: (n2.n_nationkey = customer.c_nationkey)
               ->  Nested Loop  (cost=141399.02..763703.02 rows=151120 width=76)
                     ->  Gather Merge  (cost=141398.59..159492.89 rows=151120 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=140398.53..140492.98 rows=37780 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=381.77..137526.25 rows=37780 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..135064.64 rows=453913 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=371.37..371.37 rows=832 width=60)
                                             ->  Hash Join  (cost=2.87..371.37 rows=832 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.42..2.21 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 8 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=41790.02..41804.85 rows=1 width=40)
   ->  GroupAggregate  (cost=41790.02..77474.83 rows=2406 width=40)
         Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  Nested Loop  (cost=41790.02..77371.61 rows=2454 width=46)
               Join Filter: (supplier.s_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=41790.02..76471.70 rows=2454 width=20)
                     ->  Nested Loop  (cost=41789.73..71389.66 rows=2454 width=20)
                           Join Filter: (n1.n_nationkey = customer.c_nationkey)
                           ->  Nested Loop  (cost=41788.66..70467.03 rows=12269 width=24)
                                 ->  Gather Merge  (cost=41788.24..43239.74 rows=12269 width=24)
                                       Workers Planned: 3
                                       ->  Sort  (cost=40788.20..40798.09 rows=3958 width=24)
                                             Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                             ->  Parallel Hash Join  (cost=6594.50..40551.70 rows=3958 width=24)
                                                   Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=148865 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=6469.87..6469.87 rows=9970 width=20)
                                                         ->  Nested Loop  (cost=0.85..6469.87 rows=9970 width=20)
                                                               ->  Parallel Index Only Scan using q2_idx_1 on part  (cost=0.42..5391.74 rows=332 width=4)
                                                                     Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                               ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.94 rows=31 width=24)
                                                                     Index Cond: (l_partkey = part.p_partkey)
                                 ->  Index Only Scan using q10_idx_1 on customer  (cost=0.42..2.22 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Materialize  (cost=1.07..2.47 rows=5 width=4)
                                 ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                       Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                       ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.29..2.07 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(36 rows)

query 9 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=55226.95..55236.64 rows=1 width=66)
   ->  GroupAggregate  (cost=55226.95..637648.60 rows=60150 width=66)
         Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  Nested Loop  (cost=55226.95..632352.58 rows=242480 width=57)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=55226.53..83913.48 rows=242480 width=63)
                     Workers Planned: 3
                     ->  Sort  (cost=54226.49..54422.04 rows=78219 width=63)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=14592.52..47869.15 rows=78219 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=14590.96..47627.45 rows=78219 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=8)
                                       ->  Parallel Hash  (cost=13613.22..13613.22 rows=78219 width=41)
                                             ->  Hash Join  (cost=448.85..13613.22 rows=78219 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.85..12959.80 rows=78219 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4744.87 rows=2607 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.84 rows=31 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..2.24 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
(28 rows)

query 10 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=83772.57..83772.62 rows=20 width=202)
   ->  Sort  (cost=83772.57..83913.11 rows=56214 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=81574.07..82276.74 rows=56214 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6694.46..80871.39 rows=56214 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5694.46..74249.99 rows=18134 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5692.90..74192.76 rows=18134 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=689.65..69141.91 rows=18134 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=689.22..27097.23 rows=18467 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..674.91 rows=57248 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..2.27 rows=1 width=16)
                                             Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 11 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=17213.59..17213.60 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=7100.15..7100.17 rows=1 width=32)
           ->  Gather  (cost=7100.04..7100.15 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=6100.04..6100.05 rows=1 width=32)
                       ->  Nested Loop  (cost=2.04..5958.85 rows=18824 width=10)
                             ->  Hash Join  (cost=1.61..508.49 rows=235 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..489.11 rows=5882 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..22.39 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=10113.43..10140.10 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  Finalize HashAggregate  (cost=9500.09..10060.09 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Gather  (cost=7147.09..9264.79 rows=18824 width=36)
                     Workers Planned: 1
                     ->  Partial HashAggregate  (cost=6147.09..6382.39 rows=18824 width=36)
                           Group Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=2.04..5958.85 rows=18824 width=14)
                                 ->  Hash Join  (cost=1.61..508.49 rows=235 width=4)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Index Only Scan using q2_idx_3 on supplier  (cost=0.29..489.11 rows=5882 width=8)
                                       ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..22.39 rows=80 width=18)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
(33 rows)

query 12 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14953.99..31742.88 rows=1 width=27)
   ->  GroupAggregate  (cost=14953.99..132476.26 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=14953.99..131979.15 rows=28402 width=27)
               ->  Gather Merge  (cost=14953.56..18354.26 rows=28402 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=13953.50..13971.25 rows=7100 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..13499.33 rows=7100 width=15)
                                 Index Cond: ((l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 Filter: (l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[]))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(13 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=65023.89..65023.89 rows=1 width=16)
   ->  Sort  (cost=65023.89..65024.39 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=65020.89..65022.89 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61270.89..62770.89 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53771.64 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=87868.77..87868.78 rows=1 width=32)
   ->  Finalize Aggregate  (cost=87868.77..87868.78 rows=1 width=32)
         ->  Gather  (cost=87868.31..87868.72 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=86868.31..86868.32 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7534.46..86488.42 rows=21708 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1560.46..80457.44 rows=21708 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1538.75 rows=86832 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=242136.42..242248.27 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122406.48..122406.49 rows=1 width=32)
           ->  HashAggregate  (cost=122158.01..122282.25 rows=9939 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4037.30..119911.31 rows=224670 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3981.13 rows=224670 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=119729.93..125322.32 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=119729.64..125160.69 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Gather Merge  (cost=119729.64..124489.81 rows=39756 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=118729.58..118754.43 rows=9939 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=117945.45..118069.69 rows=9939 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=4037.30..117383.77 rows=56168 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3981.13 rows=224670 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.22 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=27650.84..27650.84 rows=1 width=44)
   ->  Sort  (cost=27650.84..27690.50 rows=15865 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=19845.70..27571.51 rows=15865 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=19845.70..26829.58 rows=58328 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=18845.64..18882.10 rows=14582 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size
                           ->  Parallel Hash Join  (cost=6682.66..17837.16 rows=14582 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..11240.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12152 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12152 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=178211.54..178211.55 rows=1 width=32)
   ->  Finalize Aggregate  (cost=178211.54..178211.55 rows=1 width=32)
         ->  Gather  (cost=178211.31..178211.52 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=177211.31..177211.32 rows=1 width=32)
                     ->  Nested Loop  (cost=5352.63..177209.22 rows=838 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=5352.20..176977.75 rows=84 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=5351.76..5351.98 rows=86 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=86 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.43..169185.84 rows=195110 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136253.00 rows=6001238 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.63 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 18 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=707323.85..707324.10 rows=100 width=71)
   ->  Sort  (cost=707323.85..712325.92 rows=2000825 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=570672.70..630853.76 rows=2000825 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 32
               ->  Hash Join  (cost=6985.74..445308.51 rows=2000825 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=13.74..433084.20 rows=2000825 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=0.86..260602.59 rows=500103 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..56864.43 rows=1500000 width=20)
                                 ->  GroupAggregate  (cost=0.43..188735.84 rows=500103 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136225.00 rows=6001238 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136225.00 rows=6001238 width=9)
                     ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                           ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(20 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=9307.69..9307.70 rows=1 width=32)
   ->  Finalize Aggregate  (cost=9307.69..9307.70 rows=1 width=32)
         ->  Gather  (cost=9307.47..9307.68 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=8307.47..8307.48 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..8307.13 rows=45 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=193 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..3.44 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=220430.44..220430.45 rows=1 width=51)
   ->  Sort  (cost=220430.44..220430.45 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=191952.54..220430.43 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=191952.54..219975.12 rows=1 width=8)
                     ->  Nested Loop  (cost=191952.54..219975.12 rows=1 width=8)
                           ->  Hash Join  (cost=191952.11..214334.02 rows=4908 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=185944.60..202192.00 rows=485900 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 8
                                       ->  Bitmap Heap Scan on lineitem  (cost=16477.69..142798.56 rows=917391 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16248.34 rows=917391 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=5982.26..5982.26 rows=2020 width=4)
                                       ->  Gather Merge  (cost=1000.46..5982.26 rows=2020 width=4)
                                             Workers Planned: 3
                                             ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4744.87 rows=652 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..1.14 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(29 rows)

query 21 run 1
SET
SET
SET
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=60976.14..60976.14 rows=1 width=34)
   ->  Sort  (cost=60976.14..60976.14 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=60970.73..60976.13 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Nested Loop Semi Join  (cost=60970.73..60976.11 rows=1 width=26)
                     Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                     ->  Nested Loop  (cost=60970.30..60973.68 rows=1 width=38)
                           Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=60970.30..60972.35 rows=1 width=42)
                                 ->  Gather Merge  (cost=60969.87..60969.99 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Sort  (cost=59969.81..59969.82 rows=1 width=38)
                                             Sort Key: supplier.s_name
                                             ->  Nested Loop  (cost=32171.53..59969.80 rows=1 width=38)
                                                   ->  Parallel Hash Anti Join  (cost=32171.25..59965.73 rows=1 width=8)
                                                         Hash Cond: (l1.l_orderkey = l3.l_orderkey)
                                                         Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..25919.53 rows=500103 width=8)
                                                         ->  Parallel Hash  (cost=25919.53..25919.53 rows=500103 width=8)
                                                               ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..25919.53 rows=500103 width=8)
                                                   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.07 rows=1 width=34)
                                                         Index Cond: (s_suppkey = l1.l_suppkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'PERU'::bpchar)
                     ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                           Index Cond: (l_orderkey = orders.o_orderkey)
(29 rows)

query 22 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.57..12517.30 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.82..6242.83 rows=1 width=32)
           ->  Gather  (cost=6242.60..6242.81 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.60..5242.61 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1988 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7513.59 rows=717 width=72)
         Group Key: "substring"((customer.c_phone)::text, 1, 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7495.66 rows=717 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     Params Evaluated: $1
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.00 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

