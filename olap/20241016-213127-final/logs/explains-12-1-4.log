query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191588.41..191589.09 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191588.41..191592.47 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=191588.41..191591.28 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=190588.35..190588.37 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=190588.11..190588.27 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.15 rows=1481849 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18351.51..18351.52 rows=1 width=192)
   ->  Sort  (cost=18351.51..18351.52 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..18351.50 rows=1 width=192)
               Join Filter: (nation.n_nationkey = supplier.s_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..18348.80 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..18348.80 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..18347.53 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5437.51 rows=822 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.70 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 3 run 1
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=233225.61..233225.64 rows=10 width=44)
   ->  Sort  (cost=233225.61..233997.09 rows=308592 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=179771.53..226557.05 rows=308592 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=179771.53..218842.25 rows=308592 width=44)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=178771.47..181085.91 rows=77148 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=178771.47..178964.34 rows=77148 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Parallel Hash Join  (cost=37896.98..172508.85 rows=77148 width=24)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.15 rows=813044 width=16)
                                             Filter: (l_shipdate > '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=37323.05..37323.05 rows=45914 width=12)
                                             ->  Parallel Hash Join  (cost=4532.26..37323.05 rows=45914 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..32179.39 rows=232906 width=16)
                                                         Filter: (o_orderdate < '1995-03-07'::date)
                                                   ->  Parallel Hash  (cost=4378.25..4378.25 rows=12321 width=4)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12321 width=4)
                                                               Filter: (c_mktsegment = 'BUILDING'::bpchar)
(23 rows)

query 4 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=60840.38..60840.76 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=60840.38..60842.28 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Gather Merge  (cost=60840.38..60842.16 rows=15 width=24)
               Workers Planned: 3
               ->  Sort  (cost=59840.34..59840.35 rows=5 width=24)
                     Sort Key: orders.o_orderpriority
                     ->  Partial HashAggregate  (cost=59840.23..59840.28 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Parallel Hash Semi Join  (cost=33111.92..59751.74 rows=17698 width=16)
                                 Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=864.78..27261.25 rows=17698 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..851.07 rows=54864 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Parallel Hash  (cost=25995.75..25995.75 rows=500111 width=4)
                                       ->  Parallel Index Only Scan using q21_idx_2 on lineitem  (cost=0.43..25995.75 rows=500111 width=4)
(17 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=73262.18..73262.18 rows=1 width=58)
   ->  Sort  (cost=73262.18..73262.24 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=73222.06..73262.06 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=73222.06..73261.18 rows=75 width=58)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=72222.02..72252.33 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=72222.02..72228.02 rows=2400 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=8874.95..72087.27 rows=2400 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=8401.95..71299.22 rows=60009 width=50)
                                             ->  Parallel Hash Join  (cost=8401.52..36001.18 rows=14999 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=3661.39..30917.31 rows=74995 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..3603.27 rows=232484 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=4583.88..4583.88 rows=12500 width=38)
                                                         ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=116218.96..116218.97 rows=1 width=32)
   ->  Finalize Aggregate  (cost=116218.96..116218.97 rows=1 width=32)
         ->  Gather  (cost=116218.52..116218.93 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=115218.52..115218.53 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=23041.41..115068.23 rows=30058 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..23011.35 rows=120232 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=176463.26..176463.42 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=176463.26..177428.73 rows=6116 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=176463.26..177245.25 rows=6116 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=175463.20..175516.72 rows=1529 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=175463.20..175467.03 rows=1529 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Hash Join  (cost=38272.27..175382.33 rows=1529 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Parallel Hash Join  (cost=37907.17..174813.02 rows=36744 width=46)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..135064.98 rows=459299 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=37423.29..37423.29 rows=38710 width=30)
                                             ->  Parallel Hash Join  (cost=4477.77..37423.29 rows=38710 width=30)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=8)
                                                   ->  Parallel Hash  (cost=4415.27..4415.27 rows=5000 width=30)
                                                         ->  Hash Join  (cost=1.40..4415.27 rows=5000 width=30)
                                                               Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                               ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                 ->  Hash  (cost=355.10..355.10 rows=800 width=30)
                                       ->  Hash Join  (cost=1.40..355.10 rows=800 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(34 rows)

query 8 run 1
SET
SET
SET
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=46604.96..46605.11 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=46604.96..46962.22 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=46604.96..46882.68 rows=2032 width=72)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=45604.93..45648.11 rows=1016 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=45604.93..45607.47 rows=1016 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=41041.35..45554.19 rows=1016 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Hash Join  (cost=41039.78..45544.43 rows=1016 width=20)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Hash Join  (cost=40591.78..45093.76 rows=1016 width=20)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Parallel Hash Join  (cost=40589.28..45062.04 rows=5080 width=24)
                                                   Hash Cond: (customer.c_custkey = orders.o_custkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Parallel Hash  (cost=40540.11..40540.11 rows=3933 width=24)
                                                         ->  Parallel Hash Join  (cost=6585.66..40540.11 rows=3933 width=24)
                                                               Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                               ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=148150 width=12)
                                                                     Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                               ->  Parallel Hash  (cost=6461.22..6461.22 rows=9955 width=20)
                                                                     ->  Nested Loop  (cost=0.85..6461.22 rows=9955 width=20)
                                                                           ->  Parallel Index Only Scan using q2_idx_1 on part  (cost=0.42..5391.74 rows=332 width=4)
                                                                                 Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                                           ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.92 rows=30 width=24)
                                                                                 Index Cond: (l_partkey = part.p_partkey)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(40 rows)

query 9 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=76982.74..76983.14 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=76982.74..101193.11 rows=60150 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=76982.74..98335.99 rows=180450 width=66)
               Workers Planned: 3
               ->  Sort  (cost=75982.70..76133.07 rows=60150 width=66)
                     Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                     ->  Partial HashAggregate  (cost=70155.28..71207.91 rows=60150 width=66)
                           Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
                           ->  Parallel Hash Join  (cost=34438.27..68102.29 rows=117314 width=57)
                                 Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=8)
                                 ->  Parallel Hash  (cost=33301.80..33301.80 rows=90918 width=53)
                                       ->  Hash Join  (cost=19125.77..33301.80 rows=90918 width=53)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Hash Join  (cost=19124.21..33021.11 rows=90918 width=31)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Hash Join  (cost=18676.21..32334.33 rows=90928 width=35)
                                                         Hash Cond: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                                                         ->  Parallel Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..12158.42 rows=200000 width=14)
                                                         ->  Parallel Hash  (cost=16915.89..16915.89 rows=117326 width=33)
                                                               ->  Nested Loop  (cost=0.85..16915.89 rows=117326 width=33)
                                                                     ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4744.87 rows=3910 width=4)
                                                                           Filter: ((p_name)::text ~~ '%navy%'::text)
                                                                     ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.81 rows=30 width=29)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(30 rows)

query 10 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=84264.92..84264.97 rows=20 width=202)
   ->  Sort  (cost=84264.92..84407.58 rows=57061 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=82033.29..82746.55 rows=57061 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6910.50..81320.03 rows=57061 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5910.50..74613.93 rows=18407 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5908.94..74555.86 rows=18407 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=905.69..69504.29 rows=18407 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=905.26..27314.23 rows=18531 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..890.90 rows=57447 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..2.27 rows=1 width=16)
                                             Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 11 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22237.23..22237.23 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=9611.97..9611.98 rows=1 width=32)
           ->  Gather  (cost=9611.85..9611.96 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=8611.85..8611.86 rows=1 width=32)
                       ->  Nested Loop  (cost=2.04..8470.67 rows=18824 width=10)
                             ->  Hash Join  (cost=1.61..508.49 rows=235 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..489.11 rows=5882 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..33.08 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=12625.24..12651.91 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  Finalize HashAggregate  (cost=12011.91..12571.91 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Gather  (cost=9658.91..11776.61 rows=18824 width=36)
                     Workers Planned: 1
                     ->  Partial HashAggregate  (cost=8658.91..8894.21 rows=18824 width=36)
                           Group Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=2.04..8470.67 rows=18824 width=14)
                                 ->  Hash Join  (cost=1.61..508.49 rows=235 width=4)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Index Only Scan using q2_idx_3 on supplier  (cost=0.29..489.11 rows=5882 width=8)
                                       ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..33.08 rows=80 width=18)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
(33 rows)

query 12 run 1
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=43353.63..43354.14 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=43353.63..43357.26 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=43353.63..43356.98 rows=28 width=27)
               Workers Planned: 4
               ->  Sort  (cost=42353.57..42353.59 rows=7 width=27)
                     Sort Key: lineitem.l_shipmode
                     ->  Partial HashAggregate  (cost=42353.40..42353.47 rows=7 width=27)
                           Group Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.85..42228.01 rows=7165 width=27)
                                 ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..13564.09 rows=7165 width=15)
                                       Index Cond: ((l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                       Filter: (l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[]))
                                 ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(15 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64793.97..64793.97 rows=1 width=16)
   ->  Sort  (cost=64793.97..64794.47 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64790.97..64792.97 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61040.97..62540.97 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53692.49 rows=1469697 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1469697 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=84377.14..84377.16 rows=1 width=32)
   ->  Finalize Aggregate  (cost=84377.14..84377.16 rows=1 width=32)
         ->  Gather  (cost=84376.69..84377.10 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=83376.69..83376.70 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7411.53..83027.07 rows=19978 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1437.53..77000.63 rows=19978 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1417.55 rows=79912 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=242489.70..242602.23 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122614.26..122614.27 rows=1 width=32)
           ->  HashAggregate  (cost=122364.24..122489.25 rows=10001 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4099.41..120082.31 rows=228193 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4042.36 rows=228193 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=119875.43..125501.70 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=119875.14..125340.08 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Gather Merge  (cost=119875.14..124665.01 rows=40004 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=118875.09..118900.09 rows=10001 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=118085.61..118210.63 rows=10001 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=4099.41..117515.13 rows=57048 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4042.36 rows=228193 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.22 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=30408.36..30408.36 rows=1 width=44)
   ->  Sort  (cost=30408.36..30448.25 rows=15955 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=29430.46..30328.58 rows=15955 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=29430.46..29578.17 rows=59086 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=7684.64..24747.74 rows=59086 width=40)
                           Workers Planned: 4
                           ->  Parallel Hash Join  (cost=6684.64..17839.14 rows=14772 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..11240.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12310 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12310 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=178257.65..178257.66 rows=1 width=32)
   ->  Finalize Aggregate  (cost=178257.65..178257.66 rows=1 width=32)
         ->  Gather  (cost=178257.43..178257.64 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=177257.43..177257.44 rows=1 width=32)
                     ->  Nested Loop  (cost=5352.59..177255.34 rows=832 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=5352.16..177027.47 rows=83 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=5351.72..5351.94 rows=85 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=85 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.43..169213.80 rows=196854 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136254.35 rows=6001328 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.62 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 18 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=768546.13..768546.38 rows=100 width=71)
   ->  Sort  (cost=768546.13..773548.34 rows=2000887 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=397473.65..692073.66 rows=2000887 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=397473.65..647053.70 rows=2000888 width=71)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=396473.59..407728.59 rows=500222 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=396473.59..397724.15 rows=500222 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Parallel Hash Join  (cost=239674.09..338129.56 rows=500222 width=44)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..91216.39 rows=1500332 width=9)
                                       ->  Parallel Hash  (cost=237657.08..237657.08 rows=161326 width=43)
                                             ->  Parallel Hash Join  (cost=204993.72..237657.08 rows=161326 width=43)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Hash Join  (cost=199990.47..232230.34 rows=161326 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=20)
                                                         ->  Hash  (cost=193739.08..193739.08 rows=500111 width=4)
                                                               ->  GroupAggregate  (cost=0.43..188737.97 rows=500111 width=4)
                                                                     Group Key: lineitem_1.l_orderkey
                                                                     Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                                     ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136226.35 rows=6001328 width=9)
                                                   ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=23)
(27 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=9323.02..9323.03 rows=1 width=32)
   ->  Finalize Aggregate  (cost=9323.02..9323.03 rows=1 width=32)
         ->  Gather  (cost=9322.79..9323.00 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=8322.79..8322.80 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..8322.44 rows=47 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=198 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..3.43 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=276907.22..276907.23 rows=1 width=51)
   ->  Sort  (cost=276907.22..276907.23 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=243108.53..276907.21 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=243108.53..276451.90 rows=1 width=8)
                     ->  Merge Join  (cost=243108.53..276451.90 rows=1 width=8)
                           Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                           Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity)))))
                           ->  GroupAggregate  (cost=243107.68..259415.41 rows=483284 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=243107.68..245372.30 rows=905847 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=16271.36..142419.07 rows=905847 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16044.90 rows=905847 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Materialize  (cost=0.84..10583.32 rows=8080 width=16)
                                 ->  Nested Loop  (cost=0.84..10563.12 rows=8080 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..2.00 rows=4 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(28 rows)

query 21 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=61129.11..61129.11 rows=1 width=34)
   ->  Sort  (cost=61129.11..61129.11 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  Finalize GroupAggregate  (cost=61128.57..61129.10 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Gather Merge  (cost=61128.57..61129.07 rows=4 width=34)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=60128.51..60128.53 rows=1 width=34)
                           Group Key: supplier.s_name
                           ->  Sort  (cost=60128.51..60128.52 rows=1 width=26)
                                 Sort Key: supplier.s_name
                                 ->  Nested Loop Semi Join  (cost=32248.72..60128.50 rows=1 width=26)
                                       Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                       ->  Nested Loop  (cost=32248.28..60126.06 rows=1 width=38)
                                             Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Nested Loop  (cost=32248.28..60124.74 rows=1 width=42)
                                                   ->  Nested Loop  (cost=32247.86..60122.38 rows=1 width=38)
                                                         ->  Parallel Hash Anti Join  (cost=32247.57..60118.31 rows=1 width=8)
                                                               Hash Cond: (l1.l_orderkey = l3.l_orderkey)
                                                               Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                                               ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..25995.75 rows=500111 width=8)
                                                               ->  Parallel Hash  (cost=25995.75..25995.75 rows=500111 width=8)
                                                                     ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..25995.75 rows=500111 width=8)
                                                         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.07 rows=1 width=34)
                                                               Index Cond: (s_suppkey = l1.l_suppkey)
                                                   ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                                         Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'PERU'::bpchar)
                                       ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 22 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12936.34..12936.47 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.82..6242.83 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1987 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Finalize GroupAggregate  (cost=6693.51..6794.74 rows=758 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Gather Merge  (cost=6693.51..6775.15 rows=632 width=72)
               Workers Planned: 2
               Params Evaluated: $1
               ->  Partial GroupAggregate  (cost=5693.49..5702.18 rows=316 width=72)
                     Group Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Sort  (cost=5693.49..5694.28 rows=316 width=38)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Nested Loop Anti Join  (cost=0.43..5680.37 rows=316 width=38)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                       Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                                 ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.39 rows=18 width=4)
                                       Index Cond: (o_custkey = customer.c_custkey)
(22 rows)

