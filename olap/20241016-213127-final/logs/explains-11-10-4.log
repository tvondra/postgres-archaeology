query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1906796.02..1906796.70 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1906796.02..1906800.08 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1906796.02..1906798.89 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1905795.96..1905795.98 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1905795.72..1905795.89 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312611.40 rows=14829608 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=404125.88..404125.89 rows=1 width=193)
   ->  Sort  (cost=404125.88..404125.89 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=1049.89..404125.87 rows=1 width=193)
               Join Filter: (nation.n_nationkey = supplier.s_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=1049.89..404123.18 rows=1 width=171)
                     ->  Nested Loop  (cost=1049.89..404123.17 rows=1 width=171)
                           ->  Nested Loop  (cost=1049.59..404119.16 rows=1 width=34)
                                 ->  Gather  (cost=1000.00..50165.62 rows=6850 width=30)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.62 rows=1712 width=30)
                                             Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.59..51.66 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.15..49.16 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.54..49.14 rows=3 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.54..47.87 rows=17 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.97..46.25 rows=17 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.73 rows=17 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.54..2.56 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.01 rows=1 width=145)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(36 rows)

query 3 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2329315.50..2329315.53 rows=10 width=44)
   ->  Sort  (cost=2329315.50..2337069.78 rows=3101712 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1792039.18..2262288.62 rows=3101712 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1792039.18..2184745.82 rows=3101712 width=44)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1791039.12..1814301.96 rows=775428 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1791039.12..1792977.69 rows=775428 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Parallel Hash Join  (cost=358926.21..1703824.30 rows=775428 width=24)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1312611.40 rows=8092833 width=16)
                                             Filter: (l_shipdate > '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=354434.16..354434.16 rows=359364 width=12)
                                             ->  Parallel Hash Join  (cost=41573.21..354434.16 rows=359364 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..308149.77 rows=1794730 width=16)
                                                         Filter: (o_orderdate < '1995-03-07'::date)
                                                   ->  Parallel Hash  (cost=40634.60..40634.60 rows=75089 width=4)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..40634.60 rows=75089 width=4)
                                                               Filter: (c_mktsegment = 'BUILDING'::bpchar)
(23 rows)

query 4 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=596959.37..596959.88 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=596959.37..596961.91 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Gather Merge  (cost=596959.37..596961.76 rows=20 width=24)
               Workers Planned: 4
               ->  Sort  (cost=595959.31..595959.32 rows=5 width=24)
                     Sort Key: orders.o_orderpriority
                     ->  Partial HashAggregate  (cost=595959.20..595959.25 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=8900.25..595252.44 rows=141352 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=8899.68..272288.62 rows=141396 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8758.28 rows=565585 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Only Scan using q21_idx_2 on lineitem  (cost=0.56..2.56 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
(16 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=660383.35..660383.36 rows=1 width=58)
   ->  Sort  (cost=660383.35..660383.42 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=660143.24..660383.23 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=660143.24..660382.17 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=659143.18..659370.20 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=659143.18..659188.52 rows=18136 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=82164.89..657860.37 rows=18136 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=78473.29..651788.54 rows=453378 width=50)
                                             ->  Parallel Hash Join  (cost=78472.73..350653.55 rows=113380 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=35679.31..305450.81 rows=566900 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..35112.41 rows=2267598 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.89..41855.89 rows=75002 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.89 rows=75002 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.08 rows=375008 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1368614.48..1368614.49 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1368614.48..1368614.49 rows=1 width=32)
         ->  Gather  (cost=1368614.04..1368614.45 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1367614.04..1367614.05 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=233374.93..1366135.06 rows=295796 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..233079.14 rows=1183185 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1733332.38..1733332.97 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1733332.38..1739236.35 rows=10048 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=1733332.38..1738558.11 rows=40192 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1732332.32..1732770.80 rows=10048 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=1732332.32..1732369.84 rows=15008 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Parallel Hash Join  (cost=361613.41..1731291.26 rows=15008 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Parallel Hash Join  (cost=358563.36..1726474.40 rows=360627 width=46)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350105.08 rows=4507836 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=354812.82..354812.82 rows=300043 width=30)
                                             ->  Parallel Hash Join  (cost=41224.76..354812.82 rows=300043 width=30)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298773.41 rows=3750541 width=8)
                                                   ->  Parallel Hash  (cost=40849.75..40849.75 rows=30001 width=30)
                                                         ->  Hash Join  (cost=1.40..40849.75 rows=30001 width=30)
                                                               Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.08 rows=375008 width=8)
                                                               ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(34 rows)

query 8 run 1
SET
SET
SET
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=428950.50..428950.80 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=428950.50..429676.11 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=428950.50..429591.90 rows=2406 width=72)
               Workers Planned: 1
               ->  Partial GroupAggregate  (cost=427950.49..428321.21 rows=2406 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=427950.49..427986.33 rows=14338 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=423779.24..426960.63 rows=14338 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Parallel Hash Join  (cost=423777.68..426843.35 rows=14338 width=20)
                                       Hash Cond: (supplier.s_suppkey = lineitem.l_suppkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Parallel Hash  (cost=423701.50..423701.50 rows=6094 width=20)
                                             ->  Hash Join  (cost=382346.78..423701.50 rows=6094 width=20)
                                                   Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                   ->  Parallel Hash Join  (cost=382344.27..423523.80 rows=30468 width=24)
                                                         Hash Cond: (customer.c_custkey = orders.o_custkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.08 rows=375008 width=8)
                                                         ->  Parallel Hash  (cost=381963.42..381963.42 rows=30468 width=24)
                                                               ->  Parallel Hash Join  (cost=60066.39..381963.42 rows=30468 width=24)
                                                                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                                     ->  Parallel Seq Scan on orders  (cost=0.00..317526.12 rows=1145263 width=12)
                                                                           Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                                     ->  Parallel Hash  (cost=58819.19..58819.19 rows=99776 width=20)
                                                                           ->  Nested Loop  (cost=0.56..58819.19 rows=99776 width=20)
                                                                                 ->  Parallel Seq Scan on part  (cost=0.00..47230.69 rows=3326 width=4)
                                                                                       Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                                 ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.14 rows=34 width=24)
                                                                                       Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                               Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(40 rows)

query 9 run 1
SET
SET
SET
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=770336.39..770336.93 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=770336.39..802603.17 rows=60150 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=770336.39..799144.54 rows=240600 width=66)
               Workers Planned: 4
               ->  Sort  (cost=769336.33..769486.71 rows=60150 width=66)
                     Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                     ->  Partial HashAggregate  (cost=763508.92..764561.54 rows=60150 width=66)
                           Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
                           ->  Hash Join  (cost=384352.79..744951.44 rows=1060427 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=384351.22..736392.24 rows=1060427 width=31)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..298773.41 rows=3750541 width=8)
                                       ->  Parallel Hash  (cost=363845.89..363845.89 rows=1060427 width=31)
                                             ->  Parallel Hash Join  (cost=196618.11..363845.89 rows=1060427 width=31)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Hash Join  (cost=193073.57..357517.61 rows=1060427 width=35)
                                                         Hash Cond: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                                                         ->  Parallel Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..121620.77 rows=2000344 width=14)
                                                         ->  Parallel Hash  (cost=168881.74..168881.74 rows=1060427 width=33)
                                                               ->  Nested Loop  (cost=1.12..168881.74 rows=1060427 width=33)
                                                                     ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.55..45731.74 rows=35352 width=4)
                                                                           Filter: ((p_name)::text ~~ '%navy%'::text)
                                                                     ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.14 rows=34 width=29)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(30 rows)

query 10 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=797940.40..797940.45 rows=20 width=202)
   ->  Sort  (cost=797940.40..799366.95 rows=570620 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=698028.11..782756.41 rows=570620 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=698028.11..769917.46 rows=570620 width=202)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=697028.05..700951.06 rows=142655 width=202)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=697028.05..697384.69 rows=142655 width=182)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Nested Loop  (cost=274166.96..684815.23 rows=142655 width=182)
                                       ->  Hash Join  (cost=274166.40..317470.34 rows=142604 width=174)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Parallel Hash Join  (cost=274164.84..317030.99 rows=142604 width=152)
                                                   Hash Cond: (customer.c_custkey = orders.o_custkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..39697.08 rows=375008 width=148)
                                                   ->  Parallel Hash  (cost=272382.29..272382.29 rows=142604 width=8)
                                                         ->  Parallel Bitmap Heap Scan on orders  (cost=8975.22..272382.29 rows=142604 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                               ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8832.61 rows=570418 width=0)
                                                                     Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                                       ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                             Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
(26 rows)

query 11 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=421663.54..421663.54 rows=1 width=36)
   InitPlan 1 (returns $3)
     ->  Finalize Aggregate  (cost=182745.25..182745.26 rows=1 width=32)
           ->  Gather  (cost=182744.81..182745.22 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=181744.81..181744.82 rows=1 width=32)
                       ->  Nested Loop  (cost=1.11..181144.71 rows=80014 width=10)
                             ->  Nested Loop  (cost=0.68..33545.04 rows=1000 width=4)
                                   ->  Parallel Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.54..4596.54 rows=25000 width=8)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..1.16 rows=1 width=4)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
                                         Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..146.82 rows=78 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=238918.28..239185.00 rows=106685 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  Finalize GroupAggregate  (cost=188661.09..238384.86 rows=106685 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $3)
               ->  Gather Merge  (cost=188661.09..228783.20 rows=320056 width=36)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=187661.03..189661.38 rows=80014 width=36)
                           Group Key: partsupp.ps_partkey
                           ->  Sort  (cost=187661.03..187861.07 rows=80014 width=14)
                                 Sort Key: partsupp.ps_partkey
                                 ->  Nested Loop  (cost=1.11..181144.71 rows=80014 width=14)
                                       ->  Nested Loop  (cost=0.68..33545.04 rows=1000 width=4)
                                             ->  Parallel Index Only Scan using q2_idx_3 on supplier  (cost=0.54..4596.54 rows=25000 width=8)
                                             ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=4)
                                                   Index Cond: (n_nationkey = supplier.s_nationkey)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..146.82 rows=78 width=18)
                                             Index Cond: (ps_suppkey = supplier.s_suppkey)
(33 rows)

query 12 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=451082.95..451083.47 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=451082.95..451086.59 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=451082.95..451086.31 rows=28 width=27)
               Workers Planned: 4
               ->  Sort  (cost=450082.90..450082.91 rows=7 width=27)
                     Sort Key: lineitem.l_shipmode
                     ->  Partial HashAggregate  (cost=450082.73..450082.80 rows=7 width=27)
                           Group Key: lineitem.l_shipmode
                           ->  Parallel Hash Join  (cost=135782.19..448802.95 rows=73130 width=27)
                                 Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..298773.41 rows=3750541 width=20)
                                 ->  Parallel Hash  (cost=134868.07..134868.07 rows=73130 width=15)
                                       ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.56..134868.07 rows=73130 width=15)
                                             Index Cond: ((l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                             Filter: (l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[]))
(16 rows)

query 13 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1691347.07..1691347.08 rows=1 width=16)
   ->  Sort  (cost=1691347.07..1691347.57 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1691344.07..1691346.07 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  Finalize GroupAggregate  (cost=866042.98..1668843.59 rows=1500032 width=12)
                     Group Key: customer.c_custkey
                     ->  Gather Merge  (cost=866042.98..1623842.63 rows=6000128 width=12)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=865042.92..908169.49 rows=1500032 width=12)
                                 Group Key: customer.c_custkey
                                 ->  Sort  (cost=865042.92..874418.34 rows=3750166 width=8)
                                       Sort Key: customer.c_custkey
                                       ->  Parallel Hash Left Join  (cost=369677.27..418927.49 rows=3750166 width=8)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Index Only Scan using customer_pkey on customer  (cost=0.43..19482.67 rows=375008 width=4)
                                             ->  Parallel Hash  (cost=308149.77..308149.77 rows=3750166 width=8)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..308149.77 rows=3750166 width=8)
                                                         Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(19 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=929115.07..929115.09 rows=1 width=32)
   ->  Finalize Aggregate  (cost=929115.07..929115.09 rows=1 width=32)
         ->  Gather  (cost=929114.62..929115.03 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=928114.62..928114.63 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65968.93..924766.60 rows=191315 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=13738.49..872033.96 rows=191315 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..13547.18 rows=765261 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.75..45980.75 rows=499975 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.75 rows=499975 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2742635.55..2742747.99 rows=1 width=104)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1389508.05..1389508.06 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1387063.85..1388285.95 rows=97768 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1343801.51..1384130.81 rows=391072 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1342801.51..1344023.61 rows=97768 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=40069.88..1337221.19 rows=558032 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39511.85 rows=2232128 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1353127.50..1408109.89 rows=489 width=104)
         ->  Finalize GroupAggregate  (cost=1353127.20..1406551.41 rows=489 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1353127.20..1399952.07 rows=391072 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1352127.15..1352371.57 rows=97768 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1342801.51..1344023.61 rows=97768 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=40069.88..1337221.19 rows=558032 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39511.85 rows=2232128 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.18 rows=1 width=72)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=307060.81..307060.81 rows=1 width=44)
   ->  Sort  (cost=307060.81..307444.00 rows=153275 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=297390.57..306294.44 rows=153275 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=297390.57..298864.80 rows=589689 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=58873.02..229352.58 rows=589689 width=40)
                           Workers Planned: 4
                           ->  Parallel Hash Join  (cost=57873.02..169383.68 rows=147422 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112356.65 rows=1000172 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.38..53480.38 rows=73695 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.38 rows=73695 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1761516.62..1761516.63 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1761516.62..1761516.63 rows=1 width=32)
         ->  Gather  (cost=1761516.18..1761516.59 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1760516.18..1760516.19 rows=1 width=32)
                     ->  Nested Loop  (cost=48502.92..1760505.60 rows=4234 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48502.36..1759178.01 rows=424 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48501.79..48502.98 rows=476 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.62 rows=476 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1688430.84 rows=1779101 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361794.88 rows=59989888 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.99 rows=11 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 18 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7831762.92..7831763.17 rows=100 width=71)
   ->  Sort  (cost=7831762.92..7881738.86 rows=19990373 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=4124469.99..7067745.24 rows=19990373 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=4124469.99..6617961.86 rows=19990372 width=71)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=4123469.94..4235915.78 rows=4997593 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=4123469.94..4135963.92 rows=4997593 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Parallel Hash Join  (cost=412016.98..3457605.20 rows=4997593 width=44)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Hash Join  (cost=367632.30..3400101.80 rows=4997593 width=25)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Merge Join  (cost=1.13..2948551.84 rows=4999157 width=13)
                                                   Merge Cond: (lineitem.l_orderkey = lineitem_1.l_orderkey)
                                                   ->  Parallel Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..911870.72 rows=14997472 width=9)
                                                   ->  GroupAggregate  (cost=0.56..1886706.40 rows=4999157 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361794.88 rows=59989888 width=9)
                                             ->  Parallel Hash  (cost=298773.41..298773.41 rows=3750541 width=20)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298773.41 rows=3750541 width=20)
                                       ->  Parallel Hash  (cost=39697.08..39697.08 rows=375008 width=23)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39697.08 rows=375008 width=23)
(26 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=67571.14..67571.15 rows=1 width=32)
   ->  Finalize Aggregate  (cost=67571.14..67571.15 rows=1 width=32)
         ->  Gather  (cost=67570.71..67571.11 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=66570.71..66570.71 rows=1 width=32)
                     ->  Nested Loop  (cost=0.69..66568.56 rows=286 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62229.94 rows=1201 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.69..3.60 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3078119.17..3078119.18 rows=1 width=52)
   ->  Sort  (cost=3078119.17..3078119.18 rows=1 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=1621135.13..3078119.16 rows=1 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=56)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=60)
               ->  Materialize  (cost=1621135.13..3073466.86 rows=3 width=8)
                     ->  Merge Join  (cost=1621135.13..3073466.84 rows=3 width=8)
                           Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                           Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity)))))
                           ->  Finalize GroupAggregate  (cost=1620134.09..2923457.29 rows=4848830 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Gather Merge  (cost=1620134.09..2759390.44 rows=9133440 width=40)
                                       Workers Planned: 4
                                       ->  Partial GroupAggregate  (cost=1619134.03..1670509.63 rows=2283360 width=40)
                                             Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                             ->  Sort  (cost=1619134.03..1624842.43 rows=2283360 width=13)
                                                   Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                                   ->  Parallel Seq Scan on lineitem  (cost=0.00..1350105.08 rows=2283360 width=13)
                                                         Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Materialize  (cost=1001.04..70576.06 rows=80822 width=16)
                                 ->  Gather Merge  (cost=1001.04..70374.01 rows=80822 width=16)
                                       Workers Planned: 4
                                       ->  Nested Loop  (cost=0.98..59747.27 rows=20206 width=16)
                                             ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.55..45731.74 rows=5050 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                             ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.61 rows=17 width=12)
                                                   Index Cond: (ps_partkey = part.p_partkey)
(32 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=650286.71..650286.71 rows=1 width=34)
   ->  Sort  (cost=650286.71..650286.71 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=650286.68..650286.70 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=650286.68..650286.68 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=346122.87..650286.67 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=346122.31..650284.02 rows=1 width=38)
                                 ->  Gather  (cost=346121.87..650281.57 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Anti Join  (cost=345121.87..649281.47 rows=1 width=34)
                                             Hash Cond: (l1.l_orderkey = l3.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Hash Join  (cost=3021.13..283026.98 rows=199966 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..260083.28 rows=4999157 width=8)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Parallel Hash  (cost=260083.28..260083.28 rows=4999157 width=8)
                                                   ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..260083.28 rows=4999157 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 22 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=96524.20..96524.35 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46821.17..46821.18 rows=1 width=32)
           ->  Gather  (cost=46820.74..46821.15 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.74..45820.75 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.96 rows=11909 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Finalize GroupAggregate  (cost=49703.02..50830.19 rows=7343 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Gather Merge  (cost=49703.02..50628.25 rows=7344 width=72)
               Workers Planned: 4
               Params Evaluated: $1
               ->  Partial GroupAggregate  (cost=48702.96..48753.45 rows=1836 width=72)
                     Group Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Sort  (cost=48702.96..48707.55 rows=1836 width=38)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Nested Loop Anti Join  (cost=0.43..48603.43 rows=1836 width=38)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..45790.96 rows=4375 width=26)
                                       Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                                 ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.64 rows=17 width=4)
                                       Index Cond: (o_custkey = customer.c_custkey)
(22 rows)

