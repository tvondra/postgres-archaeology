query 1 run 1
SET
SET
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=424839.50..424839.51 rows=1 width=25) (actual time=10147.225..10147.226 rows=1 loops=1)
   ->  Sort  (cost=424839.50..424839.52 rows=6 width=25) (actual time=10147.223..10147.223 rows=1 loops=1)
         Sort Key: l_returnflag, l_linestatus
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=424839.31..424839.47 rows=6 width=25) (actual time=10147.186..10147.191 rows=4 loops=1)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187577.59 rows=5931543 width=25) (actual time=0.289..1215.097 rows=5930957 loops=1)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
                     Rows Removed by Filter: 70258
 Planning time: 13.923 ms
 Execution time: 10147.276 ms
(11 rows)

SET
SET
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=424839.50..424839.51 rows=1 width=25) (actual time=9923.378..9923.378 rows=1 loops=1)
   ->  Sort  (cost=424839.50..424839.52 rows=6 width=25) (actual time=9923.378..9923.378 rows=1 loops=1)
         Sort Key: l_returnflag, l_linestatus
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=424839.31..424839.47 rows=6 width=25) (actual time=9923.345..9923.349 rows=4 loops=1)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187577.59 rows=5931543 width=25) (actual time=0.023..1025.800 rows=5930957 loops=1)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
                     Rows Removed by Filter: 70258
 Planning time: 0.606 ms
 Execution time: 9923.427 ms
(11 rows)

query 2 run 1
SET
SET
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=32271.29..32271.29 rows=1 width=192) (actual time=177.744..177.753 rows=100 loops=1)
   ->  Sort  (cost=32271.29..32271.29 rows=1 width=192) (actual time=177.742..177.745 rows=100 loops=1)
         Sort Key: supplier.s_acctbal, nation.n_name, supplier.s_name, part.p_partkey
         Sort Method: top-N heapsort  Memory: 51kB
         ->  Nested Loop  (cost=15.18..32271.28 rows=1 width=192) (actual time=6.484..177.343 rows=489 loops=1)
               Join Filter: (nation.n_nationkey = supplier.s_nationkey)
               Rows Removed by Join Filter: 1956
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30) (actual time=0.006..0.011 rows=5 loops=1)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     Rows Removed by Join Filter: 20
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.003..0.004 rows=1 loops=1)
                           Filter: (r_name = 'AMERICA'::bpchar)
                           Rows Removed by Filter: 4
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34) (actual time=0.000..0.002 rows=25 loops=1)
               ->  Materialize  (cost=15.18..32268.58 rows=1 width=170) (actual time=0.616..35.383 rows=489 loops=5)
                     ->  Nested Loop  (cost=15.18..32268.58 rows=1 width=170) (actual time=3.076..176.454 rows=489 loops=1)
                           ->  Nested Loop  (cost=14.90..32267.29 rows=1 width=34) (actual time=2.684..135.195 rows=489 loops=1)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5472.08 rows=883 width=30) (actual time=0.587..25.157 rows=799 loops=1)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                       Rows Removed by Filter: 3304
                                       Heap Fetches: 0
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=14.48..30.34 rows=1 width=14) (actual time=0.001..0.001 rows=1 loops=799)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       Heap Fetches: 0
                                       SubPlan 1
                                         ->  Aggregate  (cost=14.04..14.05 rows=1 width=6) (actual time=0.135..0.135 rows=1 loops=799)
                                               ->  Nested Loop  (cost=0.97..14.04 rows=1 width=6) (actual time=0.122..0.133 rows=1 loops=799)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     Rows Removed by Join Filter: 3
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=799)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                           Rows Removed by Filter: 4
                                                     ->  Nested Loop  (cost=0.97..12.93 rows=4 width=10) (actual time=0.101..0.130 rows=4 loops=799)
                                                           ->  Nested Loop  (cost=0.83..12.25 rows=4 width=10) (actual time=0.100..0.124 rows=4 loops=799)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10) (actual time=0.094..0.096 rows=4 loops=799)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                       Heap Fetches: 0
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.41..2.43 rows=1 width=8) (actual time=0.006..0.006 rows=1 loops=3196)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                                       Heap Fetches: 0
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=3196)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                                       SubPlan 1
                                         ->  Aggregate  (cost=14.04..14.05 rows=1 width=6) (actual time=0.135..0.135 rows=1 loops=799)
                                               ->  Nested Loop  (cost=0.97..14.04 rows=1 width=6) (actual time=0.122..0.133 rows=1 loops=799)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     Rows Removed by Join Filter: 3
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=799)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                           Rows Removed by Filter: 4
                                                     ->  Nested Loop  (cost=0.97..12.93 rows=4 width=10) (actual time=0.101..0.130 rows=4 loops=799)
                                                           ->  Nested Loop  (cost=0.83..12.25 rows=4 width=10) (actual time=0.100..0.124 rows=4 loops=799)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10) (actual time=0.094..0.096 rows=4 loops=799)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                       Heap Fetches: 0
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.41..2.43 rows=1 width=8) (actual time=0.006..0.006 rows=1 loops=3196)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                                       Heap Fetches: 0
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=3196)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144) (actual time=0.083..0.084 rows=1 loops=489)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
 Planning time: 22.729 ms
 Execution time: 177.812 ms
(65 rows)

SET
SET
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=32271.29..32271.29 rows=1 width=192) (actual time=21.860..21.868 rows=100 loops=1)
   ->  Sort  (cost=32271.29..32271.29 rows=1 width=192) (actual time=21.859..21.863 rows=100 loops=1)
         Sort Key: supplier.s_acctbal, nation.n_name, supplier.s_name, part.p_partkey
         Sort Method: top-N heapsort  Memory: 51kB
         ->  Nested Loop  (cost=15.18..32271.28 rows=1 width=192) (actual time=0.169..21.476 rows=489 loops=1)
               Join Filter: (nation.n_nationkey = supplier.s_nationkey)
               Rows Removed by Join Filter: 1956
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30) (actual time=0.006..0.012 rows=5 loops=1)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     Rows Removed by Join Filter: 20
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.003..0.004 rows=1 loops=1)
                           Filter: (r_name = 'AMERICA'::bpchar)
                           Rows Removed by Filter: 4
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34) (actual time=0.001..0.005 rows=25 loops=1)
               ->  Materialize  (cost=15.18..32268.58 rows=1 width=170) (actual time=0.016..4.233 rows=489 loops=5)
                     ->  Nested Loop  (cost=15.18..32268.58 rows=1 width=170) (actual time=0.077..20.946 rows=489 loops=1)
                           ->  Nested Loop  (cost=14.90..32267.29 rows=1 width=34) (actual time=0.070..19.950 rows=489 loops=1)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5472.08 rows=883 width=30) (actual time=0.019..6.408 rows=799 loops=1)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                       Rows Removed by Filter: 3304
                                       Heap Fetches: 0
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=14.48..30.34 rows=1 width=14) (actual time=0.001..0.001 rows=1 loops=799)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       Heap Fetches: 0
                                       SubPlan 1
                                         ->  Aggregate  (cost=14.04..14.05 rows=1 width=6) (actual time=0.015..0.015 rows=1 loops=799)
                                               ->  Nested Loop  (cost=0.97..14.04 rows=1 width=6) (actual time=0.011..0.014 rows=1 loops=799)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     Rows Removed by Join Filter: 3
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=799)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                           Rows Removed by Filter: 4
                                                     ->  Nested Loop  (cost=0.97..12.93 rows=4 width=10) (actual time=0.005..0.012 rows=4 loops=799)
                                                           ->  Nested Loop  (cost=0.83..12.25 rows=4 width=10) (actual time=0.004..0.009 rows=4 loops=799)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10) (actual time=0.002..0.003 rows=4 loops=799)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                       Heap Fetches: 0
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.41..2.43 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=3196)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                                       Heap Fetches: 0
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=3196)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                                       SubPlan 1
                                         ->  Aggregate  (cost=14.04..14.05 rows=1 width=6) (actual time=0.015..0.015 rows=1 loops=799)
                                               ->  Nested Loop  (cost=0.97..14.04 rows=1 width=6) (actual time=0.011..0.014 rows=1 loops=799)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     Rows Removed by Join Filter: 3
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=799)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                           Rows Removed by Filter: 4
                                                     ->  Nested Loop  (cost=0.97..12.93 rows=4 width=10) (actual time=0.005..0.012 rows=4 loops=799)
                                                           ->  Nested Loop  (cost=0.83..12.25 rows=4 width=10) (actual time=0.004..0.009 rows=4 loops=799)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10) (actual time=0.002..0.003 rows=4 loops=799)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                       Heap Fetches: 0
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.41..2.43 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=3196)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                                       Heap Fetches: 0
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=3196)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144) (actual time=0.001..0.002 rows=1 loops=489)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
 Planning time: 1.941 ms
 Execution time: 21.925 ms
(65 rows)

query 3 run 1
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=310535.74..310535.77 rows=10 width=24) (actual time=2581.311..2581.312 rows=10 loops=1)
   ->  Sort  (cost=310535.74..311328.97 rows=317292 width=24) (actual time=2581.311..2581.311 rows=10 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         Sort Method: top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=294160.41..303679.17 rows=317292 width=24) (actual time=2563.037..2579.389 rows=11612 loops=1)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=294160.41..294953.64 rows=317292 width=24) (actual time=2563.023..2564.132 rows=30533 loops=1)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     Sort Method: quicksort  Memory: 3154kB
                     ->  Hash Join  (cost=62094.40..265167.14 rows=317292 width=24) (actual time=667.475..2556.636 rows=30533 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..187577.59 rows=3285930 width=16) (actual time=0.002..1167.453 rows=3261873 loops=1)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                                 Rows Removed by Filter: 2739342
                           ->  Hash  (cost=60283.46..60283.46 rows=144875 width=12) (actual time=666.573..666.573 rows=146063 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 6277kB
                                 ->  Hash Join  (cost=5849.06..60283.46 rows=144875 width=12) (actual time=53.337..639.317 rows=146063 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..44881.00 rows=720413 width=16) (actual time=0.002..360.137 rows=722275 loops=1)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                             Rows Removed by Filter: 777725
                                       ->  Hash  (cost=5472.00..5472.00 rows=30165 width=4) (actual time=53.320..53.320 rows=30142 loops=1)
                                             Buckets: 4096  Batches: 1  Memory Usage: 1060kB
                                             ->  Seq Scan on customer  (cost=0.00..5472.00 rows=30165 width=4) (actual time=0.002..49.432 rows=30142 loops=1)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                                   Rows Removed by Filter: 119858
 Planning time: 23.314 ms
 Execution time: 2581.369 ms
(28 rows)

SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=310535.74..310535.77 rows=10 width=24) (actual time=2067.806..2067.808 rows=10 loops=1)
   ->  Sort  (cost=310535.74..311328.97 rows=317292 width=24) (actual time=2067.805..2067.805 rows=10 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         Sort Method: top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=294160.41..303679.17 rows=317292 width=24) (actual time=2049.551..2065.853 rows=11612 loops=1)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=294160.41..294953.64 rows=317292 width=24) (actual time=2049.538..2050.667 rows=30533 loops=1)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     Sort Method: quicksort  Memory: 3154kB
                     ->  Hash Join  (cost=62094.40..265167.14 rows=317292 width=24) (actual time=403.119..2043.717 rows=30533 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..187577.59 rows=3285930 width=16) (actual time=0.003..961.443 rows=3261873 loops=1)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                                 Rows Removed by Filter: 2739342
                           ->  Hash  (cost=60283.46..60283.46 rows=144875 width=12) (actual time=402.876..402.876 rows=146063 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 6277kB
                                 ->  Hash Join  (cost=5849.06..60283.46 rows=144875 width=12) (actual time=26.200..380.863 rows=146063 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..44881.00 rows=720413 width=16) (actual time=0.001..206.268 rows=722275 loops=1)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                             Rows Removed by Filter: 777725
                                       ->  Hash  (cost=5472.00..5472.00 rows=30165 width=4) (actual time=26.185..26.185 rows=30142 loops=1)
                                             Buckets: 4096  Batches: 1  Memory Usage: 1060kB
                                             ->  Seq Scan on customer  (cost=0.00..5472.00 rows=30165 width=4) (actual time=0.002..23.106 rows=30142 loops=1)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                                   Rows Removed by Filter: 119858
 Planning time: 1.111 ms
 Execution time: 2067.863 ms
(28 rows)

query 4 run 1
SET
SET
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=122150.25..122150.26 rows=1 width=16) (actual time=2157.493..2157.493 rows=1 loops=1)
   ->  Sort  (cost=122150.25..122150.26 rows=1 width=16) (actual time=2157.493..2157.493 rows=1 loops=1)
         Sort Key: orders.o_orderpriority
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=122150.23..122150.24 rows=1 width=16) (actual time=2157.466..2157.466 rows=5 loops=1)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=32276.04..121869.98 rows=56051 width=16) (actual time=540.943..2141.475 rows=51398 loops=1)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=32275.58..32415.71 rows=56051 width=20) (actual time=540.634..546.528 rows=55973 loops=1)
                           Sort Key: orders.o_orderkey
                           Sort Method: quicksort  Memory: 5909kB
                           ->  Bitmap Heap Scan on orders  (cost=882.95..27854.72 rows=56051 width=20) (actual time=12.743..526.389 rows=55973 loops=1)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 Heap Blocks: exact=23186
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..868.94 rows=56051 width=0) (actual time=9.907..9.907 rows=55973 loops=1)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using q4_idx_1 on lineitem  (cost=0.43..83565.64 rows=2000469 width=4) (actual time=0.262..1354.109 rows=3793256 loops=1)
 Planning time: 18.318 ms
 Execution time: 2157.560 ms
(19 rows)

SET
SET
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=122150.25..122150.26 rows=1 width=16) (actual time=873.124..873.125 rows=1 loops=1)
   ->  Sort  (cost=122150.25..122150.26 rows=1 width=16) (actual time=873.123..873.123 rows=1 loops=1)
         Sort Key: orders.o_orderpriority
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=122150.23..122150.24 rows=1 width=16) (actual time=873.097..873.098 rows=5 loops=1)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=32276.04..121869.98 rows=56051 width=16) (actual time=48.264..863.007 rows=51398 loops=1)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=32275.58..32415.71 rows=56051 width=20) (actual time=48.245..53.093 rows=55973 loops=1)
                           Sort Key: orders.o_orderkey
                           Sort Method: quicksort  Memory: 5909kB
                           ->  Bitmap Heap Scan on orders  (cost=882.95..27854.72 rows=56051 width=20) (actual time=8.815..40.926 rows=55973 loops=1)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 Heap Blocks: exact=23186
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..868.94 rows=56051 width=0) (actual time=5.788..5.788 rows=55973 loops=1)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using q4_idx_1 on lineitem  (cost=0.43..83565.64 rows=2000469 width=4) (actual time=0.008..583.076 rows=3793256 loops=1)
 Planning time: 0.929 ms
 Execution time: 873.181 ms
(19 rows)

query 5 run 1
SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=155646.05..155646.05 rows=1 width=38) (actual time=1203.921..1203.921 rows=1 loops=1)
   ->  Sort  (cost=155646.05..155646.11 rows=25 width=38) (actual time=1203.919..1203.919 rows=1 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=155645.61..155645.92 rows=25 width=38) (actual time=1203.902..1203.903 rows=5 loops=1)
               Group Key: nation.n_name
               ->  Hash Join  (cost=10260.52..155575.50 rows=7011 width=38) (actual time=98.494..1193.715 rows=7540 loops=1)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Nested Loop  (cost=9787.52..149774.62 rows=175259 width=50) (actual time=92.535..1102.856 rows=182435 loops=1)
                           ->  Hash Join  (cost=9786.97..40737.60 rows=43815 width=38) (actual time=91.390..719.774 rows=45297 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=3449.94..32867.05 rows=219074 width=8) (actual time=31.559..528.864 rows=226645 loops=1)
                                       Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       Heap Blocks: exact=26127
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..3395.17 rows=219074 width=0) (actual time=28.327..28.327 rows=226645 loops=1)
                                             Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Hash  (cost=5962.03..5962.03 rows=30000 width=38) (actual time=59.803..59.803 rows=29952 loops=1)
                                       Buckets: 4096  Batches: 1  Memory Usage: 2106kB
                                       ->  Hash Join  (cost=2.53..5962.03 rows=30000 width=38) (actual time=0.025..54.472 rows=29952 loops=1)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8) (actual time=0.002..37.660 rows=150000 loops=1)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30) (actual time=0.018..0.018 rows=5 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30) (actual time=0.013..0.016 rows=5 loops=1)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34) (actual time=0.001..0.002 rows=25 loops=1)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.008..0.008 rows=1 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.006..0.007 rows=1 loops=1)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                                                     Rows Removed by Filter: 4
                           ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.45 rows=4 width=20) (actual time=0.007..0.008 rows=4 loops=45297)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Heap Fetches: 0
                     ->  Hash  (cost=323.00..323.00 rows=10000 width=8) (actual time=5.905..5.905 rows=10000 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 391kB
                           ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8) (actual time=0.002..4.411 rows=10000 loops=1)
 Planning time: 29.755 ms
 Execution time: 1203.987 ms
(39 rows)

SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=155646.05..155646.05 rows=1 width=38) (actual time=339.742..339.742 rows=1 loops=1)
   ->  Sort  (cost=155646.05..155646.11 rows=25 width=38) (actual time=339.741..339.741 rows=1 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=155645.61..155645.92 rows=25 width=38) (actual time=339.723..339.724 rows=5 loops=1)
               Group Key: nation.n_name
               ->  Hash Join  (cost=10260.52..155575.50 rows=7011 width=38) (actual time=57.071..333.605 rows=7540 loops=1)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Nested Loop  (cost=9787.52..149774.62 rows=175259 width=50) (actual time=54.313..295.021 rows=182435 loops=1)
                           ->  Hash Join  (cost=9786.97..40737.60 rows=43815 width=38) (actual time=54.272..167.501 rows=45297 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=3449.94..32867.05 rows=219074 width=8) (actual time=21.668..70.151 rows=226645 loops=1)
                                       Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       Heap Blocks: exact=26127
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..3395.17 rows=219074 width=0) (actual time=18.475..18.475 rows=226645 loops=1)
                                             Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Hash  (cost=5962.03..5962.03 rows=30000 width=38) (actual time=32.586..32.586 rows=29952 loops=1)
                                       Buckets: 4096  Batches: 1  Memory Usage: 2106kB
                                       ->  Hash Join  (cost=2.53..5962.03 rows=30000 width=38) (actual time=0.023..28.003 rows=29952 loops=1)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8) (actual time=0.002..7.873 rows=150000 loops=1)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30) (actual time=0.018..0.018 rows=5 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30) (actual time=0.013..0.017 rows=5 loops=1)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34) (actual time=0.001..0.001 rows=25 loops=1)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.008..0.008 rows=1 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.005..0.006 rows=1 loops=1)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                                                     Rows Removed by Filter: 4
                           ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.45 rows=4 width=20) (actual time=0.002..0.002 rows=4 loops=45297)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Heap Fetches: 0
                     ->  Hash  (cost=323.00..323.00 rows=10000 width=8) (actual time=2.739..2.739 rows=10000 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 391kB
                           ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8) (actual time=0.002..1.310 rows=10000 loops=1)
 Planning time: 2.802 ms
 Execution time: 339.809 ms
(39 rows)

query 6 run 1
SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=116960.24..116960.25 rows=1 width=12) (actual time=1262.307..1262.307 rows=1 loops=1)
   ->  Aggregate  (cost=116960.24..116960.25 rows=1 width=12) (actual time=1262.306..1262.306 rows=1 loops=1)
         ->  Bitmap Heap Scan on lineitem  (cost=22938.01..116368.18 rows=118412 width=12) (actual time=137.102..1187.546 rows=119208 loops=1)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               Heap Blocks: exact=66143
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..22908.41 rows=118412 width=0) (actual time=125.365..125.365 rows=119208 loops=1)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
 Planning time: 12.116 ms
 Execution time: 1263.069 ms
(9 rows)

SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=116960.24..116960.25 rows=1 width=12) (actual time=220.074..220.075 rows=1 loops=1)
   ->  Aggregate  (cost=116960.24..116960.25 rows=1 width=12) (actual time=220.073..220.073 rows=1 loops=1)
         ->  Bitmap Heap Scan on lineitem  (cost=22938.01..116368.18 rows=118412 width=12) (actual time=105.897..181.378 rows=119208 loops=1)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               Heap Blocks: exact=66143
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..22908.41 rows=118412 width=0) (actual time=95.697..95.697 rows=119208 loops=1)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
 Planning time: 0.626 ms
 Execution time: 220.110 ms
(9 rows)

query 7 run 1
SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=246868.62..246868.62 rows=1 width=68) (actual time=3567.127..3567.127 rows=1 loops=1)
   ->  Sort  (cost=246868.62..246876.22 rows=3042 width=68) (actual time=3567.127..3567.127 rows=1 loops=1)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=246800.17..246853.41 rows=3042 width=68) (actual time=3567.084..3567.090 rows=4 loops=1)
               Group Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
               ->  Hash Join  (cost=97788.46..246709.38 rows=6053 width=68) (actual time=903.977..3555.053 rows=5729 loops=1)
                     Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     Rows Removed by Join Filter: 5827
                     ->  Hash Join  (cost=97408.56..245521.05 rows=145451 width=46) (actual time=898.265..3515.337 rows=145103 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=32646.66..172485.05 rows=1818559 width=24) (actual time=304.203..2360.336 rows=1828450 loops=1)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 Heap Blocks: exact=112061
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..32192.02 rows=1818559 width=0) (actual time=284.140..284.140 rows=1828450 loops=1)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=63261.90..63261.90 rows=120000 width=30) (actual time=593.851..593.851 rows=118477 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 7174kB
                                 ->  Hash Join  (cost=5930.90..63261.90 rows=120000 width=30) (actual time=53.723..571.778 rows=118477 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8) (actual time=0.002..280.025 rows=1500000 loops=1)
                                       ->  Hash  (cost=5780.90..5780.90 rows=12000 width=30) (actual time=53.713..53.713 rows=11896 loops=1)
                                             Buckets: 2048  Batches: 1  Memory Usage: 721kB
                                             ->  Hash Join  (cost=1.40..5780.90 rows=12000 width=30) (actual time=0.017..51.695 rows=11896 loops=1)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8) (actual time=0.001..37.751 rows=150000 loops=1)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30) (actual time=0.013..0.013 rows=2 loops=1)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30) (actual time=0.009..0.011 rows=2 loops=1)
                                                               Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                                               Rows Removed by Filter: 23
                     ->  Hash  (cost=369.90..369.90 rows=800 width=30) (actual time=5.282..5.282 rows=794 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 49kB
                           ->  Hash Join  (cost=1.40..369.90 rows=800 width=30) (actual time=0.012..5.135 rows=794 loops=1)
                                 Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8) (actual time=0.002..4.195 rows=10000 loops=1)
                                 ->  Hash  (cost=1.38..1.38 rows=2 width=30) (actual time=0.008..0.008 rows=2 loops=1)
                                       Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                       ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30) (actual time=0.006..0.007 rows=2 loops=1)
                                             Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                             Rows Removed by Filter: 23
 Planning time: 26.115 ms
 Execution time: 3567.218 ms
(44 rows)

SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=246868.62..246868.62 rows=1 width=68) (actual time=1235.199..1235.200 rows=1 loops=1)
   ->  Sort  (cost=246868.62..246876.22 rows=3042 width=68) (actual time=1235.199..1235.199 rows=1 loops=1)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=246800.17..246853.41 rows=3042 width=68) (actual time=1235.157..1235.163 rows=4 loops=1)
               Group Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
               ->  Hash Join  (cost=97788.46..246709.38 rows=6053 width=68) (actual time=605.816..1229.006 rows=5729 loops=1)
                     Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     Rows Removed by Join Filter: 5827
                     ->  Hash Join  (cost=97408.56..245521.05 rows=145451 width=46) (actual time=603.786..1210.530 rows=145103 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=32646.66..172485.05 rows=1818559 width=24) (actual time=220.350..480.788 rows=1828450 loops=1)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 Heap Blocks: exact=112061
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..32192.02 rows=1818559 width=0) (actual time=200.679..200.679 rows=1828450 loops=1)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=63261.90..63261.90 rows=120000 width=30) (actual time=383.400..383.400 rows=118477 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 7174kB
                                 ->  Hash Join  (cost=5930.90..63261.90 rows=120000 width=30) (actual time=27.387..367.011 rows=118477 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8) (actual time=0.002..73.310 rows=1500000 loops=1)
                                       ->  Hash  (cost=5780.90..5780.90 rows=12000 width=30) (actual time=27.378..27.378 rows=11896 loops=1)
                                             Buckets: 2048  Batches: 1  Memory Usage: 721kB
                                             ->  Hash Join  (cost=1.40..5780.90 rows=12000 width=30) (actual time=0.017..25.886 rows=11896 loops=1)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8) (actual time=0.001..7.970 rows=150000 loops=1)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30) (actual time=0.012..0.012 rows=2 loops=1)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30) (actual time=0.008..0.010 rows=2 loops=1)
                                                               Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                                               Rows Removed by Filter: 23
                     ->  Hash  (cost=369.90..369.90 rows=800 width=30) (actual time=1.936..1.936 rows=794 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 49kB
                           ->  Hash Join  (cost=1.40..369.90 rows=800 width=30) (actual time=0.012..1.838 rows=794 loops=1)
                                 Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8) (actual time=0.001..0.552 rows=10000 loops=1)
                                 ->  Hash  (cost=1.38..1.38 rows=2 width=30) (actual time=0.008..0.008 rows=2 loops=1)
                                       Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                       ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30) (actual time=0.005..0.006 rows=2 loops=1)
                                             Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                             Rows Removed by Filter: 23
 Planning time: 2.382 ms
 Execution time: 1235.286 ms
(44 rows)

query 8 run 1
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=61535.80..61535.80 rows=1 width=42) (actual time=1255.400..1255.400 rows=1 loops=1)
   ->  Sort  (cost=61535.80..61537.62 rows=727 width=42) (actual time=1255.400..1255.400 rows=1 loops=1)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         Sort Method: quicksort  Memory: 25kB
         ->  HashAggregate  (cost=61515.81..61532.17 rows=727 width=42) (actual time=1255.176..1255.178 rows=2 loops=1)
               Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Hash Join  (cost=51154.02..61467.49 rows=2416 width=42) (actual time=775.657..1248.968 rows=2485 loops=1)
                     Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=51152.46..61420.63 rows=2416 width=20) (actual time=775.635..1245.699 rows=2485 loops=1)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=50704.46..60912.23 rows=2416 width=20) (actual time=770.042..1237.350 rows=2485 loops=1)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.98..10034.59 rows=39999 width=20) (actual time=2.744..447.011 rows=39694 loops=1)
                                       ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5435.75 rows=1333 width=4) (actual time=1.401..34.094 rows=1320 loops=1)
                                             Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                             Heap Fetches: 0
                                       ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.14 rows=31 width=24) (actual time=0.251..0.307 rows=30 loops=1320)
                                             Index Cond: (l_partkey = part.p_partkey)
                                             Heap Fetches: 0
                                 ->  Hash  (cost=49570.61..49570.61 rows=90630 width=8) (actual time=767.255..767.255 rows=91179 loops=1)
                                       Buckets: 16384  Batches: 1  Memory Usage: 3562kB
                                       ->  Hash Join  (cost=13470.27..49570.61 rows=90630 width=8) (actual time=110.523..747.847 rows=91179 loops=1)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=7133.24..40061.52 rows=453152 width=12) (actual time=53.220..526.668 rows=457263 loops=1)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   Heap Blocks: exact=26131
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7019.95 rows=453152 width=0) (actual time=49.965..49.965 rows=457263 loops=1)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=5962.03..5962.03 rows=30000 width=4) (actual time=57.248..57.248 rows=29952 loops=1)
                                                   Buckets: 4096  Batches: 1  Memory Usage: 1053kB
                                                   ->  Hash Join  (cost=2.53..5962.03 rows=30000 width=4) (actual time=0.041..53.549 rows=29952 loops=1)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8) (actual time=0.003..37.457 rows=150000 loops=1)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4) (actual time=0.026..0.026 rows=5 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4) (actual time=0.017..0.026 rows=5 loops=1)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.001..0.006 rows=25 loops=1)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.010..0.010 rows=1 loops=1)
                                                                           Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.006..0.008 rows=1 loops=1)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                                                 Rows Removed by Filter: 4
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8) (actual time=5.589..5.589 rows=10000 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 391kB
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8) (actual time=0.001..4.471 rows=10000 loops=1)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.009..0.009 rows=25 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 2kB
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30) (actual time=0.002..0.004 rows=25 loops=1)
 Planning time: 36.457 ms
 Execution time: 1255.489 ms
(51 rows)

SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=61535.80..61535.80 rows=1 width=42) (actual time=281.786..281.786 rows=1 loops=1)
   ->  Sort  (cost=61535.80..61537.62 rows=727 width=42) (actual time=281.785..281.785 rows=1 loops=1)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         Sort Method: quicksort  Memory: 25kB
         ->  HashAggregate  (cost=61515.81..61532.17 rows=727 width=42) (actual time=281.551..281.552 rows=2 loops=1)
               Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Hash Join  (cost=51154.02..61467.49 rows=2416 width=42) (actual time=244.565..279.553 rows=2485 loops=1)
                     Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=51152.46..61420.63 rows=2416 width=20) (actual time=244.542..278.556 rows=2485 loops=1)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=50704.46..60912.23 rows=2416 width=20) (actual time=242.174..274.683 rows=2485 loops=1)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.98..10034.59 rows=39999 width=20) (actual time=0.057..19.315 rows=39694 loops=1)
                                       ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5435.75 rows=1333 width=4) (actual time=0.040..6.882 rows=1320 loops=1)
                                             Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                             Heap Fetches: 0
                                       ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.14 rows=31 width=24) (actual time=0.003..0.007 rows=30 loops=1320)
                                             Index Cond: (l_partkey = part.p_partkey)
                                             Heap Fetches: 0
                                 ->  Hash  (cost=49570.61..49570.61 rows=90630 width=8) (actual time=242.093..242.093 rows=91179 loops=1)
                                       Buckets: 16384  Batches: 1  Memory Usage: 3562kB
                                       ->  Hash Join  (cost=13470.27..49570.61 rows=90630 width=8) (actual time=69.083..230.748 rows=91179 loops=1)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=7133.24..40061.52 rows=453152 width=12) (actual time=38.437..108.934 rows=457263 loops=1)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   Heap Blocks: exact=26131
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7019.95 rows=453152 width=0) (actual time=35.213..35.213 rows=457263 loops=1)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=5962.03..5962.03 rows=30000 width=4) (actual time=30.633..30.633 rows=29952 loops=1)
                                                   Buckets: 4096  Batches: 1  Memory Usage: 1053kB
                                                   ->  Hash Join  (cost=2.53..5962.03 rows=30000 width=4) (actual time=0.018..27.573 rows=29952 loops=1)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8) (actual time=0.001..8.000 rows=150000 loops=1)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4) (actual time=0.014..0.014 rows=5 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4) (actual time=0.009..0.013 rows=5 loops=1)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.001..0.002 rows=25 loops=1)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.006..0.006 rows=1 loops=1)
                                                                           Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.005..0.006 rows=1 loops=1)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                                                 Rows Removed by Filter: 4
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8) (actual time=2.364..2.364 rows=10000 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 391kB
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8) (actual time=0.001..1.291 rows=10000 loops=1)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.010..0.010 rows=25 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 2kB
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30) (actual time=0.003..0.005 rows=25 loops=1)
 Planning time: 3.218 ms
 Execution time: 281.871 ms
(51 rows)

query 9 run 1
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=46934.35..46934.38 rows=1 width=53) (actual time=8296.627..8296.627 rows=1 loops=1)
   ->  GroupAggregate  (cost=46934.35..46936.15 rows=48 width=53) (actual time=8296.626..8296.626 rows=1 loops=1)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=46934.35..46934.47 rows=48 width=53) (actual time=8295.182..8295.702 rows=1210 loops=1)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               Sort Method: external merge  Disk: 24040kB
               ->  Nested Loop  (cost=2.75..46933.01 rows=48 width=53) (actual time=4.168..6395.033 rows=325928 loops=1)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     Rows Removed by Join Filter: 7822272
                     ->  Nested Loop  (cost=2.75..46913.45 rows=48 width=31) (actual time=4.144..5315.172 rows=325928 loops=1)
                           ->  Nested Loop  (cost=2.32..46718.61 rows=48 width=31) (actual time=3.600..1635.353 rows=325928 loops=1)
                                 ->  Merge Join  (cost=1.91..46611.34 rows=48 width=35) (actual time=3.320..1108.343 rows=325928 loops=1)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       Rows Removed by Join Filter: 977784
                                       ->  Nested Loop  (cost=0.98..20135.92 rows=121228 width=33) (actual time=2.735..650.667 rows=325928 loops=1)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6454.42 rows=4040 width=4) (actual time=0.255..56.714 rows=10880 loops=1)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   Rows Removed by Filter: 189120
                                                   Heap Fetches: 0
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.08 rows=31 width=29) (actual time=0.039..0.051 rows=30 loops=10880)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                                   Heap Fetches: 0
                                       ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..18168.42 rows=800000 width=14) (actual time=0.573..228.720 rows=2060177 loops=1)
                                             Heap Fetches: 0
                                 ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.41..2.22 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=325928)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       Heap Fetches: 0
                           ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.05 rows=1 width=8) (actual time=0.011..0.011 rows=1 loops=325928)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30) (actual time=0.000..0.001 rows=25 loops=325928)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30) (actual time=0.003..0.009 rows=25 loops=1)
 Planning time: 35.773 ms
 Execution time: 8299.982 ms
(34 rows)

SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=46934.35..46934.38 rows=1 width=53) (actual time=4785.471..4785.472 rows=1 loops=1)
   ->  GroupAggregate  (cost=46934.35..46936.15 rows=48 width=53) (actual time=4785.469..4785.469 rows=1 loops=1)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=46934.35..46934.47 rows=48 width=53) (actual time=4784.027..4784.553 rows=1210 loops=1)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               Sort Method: external merge  Disk: 24040kB
               ->  Nested Loop  (cost=2.75..46933.01 rows=48 width=53) (actual time=0.093..2907.233 rows=325928 loops=1)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     Rows Removed by Join Filter: 7822272
                     ->  Nested Loop  (cost=2.75..46913.45 rows=48 width=31) (actual time=0.080..1908.146 rows=325928 loops=1)
                           ->  Nested Loop  (cost=2.32..46718.61 rows=48 width=31) (actual time=0.071..1019.779 rows=325928 loops=1)
                                 ->  Merge Join  (cost=1.91..46611.34 rows=48 width=35) (actual time=0.064..564.507 rows=325928 loops=1)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       Rows Removed by Join Filter: 977784
                                       ->  Nested Loop  (cost=0.98..20135.92 rows=121228 width=33) (actual time=0.043..169.647 rows=325928 loops=1)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6454.42 rows=4040 width=4) (actual time=0.027..40.873 rows=10880 loops=1)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   Rows Removed by Filter: 189120
                                                   Heap Fetches: 0
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.08 rows=31 width=29) (actual time=0.003..0.009 rows=30 loops=10880)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                                   Heap Fetches: 0
                                       ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..18168.42 rows=800000 width=14) (actual time=0.010..189.095 rows=2060177 loops=1)
                                             Heap Fetches: 0
                                 ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.41..2.22 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=325928)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       Heap Fetches: 0
                           ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.05 rows=1 width=8) (actual time=0.002..0.002 rows=1 loops=325928)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30) (actual time=0.000..0.001 rows=25 loops=325928)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30) (actual time=0.001..0.005 rows=25 loops=1)
 Planning time: 3.957 ms
 Execution time: 4789.175 ms
(34 rows)

query 10 run 1
SET
SET
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=167428.19..167428.24 rows=20 width=182) (actual time=1259.331..1259.334 rows=20 loops=1)
   ->  Sort  (cost=167428.19..167557.74 rows=51817 width=182) (actual time=1259.331..1259.333 rows=20 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method: top-N heapsort  Memory: 30kB
         ->  HashAggregate  (cost=165401.65..166049.36 rows=51817 width=182) (actual time=1234.499..1249.662 rows=38076 loops=1)
               Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
               ->  Hash Join  (cost=7809.69..164106.23 rows=51817 width=182) (actual time=95.273..1073.334 rows=114347 loops=1)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=7808.13..163392.18 rows=51817 width=160) (actual time=95.260..1049.703 rows=114347 loops=1)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Nested Loop  (cost=836.13..155189.52 rows=51817 width=16) (actual time=13.031..885.701 rows=114347 loops=1)
                                 ->  Bitmap Heap Scan on orders  (cost=835.57..27761.42 rows=52990 width=8) (actual time=11.846..440.544 rows=57111 loops=1)
                                       Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       Heap Blocks: exact=23377
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..822.33 rows=52990 width=0) (actual time=8.937..8.937 rows=57111 loops=1)
                                             Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.39 rows=1 width=16) (actual time=0.007..0.007 rows=2 loops=57111)
                                       Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                       Heap Fetches: 0
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148) (actual time=82.199..82.199 rows=150000 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 26813kB
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148) (actual time=0.005..49.852 rows=150000 loops=1)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.008..0.008 rows=25 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 2kB
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30) (actual time=0.002..0.004 rows=25 loops=1)
 Planning time: 28.189 ms
 Execution time: 1259.724 ms
(27 rows)

SET
SET
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=167428.19..167428.24 rows=20 width=182) (actual time=517.808..517.812 rows=20 loops=1)
   ->  Sort  (cost=167428.19..167557.74 rows=51817 width=182) (actual time=517.806..517.807 rows=20 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method: top-N heapsort  Memory: 30kB
         ->  HashAggregate  (cost=165401.65..166049.36 rows=51817 width=182) (actual time=493.170..508.308 rows=38076 loops=1)
               Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
               ->  Hash Join  (cost=7809.69..164106.23 rows=51817 width=182) (actual time=62.915..357.340 rows=114347 loops=1)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=7808.13..163392.18 rows=51817 width=160) (actual time=62.903..335.702 rows=114347 loops=1)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Nested Loop  (cost=836.13..155189.52 rows=51817 width=16) (actual time=8.822..212.885 rows=114347 loops=1)
                                 ->  Bitmap Heap Scan on orders  (cost=835.57..27761.42 rows=52990 width=8) (actual time=8.754..36.209 rows=57111 loops=1)
                                       Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       Heap Blocks: exact=23377
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..822.33 rows=52990 width=0) (actual time=5.782..5.782 rows=57111 loops=1)
                                             Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.39 rows=1 width=16) (actual time=0.002..0.003 rows=2 loops=57111)
                                       Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                       Heap Fetches: 0
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148) (actual time=54.057..54.057 rows=150000 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 26813kB
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148) (actual time=0.003..23.135 rows=150000 loops=1)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.008..0.008 rows=25 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 2kB
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30) (actual time=0.001..0.003 rows=25 loops=1)
 Planning time: 1.377 ms
 Execution time: 518.197 ms
(27 rows)

query 11 run 1
SET
SET
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29452.82..29452.82 rows=1 width=14) (actual time=748.920..748.921 rows=1 loops=1)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=14099.55..14099.56 rows=1 width=10) (actual time=32.100..32.100 rows=1 loops=1)
           ->  Nested Loop  (cost=7.81..13859.81 rows=31965 width=10) (actual time=0.723..20.662 rows=32880 loops=1)
                 ->  Nested Loop  (cost=7.38..234.45 rows=400 width=4) (actual time=0.716..0.928 rows=411 loops=1)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4) (actual time=0.004..0.006 rows=1 loops=1)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             Rows Removed by Filter: 24
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=7.38..229.14 rows=400 width=8) (actual time=0.709..0.878 rows=411 loops=1)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             Heap Blocks: exact=183
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..7.29 rows=400 width=0) (actual time=0.680..0.680 rows=411 loops=1)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..33.26 rows=80 width=14) (actual time=0.003..0.039 rows=80 loops=411)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=15353.26..15433.18 rows=31965 width=14) (actual time=748.920..748.920 rows=1 loops=1)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=14634.05..15193.44 rows=31965 width=14) (actual time=741.226..748.781 rows=839 loops=1)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               Rows Removed by Filter: 30007
               ->  Nested Loop  (cost=0.42..14074.66 rows=31965 width=14) (actual time=0.732..675.569 rows=32880 loops=1)
                     ->  Nested Loop  (cost=0.00..449.31 rows=400 width=4) (actual time=0.063..3.756 rows=411 loops=1)
                           Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                           Rows Removed by Join Filter: 9589
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.006..0.008 rows=1 loops=1)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 Rows Removed by Filter: 24
                           ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8) (actual time=0.001..2.679 rows=10000 loops=1)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..33.26 rows=80 width=18) (actual time=0.092..1.617 rows=80 loops=411)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
 Planning time: 14.974 ms
 Execution time: 749.213 ms
(34 rows)

SET
SET
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29452.82..29452.82 rows=1 width=14) (actual time=86.815..86.816 rows=1 loops=1)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=14099.55..14099.56 rows=1 width=10) (actual time=30.631..30.631 rows=1 loops=1)
           ->  Nested Loop  (cost=7.81..13859.81 rows=31965 width=10) (actual time=0.068..19.334 rows=32880 loops=1)
                 ->  Nested Loop  (cost=7.38..234.45 rows=400 width=4) (actual time=0.064..0.275 rows=411 loops=1)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4) (actual time=0.004..0.006 rows=1 loops=1)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             Rows Removed by Filter: 24
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=7.38..229.14 rows=400 width=8) (actual time=0.055..0.230 rows=411 loops=1)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             Heap Blocks: exact=183
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..7.29 rows=400 width=0) (actual time=0.038..0.038 rows=411 loops=1)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..33.26 rows=80 width=14) (actual time=0.003..0.038 rows=80 loops=411)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=15353.26..15433.18 rows=31965 width=14) (actual time=86.814..86.814 rows=1 loops=1)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=14634.05..15193.44 rows=31965 width=14) (actual time=79.019..86.655 rows=839 loops=1)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               Rows Removed by Filter: 30007
               ->  Nested Loop  (cost=0.42..14074.66 rows=31965 width=14) (actual time=0.034..28.955 rows=32880 loops=1)
                     ->  Nested Loop  (cost=0.00..449.31 rows=400 width=4) (actual time=0.026..1.759 rows=411 loops=1)
                           Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                           Rows Removed by Join Filter: 9589
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.006..0.008 rows=1 loops=1)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 Rows Removed by Filter: 24
                           ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8) (actual time=0.000..0.589 rows=10000 loops=1)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..33.26 rows=80 width=18) (actual time=0.004..0.057 rows=80 loops=411)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
 Planning time: 0.919 ms
 Execution time: 87.114 ms
(34 rows)

query 12 run 1
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=115816.14..115816.14 rows=1 width=27) (actual time=3749.654..3749.654 rows=1 loops=1)
   ->  Sort  (cost=115816.14..115816.14 rows=1 width=27) (actual time=3749.653..3749.653 rows=1 loops=1)
         Sort Key: lineitem.l_shipmode
         Sort Method: quicksort  Memory: 25kB
         ->  HashAggregate  (cost=115816.12..115816.13 rows=1 width=27) (actual time=3749.642..3749.642 rows=2 loops=1)
               Group Key: lineitem.l_shipmode
               ->  Merge Join  (cost=54289.42..115319.57 rows=28374 width=27) (actual time=3243.540..3730.766 rows=30953 loops=1)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..56864.43 rows=1500000 width=20) (actual time=0.278..387.650 rows=1499957 loops=1)
                     ->  Sort  (cost=54283.54..54354.49 rows=28381 width=15) (actual time=3243.207..3246.024 rows=30953 loops=1)
                           Sort Key: lineitem.l_orderkey
                           Sort Method: quicksort  Memory: 2219kB
                           ->  Index Scan using q12_idx_1 on lineitem  (cost=0.42..52184.39 rows=28381 width=15) (actual time=2.367..3221.277 rows=30953 loops=1)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 Planning time: 16.100 ms
 Execution time: 3749.732 ms
(16 rows)

SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=115816.14..115816.14 rows=1 width=27) (actual time=396.192..396.192 rows=1 loops=1)
   ->  Sort  (cost=115816.14..115816.14 rows=1 width=27) (actual time=396.192..396.192 rows=1 loops=1)
         Sort Key: lineitem.l_shipmode
         Sort Method: quicksort  Memory: 25kB
         ->  HashAggregate  (cost=115816.12..115816.13 rows=1 width=27) (actual time=396.181..396.181 rows=2 loops=1)
               Group Key: lineitem.l_shipmode
               ->  Merge Join  (cost=54289.42..115319.57 rows=28374 width=27) (actual time=97.938..382.286 rows=30953 loops=1)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..56864.43 rows=1500000 width=20) (actual time=0.009..189.461 rows=1499957 loops=1)
                     ->  Sort  (cost=54283.54..54354.49 rows=28381 width=15) (actual time=97.907..100.038 rows=30953 loops=1)
                           Sort Key: lineitem.l_orderkey
                           Sort Method: quicksort  Memory: 2219kB
                           ->  Index Scan using q12_idx_1 on lineitem  (cost=0.42..52184.39 rows=28381 width=15) (actual time=0.015..90.964 rows=30953 loops=1)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 Planning time: 0.962 ms
 Execution time: 396.262 ms
(16 rows)

query 13 run 1
SET
SET
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=96276.97..96276.97 rows=1 width=8) (actual time=2255.097..2255.097 rows=1 loops=1)
   ->  Sort  (cost=96276.97..96277.47 rows=200 width=8) (actual time=2255.096..2255.096 rows=1 loops=1)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=96273.97..96275.97 rows=200 width=8) (actual time=2255.072..2255.079 rows=42 loops=1)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=92523.97..94023.97 rows=150000 width=8) (actual time=2208.598..2235.764 rows=150000 loops=1)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..85099.70 rows=1484854 width=8) (actual time=32.259..1736.601 rows=1533923 loops=1)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484854 width=8) (actual time=0.514..650.426 rows=1483918 loops=1)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                                 Rows Removed by Filter: 16082
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4) (actual time=31.733..31.733 rows=150000 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 5274kB
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4) (actual time=0.510..17.038 rows=150000 loops=1)
                                       Heap Fetches: 0
 Planning time: 12.690 ms
 Execution time: 2255.758 ms
(19 rows)

SET
SET
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=96276.97..96276.97 rows=1 width=8) (actual time=2050.665..2050.665 rows=1 loops=1)
   ->  Sort  (cost=96276.97..96277.47 rows=200 width=8) (actual time=2050.664..2050.664 rows=1 loops=1)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=96273.97..96275.97 rows=200 width=8) (actual time=2050.641..2050.646 rows=42 loops=1)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=92523.97..94023.97 rows=150000 width=8) (actual time=2003.807..2031.208 rows=150000 loops=1)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..85099.70 rows=1484854 width=8) (actual time=27.433..1543.205 rows=1533923 loops=1)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484854 width=8) (actual time=0.008..516.801 rows=1483918 loops=1)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                                 Rows Removed by Filter: 16082
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4) (actual time=27.413..27.413 rows=150000 loops=1)
                                 Buckets: 16384  Batches: 1  Memory Usage: 5274kB
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4) (actual time=0.046..13.155 rows=150000 loops=1)
                                       Heap Fetches: 0
 Planning time: 0.573 ms
 Execution time: 2051.324 ms
(19 rows)

query 14 run 1
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=87350.94..87350.96 rows=1 width=33) (actual time=849.268..849.269 rows=1 loops=1)
   ->  Aggregate  (cost=87350.94..87350.96 rows=1 width=33) (actual time=849.266..849.266 rows=1 loops=1)
         ->  Hash Join  (cost=9968.64..86017.17 rows=76215 width=33) (actual time=99.817..779.329 rows=77317 loops=1)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1369.64..75893.87 rows=76215 width=16) (actual time=20.143..624.265 rows=77317 loops=1)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     Heap Blocks: exact=41681
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1350.58 rows=76215 width=0) (actual time=14.154..14.154 rows=77317 loops=1)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25) (actual time=79.618..79.618 rows=200000 loops=1)
                     Buckets: 32768  Batches: 1  Memory Usage: 11552kB
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25) (actual time=0.004..53.870 rows=200000 loops=1)
 Planning time: 21.013 ms
 Execution time: 849.306 ms
(14 rows)

SET
SET
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=87350.94..87350.96 rows=1 width=33) (actual time=213.654..213.654 rows=1 loops=1)
   ->  Aggregate  (cost=87350.94..87350.96 rows=1 width=33) (actual time=213.652..213.652 rows=1 loops=1)
         ->  Hash Join  (cost=9968.64..86017.17 rows=76215 width=33) (actual time=65.913..169.426 rows=77317 loops=1)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1369.64..75893.87 rows=76215 width=16) (actual time=15.135..64.840 rows=77317 loops=1)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     Heap Blocks: exact=41681
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1350.58 rows=76215 width=0) (actual time=9.129..9.129 rows=77317 loops=1)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25) (actual time=50.732..50.732 rows=200000 loops=1)
                     Buckets: 32768  Batches: 1  Memory Usage: 11552kB
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25) (actual time=0.004..27.122 rows=200000 loops=1)
 Planning time: 0.861 ms
 Execution time: 213.688 ms
(14 rows)

query 15 run 1
SET
SET
CREATE VIEW
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=244775.61..244776.87 rows=1 width=103) (actual time=1467.596..1467.596 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=121550.39..121550.40 rows=1 width=32) (actual time=225.457..225.457 rows=1 loops=1)
           ->  HashAggregate  (cost=121541.19..121545.79 rows=368 width=16) (actual time=223.303..224.785 rows=10000 loops=1)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3970.27..119330.62 rows=221057 width=16) (actual time=32.564..94.006 rows=225954 loops=1)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       Heap Blocks: exact=66828
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3915.00 rows=221057 width=0) (actual time=23.083..23.083 rows=225954 loops=1)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=123225.21..123689.73 rows=368 width=103) (actual time=1467.595..1467.595 rows=1 loops=1)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..434.29 rows=10000 width=71) (actual time=0.473..5.143 rows=8449 loops=1)
         ->  Sort  (cost=123224.92..123225.84 rows=368 width=36) (actual time=1461.865..1461.865 rows=1 loops=1)
               Sort Key: revenue0.supplier_no
               Sort Method: quicksort  Memory: 25kB
               ->  Subquery Scan on revenue0  (cost=123199.12..123209.24 rows=368 width=36) (actual time=1461.168..1461.859 rows=1 loops=1)
                     ->  HashAggregate  (cost=123199.12..123205.56 rows=368 width=16) (actual time=1461.166..1461.857 rows=1 loops=1)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))) = $0)
                           Rows Removed by Filter: 9999
                           ->  Bitmap Heap Scan on lineitem  (cost=3970.27..119330.62 rows=221057 width=16) (actual time=46.308..1025.345 rows=225954 loops=1)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 Heap Blocks: exact=66828
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3915.00 rows=221057 width=0) (actual time=36.154..36.154 rows=225954 loops=1)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 Planning time: 17.456 ms
 Execution time: 1467.692 ms
(28 rows)

DROP VIEW
SET
SET
CREATE VIEW
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=244775.61..244776.87 rows=1 width=103) (actual time=484.825..484.825 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=121550.39..121550.40 rows=1 width=32) (actual time=223.034..223.034 rows=1 loops=1)
           ->  HashAggregate  (cost=121541.19..121545.79 rows=368 width=16) (actual time=220.875..222.401 rows=10000 loops=1)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3970.27..119330.62 rows=221057 width=16) (actual time=31.618..92.648 rows=225954 loops=1)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       Heap Blocks: exact=66828
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3915.00 rows=221057 width=0) (actual time=22.323..22.323 rows=225954 loops=1)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=123225.21..123689.73 rows=368 width=103) (actual time=484.825..484.825 rows=1 loops=1)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..434.29 rows=10000 width=71) (actual time=0.009..1.277 rows=8449 loops=1)
         ->  Sort  (cost=123224.92..123225.84 rows=368 width=36) (actual time=483.084..483.084 rows=1 loops=1)
               Sort Key: revenue0.supplier_no
               Sort Method: quicksort  Memory: 25kB
               ->  Subquery Scan on revenue0  (cost=123199.12..123209.24 rows=368 width=36) (actual time=482.387..483.079 rows=1 loops=1)
                     ->  HashAggregate  (cost=123199.12..123205.56 rows=368 width=16) (actual time=482.386..483.078 rows=1 loops=1)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))) = $0)
                           Rows Removed by Filter: 9999
                           ->  Bitmap Heap Scan on lineitem  (cost=3970.27..119330.62 rows=221057 width=16) (actual time=33.906..121.682 rows=225954 loops=1)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 Heap Blocks: exact=66828
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3915.00 rows=221057 width=0) (actual time=24.485..24.485 rows=225954 loops=1)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 Planning time: 0.891 ms
 Execution time: 484.901 ms
(28 rows)

DROP VIEW
query 16 run 1
SET
SET
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=37081.26..37081.26 rows=1 width=40) (actual time=1110.067..1110.067 rows=1 loops=1)
   ->  Sort  (cost=37081.26..37088.72 rows=2985 width=40) (actual time=1110.067..1110.067 rows=1 loops=1)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         Sort Method: top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=36297.07..37066.34 rows=2985 width=40) (actual time=1059.892..1107.408 rows=18220 loops=1)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=36297.07..36444.96 rows=59153 width=40) (actual time=1059.871..1067.066 rows=117930 loops=1)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     Sort Method: quicksort  Memory: 12286kB
                     ->  Merge Join  (cost=349.23..31608.56 rows=59153 width=40) (actual time=7.338..298.160 rows=117930 loops=1)
                           Merge Cond: (part.p_partkey = partsupp.ps_partkey)
                           ->  Index Scan using part_pkey on part  (cost=0.42..11202.42 rows=29847 width=40) (actual time=0.382..104.800 rows=29492 loops=1)
                                 Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
                                 Rows Removed by Filter: 170508
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..18740.43 rows=400000 width=8) (actual time=6.946..144.120 rows=799673 loops=1)
                                 Filter: (NOT (hashed SubPlan 1))
                                 Rows Removed by Filter: 320
                                 Heap Fetches: 0
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4) (actual time=1.388..5.997 rows=4 loops=1)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                         Rows Removed by Filter: 9996
 Planning time: 14.787 ms
 Execution time: 1110.140 ms
(24 rows)

SET
SET
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=37081.26..37081.26 rows=1 width=40) (actual time=1052.333..1052.334 rows=1 loops=1)
   ->  Sort  (cost=37081.26..37088.72 rows=2985 width=40) (actual time=1052.333..1052.333 rows=1 loops=1)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         Sort Method: top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=36297.07..37066.34 rows=2985 width=40) (actual time=1001.762..1049.575 rows=18220 loops=1)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=36297.07..36444.96 rows=59153 width=40) (actual time=1001.744..1009.118 rows=117930 loops=1)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     Sort Method: quicksort  Memory: 12286kB
                     ->  Merge Join  (cost=349.23..31608.56 rows=59153 width=40) (actual time=2.278..241.151 rows=117930 loops=1)
                           Merge Cond: (part.p_partkey = partsupp.ps_partkey)
                           ->  Index Scan using part_pkey on part  (cost=0.42..11202.42 rows=29847 width=40) (actual time=0.016..72.030 rows=29492 loops=1)
                                 Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
                                 Rows Removed by Filter: 170508
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..18740.43 rows=400000 width=8) (actual time=2.253..122.198 rows=799673 loops=1)
                                 Filter: (NOT (hashed SubPlan 1))
                                 Rows Removed by Filter: 320
                                 Heap Fetches: 0
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4) (actual time=0.085..2.228 rows=4 loops=1)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                         Rows Removed by Filter: 9996
 Planning time: 0.748 ms
 Execution time: 1052.383 ms
(24 rows)

query 17 run 1
SET
SET
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=179358.70..179358.71 rows=1 width=8) (actual time=1966.853..1966.853 rows=1 loops=1)
   ->  Aggregate  (cost=179358.70..179358.71 rows=1 width=8) (actual time=1966.852..1966.852 rows=1 loops=1)
         ->  Nested Loop  (cost=7108.09..179353.54 rows=2061 width=8) (actual time=61.340..1966.528 rows=592 loops=1)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=7107.53..178754.97 rows=206 width=40) (actual time=60.816..1869.020 rows=208 loops=1)
                     Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  GroupAggregate  (cost=0.43..169191.95 rows=196225 width=9) (actual time=0.711..1800.565 rows=199276 loops=1)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136241.54 rows=6001407 width=9) (actual time=0.654..926.532 rows=5979358 loops=1)
                                 Heap Fetches: 0
                     ->  Sort  (cost=7107.10..7107.62 rows=210 width=4) (actual time=54.239..54.334 rows=208 loops=1)
                           Sort Key: part.p_partkey
                           Sort Method: quicksort  Memory: 34kB
                           ->  Seq Scan on part  (cost=0.00..7099.00 rows=210 width=4) (actual time=1.040..54.163 rows=208 loops=1)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 Rows Removed by Filter: 199792
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.78 rows=10 width=17) (actual time=0.429..0.466 rows=3 loops=208)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
                     Heap Fetches: 0
 Planning time: 18.923 ms
 Execution time: 1966.896 ms
(21 rows)

SET
SET
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=179358.70..179358.71 rows=1 width=8) (actual time=1627.609..1627.609 rows=1 loops=1)
   ->  Aggregate  (cost=179358.70..179358.71 rows=1 width=8) (actual time=1627.608..1627.608 rows=1 loops=1)
         ->  Nested Loop  (cost=7108.09..179353.54 rows=2061 width=8) (actual time=29.711..1627.311 rows=592 loops=1)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=7107.53..178754.97 rows=206 width=40) (actual time=29.693..1625.730 rows=208 loops=1)
                     Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  GroupAggregate  (cost=0.43..169191.95 rows=196225 width=9) (actual time=0.033..1589.458 rows=199276 loops=1)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136241.54 rows=6001407 width=9) (actual time=0.017..746.132 rows=5979358 loops=1)
                                 Heap Fetches: 0
                     ->  Sort  (cost=7107.10..7107.62 rows=210 width=4) (actual time=24.601..24.634 rows=208 loops=1)
                           Sort Key: part.p_partkey
                           Sort Method: quicksort  Memory: 34kB
                           ->  Seq Scan on part  (cost=0.00..7099.00 rows=210 width=4) (actual time=0.090..24.558 rows=208 loops=1)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 Rows Removed by Filter: 199792
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.78 rows=10 width=17) (actual time=0.006..0.007 rows=3 loops=208)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
                     Heap Fetches: 0
 Planning time: 1.029 ms
 Execution time: 1627.649 ms
(21 rows)

query 18 run 1
SET
SET
                                                                                              QUERY PLAN                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=936867.85..936870.85 rows=100 width=44) (actual time=2806.398..2806.418 rows=9 loops=1)
   ->  GroupAggregate  (cost=936867.85..1026867.85 rows=3000000 width=44) (actual time=2806.397..2806.417 rows=9 loops=1)
         Group Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
         ->  Sort  (cost=936867.85..944367.85 rows=3000000 width=44) (actual time=2806.391..2806.394 rows=63 loops=1)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               Sort Method: quicksort  Memory: 29kB
               ->  Hash Join  (cost=6999.09..548199.88 rows=3000000 width=44) (actual time=700.758..2806.267 rows=63 loops=1)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=27.09..469977.88 rows=3000000 width=25) (actual time=638.241..2743.706 rows=63 loops=1)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=0.86..286877.08 rows=750000 width=24) (actual time=484.714..2158.327 rows=9 loops=1)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..56864.43 rows=1500000 width=20) (actual time=0.339..312.942 rows=1201687 loops=1)
                                 ->  Materialize  (cost=0.43..207508.25 rows=1500352 width=4) (actual time=379.215..1776.206 rows=9 loops=1)
                                       ->  GroupAggregate  (cost=0.43..188753.85 rows=1500352 width=9) (actual time=379.213..1776.193 rows=9 loops=1)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > 313::numeric)
                                             Rows Removed by Filter: 1499991
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136241.54 rows=6001407 width=9) (actual time=1.039..697.207 rows=6001215 loops=1)
                                                   Heap Fetches: 0
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136241.54 rows=6001407 width=9) (actual time=0.010..380.306 rows=4807580 loops=1)
                                 Heap Fetches: 0
                     ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23) (actual time=62.494..62.494 rows=150000 loops=1)
                           Buckets: 16384  Batches: 1  Memory Usage: 8204kB
                           ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23) (actual time=0.003..42.786 rows=150000 loops=1)
 Planning time: 23.136 ms
 Execution time: 2806.493 ms
(27 rows)

SET
SET
                                                                                              QUERY PLAN                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=936867.85..936870.85 rows=100 width=44) (actual time=2425.389..2425.411 rows=9 loops=1)
   ->  GroupAggregate  (cost=936867.85..1026867.85 rows=3000000 width=44) (actual time=2425.387..2425.408 rows=9 loops=1)
         Group Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
         ->  Sort  (cost=936867.85..944367.85 rows=3000000 width=44) (actual time=2425.381..2425.385 rows=63 loops=1)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               Sort Method: quicksort  Memory: 29kB
               ->  Hash Join  (cost=6999.09..548199.88 rows=3000000 width=44) (actual time=582.518..2425.259 rows=63 loops=1)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=27.09..469977.88 rows=3000000 width=25) (actual time=546.512..2389.219 rows=63 loops=1)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=0.86..286877.08 rows=750000 width=24) (actual time=391.239..1797.942 rows=9 loops=1)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..56864.43 rows=1500000 width=20) (actual time=0.005..150.858 rows=1201687 loops=1)
                                 ->  Materialize  (cost=0.43..207508.25 rows=1500352 width=4) (actual time=333.656..1580.345 rows=9 loops=1)
                                       ->  GroupAggregate  (cost=0.43..188753.85 rows=1500352 width=9) (actual time=333.654..1580.337 rows=9 loops=1)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > 313::numeric)
                                             Rows Removed by Filter: 1499991
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136241.54 rows=6001407 width=9) (actual time=0.028..519.048 rows=6001215 loops=1)
                                                   Heap Fetches: 0
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136241.54 rows=6001407 width=9) (actual time=0.009..386.183 rows=4807580 loops=1)
                                 Heap Fetches: 0
                     ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23) (actual time=35.984..35.984 rows=150000 loops=1)
                           Buckets: 16384  Batches: 1  Memory Usage: 8204kB
                           ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23) (actual time=0.002..17.555 rows=150000 loops=1)
 Planning time: 1.544 ms
 Execution time: 2425.474 ms
(27 rows)

query 19 run 1
SET
SET


 Limit  (cost=14249.65..14249.66 rows=1 width=12) (actual time=358.043..358.043 rows=1 loops=1)
   ->  Aggregate  (cost=14249.65..14249.66 rows=1 width=12) (actual time=358.042..358.042 rows=1 loops=1)
         ->  Nested Loop  (cost=0.56..14248.81 rows=112 width=12) (actual time=1.974..357.727 rows=111 loops=1)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=475 width=30) (actual time=1.011..100.996 rows=507 loops=1)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                     Rows Removed by Filter: 199493
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..3.46 rows=1 width=21) (actual time=0.483..0.505 rows=0 loops=507)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric) AND (part.p_size <= 15))))
                     Rows Removed by Filter: 7
                     Heap Fetches: 0
 Planning time: 21.703 ms
 Execution time: 358.084 ms
(13 rows)

SET
SET


 Limit  (cost=14249.65..14249.66 rows=1 width=12) (actual time=61.551..61.551 rows=1 loops=1)
   ->  Aggregate  (cost=14249.65..14249.66 rows=1 width=12) (actual time=61.549..61.549 rows=1 loops=1)
         ->  Nested Loop  (cost=0.56..14248.81 rows=112 width=12) (actual time=0.312..61.467 rows=111 loops=1)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=475 width=30) (actual time=0.247..57.134 rows=507 loops=1)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                     Rows Removed by Filter: 199493
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..3.46 rows=1 width=21) (actual time=0.008..0.008 rows=0 loops=507)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric) AND (part.p_size <= 15))))
                     Rows Removed by Filter: 7
                     Heap Fetches: 0
 Planning time: 2.761 ms
 Execution time: 61.587 ms
(13 rows)

query 20 run 1
SET
SET
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=171646.86..171646.86 rows=1 width=51) (actual time=3433.052..3433.053 rows=1 loops=1)
   ->  Sort  (cost=171646.86..171647.36 rows=200 width=51) (actual time=3433.052..3433.052 rows=1 loops=1)
         Sort Key: supplier.s_name
         Sort Method: top-N heapsort  Memory: 25kB
         ->  Nested Loop Semi Join  (cost=160014.29..171645.86 rows=200 width=51) (actual time=3246.136..3432.859 rows=196 loops=1)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               Rows Removed by Join Filter: 1914277
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55) (actual time=0.333..3.643 rows=438 loops=1)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     Rows Removed by Join Filter: 9562
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.005..0.008 rows=1 loops=1)
                           Filter: (n_name = 'IRAQ'::bpchar)
                           Rows Removed by Filter: 24
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59) (actual time=0.321..2.748 rows=10000 loops=1)
               ->  Materialize  (cost=160014.29..171160.56 rows=6 width=8) (actual time=7.088..7.545 rows=4371 loops=438)
                     ->  Merge Join  (cost=160014.29..171160.53 rows=6 width=8) (actual time=3104.511..3242.930 rows=5898 loops=1)
                           Merge Cond: (partsupp.ps_partkey = lineitem.l_partkey)
                           Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity)))))
                           Rows Removed by Join Filter: 17758
                           ->  Nested Loop  (cost=0.84..10599.32 rows=8007 width=16) (actual time=0.725..61.117 rows=8748 loops=1)
                                 ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6454.42 rows=2020 width=4) (actual time=0.369..32.628 rows=2187 loops=1)
                                       Filter: ((p_name)::text ~~ 'olive%'::text)
                                       Rows Removed by Filter: 197813
                                       Heap Fetches: 0
                                 ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..2.01 rows=4 width=12) (actual time=0.012..0.012 rows=4 loops=2187)
                                       Index Cond: (ps_partkey = part.p_partkey)
                                       Heap Fetches: 0
                           ->  Sort  (cost=160013.45..160245.15 rows=92679 width=40) (actual time=3103.728..3147.860 rows=562387 loops=1)
                                 Sort Key: lineitem.l_partkey
                                 Sort Method: external sort  Disk: 14912kB
                                 ->  HashAggregate  (cost=150050.48..151440.66 rows=92679 width=13) (actual time=2442.341..2664.521 rows=544869 loops=1)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=16637.93..143099.63 rows=926780 width=13) (actual time=161.965..1895.946 rows=913487 loops=1)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             Heap Blocks: exact=104951
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16406.23 rows=926780 width=0) (actual time=142.593..142.593 rows=913487 loops=1)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
 Planning time: 23.609 ms
 Execution time: 3436.702 ms
(39 rows)

SET
SET
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=171646.86..171646.86 rows=1 width=51) (actual time=1732.482..1732.482 rows=1 loops=1)
   ->  Sort  (cost=171646.86..171647.36 rows=200 width=51) (actual time=1732.481..1732.481 rows=1 loops=1)
         Sort Key: supplier.s_name
         Sort Method: top-N heapsort  Memory: 25kB
         ->  Nested Loop Semi Join  (cost=160014.29..171645.86 rows=200 width=51) (actual time=1547.157..1732.323 rows=196 loops=1)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               Rows Removed by Join Filter: 1914277
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55) (actual time=0.012..1.661 rows=438 loops=1)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     Rows Removed by Join Filter: 9562
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.007..0.009 rows=1 loops=1)
                           Filter: (n_name = 'IRAQ'::bpchar)
                           Rows Removed by Filter: 24
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59) (actual time=0.000..0.524 rows=10000 loops=1)
               ->  Materialize  (cost=160014.29..171160.56 rows=6 width=8) (actual time=3.286..3.667 rows=4371 loops=438)
                     ->  Merge Join  (cost=160014.29..171160.53 rows=6 width=8) (actual time=1439.297..1544.528 rows=5898 loops=1)
                           Merge Cond: (partsupp.ps_partkey = lineitem.l_partkey)
                           Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity)))))
                           Rows Removed by Join Filter: 17758
                           ->  Nested Loop  (cost=0.84..10599.32 rows=8007 width=16) (actual time=0.041..28.640 rows=8748 loops=1)
                                 ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6454.42 rows=2020 width=4) (actual time=0.031..22.461 rows=2187 loops=1)
                                       Filter: ((p_name)::text ~~ 'olive%'::text)
                                       Rows Removed by Filter: 197813
                                       Heap Fetches: 0
                                 ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..2.01 rows=4 width=12) (actual time=0.002..0.002 rows=4 loops=2187)
                                       Index Cond: (ps_partkey = part.p_partkey)
                                       Heap Fetches: 0
                           ->  Sort  (cost=160013.45..160245.15 rows=92679 width=40) (actual time=1439.199..1482.791 rows=562387 loops=1)
                                 Sort Key: lineitem.l_partkey
                                 Sort Method: external sort  Disk: 14912kB
                                 ->  HashAggregate  (cost=150050.48..151440.66 rows=92679 width=13) (actual time=783.828..1003.920 rows=544869 loops=1)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=16637.93..143099.63 rows=926780 width=13) (actual time=119.805..308.853 rows=913487 loops=1)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             Heap Blocks: exact=104951
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16406.23 rows=926780 width=0) (actual time=101.464..101.464 rows=913487 loops=1)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
 Planning time: 1.808 ms
 Execution time: 1735.728 ms
(39 rows)

query 21 run 1
SET
SET
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=291768.55..291768.55 rows=1 width=26) (actual time=1548.123..1548.133 rows=100 loops=1)
   ->  Sort  (cost=291768.55..291768.55 rows=1 width=26) (actual time=1548.121..1548.125 rows=100 loops=1)
         Sort Key: (count(*)), supplier.s_name
         Sort Method: top-N heapsort  Memory: 32kB
         ->  HashAggregate  (cost=291768.53..291768.54 rows=1 width=26) (actual time=1547.624..1547.670 rows=421 loops=1)
               Group Key: supplier.s_name
               ->  Nested Loop Anti Join  (cost=166307.07..291768.52 rows=1 width=26) (actual time=1120.454..1546.036 rows=4227 loops=1)
                     ->  Nested Loop Semi Join  (cost=166306.64..291764.07 rows=1 width=34) (actual time=1120.357..1443.359 rows=73962 loops=1)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           Rows Removed by Join Filter: 8252
                           ->  Merge Join  (cost=166306.21..195661.70 rows=38784 width=38) (actual time=1120.343..1325.657 rows=76644 loops=1)
                                 Merge Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Sort  (cost=166303.23..166503.27 rows=80019 width=34) (actual time=1119.926..1128.547 rows=159165 loops=1)
                                       Sort Key: l1.l_orderkey
                                       Sort Method: quicksort  Memory: 18579kB
                                       ->  Hash Join  (cost=239.89..159786.46 rows=80019 width=34) (actual time=5.634..1094.312 rows=159165 loops=1)
                                             Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                             ->  Index Only Scan using q21_idx_1 on lineitem l1  (cost=0.43..151245.05 rows=2000469 width=8) (actual time=0.371..848.956 rows=3793296 loops=1)
                                                   Filter: (l_receiptdate > l_commitdate)
                                                   Rows Removed by Filter: 2207919
                                                   Heap Fetches: 0
                                             ->  Hash  (cost=234.45..234.45 rows=400 width=30) (actual time=5.238..5.238 rows=421 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 27kB
                                                   ->  Nested Loop  (cost=7.38..234.45 rows=400 width=30) (actual time=0.640..5.154 rows=421 loops=1)
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.004..0.007 rows=1 loops=1)
                                                               Filter: (n_name = 'PERU'::bpchar)
                                                               Rows Removed by Filter: 24
                                                         ->  Bitmap Heap Scan on supplier  (cost=7.38..229.14 rows=400 width=34) (actual time=0.634..5.063 rows=421 loops=1)
                                                               Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                               Heap Blocks: exact=184
                                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..7.29 rows=400 width=0) (actual time=0.593..0.593 rows=421 loops=1)
                                                                     Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..26754.43 rows=727200 width=4) (actual time=0.411..134.819 rows=733203 loops=1)
                                       Index Cond: (o_orderstatus = 'F'::bpchar)
                                       Heap Fetches: 0
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.43 rows=4 width=8) (actual time=0.001..0.001 rows=1 loops=76644)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Heap Fetches: 0
                     ->  Index Only Scan using q21_idx_1 on lineitem l3  (cost=0.43..2.44 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=73962)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           Rows Removed by Filter: 2
                           Heap Fetches: 0
 Planning time: 25.181 ms
 Execution time: 1548.738 ms
(45 rows)

SET
SET
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=291768.55..291768.55 rows=1 width=26) (actual time=1321.688..1321.696 rows=100 loops=1)
   ->  Sort  (cost=291768.55..291768.55 rows=1 width=26) (actual time=1321.688..1321.692 rows=100 loops=1)
         Sort Key: (count(*)), supplier.s_name
         Sort Method: top-N heapsort  Memory: 32kB
         ->  HashAggregate  (cost=291768.53..291768.54 rows=1 width=26) (actual time=1321.193..1321.232 rows=421 loops=1)
               Group Key: supplier.s_name
               ->  Nested Loop Anti Join  (cost=166307.07..291768.52 rows=1 width=26) (actual time=939.000..1319.898 rows=4227 loops=1)
                     ->  Nested Loop Semi Join  (cost=166306.64..291764.07 rows=1 width=34) (actual time=938.908..1218.832 rows=73962 loops=1)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           Rows Removed by Join Filter: 8252
                           ->  Merge Join  (cost=166306.21..195661.70 rows=38784 width=38) (actual time=938.898..1107.853 rows=76644 loops=1)
                                 Merge Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Sort  (cost=166303.23..166503.27 rows=80019 width=34) (actual time=938.849..946.965 rows=159165 loops=1)
                                       Sort Key: l1.l_orderkey
                                       Sort Method: quicksort  Memory: 18579kB
                                       ->  Hash Join  (cost=239.89..159786.46 rows=80019 width=34) (actual time=0.456..918.527 rows=159165 loops=1)
                                             Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                             ->  Index Only Scan using q21_idx_1 on lineitem l1  (cost=0.43..151245.05 rows=2000469 width=8) (actual time=0.020..685.950 rows=3793296 loops=1)
                                                   Filter: (l_receiptdate > l_commitdate)
                                                   Rows Removed by Filter: 2207919
                                                   Heap Fetches: 0
                                             ->  Hash  (cost=234.45..234.45 rows=400 width=30) (actual time=0.417..0.417 rows=421 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 27kB
                                                   ->  Nested Loop  (cost=7.38..234.45 rows=400 width=30) (actual time=0.057..0.359 rows=421 loops=1)
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.004..0.005 rows=1 loops=1)
                                                               Filter: (n_name = 'PERU'::bpchar)
                                                               Rows Removed by Filter: 24
                                                         ->  Bitmap Heap Scan on supplier  (cost=7.38..229.14 rows=400 width=34) (actual time=0.051..0.306 rows=421 loops=1)
                                                               Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                               Heap Blocks: exact=184
                                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..7.29 rows=400 width=0) (actual time=0.033..0.033 rows=421 loops=1)
                                                                     Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..26754.43 rows=727200 width=4) (actual time=0.044..101.442 rows=733203 loops=1)
                                       Index Cond: (o_orderstatus = 'F'::bpchar)
                                       Heap Fetches: 0
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.43 rows=4 width=8) (actual time=0.001..0.001 rows=1 loops=76644)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Heap Fetches: 0
                     ->  Index Only Scan using q21_idx_1 on lineitem l3  (cost=0.43..2.44 rows=1 width=8) (actual time=0.001..0.001 rows=1 loops=73962)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           Rows Removed by Filter: 2
                           Heap Fetches: 0
 Planning time: 2.211 ms
 Execution time: 1321.774 ms
(45 rows)

query 22 run 1
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16175.05..16175.05 rows=1 width=22) (actual time=239.149..239.149 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7546.40..7546.41 rows=1 width=6) (actual time=109.631..109.631 rows=1 loops=1)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4761 width=6) (actual time=0.007..103.740 rows=38017 loops=1)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                 Rows Removed by Filter: 111983
   ->  Sort  (cost=8628.63..8630.47 rows=734 width=22) (actual time=239.149..239.149 rows=1 loops=1)
         Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=8612.12..8624.96 rows=734 width=22) (actual time=239.118..239.119 rows=7 loops=1)
               Group Key: "substring"((customer.c_phone)::text, 1, 2)
               ->  Nested Loop Anti Join  (cost=0.43..8606.61 rows=734 width=22) (actual time=109.686..236.306 rows=6397 loops=1)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26) (actual time=109.664..167.746 rows=19077 loops=1)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                           Rows Removed by Filter: 130923
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.38 rows=17 width=4) (actual time=0.003..0.003 rows=1 loops=19077)
                           Index Cond: (o_custkey = customer.c_custkey)
                           Heap Fetches: 0
 Planning time: 11.780 ms
 Execution time: 239.196 ms
(20 rows)

SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16175.05..16175.05 rows=1 width=22) (actual time=168.545..168.545 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7546.40..7546.41 rows=1 width=6) (actual time=80.102..80.102 rows=1 loops=1)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4761 width=6) (actual time=0.007..74.840 rows=38017 loops=1)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                 Rows Removed by Filter: 111983
   ->  Sort  (cost=8628.63..8630.47 rows=734 width=22) (actual time=168.544..168.544 rows=1 loops=1)
         Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=8612.12..8624.96 rows=734 width=22) (actual time=168.517..168.519 rows=7 loops=1)
               Group Key: "substring"((customer.c_phone)::text, 1, 2)
               ->  Nested Loop Anti Join  (cost=0.43..8606.61 rows=734 width=22) (actual time=80.139..166.389 rows=6397 loops=1)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26) (actual time=80.127..134.242 rows=19077 loops=1)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                           Rows Removed by Filter: 130923
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.38 rows=17 width=4) (actual time=0.001..0.001 rows=1 loops=19077)
                           Index Cond: (o_custkey = customer.c_custkey)
                           Heap Fetches: 0
 Planning time: 0.561 ms
 Execution time: 168.587 ms
(20 rows)

