query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=424835.02..424835.02 rows=1 width=236)
   ->  Sort  (cost=424835.02..424835.04 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=424834.83..424834.99 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187579.23 rows=5931390 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18601.29..18601.29 rows=1 width=192)
   ->  Sort  (cost=18601.29..18601.29 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..18601.28 rows=1 width=192)
               Join Filter: (nation.n_nationkey = supplier.s_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..18598.58 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..18598.58 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..18597.30 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5440.26 rows=838 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.69 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 3 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=287849.32..287849.35 rows=10 width=44)
   ->  Sort  (cost=287849.32..288643.77 rows=317780 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=273285.98..280982.21 rows=317780 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 4
               ->  Hash Join  (cost=51665.00..254715.71 rows=317780 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..187579.23 rows=3278535 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=49847.61..49847.61 rows=145391 width=12)
                           ->  Hash Join  (cost=12752.46..49847.61 rows=145391 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=6904.39..42096.63 rows=724899 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6723.17 rows=724899 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=5472.00..5472.00 rows=30085 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..5472.00 rows=30085 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=75983.04..75983.04 rows=1 width=24)
   ->  Sort  (cost=75983.04..75983.05 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=75982.97..75983.02 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=32180.44..75697.76 rows=57042 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=32179.98..32322.59 rows=57042 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=687.11..27673.74 rows=57042 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..672.85 rows=57042 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.43..37472.13 rows=2000513 width=4)
(14 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146606.73..146606.73 rows=1 width=58)
   ->  Sort  (cost=146606.73..146606.79 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=146517.15..146606.60 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=146517.15..146534.98 rows=7131 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=9490.81..146060.77 rows=7131 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=9017.81..144651.66 rows=178305 width=50)
                                 ->  Hash Join  (cost=9017.38..39771.98 rows=44565 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=2680.37..32153.73 rows=222824 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..2624.67 rows=222824 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=5962.01..5962.01 rows=30000 width=38)
                                             ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=115995.65..115995.66 rows=1 width=32)
   ->  Aggregate  (cost=115995.65..115995.66 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=22757.63..115414.62 rows=116205 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..22728.58 rows=116205 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=238271.14..238271.18 rows=1 width=92)
   ->  GroupAggregate  (cost=238271.14..238485.41 rows=6122 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=238271.14..238286.45 rows=6122 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=88557.55..237886.08 rows=6122 width=72)
                     Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=88192.45..236703.30 rows=147115 width=46)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=33027.55..173171.62 rows=1838938 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..32567.81 rows=1838938 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=53664.90..53664.90 rows=120000 width=30)
                                 ->  Hash Join  (cost=5708.90..53664.90 rows=120000 width=30)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                       ->  Hash  (cost=5558.90..5558.90 rows=12000 width=30)
                                             ->  Hash Join  (cost=1.40..5558.90 rows=12000 width=30)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                               Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Hash  (cost=355.10..355.10 rows=800 width=30)
                           ->  Hash Join  (cost=1.40..355.10 rows=800 width=30)
                                 Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                 ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                       ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                             Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(32 rows)

query 8 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=57348.94..57348.98 rows=1 width=40)
   ->  GroupAggregate  (cost=57348.94..57456.44 rows=2389 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=57348.94..57354.91 rows=2389 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Hash Join  (cost=22375.92..57214.89 rows=2389 width=46)
                     Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=22374.35..57194.04 rows=2389 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=21926.35..56739.77 rows=2389 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=15589.35..50334.08 rows=11945 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=5447.98..38374.43 rows=453030 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..5334.73 rows=453030 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=9646.99..9646.99 rows=39550 width=20)
                                             ->  Nested Loop  (cost=0.85..9646.99 rows=39550 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5401.60 rows=1318 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.92 rows=30 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=5962.01..5962.01 rows=30000 width=4)
                                       ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(38 rows)

query 9 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=132555.21..132555.21 rows=1 width=66)
   ->  Sort  (cost=132555.21..132705.59 rows=60150 width=66)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
         ->  HashAggregate  (cost=131201.84..132254.46 rows=60150 width=66)
               Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Hash Join  (cost=72869.08..125897.45 rows=303108 width=57)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=72867.51..123449.80 rows=303108 width=31)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=72419.51..122205.81 rows=303108 width=35)
                                 Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                 ->  Hash  (cost=68630.66..68630.66 rows=303108 width=35)
                                       ->  Hash Join  (cost=42471.47..68630.66 rows=303108 width=35)
                                             Hash Cond: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..18158.42 rows=800000 width=14)
                                             ->  Hash  (cost=37924.43..37924.43 rows=303108 width=33)
                                                   ->  Nested Loop  (cost=0.85..37924.43 rows=303108 width=33)
                                                         ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=10101 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.82 rows=30 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(26 rows)

query 10 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161095.52..161095.57 rows=20 width=202)
   ->  Sort  (cost=161095.52..161234.07 rows=55421 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=158928.03..159620.79 rows=55421 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Hash Join  (cost=35360.76..158235.26 rows=55421 width=182)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=35359.20..158063.56 rows=55421 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Hash Join  (cost=28387.20..150946.08 rows=55421 width=16)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..118733.70 rows=1457373 width=16)
                                       Index Cond: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=27673.74..27673.74 rows=57042 width=8)
                                       ->  Bitmap Heap Scan on orders  (cost=687.11..27673.74 rows=57042 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..672.85 rows=57042 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=20432.90..20432.91 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=9749.78..9749.79 rows=1 width=32)
           ->  Nested Loop  (cost=5.81..9509.78 rows=32000 width=10)
                 ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=5.38..227.14 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..22.39 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=10683.11..10709.78 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=10069.78..10629.78 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=5.81..9509.78 rows=32000 width=14)
                     ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..22.39 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=67916.91..67916.91 rows=1 width=27)
   ->  Sort  (cost=67916.91..67916.93 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=67916.81..67916.88 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=14745.17..67413.63 rows=28753 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                     ->  Hash  (cost=14385.76..14385.76 rows=28753 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..14385.76 rows=28753 width=15)
                                 Index Cond: ((l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 Filter: (l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[]))
(12 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64793.97..64793.97 rows=1 width=16)
   ->  Sort  (cost=64793.97..64794.47 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64790.97..64792.97 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61040.97..62540.97 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53692.49 rows=1469697 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1469697 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=80977.79..80977.80 rows=1 width=32)
   ->  Aggregate  (cost=80977.79..80977.80 rows=1 width=32)
         ->  Hash Join  (cost=9818.65..79790.83 rows=67826 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1219.65..71013.78 rows=67826 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1202.69 rows=67826 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=247526.91..247536.11 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122917.56..122917.57 rows=1 width=32)
           ->  HashAggregate  (cost=122667.74..122792.65 rows=9993 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4225.96..120315.03 rows=235271 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4167.14 rows=235271 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=124609.34..125069.09 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..434.29 rows=10000 width=71)
         ->  Sort  (cost=124609.06..124609.18 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=124432.27..124607.65 rows=50 width=36)
                     ->  HashAggregate  (cost=124432.27..124607.15 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=4225.96..120315.03 rows=235271 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4167.14 rows=235271 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=34803.43..34803.43 rows=1 width=44)
   ->  Sort  (cost=34803.43..34842.99 rows=15825 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=33841.03..34724.30 rows=15825 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=33841.03..33986.03 rows=58002 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9809.94..29251.96 rows=58002 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..18740.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29001 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29001 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=179340.65..179340.66 rows=1 width=32)
   ->  Aggregate  (cost=179340.65..179340.66 rows=1 width=32)
         ->  Nested Loop  (cost=7107.37..179335.78 rows=1945 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=7106.94..178803.15 rows=194 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=7106.51..7107.00 rows=197 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..7099.00 rows=197 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..169226.21 rows=197401 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136257.50 rows=6001538 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.62 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 18 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=707360.42..707360.67 rows=100 width=71)
   ->  Sort  (cost=707360.42..712362.98 rows=2001025 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=570695.60..630882.68 rows=2001025 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 32
               ->  Hash Join  (cost=7001.04..445318.88 rows=2001025 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=29.04..433094.04 rows=2001025 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=0.86..260610.26 rows=500128 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..56864.43 rows=1500000 width=20)
                                 ->  GroupAggregate  (cost=0.43..188742.95 rows=500128 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136229.50 rows=6001538 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136229.50 rows=6001538 width=9)
                     ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                           ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(20 rows)

query 19 run 1
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   

 Limit  (cost=14266.45..14266.46 rows=1 width=32)
   ->  Aggregate  (cost=14266.45..14266.46 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..14265.59 rows=114 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=484 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..3.43 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=221885.84..221885.84 rows=1 width=51)
   ->  Sort  (cost=221885.84..221885.84 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=193219.77..221885.83 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=193219.77..221430.52 rows=1 width=8)
                     ->  Nested Loop  (cost=193219.77..221430.51 rows=1 width=8)
                           ->  Hash Join  (cost=193219.35..215763.06 rows=4931 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=186755.68..203136.20 rows=488172 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 8
                                       ->  Bitmap Heap Scan on lineitem  (cost=16659.65..143132.64 rows=927533 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16427.76 rows=927533 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6438.42..6438.42 rows=2020 width=4)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..1.14 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=103680.69..103680.70 rows=1 width=34)
   ->  Sort  (cost=103680.69..103680.70 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=103680.66..103680.68 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=103680.66..103680.67 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=55999.95..103680.65 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=55999.52..103678.22 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=55999.09..103675.86 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=55998.66..56198.71 rows=80021 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=237.88..49481.71 rows=80021 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..40942.13 rows=2000513 width=8)
                                                   ->  Hash  (cost=232.45..232.45 rows=400 width=30)
                                                         ->  Nested Loop  (cost=5.38..232.45 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..40942.13 rows=2000513 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 22 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16127.32..16127.34 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7546.45..7546.47 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4781 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8580.85..8601.45 rows=749 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8580.85..8582.72 rows=749 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8545.09 rows=749 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.00 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

