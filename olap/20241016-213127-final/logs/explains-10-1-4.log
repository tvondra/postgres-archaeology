query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191622.20..191622.40 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191622.20..191623.44 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=191622.20..191622.26 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=191619.08..191621.65 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=190619.08..190619.25 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131313.08 rows=1482650 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=17195.17..17195.17 rows=1 width=192)
   ->  Sort  (cost=17195.17..17195.17 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=15.08..17195.16 rows=1 width=192)
               Join Filter: (nation.n_nationkey = supplier.s_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=15.08..17192.46 rows=1 width=170)
                     ->  Nested Loop  (cost=15.08..17192.45 rows=1 width=170)
                           ->  Nested Loop  (cost=14.80..17191.18 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5472.08 rows=722 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=14.38..16.22 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.94..13.95 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.97..13.94 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.97..12.83 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.83..12.21 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.41..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=250805.56..250805.59 rows=10 width=44)
   ->  Sort  (cost=250805.56..251583.97 rows=311362 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=196871.94..244077.14 rows=311362 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=196871.94..236293.11 rows=311360 width=44)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=195871.88..198207.08 rows=77840 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=195871.88..196066.48 rows=77840 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Hash Join  (cost=54401.66..189548.07 rows=77840 width=24)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..131313.08 rows=814680 width=16)
                                             Filter: (l_shipdate > '1995-03-07'::date)
                                       ->  Hash  (cost=52610.15..52610.15 rows=143321 width=12)
                                             ->  Hash Join  (cost=5846.75..52610.15 rows=143321 width=12)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Seq Scan on orders  (cost=0.00..44881.00 rows=717082 width=16)
                                                         Filter: (o_orderdate < '1995-03-07'::date)
                                                   ->  Hash  (cost=5472.00..5472.00 rows=29980 width=4)
                                                         ->  Seq Scan on customer  (cost=0.00..5472.00 rows=29980 width=4)
                                                               Filter: (c_mktsegment = 'BUILDING'::bpchar)
(23 rows)

query 4 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=63334.17..63334.20 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=63334.17..63334.33 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=63334.17..63334.20 rows=15 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=63332.32..63333.87 rows=15 width=24)
                     Workers Planned: 3
                     ->  Partial HashAggregate  (cost=62332.32..62332.37 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=863.87..62244.04 rows=17656 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=863.44..27259.28 rows=17656 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..849.76 rows=54733 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Only Scan using q21_idx_2 on lineitem  (cost=0.43..2.23 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
(16 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=76006.63..76006.63 rows=1 width=58)
   ->  Sort  (cost=76006.63..76006.69 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=75967.17..76006.50 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=75967.17..76005.63 rows=75 width=58)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=74967.13..74996.78 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=74967.13..74972.99 rows=2347 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=10400.65..74835.74 rows=2347 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=9927.65..74053.69 rows=58865 width=50)
                                             ->  Hash Join  (cost=9927.09..37584.65 rows=14714 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=3590.08..30824.62 rows=73569 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..3533.07 rows=228064 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Hash  (cost=5962.01..5962.01 rows=30000 width=38)
                                                         ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.44 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=116492.12..116492.13 rows=1 width=32)
   ->  Finalize Aggregate  (cost=116492.12..116492.13 rows=1 width=32)
         ->  Gather  (cost=116491.69..116492.10 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=115491.69..115491.70 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=23056.60..115340.40 rows=30258 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..23026.35 rows=121030 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=193939.78..193939.94 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=193939.78..194891.36 rows=6028 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=193939.78..194710.52 rows=6028 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=192939.72..192992.47 rows=1507 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=192939.72..192943.49 rows=1507 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Hash Join  (cost=55530.00..192860.17 rows=1507 width=72)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Hash Join  (cost=365.10..137494.03 rows=36210 width=46)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..135063.70 rows=454169 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=355.10..355.10 rows=800 width=30)
                                             ->  Hash Join  (cost=1.40..355.10 rows=800 width=30)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                               Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                 ->  Hash  (cost=53664.90..53664.90 rows=120000 width=30)
                                       ->  Hash Join  (cost=5708.90..53664.90 rows=120000 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                             ->  Hash  (cost=5558.90..5558.90 rows=12000 width=30)
                                                   ->  Hash Join  (cost=1.40..5558.90 rows=12000 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(34 rows)

query 8 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=54420.45..54420.62 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=54420.45..54817.09 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=54420.45..54732.85 rows=2408 width=72)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=53420.40..53445.98 rows=602 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=53420.40..53421.90 rows=602 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=6787.98..53392.60 rows=602 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Hash Join  (cost=6786.41..53386.18 rows=602 width=20)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Nested Loop  (cost=449.41..47031.86 rows=3011 width=24)
                                             ->  Hash Join  (cost=448.98..7023.05 rows=9965 width=20)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.98..6548.79 rows=9999 width=20)
                                                         ->  Parallel Index Only Scan using q2_idx_1 on part  (cost=0.42..5425.75 rows=333 width=4)
                                                               Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                         ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.06 rows=31 width=24)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.01 rows=1 width=12)
                                                   Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                   Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=5962.01..5962.01 rows=30000 width=4)
                                             ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=4)
                                                   Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                               Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 9 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=129941.27..129941.73 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=129941.27..157392.34 rows=60150 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=129941.27..154535.21 rows=180450 width=66)
               Workers Planned: 3
               ->  Partial GroupAggregate  (cost=128941.23..132332.30 rows=60150 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=128941.23..129233.54 rows=116922 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=66192.75..119099.21 rows=116922 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Hash Join  (cost=66191.18..118154.09 rows=116922 width=31)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Hash Join  (cost=450.18..44646.17 rows=116922 width=31)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Merge Join  (cost=2.18..43890.07 rows=117319 width=35)
                                                   Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                                   Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                                   ->  Nested Loop  (cost=0.98..17528.81 rows=117319 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4760.87 rows=3910 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.96 rows=31 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..18168.42 rows=800000 width=14)
                                             ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=41131.00..41131.00 rows=1500000 width=8)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(30 rows)

query 10 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=83637.28..83637.33 rows=20 width=202)
   ->  Sort  (cost=83637.28..83766.53 rows=51700 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=81615.31..82261.56 rows=51700 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=8798.53..80969.06 rows=51700 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=7798.53..74799.06 rows=16677 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=7796.97..74746.30 rows=16677 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=824.97..67730.52 rows=16677 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=824.41..27208.43 rows=16868 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..811.34 rows=52291 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.39 rows=1 width=16)
                                             Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                       ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 11 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18803.41..18803.41 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=7251.81..7251.82 rows=1 width=32)
           ->  Gather  (cost=7251.59..7251.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=6251.59..6251.60 rows=1 width=32)
                       ->  Nested Loop  (cost=2.16..6151.59 rows=13333 width=10)
                             ->  Hash Join  (cost=1.74..496.20 rows=167 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.41..482.08 rows=4167 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..33.06 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=11551.59..11631.59 rows=32000 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=10911.59..11391.59 rows=32000 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Gather  (cost=1002.16..10351.59 rows=32000 width=14)
                     Workers Planned: 2
                     ->  Nested Loop  (cost=2.16..6151.59 rows=13333 width=14)
                           ->  Hash Join  (cost=1.74..496.20 rows=167 width=4)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Index Only Scan using q2_idx_3 on supplier  (cost=0.41..482.08 rows=4167 width=8)
                                 ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..33.06 rows=80 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(31 rows)

query 12 run 1
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=43450.24..43450.29 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=43450.24..43450.59 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=43450.24..43450.31 rows=28 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Gather  (cost=43446.70..43449.57 rows=28 width=27)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=42446.70..42446.77 rows=7 width=27)
                           Group Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.85..42320.52 rows=7210 width=27)
                                 ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..13477.46 rows=7210 width=15)
                                       Index Cond: ((l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                       Filter: (l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[]))
                                 ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(15 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64909.57..64909.57 rows=1 width=16)
   ->  Sort  (cost=64909.57..64910.07 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64906.57..64908.57 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61156.57..62656.57 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53732.28 rows=1484857 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484857 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=82880.05..82880.07 rows=1 width=32)
   ->  Finalize Aggregate  (cost=82880.05..82880.07 rows=1 width=32)
         ->  Gather  (cost=82879.60..82880.01 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=81879.60..81879.61 rows=1 width=64)
                     ->  Hash Join  (cost=9899.49..81562.86 rows=18099 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1300.49..72916.35 rows=18099 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1282.39 rows=72396 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                                 ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=243981.39..243981.45 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=120848.37..120848.38 rows=1 width=32)
           ->  HashAggregate  (cost=120597.52..120722.94 rows=10034 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3872.97..118440.90 rows=215662 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3819.05 rows=215662 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=123133.01..123742.52 rows=10034 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..434.29 rows=10000 width=71)
         ->  Sort  (cost=123132.72..123157.81 rows=10034 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=122214.98..122465.83 rows=10034 width=36)
                     ->  HashAggregate  (cost=122214.98..122365.49 rows=10034 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3872.97..118440.90 rows=215662 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3819.05 rows=215662 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=33725.93..33725.94 rows=1 width=44)
   ->  Sort  (cost=33725.93..33766.08 rows=16060 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=32735.26..33645.63 rows=16060 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=32735.26..32885.21 rows=59982 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=10822.32..27975.02 rows=59982 width=40)
                           Workers Planned: 4
                           ->  Hash Join  (cost=9822.32..20976.82 rows=14996 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..11240.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Hash  (cost=9099.00..9099.00 rows=29991 width=40)
                                       ->  Seq Scan on part  (cost=0.00..9099.00 rows=29991 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=178223.08..178223.10 rows=1 width=32)
   ->  Finalize Aggregate  (cost=178223.08..178223.10 rows=1 width=32)
         ->  Gather  (cost=178222.86..178223.07 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=177222.86..177222.87 rows=1 width=32)
                     ->  Nested Loop  (cost=5352.79..177220.73 rows=852 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=5352.24..176975.87 rows=85 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=5351.80..5352.02 rows=87 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=87 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.43..169176.13 rows=195732 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136235.22 rows=6000986 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.76 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 18 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1689129.98..1689130.23 rows=100 width=71)
   ->  Sort  (cost=1689129.98..1704134.90 rows=6001970 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1324694.67..1459739.00 rows=6001970 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=1324694.67..1339699.60 rows=6001970 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=6987.26..517082.74 rows=6001970 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=15.26..494355.13 rows=6001970 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Join  (cost=0.86..279363.19 rows=1500246 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..56864.43 rows=1500000 width=20)
                                       ->  GroupAggregate  (cost=0.43..184993.23 rows=1500246 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136235.22 rows=6000986 width=9)
                                 ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136235.22 rows=6000986 width=9)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(21 rows)

query 19 run 1
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         

 Limit  (cost=9338.84..9338.85 rows=1 width=32)
   ->  Finalize Aggregate  (cost=9338.84..9338.85 rows=1 width=32)
         ->  Gather  (cost=9338.62..9338.83 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=8338.62..8338.63 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..8338.25 rows=49 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=202 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..3.44 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=273675.65..273675.65 rows=1 width=51)
   ->  Sort  (cost=273675.65..273675.65 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=240173.36..273675.64 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=240173.36..273220.33 rows=1 width=8)
                     ->  Merge Join  (cost=240173.36..273220.32 rows=1 width=8)
                           Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                           Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity)))))
                           ->  GroupAggregate  (cost=240172.51..256218.96 rows=478757 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=240172.51..242388.79 rows=886509 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=15915.15..141772.78 rows=886509 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..15693.52 rows=886509 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Materialize  (cost=0.84..10599.32 rows=8080 width=16)
                                 ->  Nested Loop  (cost=0.84..10579.12 rows=8080 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6454.42 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..2.00 rows=4 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(28 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=78493.88..78493.88 rows=1 width=34)
   ->  Sort  (cost=78493.88..78493.88 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=78493.85..78493.87 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=78493.85..78493.85 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=1241.17..78493.84 rows=1 width=26)
                           ->  Nested Loop  (cost=1240.74..78491.47 rows=1 width=34)
                                 ->  Gather  (cost=1240.32..78489.11 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=240.32..77489.01 rows=1 width=38)
                                             ->  Hash Join  (cost=239.88..28291.01 rows=19936 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..25976.90 rows=500082 width=8)
                                                   ->  Hash  (cost=234.45..234.45 rows=400 width=30)
                                                         ->  Nested Loop  (cost=7.38..234.45 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=7.38..229.14 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..7.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.43 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..2.36 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: (l_suppkey <> l1.l_suppkey)
(31 rows)

query 22 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14884.31..14884.34 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.82..6242.83 rows=1 width=32)
           ->  Gather  (cost=6242.60..6242.81 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.60..5242.61 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1989 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8641.48..8661.67 rows=734 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8641.48..8643.32 rows=734 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8606.55 rows=734 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.38 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

