query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=424403.05..424403.05 rows=1 width=236)
   ->  Sort  (cost=424403.05..424403.06 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=424402.85..424403.02 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187569.65 rows=5920830 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=19301.55..19301.56 rows=1 width=192)
   ->  Sort  (cost=19301.55..19301.56 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..19301.54 rows=1 width=192)
               Join Filter: (nation.n_nationkey = supplier.s_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..19298.84 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..19298.84 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..19297.57 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5443.26 rows=883 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.68 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 3 run 1
SET
SET
SET
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit  (cost=302748.02..302748.05 rows=10 width=44)
   ->  Sort  (cost=302748.02..303541.54 rows=317408 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=286366.71..295888.95 rows=317408 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=286366.71..287160.23 rows=317408 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=54460.55..257362.00 rows=317408 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..187569.65 rows=3242168 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=52624.93..52624.93 rows=146850 width=12)
                                 ->  Hash Join  (cost=5854.56..52624.93 rows=146850 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..44881.00 rows=719736 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=5472.00..5472.00 rows=30605 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..5472.00 rows=30605 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(19 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=79707.27..79707.27 rows=1 width=24)
   ->  Sort  (cost=79707.27..79707.28 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=79707.19..79707.24 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=32391.88..79422.01 rows=57037 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=32391.42..32534.02 rows=57037 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=899.06..27885.61 rows=57037 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..884.80 rows=57037 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q21_idx_2 on lineitem  (cost=0.43..40984.28 rows=2000257 width=4)
(14 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=152297.42..152297.43 rows=1 width=58)
   ->  Sort  (cost=152297.42..152297.49 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=152204.06..152297.30 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=152204.06..152222.65 rows=7434 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=10469.78..151726.06 rows=7434 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=9996.78..150277.33 rows=185851 width=50)
                                 ->  Hash Join  (cost=9996.35..40947.24 rows=46457 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=3659.34..33274.60 rows=232284 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..3601.27 rows=232284 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=5962.01..5962.01 rows=30000 width=38)
                                             ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=116594.55..116594.56 rows=1 width=32)
   ->  Aggregate  (cost=116594.55..116594.56 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=22999.76..116008.52 rows=117204 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..22970.45 rows=117204 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=237598.68..237598.72 rows=1 width=92)
   ->  GroupAggregate  (cost=237598.68..237810.89 rows=6063 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=237598.68..237613.84 rows=6063 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=88242.40..237217.75 rows=6063 width=72)
                     Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=87877.30..236042.84 rows=145701 width=46)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=32712.40..172591.37 rows=1821265 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..32257.08 rows=1821265 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=53664.90..53664.90 rows=120000 width=30)
                                 ->  Hash Join  (cost=5708.90..53664.90 rows=120000 width=30)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                       ->  Hash  (cost=5558.90..5558.90 rows=12000 width=30)
                                             ->  Hash Join  (cost=1.40..5558.90 rows=12000 width=30)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                               Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Hash  (cost=355.10..355.10 rows=800 width=30)
                           ->  Hash Join  (cost=1.40..355.10 rows=800 width=30)
                                 Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                 ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                       ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                             Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(32 rows)

query 8 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=59372.06..59372.10 rows=1 width=40)
   ->  GroupAggregate  (cost=59372.06..59481.21 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=59372.06..59378.17 rows=2445 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Hash Join  (cost=24249.95..59234.46 rows=2445 width=46)
                     Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=24248.39..59213.16 rows=2445 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=23800.39..58758.74 rows=2445 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=17463.38..52351.45 rows=12224 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=7252.81..40291.68 rows=460525 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7137.68 rows=460525 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=9712.89..9712.89 rows=39815 width=20)
                                             ->  Nested Loop  (cost=0.85..9712.89 rows=39815 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5401.69 rows=1327 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.94 rows=31 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=5962.01..5962.01 rows=30000 width=4)
                                       ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(38 rows)

query 9 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=167699.50..167699.51 rows=1 width=66)
   ->  Sort  (cost=167699.50..167849.88 rows=60150 width=66)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
         ->  HashAggregate  (cost=166346.13..167398.75 rows=60150 width=66)
               Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Hash Join  (cost=104498.87..158921.14 rows=424285 width=57)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=104497.30..155495.60 rows=424285 width=31)
                           Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                           ->  Hash  (cost=99193.74..99193.74 rows=424285 width=31)
                                 ->  Hash Join  (cost=34514.28..99193.74 rows=424285 width=31)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Hash Join  (cost=34066.28..97631.53 rows=424285 width=35)
                                             Hash Cond: ((lineitem.l_suppkey = partsupp.ps_suppkey) AND (lineitem.l_partkey = partsupp.ps_partkey))
                                             ->  Nested Loop  (cost=0.85..50801.60 rows=424285 width=33)
                                                   ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=14141 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.83 rows=31 width=29)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                             ->  Hash  (cost=18158.42..18158.42 rows=800000 width=14)
                                                   ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..18158.42 rows=800000 width=14)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(26 rows)

query 10 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=160074.83..160074.88 rows=20 width=202)
   ->  Sort  (cost=160074.83..160206.68 rows=52740 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=158012.19..158671.44 rows=52740 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Hash Join  (cost=7820.92..157352.94 rows=52740 width=182)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=7819.36..157189.46 rows=52740 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Nested Loop  (cost=847.36..150079.02 rows=52740 width=16)
                                 ->  Bitmap Heap Scan on orders  (cost=846.92..27783.53 rows=53707 width=8)
                                       Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..833.50 rows=53707 width=0)
                                             Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..2.27 rows=1 width=16)
                                       Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(20 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29202.75..29202.75 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=14027.27..14027.29 rows=1 width=32)
           ->  Nested Loop  (cost=7.81..13787.27 rows=32000 width=10)
                 ->  Nested Loop  (cost=7.38..234.45 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=7.38..229.14 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..7.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..33.08 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=15175.47..15202.13 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=14562.13..15122.13 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=0.42..14002.13 rows=32000 width=14)
                     ->  Nested Loop  (cost=0.00..449.31 rows=400 width=4)
                           Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..33.08 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(26 rows)

query 12 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=68143.60..68143.61 rows=1 width=27)
   ->  Sort  (cost=68143.60..68143.62 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=68143.50..68143.57 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=14951.92..67627.65 rows=29477 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                     ->  Hash  (cost=14583.46..14583.46 rows=29477 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..14583.46 rows=29477 width=15)
                                 Index Cond: ((l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 Filter: (l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[]))
(12 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=65023.89..65023.89 rows=1 width=16)
   ->  Sort  (cost=65023.89..65024.39 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=65020.89..65022.89 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61270.89..62770.89 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53771.64 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=86105.77..86105.78 rows=1 width=32)
   ->  Aggregate  (cost=86105.77..86105.78 rows=1 width=32)
         ->  Hash Join  (cost=9972.03..84769.62 rows=76351 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1373.03..75970.20 rows=76351 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1353.94 rows=76351 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=246956.21..246965.41 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122655.26..122655.27 rows=1 width=32)
           ->  HashAggregate  (cost=122405.26..122530.26 rows=10000 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4117.02..120113.96 rows=229130 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4059.73 rows=229130 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=124300.94..124760.69 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..434.29 rows=10000 width=71)
         ->  Sort  (cost=124300.65..124300.78 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=124123.74..124299.24 rows=50 width=36)
                     ->  HashAggregate  (cost=124123.74..124298.74 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=4117.02..120113.96 rows=229130 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4059.73 rows=229130 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=34871.00..34871.01 rows=1 width=44)
   ->  Sort  (cost=34871.00..34910.76 rows=15901 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=33899.56..34791.50 rows=15901 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=33899.56..34046.15 rows=58634 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9813.89..29255.91 rows=58634 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..18740.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29317 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29317 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=179245.72..179245.73 rows=1 width=32)
   ->  Aggregate  (cost=179245.72..179245.73 rows=1 width=32)
         ->  Nested Loop  (cost=7108.06..179240.59 rows=2049 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=7107.62..178675.70 rows=205 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=7107.19..7107.72 rows=212 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..7099.00 rows=212 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..169149.25 rows=193292 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136246.01 rows=6000772 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.63 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 18 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=820070.32..820070.57 rows=100 width=71)
   ->  Sort  (cost=820070.32..825071.60 rows=2000513 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=698600.61..743612.15 rows=2000513 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=698600.61..703601.89 rows=2000513 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=6999.47..445270.03 rows=2000513 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=27.47..433046.54 rows=2000513 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Join  (cost=0.86..260590.64 rows=500064 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..56864.43 rows=1500000 width=20)
                                       ->  GroupAggregate  (cost=0.43..188724.77 rows=500064 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136218.01 rows=6000772 width=9)
                                 ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136218.01 rows=6000772 width=9)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(21 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=14298.93..14298.94 rows=1 width=32)
   ->  Aggregate  (cost=14298.93..14298.94 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..14298.09 rows=112 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=492 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..3.44 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=277614.12..277614.12 rows=1 width=51)
   ->  Sort  (cost=277614.12..277614.12 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=243742.25..277614.11 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=243742.25..277158.80 rows=1 width=8)
                     ->  Merge Join  (cost=243742.25..277158.79 rows=1 width=8)
                           Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                           Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity)))))
                           ->  GroupAggregate  (cost=243741.40..260105.11 rows=484217 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=243741.40..246016.52 rows=910045 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=16346.39..142557.07 rows=910045 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16118.88 rows=910045 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Materialize  (cost=0.84..10583.32 rows=8080 width=16)
                                 ->  Nested Loop  (cost=0.84..10563.12 rows=8080 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..2.00 rows=4 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(28 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=103764.09..103764.09 rows=1 width=34)
   ->  Sort  (cost=103764.09..103764.09 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=103764.06..103764.08 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=103764.06..103764.06 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=56042.06..103764.05 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=56041.63..103761.61 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=56041.20..103759.25 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=56040.77..56240.80 rows=80010 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=239.88..49524.80 rows=80010 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..40984.28 rows=2000257 width=8)
                                                   ->  Hash  (cost=234.45..234.45 rows=400 width=30)
                                                         ->  Nested Loop  (cost=7.38..234.45 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=7.38..229.14 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..7.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..40984.28 rows=2000257 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 22 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16184.08..16184.10 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7546.41..7546.42 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4764 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8637.65..8658.22 rows=748 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8637.65..8639.52 rows=748 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8601.95 rows=748 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.38 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

