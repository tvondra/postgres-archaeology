query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=395184.03..395184.03 rows=1 width=236)
   ->  Sort  (cost=395184.03..395184.05 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=395183.84..395184.00 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187582.74 rows=5931460 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=19127.72..19127.73 rows=1 width=192)
   ->  Sort  (cost=19127.72..19127.73 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..19127.71 rows=1 width=192)
               Join Filter: (nation.n_nationkey = supplier.s_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..19125.01 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..19125.01 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..19123.74 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5440.76 rows=872 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.68 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 3 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=287262.66..287262.69 rows=10 width=44)
   ->  Sort  (cost=287262.66..288047.73 rows=314026 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=272871.36..280476.68 rows=314026 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 4
               ->  Hash Join  (cost=51587.33..254520.46 rows=314026 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..187582.74 rows=3256290 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=49779.14..49779.14 rows=144655 width=12)
                           ->  Hash Join  (cost=12724.96..49779.14 rows=144655 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=6877.40..42035.78 rows=722190 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6696.85 rows=722190 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=5472.00..5472.00 rows=30045 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..5472.00 rows=30045 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=75459.92..75459.92 rows=1 width=24)
   ->  Sort  (cost=75459.92..75459.93 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=75459.85..75459.90 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=31726.16..75194.85 rows=52999 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=31722.40..31854.90 rows=52999 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=637.67..27563.65 rows=52999 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..624.42 rows=52999 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.43..37503.52 rows=2000606 width=4)
(14 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=149758.20..149758.20 rows=1 width=58)
   ->  Sort  (cost=149758.20..149758.26 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=149666.19..149758.07 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=149666.19..149684.50 rows=7326 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=9564.19..149195.90 rows=7326 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=9091.19..147760.77 rows=183261 width=50)
                                 ->  Hash Join  (cost=9090.76..39973.65 rows=45801 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=2753.75..32319.85 rows=229007 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..2696.50 rows=229007 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=5962.01..5962.01 rows=30000 width=38)
                                             ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=116493.40..116493.41 rows=1 width=32)
   ->  Aggregate  (cost=116493.40..116493.41 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=22837.78..115906.52 rows=117375 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..22808.44 rows=117375 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=238636.84..238636.87 rows=1 width=116)
   ->  GroupAggregate  (cost=238636.84..238836.75 rows=6151 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=238636.84..238652.22 rows=6151 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=88738.09..238249.74 rows=6151 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=33573.19..182278.82 rows=147797 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=33208.09..173502.22 rows=1848942 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..32745.85 rows=1848942 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=355.10..355.10 rows=800 width=30)
                                 ->  Hash Join  (cost=1.40..355.10 rows=800 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=53664.90..53664.90 rows=120000 width=30)
                           ->  Hash Join  (cost=5708.90..53664.90 rows=120000 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                 ->  Hash  (cost=5558.90..5558.90 rows=12000 width=30)
                                       ->  Hash Join  (cost=1.40..5558.90 rows=12000 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(32 rows)

query 8 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=57618.34..57618.38 rows=1 width=64)
   ->  GroupAggregate  (cost=57618.34..57720.75 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=57618.34..57624.37 rows=2413 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=22502.89..57482.77 rows=2413 width=70)
                     ->  Hash Join  (cost=22502.74..57388.68 rows=2413 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=22054.74..56934.34 rows=2414 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=15717.74..50527.92 rows=12072 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=5489.07..38466.87 rows=456453 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..5374.96 rows=456453 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=9732.77..9732.77 rows=39672 width=20)
                                             ->  Nested Loop  (cost=0.85..9732.77 rows=39672 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5401.64 rows=1322 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.96 rows=32 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=5962.01..5962.01 rows=30000 width=4)
                                       ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 9 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=142833.36..142833.37 rows=1 width=90)
   ->  Sort  (cost=142833.36..142983.74 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=141630.36..142532.61 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=79989.97..135270.01 rows=363449 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=79988.41..133244.03 rows=363449 width=31)
                           Hash Cond: ((supplier.s_suppkey = partsupp.ps_suppkey) AND (lineitem.l_partkey = partsupp.ps_partkey))
                           ->  Hash Join  (cost=49829.98..101177.50 rows=363449 width=41)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Hash Join  (cost=49381.98..99774.28 rows=363740 width=33)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                       ->  Hash  (cost=44835.23..44835.23 rows=363740 width=33)
                                             ->  Nested Loop  (cost=0.85..44835.23 rows=363740 width=33)
                                                   ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=12121 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.85 rows=32 width=29)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                           ->  Hash  (cost=18158.42..18158.42 rows=800000 width=14)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..18158.42 rows=800000 width=14)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(26 rows)

query 10 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161934.12..161934.17 rows=20 width=202)
   ->  Sort  (cost=161934.12..162068.18 rows=53624 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=159836.90..160507.20 rows=53624 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Nested Loop  (cost=35308.53..159166.60 rows=53624 width=182)
                     ->  Hash Join  (cost=35308.38..157826.62 rows=53624 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Hash Join  (cost=28336.38..150713.86 rows=53624 width=16)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..118590.44 rows=1442837 width=16)
                                       Index Cond: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=27639.09..27639.09 rows=55749 width=8)
                                       ->  Bitmap Heap Scan on orders  (cost=671.85..27639.09 rows=55749 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..657.92 rows=55749 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: customer.c_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = customer.c_nationkey)
(24 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=20112.94..20112.94 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=9749.80..9749.81 rows=1 width=32)
           ->  Nested Loop  (cost=5.81..9509.80 rows=32000 width=10)
                 ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=5.38..227.14 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..22.39 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=10363.13..10389.80 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=9829.80..10309.80 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=5.81..9509.80 rows=32000 width=14)
                     ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..22.39 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=67941.60..67941.61 rows=1 width=27)
   ->  Sort  (cost=67941.60..67941.62 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=67941.50..67941.57 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=14775.88..67442.14 rows=28535 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                     ->  Hash  (cost=14419.19..14419.19 rows=28535 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..14419.19 rows=28535 width=15)
                                 Index Cond: ((l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 Filter: (l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[]))
(12 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64678.44..64678.44 rows=1 width=16)
   ->  Sort  (cost=64678.44..64678.94 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64675.44..64677.44 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60925.44..62425.44 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53652.71 rows=1454545 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1454545 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=85562.33..85562.35 rows=1 width=32)
   ->  Aggregate  (cost=85562.33..85562.35 rows=1 width=32)
         ->  Hash Join  (cost=9954.37..84242.67 rows=75409 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1355.37..75445.72 rows=75409 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1336.52 rows=75409 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=242823.74..242832.93 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=121460.80..121460.81 rows=1 width=32)
           ->  HashAggregate  (cost=121210.60..121335.70 rows=10008 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3936.66..119019.16 rows=219144 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3881.87 rows=219144 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=121362.92..121822.67 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..434.29 rows=10000 width=71)
         ->  Sort  (cost=121362.64..121362.76 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=121210.60..121361.22 rows=50 width=36)
                     ->  HashAggregate  (cost=121210.60..121360.72 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3936.66..119019.16 rows=219144 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3881.87 rows=219144 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35028.54..35028.55 rows=1 width=44)
   ->  Sort  (cost=35028.54..35068.73 rows=16075 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=34036.09..34948.17 rows=16075 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=34036.09..34186.36 rows=60106 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9823.09..29265.11 rows=60106 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..18740.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=30053 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=30053 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=179096.65..179096.66 rows=1 width=32)
   ->  Aggregate  (cost=179096.65..179096.66 rows=1 width=32)
         ->  Nested Loop  (cost=7107.74..179091.83 rows=1929 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=7107.30..178553.72 rows=193 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=7106.87..7107.38 rows=205 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..7099.00 rows=205 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..169092.49 rows=188112 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136261.72 rows=6001819 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.65 rows=11 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 18 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=700421.44..700421.69 rows=100 width=71)
   ->  Sort  (cost=700421.44..705424.48 rows=2001215 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=563743.65..623936.44 rows=2001215 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 16
               ->  Hash Join  (cost=259608.83..438355.02 rows=2001215 width=44)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136233.72 rows=6001819 width=9)
                     ->  Hash  (cost=253356.50..253356.50 rows=500152 width=43)
                           ->  Hash Join  (cost=206975.06..253356.50 rows=500152 width=43)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=200003.06..245071.57 rows=500152 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                       ->  Hash  (cost=193751.16..193751.16 rows=500152 width=4)
                                             ->  GroupAggregate  (cost=0.43..188749.64 rows=500152 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136233.72 rows=6001819 width=9)
                                 ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                       ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=14248.36..14248.37 rows=1 width=32)
   ->  Aggregate  (cost=14248.36..14248.37 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..14247.53 rows=110 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=476 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..3.45 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=221058.53..221058.54 rows=1 width=51)
   ->  Sort  (cost=221058.53..221058.54 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=192547.33..221058.52 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=192547.33..220603.21 rows=1 width=8)
                     ->  Nested Loop  (cost=192547.33..220603.21 rows=1 width=8)
                           ->  Hash Join  (cost=192546.91..214957.53 rows=4912 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=186083.24..202354.04 rows=486320 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=16507.65..142854.79 rows=919143 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16277.86 rows=919143 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6438.42..6438.42 rows=2020 width=4)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..1.14 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=103764.72..103764.72 rows=1 width=34)
   ->  Sort  (cost=103764.72..103764.72 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=103764.69..103764.71 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=103764.69..103764.69 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=56039.67..103764.68 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=56039.24..103762.24 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=56038.81..103759.88 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=56038.38..56238.28 rows=79960 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=237.88..49526.85 rows=79960 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..40987.52 rows=2000606 width=8)
                                                   ->  Hash  (cost=232.45..232.45 rows=400 width=30)
                                                         ->  Nested Loop  (cost=5.38..232.45 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..40987.52 rows=2000606 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 22 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16128.70..16128.72 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7546.44..7546.45 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4774 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8582.25..8602.68 rows=743 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=8582.25..8584.11 rows=743 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..8546.82 rows=743 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.00 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

