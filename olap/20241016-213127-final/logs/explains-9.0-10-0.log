query 1 run 1
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3416995.95..3416995.95 rows=1 width=33)
   ->  Sort  (cost=3416995.95..3416995.97 rows=6 width=33)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3416995.65..3416995.92 rows=6 width=33)
               ->  Seq Scan on lineitem  (cost=0.00..1935050.50 rows=59277806 width=33)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(6 rows)

query 2 run 1
SET
SET
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1207252.28..1207252.28 rows=1 width=194)
   ->  Sort  (cost=1207252.28..1207252.28 rows=1 width=194)
         Sort Key: public.supplier.s_acctbal, public.nation.n_name, public.supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=570802.29..1207252.27 rows=1 width=194)
               Merge Cond: (part.p_partkey = public.partsupp.ps_partkey)
               Join Filter: (public.partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using q2_idx_1 on part  (cost=0.00..88813.02 rows=7894 width=30)
                     Index Cond: (p_size = 16)
                     Filter: ((p_type)::text ~~ '%NICKEL'::text)
               ->  Materialize  (cost=570802.09..578801.89 rows=1599960 width=176)
                     ->  Sort  (cost=570802.09..574801.99 rows=1599960 width=176)
                           Sort Key: public.partsupp.ps_partkey
                           ->  Hash Join  (cost=4073.53..308274.38 rows=1599960 width=176)
                                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..258202.00 rows=7999800 width=16)
                                 ->  Hash  (cost=3823.53..3823.53 rows=20000 width=168)
                                       ->  Hash Join  (cost=2.53..3823.53 rows=20000 width=168)
                                             Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=146)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (public.nation.n_regionkey = public.region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=84.79..84.80 rows=1 width=8)
                       ->  Hash Join  (cost=2.53..84.78 rows=4 width=8)
                             Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                             ->  Nested Loop  (cost=0.00..82.14 rows=18 width=12)
                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..5.00 rows=18 width=12)
                                         Index Cond: ($0 = ps_partkey)
                                   ->  Index Scan using supplier_pkey on supplier  (cost=0.00..4.27 rows=1 width=8)
                                         Index Cond: (public.supplier.s_suppkey = public.partsupp.ps_suppkey)
                             ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                         Hash Cond: (public.nation.n_regionkey = public.region.r_regionkey)
                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                     Filter: (r_name = 'AMERICA'::bpchar)
(42 rows)

query 3 run 1
SET
SET
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Limit  (cost=3682604.32..3682604.35 rows=10 width=28)
   ->  Sort  (cost=3682604.32..3690408.07 rows=3121497 width=28)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         ->  GroupAggregate  (cost=3521504.98..3615149.89 rows=3121497 width=28)
               ->  Sort  (cost=3521504.98..3529308.73 rows=3121497 width=28)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=653227.90..3131444.62 rows=3121497 width=28)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1935050.50 rows=32643000 width=20)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=628294.46..628294.46 rows=1434355 width=12)
                                 ->  Hash Join  (cost=58787.65..628294.46 rows=1434355 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..455772.75 rows=7228401 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=55067.19..55067.19 rows=297637 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..55067.19 rows=297637 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(18 rows)

query 4 run 1
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1439097.27..1439097.28 rows=1 width=16)
   ->  Sort  (cost=1439097.27..1439097.28 rows=1 width=16)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=1439097.25..1439097.26 rows=1 width=16)
               ->  Merge Semi Join  (cost=333895.04..1436452.51 rows=528948 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=333886.03..335208.68 rows=529063 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=8325.97..283590.44 rows=529063 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8193.70 rows=529063 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using q4_idx_1 on lineitem  (cost=0.00..1042880.39 rows=19995320 width=4)
(13 rows)

query 5 run 1
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2490961.85..2490961.86 rows=1 width=42)
   ->  Sort  (cost=2490961.85..2490961.92 rows=25 width=42)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  HashAggregate  (cost=2490961.29..2490961.73 rows=25 width=42)
               ->  Hash Join  (cost=425309.89..2490597.80 rows=72698 width=42)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Hash Join  (cost=420563.89..2448772.82 rows=1817600 width=54)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1785085.60 rows=59985960 width=24)
                           ->  Hash  (cost=414882.67..414882.67 rows=454498 width=38)
                                 ->  Hash Join  (cost=99452.46..414882.67 rows=454498 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=35758.12..338121.50 rows=2272492 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..35189.99 rows=2272492 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59944.51..59944.51 rows=299987 width=38)
                                             ->  Hash Join  (cost=2.53..59944.51 rows=299987 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..51317.35 rows=1499935 width=8)
                                                   ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=3246.00..3246.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=8)
(29 rows)

query 6 run 1
SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1227407.29..1227407.30 rows=1 width=16)
   ->  Aggregate  (cost=1227407.29..1227407.30 rows=1 width=16)
         ->  Bitmap Heap Scan on lineitem  (cost=249285.53..1224352.39 rows=1221959 width=16)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..248980.04 rows=1221959 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(6 rows)

query 7 run 1
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2778350.98..2778350.98 rows=1 width=72)
   ->  Sort  (cost=2778350.98..2778496.66 rows=58271 width=72)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2776748.53..2778059.62 rows=58271 width=72)
               ->  Hash Join  (cost=942617.26..2776165.82 rows=58271 width=72)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (n1.n_nationkey = supplier.s_nationkey))
                     ->  Hash Join  (cost=937871.26..2741410.31 rows=1456772 width=80)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=363832.44..1822421.91 rows=18224231 width=28)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..359276.39 rows=18224231 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=546170.08..546170.08 rows=1199019 width=60)
                                 ->  Hash Join  (cost=59657.44..546170.08 rows=1199019 width=60)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..418273.40 rows=14999740 width=8)
                                       ->  Hash  (cost=58158.71..58158.71 rows=119899 width=60)
                                             ->  Hash Join  (cost=16.65..58158.71 rows=119899 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..51317.35 rows=1499935 width=8)
                                                   ->  Hash  (cost=16.62..16.62 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..16.62 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=30)
                                                               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
                     ->  Hash  (cost=3246.00..3246.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=8)
(28 rows)

query 8 run 1
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1583218.17..1583218.18 rows=1 width=46)
   ->  Sort  (cost=1583218.17..1583220.03 rows=744 width=46)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1583188.41..1583214.45 rows=744 width=46)
               ->  Hash Join  (cost=520746.32..1583003.10 rows=24709 width=46)
                     Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=520744.76..1582538.24 rows=24709 width=24)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=516248.76..1577548.06 rows=24709 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.00..1051243.60 rows=399897 width=24)
                                       ->  Index Scan using q2_idx_1 on part  (cost=0.00..66016.50 rows=13333 width=4)
                                             Index Cond: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..73.47 rows=34 width=28)
                                             Index Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  Hash  (cost=501042.66..501042.66 rows=926808 width=8)
                                       ->  Hash Join  (cost=136610.33..501042.66 rows=926808 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=72915.98..410702.58 rows=4634040 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..71757.47 rows=4634040 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59944.51..59944.51 rows=299987 width=4)
                                                   ->  Hash Join  (cost=2.53..59944.51 rows=299987 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..51317.35 rows=1499935 width=8)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3246.00..3246.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(37 rows)

query 9 run 1
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3691436.51..3691436.51 rows=1 width=61)
   ->  Sort  (cost=3691436.51..3691436.92 rows=164 width=61)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=3691431.18..3691435.69 rows=164 width=61)
               ->  Hash Join  (cost=3031524.49..3691429.95 rows=164 width=61)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=3031522.92..3691425.31 rows=164 width=39)
                           ->  Nested Loop  (cost=3031522.92..3690594.75 rows=164 width=39)
                                 ->  Merge Join  (cost=3031522.92..3689898.58 rows=164 width=43)
                                       Merge Cond: (partsupp.ps_partkey = lineitem.l_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..342076.69 rows=7999800 width=16)
                                       ->  Materialize  (cost=3031521.66..3049699.24 rows=3635516 width=39)
                                             ->  Sort  (cost=3031521.66..3040610.45 rows=3635516 width=39)
                                                   Sort Key: lineitem.l_partkey
                                                   ->  Hash Join  (cost=68074.10..2564356.91 rows=3635516 width=39)
                                                         Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                         ->  Seq Scan on lineitem  (cost=0.00..1785085.60 rows=59985960 width=35)
                                                         ->  Hash  (cost=66558.95..66558.95 rows=121212 width=4)
                                                               ->  Seq Scan on part  (cost=0.00..66558.95 rows=121212 width=4)
                                                                     Filter: ((p_name)::text ~~ '%navy%'::text)
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.00..4.23 rows=1 width=8)
                                       Index Cond: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using q21_idx_3 on orders  (cost=0.00..5.05 rows=1 width=8)
                                 Index Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 10 run 1
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2697816.93..2697816.98 rows=20 width=188)
   ->  Sort  (cost=2697816.93..2699179.10 rows=544869 width=188)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  GroupAggregate  (cost=2661523.40..2683318.16 rows=544869 width=188)
               ->  Sort  (cost=2661523.40..2662885.58 rows=544869 width=188)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=394627.73..2573692.01 rows=544869 width=188)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=394626.16..2566198.50 rows=544869 width=166)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=292333.63..2416439.84 rows=544869 width=20)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..1935050.50 rows=14688562 width=20)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=285378.48..285378.48 rows=556412 width=8)
                                             ->  Bitmap Heap Scan on orders  (cost=8756.30..285378.48 rows=556412 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8617.19 rows=556412 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Hash  (cost=51317.35..51317.35 rows=1499935 width=150)
                                       ->  Seq Scan on customer  (cost=0.00..51317.35 rows=1499935 width=150)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=691209.49..691209.49 rows=1 width=16)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=324575.12..324575.14 rows=1 width=12)
           ->  Hash Join  (cost=2374.72..323775.14 rows=319992 width=12)
                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..258202.00 rows=7999800 width=16)
                 ->  Hash  (cost=2324.72..2324.72 rows=4000 width=4)
                       ->  Nested Loop  (cost=55.26..2324.72 rows=4000 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier  (cost=55.26..2273.41 rows=4000 width=8)
                                   Recheck Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.26 rows=4000 width=0)
                                         Index Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
   ->  Sort  (cost=366634.35..367434.33 rows=319992 width=16)
         Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
         ->  GroupAggregate  (cost=353034.69..365034.39 rows=319992 width=16)
               Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $0)
               ->  Sort  (cost=353034.69..353834.67 rows=319992 width=16)
                     Sort Key: public.partsupp.ps_partkey
                     ->  Hash Join  (cost=2374.72..323775.14 rows=319992 width=16)
                           Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..258202.00 rows=7999800 width=20)
                           ->  Hash  (cost=2324.72..2324.72 rows=4000 width=4)
                                 ->  Nested Loop  (cost=55.26..2324.72 rows=4000 width=4)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Bitmap Heap Scan on supplier  (cost=55.26..2273.41 rows=4000 width=8)
                                             Recheck Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.26 rows=4000 width=0)
                                                   Index Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
(31 rows)

query 12 run 1
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1337795.79..1337795.79 rows=1 width=27)
   ->  Sort  (cost=1337795.79..1337795.79 rows=1 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=1337795.75..1337795.78 rows=1 width=27)
               ->  Merge Join  (cost=718819.19..1335803.18 rows=265676 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..575536.17 rows=14999740 width=20)
                     ->  Sort  (cost=718819.18..719483.37 rows=265676 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Bitmap Heap Scan on lineitem  (cost=318360.16..694882.69 rows=265676 width=15)
                                 Recheck Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate))
                                 ->  Bitmap Index Scan on q12_idx_1  (cost=0.00..318293.74 rows=265676 width=0)
                                       Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(13 rows)

query 13 run 1
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2839414.67..2839414.67 rows=1 width=8)
   ->  Sort  (cost=2839414.67..2839415.17 rows=200 width=8)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         ->  HashAggregate  (cost=2839411.17..2839413.67 rows=200 width=8)
               ->  GroupAggregate  (cost=2389908.52..2816912.15 rows=1499935 width=8)
                     ->  Merge Left Join  (cost=2389908.52..2723171.75 rows=14998241 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Scan using customer_pkey on customer  (cost=0.00..67050.36 rows=1499935 width=4)
                           ->  Materialize  (cost=2389902.34..2464893.55 rows=14998241 width=8)
                                 ->  Sort  (cost=2389902.34..2427397.94 rows=14998241 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..455772.75 rows=14998241 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 14 run 1
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=903559.48..903559.51 rows=1 width=37)
   ->  Aggregate  (cost=903559.48..903559.51 rows=1 width=37)
         ->  Hash Join  (cost=114881.44..899891.94 rows=733508 width=37)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=14650.53..760889.10 rows=733508 width=20)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14467.16 rows=733508 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=61558.96..61558.96 rows=1999996 width=25)
                     ->  Seq Scan on part  (cost=0.00..61558.96 rows=1999996 width=25)
(10 rows)

query 15 run 1
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2539655.81..2539657.03 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1266836.85..1266836.86 rows=1 width=32)
           ->  HashAggregate  (cost=1266723.75..1266789.72 rows=3770 width=20)
                 ->  Bitmap Heap Scan on lineitem  (cost=45762.57..1255263.99 rows=2291951 width=20)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..45189.59 rows=2291951 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1272818.95..1277424.75 rows=3770 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..4299.26 rows=100000 width=71)
         ->  Sort  (cost=1272818.95..1272828.37 rows=3770 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1272453.63..1272595.00 rows=3770 width=36)
                     ->  HashAggregate  (cost=1272453.63..1272557.30 rows=3770 width=20)
                           Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=45762.57..1255263.99 rows=2291951 width=20)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..45189.59 rows=2291951 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(20 rows)

DROP VIEW
query 16 run 1
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=509602.48..509602.48 rows=1 width=40)
   ->  Sort  (cost=509602.48..509668.41 rows=26370 width=40)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=502109.42..509470.63 rows=26370 width=40)
               ->  Sort  (cost=502109.42..503515.74 rows=562527 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98570.80..437396.20 rows=562527 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Seq Scan on partsupp  (cost=3496.03..281697.53 rows=3999900 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3496.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=91558.90..91558.90 rows=281270 width=40)
                                 ->  Seq Scan on part  (cost=0.00..91558.90 rows=281270 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(16 rows)

query 17 run 1
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10884646.41..10884646.42 rows=1 width=10)
   ->  Aggregate  (cost=10884646.41..10884646.42 rows=1 width=10)
         ->  Nested Loop  (cost=10338619.20..10884605.75 rows=16263 width=10)
               ->  Merge Join  (cost=10338619.20..10837268.74 rows=1627 width=40)
                     Merge Cond: (public.lineitem.l_partkey = part.p_partkey)
                     ->  GroupAggregate  (cost=10266960.72..10743435.09 rows=1771978 width=11)
                           ->  Sort  (cost=10266960.72..10416925.62 rows=59985960 width=11)
                                 Sort Key: public.lineitem.l_partkey
                                 ->  Seq Scan on lineitem  (cost=0.00..1785085.60 rows=59985960 width=11)
                     ->  Sort  (cost=71658.47..71663.06 rows=1836 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..71558.94 rows=1836 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using q17_idx_1 on lineitem  (cost=0.00..28.93 rows=11 width=21)
                     Index Cond: ((public.lineitem.l_partkey = part.p_partkey) AND (public.lineitem.l_quantity < ((0.2 * avg(public.lineitem.l_quantity)))))
(15 rows)

query 18 run 1
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12290633.02..12290636.02 rows=100 width=48)
   ->  GroupAggregate  (cost=12290633.02..13190422.42 rows=29992980 width=48)
         ->  Sort  (cost=12290633.02..12365615.47 rows=29992980 width=48)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               ->  Hash Join  (cost=78876.74..7906759.10 rows=29992980 width=48)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=21.20..6809192.97 rows=29992980 width=29)
                           Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=0.00..3926804.86 rows=7499870 width=26)
                                 Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.00..575536.17 rows=14999740 width=22)
                                 ->  Materialize  (cost=0.00..3126313.21 rows=14996490 width=4)
                                       ->  GroupAggregate  (cost=0.00..2938857.09 rows=14996490 width=11)
                                             Filter: (sum(public.lineitem.l_quantity) > 313::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2413979.94 rows=59985960 width=11)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2413979.94 rows=59985960 width=11)
                     ->  Hash  (cost=51317.35..51317.35 rows=1499935 width=23)
                           ->  Seq Scan on customer  (cost=0.00..51317.35 rows=1499935 width=23)
(18 rows)

query 19 run 1
SET
SET


 Limit  (cost=3168076.51..3168076.53 rows=1 width=16)
   ->  Aggregate  (cost=3168076.51..3168076.53 rows=1 width=16)
         ->  Hash Join  (cost=115593.63..3168073.83 rows=1071 width=16)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               Join Filter: (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..2984804.80 rows=1144677 width=27)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))))
               ->  Hash  (cost=96558.89..96558.89 rows=984379 width=30)
                     ->  Seq Scan on part  (cost=0.00..96558.89 rows=984379 width=30)
                           Filter: ((p_size >= 1) AND (((p_size <= 5) AND (p_size >= 1)) OR ((p_size <= 10) AND (p_size >= 1)) OR ((p_size <= 15) AND (p_size >= 1))))
(10 rows)

query 20 run 1
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3016119.99..3016120.00 rows=1 width=51)
   ->  Sort  (cost=3016119.99..3016120.00 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2889494.33..3016119.98 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=55.26..2324.72 rows=4000 width=55)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=55.26..2273.41 rows=4000 width=59)
                           Recheck Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.26 rows=4000 width=0)
                                 Index Cond: (supplier.s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2889439.08..3012115.33 rows=28 width=8)
                     ->  Merge Join  (cost=2889439.08..3012115.19 rows=28 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2687489.13..2793570.05 rows=922443 width=15)
                                 ->  Sort  (cost=2687489.13..2710550.20 rows=9224428 width=15)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=184162.46..1507754.88 rows=9224428 width=15)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..181856.36 rows=9224428 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=201949.95..202869.42 rows=367790 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=66609.46..167950.48 rows=367790 width=16)
                                       ->  HashAggregate  (cost=66609.46..66811.48 rows=20202 width=4)
                                             ->  Seq Scan on part  (cost=0.00..66558.95 rows=20202 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..4.78 rows=18 width=12)
                                             Index Cond: (partsupp.ps_partkey = part.p_partkey)
(31 rows)

query 21 run 1
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4941850.92..4941850.92 rows=1 width=26)
   ->  Sort  (cost=4941850.92..4941850.92 rows=1 width=26)
         Sort Key: (count(*)), supplier.s_name
         ->  HashAggregate  (cost=4941850.89..4941850.91 rows=1 width=26)
               ->  Nested Loop Anti Join  (cost=3174466.54..4941850.89 rows=1 width=26)
                     Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                     ->  Nested Loop  (cost=3174466.54..4941838.16 rows=1 width=34)
                           ->  Hash Semi Join  (cost=3174466.54..4941833.06 rows=1 width=38)
                                 Hash Cond: (l1.l_orderkey = l2.l_orderkey)
                                 Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                 ->  Hash Join  (cost=405235.44..1923383.52 rows=799813 width=34)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Bitmap Heap Scan on lineitem l1  (cost=402860.72..1838028.22 rows=19995320 width=8)
                                             Recheck Cond: (l_receiptdate > l_commitdate)
                                             ->  Bitmap Index Scan on q21_idx_2  (cost=0.00..397861.89 rows=19995320 width=0)
                                       ->  Hash  (cost=2324.72..2324.72 rows=4000 width=30)
                                             ->  Nested Loop  (cost=55.26..2324.72 rows=4000 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                         Filter: (n_name = 'PERU'::bpchar)
                                                   ->  Bitmap Heap Scan on supplier  (cost=55.26..2273.41 rows=4000 width=34)
                                                         Recheck Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                         ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.26 rows=4000 width=0)
                                                               Index Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Hash  (cost=1785085.60..1785085.60 rows=59985960 width=8)
                                       ->  Seq Scan on lineitem l2  (cost=0.00..1785085.60 rows=59985960 width=8)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..5.09 rows=1 width=4)
                                 Index Cond: (orders.o_orderkey = l1.l_orderkey)
                                 Filter: (orders.o_orderstatus = 'F'::bpchar)
                     ->  Index Scan using q21_idx_2 on lineitem l3  (cost=0.00..6.36 rows=1 width=8)
                           Index Cond: (l3.l_orderkey = l1.l_orderkey)
(30 rows)

query 22 run 1
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=205929.72..205929.72 rows=1 width=24)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75809.11..75809.12 rows=1 width=8)
           ->  Seq Scan on customer  (cost=0.00..75691.29 rows=47126 width=8)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Sort  (cost=130120.60..130138.90 rows=7322 width=24)
         Sort Key: ("substring"((public.customer.c_phone)::text, 1, 2))
         ->  HashAggregate  (cost=129937.55..130083.99 rows=7322 width=24)
               ->  Nested Loop Anti Join  (cost=0.00..129882.63 rows=7322 width=24)
                     ->  Seq Scan on customer  (cost=0.00..75691.29 rows=17239 width=28)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..35.70 rows=17 width=4)
                           Index Cond: (orders.o_custkey = public.customer.c_custkey)
(13 rows)

