query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=4246177.72..4246177.72 rows=1 width=236)
   ->  Sort  (cost=4246177.72..4246177.73 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=4246177.52..4246177.69 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874950.00 rows=59280688 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=436623.37..436623.38 rows=1 width=193)
   ->  Sort  (cost=436623.37..436623.38 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.66..436623.36 rows=1 width=193)
               Join Filter: (nation.n_nationkey = supplier.s_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.66..436620.66 rows=1 width=171)
                     ->  Nested Loop  (cost=50.66..436620.66 rows=1 width=171)
                           ->  Nested Loop  (cost=50.37..436616.65 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54331.57 rows=7348 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.02 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.01 rows=1 width=145)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(35 rows)

query 3 run 1
SET
SET
SET
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3449001.21..3449001.23 rows=10 width=44)
   ->  Sort  (cost=3449001.21..3456849.45 rows=3139297 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3286983.22..3381162.13 rows=3139297 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=3286983.22..3294831.46 rows=3139297 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=551555.04..2902234.02 rows=3139297 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1874950.00 rows=32349602 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=526249.48..526249.48 rows=1455725 width=12)
                                 ->  Hash Join  (cost=58465.79..526249.48 rows=1455725 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..448778.62 rows=7240005 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54695.99..54695.99 rows=301584 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54695.99 rows=301584 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(19 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=803692.43..803692.44 rows=1 width=24)
   ->  Sort  (cost=803692.43..803692.45 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=803692.36..803692.41 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=331404.79..800915.65 rows=555341 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=331352.95..332741.74 rows=555515 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=8746.46..278347.19 rows=555515 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8607.59 rows=555515 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q21_idx_2 on lineitem  (cost=0.56..409405.36 rows=19994853 width=4)
(14 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1651880.86..1651880.86 rows=1 width=58)
   ->  Sort  (cost=1651880.86..1651880.92 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1650960.42..1651880.73 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1650960.42..1651144.42 rows=73600 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=104260.56..1645010.81 rows=73600 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=99539.56..1630630.16 rows=1839932 width=50)
                                 ->  Hash Join  (cost=99539.00..408545.22 rows=460127 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=36215.96..331993.52 rows=2300637 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..35640.80 rows=2300637 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59573.24..59573.24 rows=299984 width=38)
                                             ->  Hash Join  (cost=2.51..59573.24 rows=299984 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50946.19 rows=1499919 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2059216.80..2059216.81 rows=1 width=32)
   ->  Aggregate  (cost=2059216.80..2059216.81 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=234005.47..2053216.51 rows=1200058 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..233705.46 rows=1200058 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2717797.53..2717797.66 rows=1 width=92)
   ->  GroupAggregate  (cost=2717797.53..2719033.07 rows=10032 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=2717797.53..2717948.96 rows=60570 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=563416.94..2712986.36 rows=60570 width=72)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111319.33 rows=1455447 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024911.40 rows=18193083 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536582.69..536582.69 rows=1200068 width=30)
                           ->  Hash Join  (cost=57052.27..536582.69 rows=1200068 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411276.50 rows=15000850 width=8)
                                 ->  Hash  (cost=55552.34..55552.34 rows=119994 width=30)
                                       ->  Hash Join  (cost=1.40..55552.34 rows=119994 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.19 rows=1499919 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 8 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=593849.05..593849.29 rows=1 width=40)
   ->  GroupAggregate  (cost=593849.05..594435.72 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=593849.05..593908.22 rows=23668 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Hash Join  (cost=243011.90..592129.49 rows=23668 width=46)
                     Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=243010.34..591936.93 rows=23668 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=238539.34..587403.80 rows=23668 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=175216.31..523400.30 rows=118342 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=71977.58..401831.64 rows=4572404 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..70834.48 rows=4572404 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=98385.60..98385.60 rows=388250 width=20)
                                             ->  Nested Loop  (cost=0.99..98385.60 rows=388250 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53965.14 rows=13273 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.06 rows=29 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59573.24..59573.24 rows=299984 width=4)
                                       ->  Hash Join  (cost=2.51..59573.24 rows=299984 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.19 rows=1499919 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(38 rows)

query 9 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1781956.34..1781956.34 rows=1 width=66)
   ->  Sort  (cost=1781956.34..1782106.72 rows=60150 width=66)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
         ->  HashAggregate  (cost=1780602.97..1781655.59 rows=60150 width=66)
               Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Hash Join  (cost=661885.72..1718555.14 rows=3545590 width=57)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=661884.16..1689940.66 rows=3545590 width=31)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Hash Join  (cost=4499.03..916174.36 rows=3545590 width=31)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Merge Join  (cost=28.03..902395.80 rows=3545590 width=35)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       ->  Nested Loop  (cost=0.99..469889.74 rows=3545590 width=33)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.39 rows=121212 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.06 rows=29 width=29)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Materialize  (cost=0.43..201550.59 rows=8001495 width=14)
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181546.86 rows=8001495 width=14)
                                 ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                           ->  Hash  (cost=411276.50..411276.50 rows=15000850 width=8)
                                 ->  Seq Scan on orders  (cost=0.00..411276.50 rows=15000850 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 10 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1778783.86..1778783.91 rows=20 width=201)
   ->  Sort  (cost=1778783.86..1780195.79 rows=564773 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1748224.19..1763755.45 rows=564773 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Sort  (cost=1748224.19..1749636.13 rows=564773 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     ->  Hash Join  (cost=387702.95..1658417.73 rows=564773 width=181)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=387701.39..1656682.31 rows=564773 width=159)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=285781.21..1515538.60 rows=564773 width=16)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1190524.29 rows=14946153 width=16)
                                             Index Cond: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=278695.14..278695.14 rows=566840 width=8)
                                             ->  Bitmap Heap Scan on orders  (cost=8924.55..278695.14 rows=566840 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8782.84 rows=566840 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Hash  (cost=50946.19..50946.19 rows=1499919 width=147)
                                       ->  Seq Scan on customer  (cost=0.00..50946.19 rows=1499919 width=147)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 11 run 1
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=625665.50..625665.50 rows=1 width=36)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=293132.00..293132.01 rows=1 width=32)
           ->  Hash Join  (cost=2357.44..290731.54 rows=320060 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255236.95 rows=8001495 width=14)
                 ->  Hash  (cost=2307.44..2307.44 rows=4000 width=4)
                       ->  Nested Loop  (cost=55.42..2307.44 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=55.42..2266.13 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.42 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=332533.49..332800.21 rows=106687 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=319997.80..332000.05 rows=106687 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $1)
               ->  Sort  (cost=319997.80..320797.95 rows=320060 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Hash Join  (cost=2357.44..290731.54 rows=320060 width=14)
                           Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..255236.95 rows=8001495 width=18)
                           ->  Hash  (cost=2307.44..2307.44 rows=4000 width=4)
                                 ->  Nested Loop  (cost=55.42..2307.44 rows=4000 width=4)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Bitmap Heap Scan on supplier  (cost=55.42..2266.13 rows=4000 width=8)
                                             Recheck Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.42 rows=4000 width=0)
                                                   Index Cond: (s_nationkey = nation.n_nationkey)
(32 rows)

query 12 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=679791.19..679791.19 rows=1 width=27)
   ->  Sort  (cost=679791.19..679791.21 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=679791.08..679791.15 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=148096.95..674756.65 rows=287682 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411276.50 rows=15000850 width=20)
                     ->  Hash  (cost=144500.93..144500.93 rows=287682 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..144500.93 rows=287682 width=15)
                                 Index Cond: ((l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 Filter: (l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[]))
(12 rows)

query 13 run 1
SET
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2727700.19..2727700.19 rows=1 width=16)
   ->  Sort  (cost=2727700.19..2727700.69 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=2727697.19..2727699.19 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=2578829.27..2705198.40 rows=1499919 width=12)
                     Group Key: customer.c_custkey
                     ->  Sort  (cost=2578829.27..2615952.58 rows=14849326 width=8)
                           Sort Key: customer.c_custkey
                           ->  Hash Right Join  (cost=55340.20..664970.42 rows=14849326 width=8)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..448778.62 rows=14849326 width=8)
                                       Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                                 ->  Hash  (cost=30731.21..30731.21 rows=1499919 width=4)
                                       ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30731.21 rows=1499919 width=4)
(15 rows)

query 14 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1298334.83..1298334.85 rows=1 width=32)
   ->  Aggregate  (cost=1298334.83..1298334.85 rows=1 width=32)
         ->  Merge Join  (cost=9.59..1284592.85 rows=785256 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1200975.70 rows=805153 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68832.40 rows=1999998 width=25)
(7 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4011294.92..4011392.07 rows=1 width=104)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1886320.37..1886320.38 rows=1 width=32)
           ->  HashAggregate  (cost=1883844.29..1885082.33 rows=99043 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=40223.35..1861451.33 rows=2239296 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39663.53 rows=2239296 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=2124974.54..2173065.82 rows=495 width=104)
         ->  GroupAggregate  (cost=2124974.25..2171493.42 rows=495 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Sort  (cost=2124974.25..2130572.49 rows=2239296 width=16)
                     Sort Key: lineitem.l_suppkey
                     ->  Bitmap Heap Scan on lineitem  (cost=40223.35..1861451.33 rows=2239296 width=16)
                           Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39663.53 rows=2239296 width=0)
                                 Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.17 rows=1 width=72)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(21 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=369776.11..369776.11 rows=1 width=44)
   ->  Sort  (cost=369776.11..370158.41 rows=152921 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=360152.62..369011.51 rows=152921 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=360152.62..361618.56 rows=586374 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98116.56..292518.71 rows=586374 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..187371.62 rows=4000748 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90980.95..90980.95 rows=293132 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90980.95 rows=293132 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1795819.27..1795819.28 rows=1 width=32)
   ->  Aggregate  (cost=1795819.27..1795819.28 rows=1 width=32)
         ->  Nested Loop  (cost=71095.86..1795767.63 rows=20655 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71095.30..1789289.54 rows=2118 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71094.73..71099.90 rows=2066 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70980.97 rows=2066 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1692529.87 rows=2050674 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361846.96 rows=59984560 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.93 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 18 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8818642.26..8818642.51 rows=100 width=71)
   ->  Sort  (cost=8818642.26..8868613.69 rows=19988574 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=7604950.42..8054693.33 rows=19988574 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=7604950.42..7654921.85 rows=19988574 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=78654.50..4741866.25 rows=19988574 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=170.32..4328840.92 rows=19988574 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Join  (cost=1.00..2604959.22 rows=4998713 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..568544.19 rows=15000850 width=20)
                                       ->  GroupAggregate  (cost=0.56..1886441.86 rows=4998713 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361576.96 rows=59984560 width=9)
                                 ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361576.96 rows=59984560 width=9)
                           ->  Hash  (cost=50946.19..50946.19 rows=1499919 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..50946.19 rows=1499919 width=23)
(21 rows)

query 19 run 1
SET
SET
SET

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=142045.34..142045.35 rows=1 width=32)
   ->  Aggregate  (cost=142045.34..142045.35 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..142037.11 rows=1096 width=12)
               ->  Seq Scan on part  (cost=0.00..125980.92 rows=4771 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..3.36 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3579678.21..3579678.22 rows=1 width=52)
   ->  Sort  (cost=3579678.21..3579678.22 rows=1 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=3207417.57..3579678.20 rows=1 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=56)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=60)
               ->  Materialize  (cost=3207417.57..3575025.90 rows=3 width=8)
                     ->  Merge Join  (cost=3207417.57..3575025.88 rows=3 width=8)
                           Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                           Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity)))))
                           ->  GroupAggregate  (cost=3207416.71..3372969.34 rows=4873549 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=3207416.71..3230529.06 rows=9244940 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Seq Scan on lineitem  (cost=0.00..2024911.40 rows=9244940 width=13)
                                             Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Materialize  (cost=0.86..121131.80 rows=80823 width=16)
                                 ->  Nested Loop  (cost=0.86..120929.75 rows=80823 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.39 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(26 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1065507.31..1065507.31 rows=1 width=34)
   ->  Sort  (cost=1065507.31..1065507.31 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1065507.28..1065507.30 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1065507.28..1065507.28 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=588782.38..1065507.27 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=588781.81..1065504.62 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=588781.38..1065502.18 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=588780.81..590780.30 rows=799794 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2358.00..494741.44 rows=799794 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..409405.36 rows=19994853 width=8)
                                                   ->  Hash  (cost=2307.44..2307.44 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=55.42..2307.44 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=55.42..2266.13 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..54.42 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..409405.36 rows=19994853 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 22 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162349.24..162349.26 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75438.96..75438.97 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75319.87 rows=47634 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86910.27..87122.62 rows=7722 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=86910.27..86929.57 rows=7722 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..86411.63 rows=7722 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75319.87 rows=17499 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.66 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

