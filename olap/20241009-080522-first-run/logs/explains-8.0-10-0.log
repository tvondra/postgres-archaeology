query 1 run 1
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3828621.14..3828621.14 rows=1 width=51)
   ->  Sort  (cost=3828621.14..3828621.15 rows=6 width=51)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3828620.85..3828621.06 rows=6 width=51)
               ->  Seq Scan on lineitem  (cost=0.00..2329116.65 rows=59980168 width=51)
                     Filter: (l_shipdate <= '1998-12-01 00:00:00'::timestamp without time zone)
(6 rows)

query 1 run 2
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3828621.14..3828621.14 rows=1 width=51)
   ->  Sort  (cost=3828621.14..3828621.15 rows=6 width=51)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3828620.85..3828621.06 rows=6 width=51)
               ->  Seq Scan on lineitem  (cost=0.00..2329116.65 rows=59980168 width=51)
                     Filter: (l_shipdate <= '1998-12-01 00:00:00'::timestamp without time zone)
(6 rows)

query 1 run 3
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3828621.14..3828621.14 rows=1 width=51)
   ->  Sort  (cost=3828621.14..3828621.15 rows=6 width=51)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3828620.85..3828621.06 rows=6 width=51)
               ->  Seq Scan on lineitem  (cost=0.00..2329116.65 rows=59980168 width=51)
                     Filter: (l_shipdate <= '1998-12-01 00:00:00'::timestamp without time zone)
(6 rows)

query 2 run 1
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=278243.78..278243.78 rows=1 width=216)
   ->  Sort  (cost=278243.78..278243.78 rows=1 width=216)
         Sort Key: supplier.s_acctbal, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=0.00..278243.77 rows=1 width=216)
               Join Filter: ("outer".n_regionkey = "inner".r_regionkey)
               ->  Nested Loop  (cost=0.00..278242.69 rows=1 width=220)
                     Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Nested Loop  (cost=0.00..278241.13 rows=1 width=191)
                           ->  Nested Loop  (cost=0.00..278238.10 rows=1 width=37)
                                 Join Filter: ("inner".ps_supplycost = (subplan))
                                 ->  Seq Scan on part  (cost=0.00..81082.00 rows=3 width=33)
                                       Filter: ((p_size = 16) AND ((p_type)::text ~~ '%NICKEL'::text))
                                 ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..7.96 rows=145 width=19)
                                       Index Cond: ("outer".p_partkey = partsupp.ps_partkey)
                                 SubPlan
                                   ->  Aggregate  (cost=453.16..453.16 rows=1 width=11)
                                         ->  Nested Loop  (cost=1.31..453.09 rows=29 width=11)
                                               Join Filter: ("inner".n_regionkey = "outer".r_regionkey)
                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                               ->  Hash Join  (cost=1.31..450.21 rows=145 width=15)
                                                     Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                                                     ->  Nested Loop  (cost=0.00..446.73 rows=145 width=15)
                                                           ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..7.96 rows=145 width=15)
                                                                 Index Cond: ($0 = ps_partkey)
                                                           ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=8)
                                                                 Index Cond: (supplier.s_suppkey = "outer".ps_suppkey)
                                                     ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=162)
                                 Index Cond: (supplier.s_suppkey = "outer".ps_suppkey)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=37)
               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                     Filter: (r_name = 'AMERICA'::bpchar)
(34 rows)

query 2 run 2
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=278243.78..278243.78 rows=1 width=216)
   ->  Sort  (cost=278243.78..278243.78 rows=1 width=216)
         Sort Key: supplier.s_acctbal, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=0.00..278243.77 rows=1 width=216)
               Join Filter: ("outer".n_regionkey = "inner".r_regionkey)
               ->  Nested Loop  (cost=0.00..278242.69 rows=1 width=220)
                     Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Nested Loop  (cost=0.00..278241.13 rows=1 width=191)
                           ->  Nested Loop  (cost=0.00..278238.10 rows=1 width=37)
                                 Join Filter: ("inner".ps_supplycost = (subplan))
                                 ->  Seq Scan on part  (cost=0.00..81082.00 rows=3 width=33)
                                       Filter: ((p_size = 16) AND ((p_type)::text ~~ '%NICKEL'::text))
                                 ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..7.96 rows=145 width=19)
                                       Index Cond: ("outer".p_partkey = partsupp.ps_partkey)
                                 SubPlan
                                   ->  Aggregate  (cost=453.16..453.16 rows=1 width=11)
                                         ->  Nested Loop  (cost=1.31..453.09 rows=29 width=11)
                                               Join Filter: ("inner".n_regionkey = "outer".r_regionkey)
                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                               ->  Hash Join  (cost=1.31..450.21 rows=145 width=15)
                                                     Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                                                     ->  Nested Loop  (cost=0.00..446.73 rows=145 width=15)
                                                           ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..7.96 rows=145 width=15)
                                                                 Index Cond: ($0 = ps_partkey)
                                                           ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=8)
                                                                 Index Cond: (supplier.s_suppkey = "outer".ps_suppkey)
                                                     ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=162)
                                 Index Cond: (supplier.s_suppkey = "outer".ps_suppkey)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=37)
               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                     Filter: (r_name = 'AMERICA'::bpchar)
(34 rows)

query 2 run 3
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=278243.78..278243.78 rows=1 width=216)
   ->  Sort  (cost=278243.78..278243.78 rows=1 width=216)
         Sort Key: supplier.s_acctbal, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=0.00..278243.77 rows=1 width=216)
               Join Filter: ("outer".n_regionkey = "inner".r_regionkey)
               ->  Nested Loop  (cost=0.00..278242.69 rows=1 width=220)
                     Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Nested Loop  (cost=0.00..278241.13 rows=1 width=191)
                           ->  Nested Loop  (cost=0.00..278238.10 rows=1 width=37)
                                 Join Filter: ("inner".ps_supplycost = (subplan))
                                 ->  Seq Scan on part  (cost=0.00..81082.00 rows=3 width=33)
                                       Filter: ((p_size = 16) AND ((p_type)::text ~~ '%NICKEL'::text))
                                 ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..7.96 rows=145 width=19)
                                       Index Cond: ("outer".p_partkey = partsupp.ps_partkey)
                                 SubPlan
                                   ->  Aggregate  (cost=453.16..453.16 rows=1 width=11)
                                         ->  Nested Loop  (cost=1.31..453.09 rows=29 width=11)
                                               Join Filter: ("inner".n_regionkey = "outer".r_regionkey)
                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                               ->  Hash Join  (cost=1.31..450.21 rows=145 width=15)
                                                     Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                                                     ->  Nested Loop  (cost=0.00..446.73 rows=145 width=15)
                                                           ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..7.96 rows=145 width=15)
                                                                 Index Cond: ($0 = ps_partkey)
                                                           ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=8)
                                                                 Index Cond: (supplier.s_suppkey = "outer".ps_suppkey)
                                                     ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=162)
                                 Index Cond: (supplier.s_suppkey = "outer".ps_suppkey)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=37)
               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                     Filter: (r_name = 'AMERICA'::bpchar)
(34 rows)

query 3 run 1
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4552229.62..4552229.65 rows=10 width=34)
   ->  Sort  (cost=4552229.62..4560408.39 rows=3271507 width=34)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))), orders.o_orderdate
         ->  GroupAggregate  (cost=4061162.50..4126592.64 rows=3271507 width=34)
               ->  Sort  (cost=4061162.50..4069341.27 rows=3271507 width=34)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Merge Join  (cost=957659.27..3635525.51 rows=3271507 width=34)
                           Merge Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2553582.70 rows=32194195 width=26)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Sort  (cost=957659.27..961469.94 rows=1524269 width=12)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=63238.50..779039.24 rows=1524269 width=12)
                                       Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..506297.00 rows=7212603 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=60898.00..60898.00 rows=317001 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..60898.00 rows=317001 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(19 rows)

query 3 run 2
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4552229.62..4552229.65 rows=10 width=34)
   ->  Sort  (cost=4552229.62..4560408.39 rows=3271507 width=34)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))), orders.o_orderdate
         ->  GroupAggregate  (cost=4061162.50..4126592.64 rows=3271507 width=34)
               ->  Sort  (cost=4061162.50..4069341.27 rows=3271507 width=34)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Merge Join  (cost=957659.27..3635525.51 rows=3271507 width=34)
                           Merge Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2553582.70 rows=32194195 width=26)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Sort  (cost=957659.27..961469.94 rows=1524269 width=12)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=63238.50..779039.24 rows=1524269 width=12)
                                       Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..506297.00 rows=7212603 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=60898.00..60898.00 rows=317001 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..60898.00 rows=317001 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(19 rows)

query 3 run 3
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4552229.62..4552229.65 rows=10 width=34)
   ->  Sort  (cost=4552229.62..4560408.39 rows=3271507 width=34)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))), orders.o_orderdate
         ->  GroupAggregate  (cost=4061162.50..4126592.64 rows=3271507 width=34)
               ->  Sort  (cost=4061162.50..4069341.27 rows=3271507 width=34)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Merge Join  (cost=957659.27..3635525.51 rows=3271507 width=34)
                           Merge Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2553582.70 rows=32194195 width=26)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Sort  (cost=957659.27..961469.94 rows=1524269 width=12)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=63238.50..779039.24 rows=1524269 width=12)
                                       Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..506297.00 rows=7212603 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=60898.00..60898.00 rows=317001 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..60898.00 rows=317001 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(19 rows)

query 4 run 1
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=876022.53..876022.53 rows=1 width=19)
   ->  Sort  (cost=876022.53..876022.53 rows=1 width=19)
         Sort Key: o_orderpriority
         ->  HashAggregate  (cost=876022.51..876022.52 rows=1 width=19)
               ->  Index Scan using idx_orders_orderdate on orders  (cost=0.00..874699.27 rows=264649 width=19)
                     Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     Filter: (subplan)
                     SubPlan
                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..102.38 rows=737 width=152)
                             Index Cond: (l_orderkey = $0)
                             Filter: (l_commitdate < l_receiptdate)
(11 rows)

query 4 run 2
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=876022.53..876022.53 rows=1 width=19)
   ->  Sort  (cost=876022.53..876022.53 rows=1 width=19)
         Sort Key: o_orderpriority
         ->  HashAggregate  (cost=876022.51..876022.52 rows=1 width=19)
               ->  Index Scan using idx_orders_orderdate on orders  (cost=0.00..874699.27 rows=264649 width=19)
                     Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     Filter: (subplan)
                     SubPlan
                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..102.38 rows=737 width=152)
                             Index Cond: (l_orderkey = $0)
                             Filter: (l_commitdate < l_receiptdate)
(11 rows)

query 4 run 3
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=876022.53..876022.53 rows=1 width=19)
   ->  Sort  (cost=876022.53..876022.53 rows=1 width=19)
         Sort Key: o_orderpriority
         ->  HashAggregate  (cost=876022.51..876022.52 rows=1 width=19)
               ->  Index Scan using idx_orders_orderdate on orders  (cost=0.00..874699.27 rows=264649 width=19)
                     Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     Filter: (subplan)
                     SubPlan
                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..102.38 rows=737 width=152)
                             Index Cond: (l_orderkey = $0)
                             Filter: (l_commitdate < l_receiptdate)
(11 rows)

query 5 run 1
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3327059.12..3327059.12 rows=1 width=51)
   ->  Sort  (cost=3327059.12..3327059.18 rows=25 width=51)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))
         ->  HashAggregate  (cost=3327058.35..3327058.54 rows=25 width=51)
               ->  Hash Join  (cost=713911.80..3326729.86 rows=65697 width=51)
                     Hash Cond: (("outer".c_nationkey = "inner".s_nationkey) AND ("outer".l_suppkey = "inner".s_suppkey))
                     ->  Merge Join  (cost=709828.80..3285594.57 rows=1819766 width=63)
                           Merge Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2403617.57 rows=59986052 width=30)
                           ->  Sort  (cost=709828.80..710966.42 rows=455048 width=41)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=71330.50..656204.16 rows=455048 width=41)
                                       Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..543797.00 rows=2275236 width=8)
                                             Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=67650.50..67650.50 rows=300000 width=41)
                                             ->  Hash Join  (cost=2.50..67650.50 rows=300000 width=41)
                                                   Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..57148.00 rows=1500000 width=8)
                                                   ->  Hash  (cost=2.49..2.49 rows=5 width=33)
                                                         ->  Hash Join  (cost=1.06..2.49 rows=5 width=33)
                                                               Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=37)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=3583.00..3583.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3583.00 rows=100000 width=8)
(28 rows)

query 5 run 2
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3327059.12..3327059.12 rows=1 width=51)
   ->  Sort  (cost=3327059.12..3327059.18 rows=25 width=51)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))
         ->  HashAggregate  (cost=3327058.35..3327058.54 rows=25 width=51)
               ->  Hash Join  (cost=713911.80..3326729.86 rows=65697 width=51)
                     Hash Cond: (("outer".c_nationkey = "inner".s_nationkey) AND ("outer".l_suppkey = "inner".s_suppkey))
                     ->  Merge Join  (cost=709828.80..3285594.57 rows=1819766 width=63)
                           Merge Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2403617.57 rows=59986052 width=30)
                           ->  Sort  (cost=709828.80..710966.42 rows=455048 width=41)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=71330.50..656204.16 rows=455048 width=41)
                                       Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..543797.00 rows=2275236 width=8)
                                             Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=67650.50..67650.50 rows=300000 width=41)
                                             ->  Hash Join  (cost=2.50..67650.50 rows=300000 width=41)
                                                   Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..57148.00 rows=1500000 width=8)
                                                   ->  Hash  (cost=2.49..2.49 rows=5 width=33)
                                                         ->  Hash Join  (cost=1.06..2.49 rows=5 width=33)
                                                               Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=37)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=3583.00..3583.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3583.00 rows=100000 width=8)
(28 rows)

query 5 run 3
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3327059.12..3327059.12 rows=1 width=51)
   ->  Sort  (cost=3327059.12..3327059.18 rows=25 width=51)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))
         ->  HashAggregate  (cost=3327058.35..3327058.54 rows=25 width=51)
               ->  Hash Join  (cost=713911.80..3326729.86 rows=65697 width=51)
                     Hash Cond: (("outer".c_nationkey = "inner".s_nationkey) AND ("outer".l_suppkey = "inner".s_suppkey))
                     ->  Merge Join  (cost=709828.80..3285594.57 rows=1819766 width=63)
                           Merge Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2403617.57 rows=59986052 width=30)
                           ->  Sort  (cost=709828.80..710966.42 rows=455048 width=41)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=71330.50..656204.16 rows=455048 width=41)
                                       Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..543797.00 rows=2275236 width=8)
                                             Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=67650.50..67650.50 rows=300000 width=41)
                                             ->  Hash Join  (cost=2.50..67650.50 rows=300000 width=41)
                                                   Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..57148.00 rows=1500000 width=8)
                                                   ->  Hash  (cost=2.49..2.49 rows=5 width=33)
                                                         ->  Hash Join  (cost=1.06..2.49 rows=5 width=33)
                                                               Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=37)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=3583.00..3583.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3583.00 rows=100000 width=8)
(28 rows)

query 6 run 1
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3.53..3.53 rows=1 width=22)
   ->  Aggregate  (cost=3.53..3.53 rows=1 width=22)
         ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.00..3.52 rows=1 width=22)
               Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1993-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(4 rows)

query 6 run 2
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3.53..3.53 rows=1 width=22)
   ->  Aggregate  (cost=3.53..3.53 rows=1 width=22)
         ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.00..3.52 rows=1 width=22)
               Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1993-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(4 rows)

query 6 run 3
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3.53..3.53 rows=1 width=22)
   ->  Aggregate  (cost=3.53..3.53 rows=1 width=22)
         ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.00..3.52 rows=1 width=22)
               Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1993-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(4 rows)

query 7 run 1
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3504130.40..3504130.43 rows=1 width=84)
   ->  GroupAggregate  (cost=3504130.40..3505396.25 rows=50634 width=84)
         ->  Sort  (cost=3504130.40..3504256.99 rows=50634 width=84)
               Sort Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
               ->  Hash Join  (cost=2833153.90..3500173.91 rows=50634 width=84)
                     Hash Cond: (("outer".o_custkey = "inner".c_custkey) AND ("outer".n_nationkey = "inner".c_nationkey))
                     ->  Merge Join  (cost=2761180.90..3342583.62 rows=1265826 width=92)
                           Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..524928.00 rows=15000000 width=8)
                           ->  Sort  (cost=2761180.90..2764345.46 rows=1265826 width=92)
                                 Sort Key: lineitem.l_orderkey
                                 ->  Hash Join  (cost=4204.28..2583681.50 rows=1265826 width=92)
                                       Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..2479081.78 rows=17545409 width=34)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=4184.28..4184.28 rows=8000 width=66)
                                             ->  Hash Join  (cost=21.28..4184.28 rows=8000 width=66)
                                                   Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..3583.00 rows=100000 width=8)
                                                   ->  Hash  (cost=21.27..21.27 rows=2 width=66)
                                                         ->  Nested Loop  (cost=1.27..21.27 rows=2 width=66)
                                                               Join Filter: ((("outer".n_name = 'PERU'::bpchar) AND ("inner".n_name = 'MOROCCO'::bpchar)) OR (("outer".n_name = 'MOROCCO'::bpchar) AND ("inner".n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=33)
                                                               ->  Materialize  (cost=1.27..1.52 rows=25 width=33)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=33)
                     ->  Hash  (cost=57148.00..57148.00 rows=1500000 width=8)
                           ->  Seq Scan on customer  (cost=0.00..57148.00 rows=1500000 width=8)
(27 rows)

query 7 run 2
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3504130.40..3504130.43 rows=1 width=84)
   ->  GroupAggregate  (cost=3504130.40..3505396.25 rows=50634 width=84)
         ->  Sort  (cost=3504130.40..3504256.99 rows=50634 width=84)
               Sort Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
               ->  Hash Join  (cost=2833153.90..3500173.91 rows=50634 width=84)
                     Hash Cond: (("outer".o_custkey = "inner".c_custkey) AND ("outer".n_nationkey = "inner".c_nationkey))
                     ->  Merge Join  (cost=2761180.90..3342583.62 rows=1265826 width=92)
                           Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..524928.00 rows=15000000 width=8)
                           ->  Sort  (cost=2761180.90..2764345.46 rows=1265826 width=92)
                                 Sort Key: lineitem.l_orderkey
                                 ->  Hash Join  (cost=4204.28..2583681.50 rows=1265826 width=92)
                                       Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..2479081.78 rows=17545409 width=34)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=4184.28..4184.28 rows=8000 width=66)
                                             ->  Hash Join  (cost=21.28..4184.28 rows=8000 width=66)
                                                   Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..3583.00 rows=100000 width=8)
                                                   ->  Hash  (cost=21.27..21.27 rows=2 width=66)
                                                         ->  Nested Loop  (cost=1.27..21.27 rows=2 width=66)
                                                               Join Filter: ((("outer".n_name = 'PERU'::bpchar) AND ("inner".n_name = 'MOROCCO'::bpchar)) OR (("outer".n_name = 'MOROCCO'::bpchar) AND ("inner".n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=33)
                                                               ->  Materialize  (cost=1.27..1.52 rows=25 width=33)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=33)
                     ->  Hash  (cost=57148.00..57148.00 rows=1500000 width=8)
                           ->  Seq Scan on customer  (cost=0.00..57148.00 rows=1500000 width=8)
(27 rows)

query 7 run 3
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3504130.40..3504130.43 rows=1 width=84)
   ->  GroupAggregate  (cost=3504130.40..3505396.25 rows=50634 width=84)
         ->  Sort  (cost=3504130.40..3504256.99 rows=50634 width=84)
               Sort Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
               ->  Hash Join  (cost=2833153.90..3500173.91 rows=50634 width=84)
                     Hash Cond: (("outer".o_custkey = "inner".c_custkey) AND ("outer".n_nationkey = "inner".c_nationkey))
                     ->  Merge Join  (cost=2761180.90..3342583.62 rows=1265826 width=92)
                           Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..524928.00 rows=15000000 width=8)
                           ->  Sort  (cost=2761180.90..2764345.46 rows=1265826 width=92)
                                 Sort Key: lineitem.l_orderkey
                                 ->  Hash Join  (cost=4204.28..2583681.50 rows=1265826 width=92)
                                       Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..2479081.78 rows=17545409 width=34)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=4184.28..4184.28 rows=8000 width=66)
                                             ->  Hash Join  (cost=21.28..4184.28 rows=8000 width=66)
                                                   Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..3583.00 rows=100000 width=8)
                                                   ->  Hash  (cost=21.27..21.27 rows=2 width=66)
                                                         ->  Nested Loop  (cost=1.27..21.27 rows=2 width=66)
                                                               Join Filter: ((("outer".n_name = 'PERU'::bpchar) AND ("inner".n_name = 'MOROCCO'::bpchar)) OR (("outer".n_name = 'MOROCCO'::bpchar) AND ("inner".n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=33)
                                                               ->  Materialize  (cost=1.27..1.52 rows=25 width=33)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=33)
                     ->  Hash  (cost=57148.00..57148.00 rows=1500000 width=8)
                           ->  Seq Scan on customer  (cost=0.00..57148.00 rows=1500000 width=8)
(27 rows)

query 8 run 1
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=984446.47..984446.48 rows=1 width=55)
   ->  Sort  (cost=984446.47..984448.27 rows=720 width=55)
         Sort Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  HashAggregate  (cost=984394.30..984412.30 rows=720 width=55)
               ->  Hash Join  (cost=916485.84..984318.23 rows=10143 width=55)
                     Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Hash Join  (cost=916484.53..984114.06 rows=10143 width=30)
                           Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                           ->  Merge Join  (cost=916482.03..983756.56 rows=50713 width=34)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..62764.00 rows=1500000 width=8)
                                 ->  Sort  (cost=916482.03..916608.81 rows=50713 width=34)
                                       Sort Key: orders.o_custkey
                                       ->  Nested Loop  (cost=3833.00..912518.79 rows=50713 width=34)
                                             ->  Hash Join  (cost=3833.00..405326.41 rows=167335 width=30)
                                                   Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                                   ->  Nested Loop  (cost=0.00..397966.01 rows=185404 width=30)
                                                         ->  Seq Scan on part  (cost=0.00..76082.00 rows=12934 width=4)
                                                               Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..24.70 rows=15 width=34)
                                                               Index Cond: ("outer".p_partkey = lineitem.l_partkey)
                                                   ->  Hash  (cost=3583.00..3583.00 rows=100000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..3583.00 rows=100000 width=8)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.00..3.02 rows=1 width=12)
                                                   Index Cond: ("outer".l_orderkey = orders.o_orderkey)
                                                   Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                           ->  Hash  (cost=2.49..2.49 rows=5 width=4)
                                 ->  Hash Join  (cost=1.06..2.49 rows=5 width=4)
                                       Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                       ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                       ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=33)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=33)
(35 rows)

query 8 run 2
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=984446.47..984446.48 rows=1 width=55)
   ->  Sort  (cost=984446.47..984448.27 rows=720 width=55)
         Sort Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  HashAggregate  (cost=984394.30..984412.30 rows=720 width=55)
               ->  Hash Join  (cost=916485.84..984318.23 rows=10143 width=55)
                     Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Hash Join  (cost=916484.53..984114.06 rows=10143 width=30)
                           Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                           ->  Merge Join  (cost=916482.03..983756.56 rows=50713 width=34)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..62764.00 rows=1500000 width=8)
                                 ->  Sort  (cost=916482.03..916608.81 rows=50713 width=34)
                                       Sort Key: orders.o_custkey
                                       ->  Nested Loop  (cost=3833.00..912518.79 rows=50713 width=34)
                                             ->  Hash Join  (cost=3833.00..405326.41 rows=167335 width=30)
                                                   Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                                   ->  Nested Loop  (cost=0.00..397966.01 rows=185404 width=30)
                                                         ->  Seq Scan on part  (cost=0.00..76082.00 rows=12934 width=4)
                                                               Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..24.70 rows=15 width=34)
                                                               Index Cond: ("outer".p_partkey = lineitem.l_partkey)
                                                   ->  Hash  (cost=3583.00..3583.00 rows=100000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..3583.00 rows=100000 width=8)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.00..3.02 rows=1 width=12)
                                                   Index Cond: ("outer".l_orderkey = orders.o_orderkey)
                                                   Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                           ->  Hash  (cost=2.49..2.49 rows=5 width=4)
                                 ->  Hash Join  (cost=1.06..2.49 rows=5 width=4)
                                       Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                       ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                       ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=33)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=33)
(35 rows)

query 8 run 3
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=984446.47..984446.48 rows=1 width=55)
   ->  Sort  (cost=984446.47..984448.27 rows=720 width=55)
         Sort Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  HashAggregate  (cost=984394.30..984412.30 rows=720 width=55)
               ->  Hash Join  (cost=916485.84..984318.23 rows=10143 width=55)
                     Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Hash Join  (cost=916484.53..984114.06 rows=10143 width=30)
                           Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                           ->  Merge Join  (cost=916482.03..983756.56 rows=50713 width=34)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..62764.00 rows=1500000 width=8)
                                 ->  Sort  (cost=916482.03..916608.81 rows=50713 width=34)
                                       Sort Key: orders.o_custkey
                                       ->  Nested Loop  (cost=3833.00..912518.79 rows=50713 width=34)
                                             ->  Hash Join  (cost=3833.00..405326.41 rows=167335 width=30)
                                                   Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                                   ->  Nested Loop  (cost=0.00..397966.01 rows=185404 width=30)
                                                         ->  Seq Scan on part  (cost=0.00..76082.00 rows=12934 width=4)
                                                               Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..24.70 rows=15 width=34)
                                                               Index Cond: ("outer".p_partkey = lineitem.l_partkey)
                                                   ->  Hash  (cost=3583.00..3583.00 rows=100000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..3583.00 rows=100000 width=8)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.00..3.02 rows=1 width=12)
                                                   Index Cond: ("outer".l_orderkey = orders.o_orderkey)
                                                   Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                           ->  Hash  (cost=2.49..2.49 rows=5 width=4)
                                 ->  Hash Join  (cost=1.06..2.49 rows=5 width=4)
                                       Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                       ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                       ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=33)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=33)
(35 rows)

query 9 run 1
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=458399.98..458400.01 rows=1 width=76)
   ->  GroupAggregate  (cost=458399.98..458400.09 rows=4 width=76)
         ->  Sort  (cost=458399.98..458399.99 rows=4 width=76)
               Sort Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=0.00..458399.94 rows=4 width=76)
                     Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Nested Loop  (cost=0.00..458393.67 rows=4 width=51)
                           ->  Nested Loop  (cost=0.00..458381.57 rows=4 width=55)
                                 ->  Nested Loop  (cost=0.00..458369.46 rows=4 width=55)
                                       ->  Nested Loop  (cost=0.00..232372.72 rows=64004 width=23)
                                             ->  Seq Scan on part  (cost=0.00..76082.00 rows=16001 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..7.96 rows=145 width=19)
                                                   Index Cond: ("outer".p_partkey = partsupp.ps_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..3.52 rows=1 width=44)
                                             Index Cond: (("outer".p_partkey = lineitem.l_partkey) AND ("outer".ps_suppkey = lineitem.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.00..3.01 rows=1 width=8)
                                       Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=8)
                                 Index Cond: ("outer".ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=33)
(21 rows)

query 9 run 2
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=458399.98..458400.01 rows=1 width=76)
   ->  GroupAggregate  (cost=458399.98..458400.09 rows=4 width=76)
         ->  Sort  (cost=458399.98..458399.99 rows=4 width=76)
               Sort Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=0.00..458399.94 rows=4 width=76)
                     Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Nested Loop  (cost=0.00..458393.67 rows=4 width=51)
                           ->  Nested Loop  (cost=0.00..458381.57 rows=4 width=55)
                                 ->  Nested Loop  (cost=0.00..458369.46 rows=4 width=55)
                                       ->  Nested Loop  (cost=0.00..232372.72 rows=64004 width=23)
                                             ->  Seq Scan on part  (cost=0.00..76082.00 rows=16001 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..7.96 rows=145 width=19)
                                                   Index Cond: ("outer".p_partkey = partsupp.ps_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..3.52 rows=1 width=44)
                                             Index Cond: (("outer".p_partkey = lineitem.l_partkey) AND ("outer".ps_suppkey = lineitem.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.00..3.01 rows=1 width=8)
                                       Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=8)
                                 Index Cond: ("outer".ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=33)
(21 rows)

query 9 run 3
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=458399.98..458400.01 rows=1 width=76)
   ->  GroupAggregate  (cost=458399.98..458400.09 rows=4 width=76)
         ->  Sort  (cost=458399.98..458399.99 rows=4 width=76)
               Sort Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=0.00..458399.94 rows=4 width=76)
                     Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Nested Loop  (cost=0.00..458393.67 rows=4 width=51)
                           ->  Nested Loop  (cost=0.00..458381.57 rows=4 width=55)
                                 ->  Nested Loop  (cost=0.00..458369.46 rows=4 width=55)
                                       ->  Nested Loop  (cost=0.00..232372.72 rows=64004 width=23)
                                             ->  Seq Scan on part  (cost=0.00..76082.00 rows=16001 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..7.96 rows=145 width=19)
                                                   Index Cond: ("outer".p_partkey = partsupp.ps_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..3.52 rows=1 width=44)
                                             Index Cond: (("outer".p_partkey = lineitem.l_partkey) AND ("outer".ps_suppkey = lineitem.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.00..3.01 rows=1 width=8)
                                       Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=8)
                                 Index Cond: ("outer".ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=33)
(21 rows)

query 10 run 1
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3577441.12..3577441.17 rows=20 width=212)
   ->  Sort  (cost=3577441.12..3578976.10 rows=613992 width=212)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))
         ->  GroupAggregate  (cost=3453772.60..3472192.36 rows=613992 width=212)
               ->  Sort  (cost=3453772.60..3455307.58 rows=613992 width=212)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=3263592.12..3348523.83 rows=613992 width=212)
                           Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                           ->  Merge Join  (cost=3263590.81..3339312.64 rows=613992 width=187)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..62764.00 rows=1500000 width=165)
                                 ->  Sort  (cost=3263590.81..3265125.79 rows=613992 width=26)
                                       Sort Key: orders.o_custkey
                                       ->  Merge Join  (cost=0.00..3192819.55 rows=613992 width=26)
                                             Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.00..599928.00 rows=625816 width=8)
                                                   Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2553582.70 rows=14716578 width=26)
                                                   Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=33)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=33)
(21 rows)

query 10 run 2
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3577441.12..3577441.17 rows=20 width=212)
   ->  Sort  (cost=3577441.12..3578976.10 rows=613992 width=212)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))
         ->  GroupAggregate  (cost=3453772.60..3472192.36 rows=613992 width=212)
               ->  Sort  (cost=3453772.60..3455307.58 rows=613992 width=212)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=3263592.12..3348523.83 rows=613992 width=212)
                           Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                           ->  Merge Join  (cost=3263590.81..3339312.64 rows=613992 width=187)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..62764.00 rows=1500000 width=165)
                                 ->  Sort  (cost=3263590.81..3265125.79 rows=613992 width=26)
                                       Sort Key: orders.o_custkey
                                       ->  Merge Join  (cost=0.00..3192819.55 rows=613992 width=26)
                                             Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.00..599928.00 rows=625816 width=8)
                                                   Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2553582.70 rows=14716578 width=26)
                                                   Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=33)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=33)
(21 rows)

query 10 run 3
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3577441.12..3577441.17 rows=20 width=212)
   ->  Sort  (cost=3577441.12..3578976.10 rows=613992 width=212)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))
         ->  GroupAggregate  (cost=3453772.60..3472192.36 rows=613992 width=212)
               ->  Sort  (cost=3453772.60..3455307.58 rows=613992 width=212)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=3263592.12..3348523.83 rows=613992 width=212)
                           Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                           ->  Merge Join  (cost=3263590.81..3339312.64 rows=613992 width=187)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..62764.00 rows=1500000 width=165)
                                 ->  Sort  (cost=3263590.81..3265125.79 rows=613992 width=26)
                                       Sort Key: orders.o_custkey
                                       ->  Merge Join  (cost=0.00..3192819.55 rows=613992 width=26)
                                             Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.00..599928.00 rows=625816 width=8)
                                                   Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2553582.70 rows=14716578 width=26)
                                                   Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=33)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=33)
(21 rows)

query 11 run 1
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=641734.44..641734.44 rows=1 width=19)
   InitPlan
     ->  Aggregate  (cost=317398.02..317398.03 rows=1 width=15)
           ->  Hash Join  (cost=4159.02..316598.02 rows=320000 width=15)
                 Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..269239.00 rows=8000000 width=19)
                 ->  Hash  (cost=4149.02..4149.02 rows=4000 width=4)
                       ->  Nested Loop  (cost=0.00..4149.02 rows=4000 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..4097.70 rows=4000 width=8)
                                   Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
   ->  Sort  (cost=324336.41..324475.01 rows=55439 width=19)
         Sort Key: sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))
         ->  HashAggregate  (cost=318998.02..319968.20 rows=55439 width=19)
               Filter: (sum((ps_supplycost * (ps_availqty)::numeric)) > $0)
               ->  Hash Join  (cost=4159.02..316598.02 rows=320000 width=19)
                     Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..269239.00 rows=8000000 width=23)
                     ->  Hash  (cost=4149.02..4149.02 rows=4000 width=4)
                           ->  Nested Loop  (cost=0.00..4149.02 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..4097.70 rows=4000 width=8)
                                       Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
(25 rows)

query 11 run 2
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=641734.44..641734.44 rows=1 width=19)
   InitPlan
     ->  Aggregate  (cost=317398.02..317398.03 rows=1 width=15)
           ->  Hash Join  (cost=4159.02..316598.02 rows=320000 width=15)
                 Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..269239.00 rows=8000000 width=19)
                 ->  Hash  (cost=4149.02..4149.02 rows=4000 width=4)
                       ->  Nested Loop  (cost=0.00..4149.02 rows=4000 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..4097.70 rows=4000 width=8)
                                   Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
   ->  Sort  (cost=324336.41..324475.01 rows=55439 width=19)
         Sort Key: sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))
         ->  HashAggregate  (cost=318998.02..319968.20 rows=55439 width=19)
               Filter: (sum((ps_supplycost * (ps_availqty)::numeric)) > $0)
               ->  Hash Join  (cost=4159.02..316598.02 rows=320000 width=19)
                     Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..269239.00 rows=8000000 width=23)
                     ->  Hash  (cost=4149.02..4149.02 rows=4000 width=4)
                           ->  Nested Loop  (cost=0.00..4149.02 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..4097.70 rows=4000 width=8)
                                       Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
(25 rows)

query 11 run 3
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=641734.44..641734.44 rows=1 width=19)
   InitPlan
     ->  Aggregate  (cost=317398.02..317398.03 rows=1 width=15)
           ->  Hash Join  (cost=4159.02..316598.02 rows=320000 width=15)
                 Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..269239.00 rows=8000000 width=19)
                 ->  Hash  (cost=4149.02..4149.02 rows=4000 width=4)
                       ->  Nested Loop  (cost=0.00..4149.02 rows=4000 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..4097.70 rows=4000 width=8)
                                   Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
   ->  Sort  (cost=324336.41..324475.01 rows=55439 width=19)
         Sort Key: sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))
         ->  HashAggregate  (cost=318998.02..319968.20 rows=55439 width=19)
               Filter: (sum((ps_supplycost * (ps_availqty)::numeric)) > $0)
               ->  Hash Join  (cost=4159.02..316598.02 rows=320000 width=19)
                     Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..269239.00 rows=8000000 width=23)
                     ->  Hash  (cost=4149.02..4149.02 rows=4000 width=4)
                           ->  Nested Loop  (cost=0.00..4149.02 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..4097.70 rows=4000 width=8)
                                       Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
(25 rows)

query 12 run 1
SET
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3674333.76..3674333.77 rows=1 width=33)
   ->  Sort  (cost=3674333.76..3674333.77 rows=1 width=33)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=3674333.74..3674333.75 rows=1 width=33)
               ->  Merge Join  (cost=3105359.35..3672150.64 rows=291080 width=33)
                     Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..524928.00 rows=15000000 width=23)
                     ->  Sort  (cost=3105359.35..3106087.05 rows=291080 width=18)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..3078942.30 rows=291080 width=18)
                                 Filter: (((l_shipmode = 'SHIP'::bpchar) OR (l_shipmode = 'REG AIR'::bpchar)) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 2
SET
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3674333.76..3674333.77 rows=1 width=33)
   ->  Sort  (cost=3674333.76..3674333.77 rows=1 width=33)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=3674333.74..3674333.75 rows=1 width=33)
               ->  Merge Join  (cost=3105359.35..3672150.64 rows=291080 width=33)
                     Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..524928.00 rows=15000000 width=23)
                     ->  Sort  (cost=3105359.35..3106087.05 rows=291080 width=18)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..3078942.30 rows=291080 width=18)
                                 Filter: (((l_shipmode = 'SHIP'::bpchar) OR (l_shipmode = 'REG AIR'::bpchar)) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 3
SET
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3674333.76..3674333.77 rows=1 width=33)
   ->  Sort  (cost=3674333.76..3674333.77 rows=1 width=33)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=3674333.74..3674333.75 rows=1 width=33)
               ->  Merge Join  (cost=3105359.35..3672150.64 rows=291080 width=33)
                     Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..524928.00 rows=15000000 width=23)
                     ->  Sort  (cost=3105359.35..3106087.05 rows=291080 width=18)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..3078942.30 rows=291080 width=18)
                                 Filter: (((l_shipmode = 'SHIP'::bpchar) OR (l_shipmode = 'REG AIR'::bpchar)) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 13 run 1
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3052618.42..3052618.42 rows=1 width=8)
   ->  Sort  (cost=3052618.42..3052618.92 rows=200 width=8)
         Sort Key: count(*), c_count
         ->  HashAggregate  (cost=3052610.27..3052610.77 rows=200 width=8)
               ->  Subquery Scan c_orders  (cost=2659896.44..3045110.27 rows=1500000 width=8)
                     ->  GroupAggregate  (cost=2659896.44..3030110.27 rows=1500000 width=8)
                           ->  Merge Left Join  (cost=2659896.44..2951360.27 rows=15000000 width=8)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..62764.00 rows=1500000 width=4)
                                 ->  Sort  (cost=2659896.44..2697396.44 rows=15000000 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..506297.00 rows=15000000 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 13 run 2
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3052618.42..3052618.42 rows=1 width=8)
   ->  Sort  (cost=3052618.42..3052618.92 rows=200 width=8)
         Sort Key: count(*), c_count
         ->  HashAggregate  (cost=3052610.27..3052610.77 rows=200 width=8)
               ->  Subquery Scan c_orders  (cost=2659896.44..3045110.27 rows=1500000 width=8)
                     ->  GroupAggregate  (cost=2659896.44..3030110.27 rows=1500000 width=8)
                           ->  Merge Left Join  (cost=2659896.44..2951360.27 rows=15000000 width=8)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..62764.00 rows=1500000 width=4)
                                 ->  Sort  (cost=2659896.44..2697396.44 rows=15000000 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..506297.00 rows=15000000 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 13 run 3
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3052618.42..3052618.42 rows=1 width=8)
   ->  Sort  (cost=3052618.42..3052618.92 rows=200 width=8)
         Sort Key: count(*), c_count
         ->  HashAggregate  (cost=3052610.27..3052610.77 rows=200 width=8)
               ->  Subquery Scan c_orders  (cost=2659896.44..3045110.27 rows=1500000 width=8)
                     ->  GroupAggregate  (cost=2659896.44..3030110.27 rows=1500000 width=8)
                           ->  Merge Left Join  (cost=2659896.44..2951360.27 rows=15000000 width=8)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..62764.00 rows=1500000 width=4)
                                 ->  Sort  (cost=2659896.44..2697396.44 rows=15000000 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..506297.00 rows=15000000 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 14 run 1
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1471189.05..1471189.06 rows=1 width=46)
   ->  Aggregate  (cost=1471189.05..1471189.06 rows=1 width=46)
         ->  Merge Join  (cost=1377393.56..1469180.15 rows=401779 width=46)
               Merge Cond: ("outer".p_partkey = "inner".l_partkey)
               ->  Index Scan using part_pkey on part  (cost=0.00..78569.00 rows=2000000 width=28)
               ->  Sort  (cost=1377393.56..1379495.21 rows=840662 width=26)
                     Sort Key: lineitem.l_partkey
                     ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.00..1278497.51 rows=840662 width=26)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
(9 rows)

query 14 run 2
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1471189.05..1471189.06 rows=1 width=46)
   ->  Aggregate  (cost=1471189.05..1471189.06 rows=1 width=46)
         ->  Merge Join  (cost=1377393.56..1469180.15 rows=401779 width=46)
               Merge Cond: ("outer".p_partkey = "inner".l_partkey)
               ->  Index Scan using part_pkey on part  (cost=0.00..78569.00 rows=2000000 width=28)
               ->  Sort  (cost=1377393.56..1379495.21 rows=840662 width=26)
                     Sort Key: lineitem.l_partkey
                     ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.00..1278497.51 rows=840662 width=26)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
(9 rows)

query 14 run 3
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1471189.05..1471189.06 rows=1 width=46)
   ->  Aggregate  (cost=1471189.05..1471189.06 rows=1 width=46)
         ->  Merge Join  (cost=1377393.56..1469180.15 rows=401779 width=46)
               Merge Cond: ("outer".p_partkey = "inner".l_partkey)
               ->  Index Scan using part_pkey on part  (cost=0.00..78569.00 rows=2000000 width=28)
               ->  Sort  (cost=1377393.56..1379495.21 rows=840662 width=26)
                     Sort Key: lineitem.l_partkey
                     ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.00..1278497.51 rows=840662 width=26)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
(9 rows)

query 15 run 1
SET
CREATE VIEW
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4985509.08..4985510.16 rows=1 width=113)
   InitPlan
     ->  Aggregate  (cost=2489928.83..2489928.83 rows=1 width=32)
           ->  Subquery Scan revenue0  (cost=2489849.27..2489918.88 rows=3978 width=32)
                 ->  HashAggregate  (cost=2489849.27..2489879.10 rows=3978 width=26)
                       ->  Seq Scan on lineitem  (cost=0.00..2479081.78 rows=2153498 width=26)
                             Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=2495580.25..2499848.92 rows=3979 width=113)
         Merge Cond: ("outer".s_suppkey = "inner".supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3959.00 rows=100000 width=81)
         ->  Sort  (cost=2495580.25..2495590.20 rows=3978 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan revenue0  (cost=2495233.02..2495342.41 rows=3978 width=36)
                     ->  HashAggregate  (cost=2495233.02..2495302.63 rows=3978 width=26)
                           Filter: (sum((l_extendedprice * (1::numeric - l_discount))) = $0)
                           ->  Seq Scan on lineitem  (cost=0.00..2479081.78 rows=2153498 width=26)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(17 rows)

DROP VIEW
query 15 run 2
SET
CREATE VIEW
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4985509.08..4985510.16 rows=1 width=113)
   InitPlan
     ->  Aggregate  (cost=2489928.83..2489928.83 rows=1 width=32)
           ->  Subquery Scan revenue0  (cost=2489849.27..2489918.88 rows=3978 width=32)
                 ->  HashAggregate  (cost=2489849.27..2489879.10 rows=3978 width=26)
                       ->  Seq Scan on lineitem  (cost=0.00..2479081.78 rows=2153498 width=26)
                             Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=2495580.25..2499848.92 rows=3979 width=113)
         Merge Cond: ("outer".s_suppkey = "inner".supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3959.00 rows=100000 width=81)
         ->  Sort  (cost=2495580.25..2495590.20 rows=3978 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan revenue0  (cost=2495233.02..2495342.41 rows=3978 width=36)
                     ->  HashAggregate  (cost=2495233.02..2495302.63 rows=3978 width=26)
                           Filter: (sum((l_extendedprice * (1::numeric - l_discount))) = $0)
                           ->  Seq Scan on lineitem  (cost=0.00..2479081.78 rows=2153498 width=26)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(17 rows)

DROP VIEW
query 15 run 3
SET
CREATE VIEW
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4985509.08..4985510.16 rows=1 width=113)
   InitPlan
     ->  Aggregate  (cost=2489928.83..2489928.83 rows=1 width=32)
           ->  Subquery Scan revenue0  (cost=2489849.27..2489918.88 rows=3978 width=32)
                 ->  HashAggregate  (cost=2489849.27..2489879.10 rows=3978 width=26)
                       ->  Seq Scan on lineitem  (cost=0.00..2479081.78 rows=2153498 width=26)
                             Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=2495580.25..2499848.92 rows=3979 width=113)
         Merge Cond: ("outer".s_suppkey = "inner".supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3959.00 rows=100000 width=81)
         ->  Sort  (cost=2495580.25..2495590.20 rows=3978 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan revenue0  (cost=2495233.02..2495342.41 rows=3978 width=36)
                     ->  HashAggregate  (cost=2495233.02..2495302.63 rows=3978 width=26)
                           Filter: (sum((l_extendedprice * (1::numeric - l_discount))) = $0)
                           ->  Seq Scan on lineitem  (cost=0.00..2479081.78 rows=2153498 width=26)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(17 rows)

DROP VIEW
query 16 run 1
SET
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=545153.00..545153.01 rows=1 width=46)
   ->  Sort  (cost=545153.00..545219.82 rows=26727 width=46)
         Sort Key: count(DISTINCT partsupp.ps_suppkey), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=535993.85..543187.77 rows=26727 width=46)
               ->  Sort  (cost=535993.85..537419.27 rows=570168 width=46)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Merge Join  (cost=3833.00..467810.36 rows=570168 width=46)
                           Merge Cond: ("outer".p_partkey = "inner".ps_partkey)
                           ->  Index Scan using part_pkey on part  (cost=0.00..128569.00 rows=285084 width=46)
                                 Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND ((p_size = 12) OR (p_size = 32) OR (p_size = 36) OR (p_size = 26) OR (p_size = 40) OR (p_size = 34) OR (p_size = 49) OR (p_size = 9)))
                           ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=3833.00..323009.00 rows=4000000 width=8)
                                 Filter: (NOT (hashed subplan))
                                 SubPlan
                                   ->  Seq Scan on supplier  (cost=0.00..3833.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
(15 rows)

query 16 run 2
SET
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=545153.00..545153.01 rows=1 width=46)
   ->  Sort  (cost=545153.00..545219.82 rows=26727 width=46)
         Sort Key: count(DISTINCT partsupp.ps_suppkey), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=535993.85..543187.77 rows=26727 width=46)
               ->  Sort  (cost=535993.85..537419.27 rows=570168 width=46)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Merge Join  (cost=3833.00..467810.36 rows=570168 width=46)
                           Merge Cond: ("outer".p_partkey = "inner".ps_partkey)
                           ->  Index Scan using part_pkey on part  (cost=0.00..128569.00 rows=285084 width=46)
                                 Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND ((p_size = 12) OR (p_size = 32) OR (p_size = 36) OR (p_size = 26) OR (p_size = 40) OR (p_size = 34) OR (p_size = 49) OR (p_size = 9)))
                           ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=3833.00..323009.00 rows=4000000 width=8)
                                 Filter: (NOT (hashed subplan))
                                 SubPlan
                                   ->  Seq Scan on supplier  (cost=0.00..3833.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
(15 rows)

query 16 run 3
SET
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=545153.00..545153.01 rows=1 width=46)
   ->  Sort  (cost=545153.00..545219.82 rows=26727 width=46)
         Sort Key: count(DISTINCT partsupp.ps_suppkey), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=535993.85..543187.77 rows=26727 width=46)
               ->  Sort  (cost=535993.85..537419.27 rows=570168 width=46)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Merge Join  (cost=3833.00..467810.36 rows=570168 width=46)
                           Merge Cond: ("outer".p_partkey = "inner".ps_partkey)
                           ->  Index Scan using part_pkey on part  (cost=0.00..128569.00 rows=285084 width=46)
                                 Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND ((p_size = 12) OR (p_size = 32) OR (p_size = 36) OR (p_size = 26) OR (p_size = 40) OR (p_size = 34) OR (p_size = 49) OR (p_size = 9)))
                           ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=3833.00..323009.00 rows=4000000 width=8)
                                 Filter: (NOT (hashed subplan))
                                 SubPlan
                                   ->  Seq Scan on supplier  (cost=0.00..3833.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
(15 rows)

query 17 run 1
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=13220406.62..13220406.63 rows=1 width=13)
   ->  Aggregate  (cost=13220406.62..13220406.63 rows=1 width=13)
         ->  Merge Join  (cost=12696731.36..13220357.00 rows=19849 width=13)
               Merge Cond: ("outer".agg_partkey = "inner".l_partkey)
               Join Filter: ("inner".l_quantity < "outer".avg_quantity)
               ->  Subquery Scan part_agg  (cost=12564144.19..13076810.11 rows=4184702 width=36)
                     ->  GroupAggregate  (cost=12564144.19..13034963.09 rows=4184702 width=14)
                           ->  Sort  (cost=12564144.19..12714109.32 rows=59986052 width=14)
                                 Sort Key: l_partkey
                                 ->  Seq Scan on lineitem  (cost=0.00..2179151.52 rows=59986052 width=14)
               ->  Sort  (cost=132587.17..132658.31 rows=28455 width=31)
                     Sort Key: lineitem.l_partkey
                     ->  Nested Loop  (cost=0.00..130482.01 rows=28455 width=31)
                           ->  Seq Scan on part  (cost=0.00..81082.00 rows=1985 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..24.70 rows=15 width=27)
                                 Index Cond: ("outer".p_partkey = lineitem.l_partkey)
(17 rows)

query 17 run 2
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=13220406.62..13220406.63 rows=1 width=13)
   ->  Aggregate  (cost=13220406.62..13220406.63 rows=1 width=13)
         ->  Merge Join  (cost=12696731.36..13220357.00 rows=19849 width=13)
               Merge Cond: ("outer".agg_partkey = "inner".l_partkey)
               Join Filter: ("inner".l_quantity < "outer".avg_quantity)
               ->  Subquery Scan part_agg  (cost=12564144.19..13076810.11 rows=4184702 width=36)
                     ->  GroupAggregate  (cost=12564144.19..13034963.09 rows=4184702 width=14)
                           ->  Sort  (cost=12564144.19..12714109.32 rows=59986052 width=14)
                                 Sort Key: l_partkey
                                 ->  Seq Scan on lineitem  (cost=0.00..2179151.52 rows=59986052 width=14)
               ->  Sort  (cost=132587.17..132658.31 rows=28455 width=31)
                     Sort Key: lineitem.l_partkey
                     ->  Nested Loop  (cost=0.00..130482.01 rows=28455 width=31)
                           ->  Seq Scan on part  (cost=0.00..81082.00 rows=1985 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..24.70 rows=15 width=27)
                                 Index Cond: ("outer".p_partkey = lineitem.l_partkey)
(17 rows)

query 17 run 3
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=13220406.62..13220406.63 rows=1 width=13)
   ->  Aggregate  (cost=13220406.62..13220406.63 rows=1 width=13)
         ->  Merge Join  (cost=12696731.36..13220357.00 rows=19849 width=13)
               Merge Cond: ("outer".agg_partkey = "inner".l_partkey)
               Join Filter: ("inner".l_quantity < "outer".avg_quantity)
               ->  Subquery Scan part_agg  (cost=12564144.19..13076810.11 rows=4184702 width=36)
                     ->  GroupAggregate  (cost=12564144.19..13034963.09 rows=4184702 width=14)
                           ->  Sort  (cost=12564144.19..12714109.32 rows=59986052 width=14)
                                 Sort Key: l_partkey
                                 ->  Seq Scan on lineitem  (cost=0.00..2179151.52 rows=59986052 width=14)
               ->  Sort  (cost=132587.17..132658.31 rows=28455 width=31)
                     Sort Key: lineitem.l_partkey
                     ->  Nested Loop  (cost=0.00..130482.01 rows=28455 width=31)
                           ->  Seq Scan on part  (cost=0.00..81082.00 rows=1985 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..24.70 rows=15 width=27)
                                 Index Cond: ("outer".p_partkey = lineitem.l_partkey)
(17 rows)

query 18 run 1
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5144246.03..5144246.28 rows=100 width=57)
   ->  Sort  (cost=5144246.03..5144517.29 rows=108503 width=57)
         Sort Key: orders.o_totalprice, orders.o_orderdate
         ->  GroupAggregate  (cost=5133001.12..5135171.18 rows=108503 width=57)
               ->  Sort  (cost=5133001.12..5133272.37 rows=108503 width=57)
                     Sort Key: customer.c_name, customer.c_custkey, orders.o_orderkey, orders.o_orderdate, orders.o_totalprice
                     ->  Hash Join  (cost=2643759.45..5123926.26 rows=108503 width=57)
                           Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2179151.52 rows=59986052 width=14)
                           ->  Hash  (cost=2643691.62..2643691.62 rows=27132 width=51)
                                 ->  Nested Loop  (cost=2479081.78..2643691.62 rows=27132 width=51)
                                       ->  Nested Loop  (cost=2479081.78..2561590.19 rows=27132 width=29)
                                             ->  Subquery Scan "IN_subquery"  (cost=2479081.78..2479488.76 rows=27132 width=4)
                                                   ->  HashAggregate  (cost=2479081.78..2479217.44 rows=27132 width=14)
                                                         Filter: (sum(l_quantity) > 313::numeric)
                                                         ->  Seq Scan on lineitem  (cost=0.00..2179151.52 rows=59986052 width=14)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.00..3.01 rows=1 width=25)
                                                   Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                                       ->  Index Scan using customer_pkey on customer  (cost=0.00..3.01 rows=1 width=26)
                                             Index Cond: (customer.c_custkey = "outer".o_custkey)
(20 rows)

query 18 run 2
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5144246.03..5144246.28 rows=100 width=57)
   ->  Sort  (cost=5144246.03..5144517.29 rows=108503 width=57)
         Sort Key: orders.o_totalprice, orders.o_orderdate
         ->  GroupAggregate  (cost=5133001.12..5135171.18 rows=108503 width=57)
               ->  Sort  (cost=5133001.12..5133272.37 rows=108503 width=57)
                     Sort Key: customer.c_name, customer.c_custkey, orders.o_orderkey, orders.o_orderdate, orders.o_totalprice
                     ->  Hash Join  (cost=2643759.45..5123926.26 rows=108503 width=57)
                           Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2179151.52 rows=59986052 width=14)
                           ->  Hash  (cost=2643691.62..2643691.62 rows=27132 width=51)
                                 ->  Nested Loop  (cost=2479081.78..2643691.62 rows=27132 width=51)
                                       ->  Nested Loop  (cost=2479081.78..2561590.19 rows=27132 width=29)
                                             ->  Subquery Scan "IN_subquery"  (cost=2479081.78..2479488.76 rows=27132 width=4)
                                                   ->  HashAggregate  (cost=2479081.78..2479217.44 rows=27132 width=14)
                                                         Filter: (sum(l_quantity) > 313::numeric)
                                                         ->  Seq Scan on lineitem  (cost=0.00..2179151.52 rows=59986052 width=14)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.00..3.01 rows=1 width=25)
                                                   Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                                       ->  Index Scan using customer_pkey on customer  (cost=0.00..3.01 rows=1 width=26)
                                             Index Cond: (customer.c_custkey = "outer".o_custkey)
(20 rows)

query 18 run 3
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5144246.03..5144246.28 rows=100 width=57)
   ->  Sort  (cost=5144246.03..5144517.29 rows=108503 width=57)
         Sort Key: orders.o_totalprice, orders.o_orderdate
         ->  GroupAggregate  (cost=5133001.12..5135171.18 rows=108503 width=57)
               ->  Sort  (cost=5133001.12..5133272.37 rows=108503 width=57)
                     Sort Key: customer.c_name, customer.c_custkey, orders.o_orderkey, orders.o_orderdate, orders.o_totalprice
                     ->  Hash Join  (cost=2643759.45..5123926.26 rows=108503 width=57)
                           Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2179151.52 rows=59986052 width=14)
                           ->  Hash  (cost=2643691.62..2643691.62 rows=27132 width=51)
                                 ->  Nested Loop  (cost=2479081.78..2643691.62 rows=27132 width=51)
                                       ->  Nested Loop  (cost=2479081.78..2561590.19 rows=27132 width=29)
                                             ->  Subquery Scan "IN_subquery"  (cost=2479081.78..2479488.76 rows=27132 width=4)
                                                   ->  HashAggregate  (cost=2479081.78..2479217.44 rows=27132 width=14)
                                                         Filter: (sum(l_quantity) > 313::numeric)
                                                         ->  Seq Scan on lineitem  (cost=0.00..2179151.52 rows=59986052 width=14)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.00..3.01 rows=1 width=25)
                                                   Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                                       ->  Index Scan using customer_pkey on customer  (cost=0.00..3.01 rows=1 width=26)
                                             Index Cond: (customer.c_custkey = "outer".o_custkey)
(20 rows)

query 19 run 1
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2926276.17..2926276.17 rows=1 width=22)
   ->  Aggregate  (cost=2926276.17..2926276.17 rows=1 width=22)
         ->  Hash Join  (cost=98658.51..2926275.16 rows=403 width=22)
               Hash Cond: ("outer".l_partkey = "inner".p_partkey)
               Join Filter: ((("inner".p_brand = 'Brand#24'::bpchar) AND (("inner".p_container = 'SM CASE'::bpchar) OR ("inner".p_container = 'SM BOX'::bpchar) OR ("inner".p_container = 'SM PACK'::bpchar) OR ("inner".p_container = 'SM PKG'::bpchar)) AND ("outer".l_quantity >= 10::numeric) AND ("outer".l_quantity <= 20::numeric) AND ("inner".p_size <= 5)) OR (("inner".p_brand = 'Brand#43'::bpchar) AND (("inner".p_container = 'MED BAG'::bpchar) OR ("inner".p_container = 'MED BOX'::bpchar) OR ("inner".p_container = 'MED PKG'::bpchar) OR ("inner".p_container = 'MED PACK'::bpchar)) AND ("outer".l_quantity >= 10::numeric) AND ("outer".l_quantity <= 20::numeric) AND ("inner".p_size <= 10)) OR (("inner".p_brand = 'Brand#44'::bpchar) AND (("inner".p_container = 'LG CASE'::bpchar) OR ("inner".p_container = 'LG BOX'::bpchar) OR ("inner".p_container = 'LG PACK'::bpchar) OR ("inner".p_container = 'LG PKG'::bpchar)) AND ("outer".l_quantity >= 20::numeric) AND ("outer".l_quantity <= 30::numeric) AND ("inner".p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..2629046.91 rows=1924246 width=36)
                     Filter: (((l_shipmode = 'AIR'::bpchar) OR (l_shipmode = 'AIR REG'::bpchar)) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
               ->  Hash  (cost=76082.00..76082.00 rows=1999806 width=36)
                     ->  Seq Scan on part  (cost=0.00..76082.00 rows=1999806 width=36)
                           Filter: (p_size >= 1)
(10 rows)

query 19 run 2
SET


 Limit  (cost=2926276.17..2926276.17 rows=1 width=22)
   ->  Aggregate  (cost=2926276.17..2926276.17 rows=1 width=22)
         ->  Hash Join  (cost=98658.51..2926275.16 rows=403 width=22)
               Hash Cond: ("outer".l_partkey = "inner".p_partkey)
               Join Filter: ((("inner".p_brand = 'Brand#24'::bpchar) AND (("inner".p_container = 'SM CASE'::bpchar) OR ("inner".p_container = 'SM BOX'::bpchar) OR ("inner".p_container = 'SM PACK'::bpchar) OR ("inner".p_container = 'SM PKG'::bpchar)) AND ("outer".l_quantity >= 10::numeric) AND ("outer".l_quantity <= 20::numeric) AND ("inner".p_size <= 5)) OR (("inner".p_brand = 'Brand#43'::bpchar) AND (("inner".p_container = 'MED BAG'::bpchar) OR ("inner".p_container = 'MED BOX'::bpchar) OR ("inner".p_container = 'MED PKG'::bpchar) OR ("inner".p_container = 'MED PACK'::bpchar)) AND ("outer".l_quantity >= 10::numeric) AND ("outer".l_quantity <= 20::numeric) AND ("inner".p_size <= 10)) OR (("inner".p_brand = 'Brand#44'::bpchar) AND (("inner".p_container = 'LG CASE'::bpchar) OR ("inner".p_container = 'LG BOX'::bpchar) OR ("inner".p_container = 'LG PACK'::bpchar) OR ("inner".p_container = 'LG PKG'::bpchar)) AND ("outer".l_quantity >= 20::numeric) AND ("outer".l_quantity <= 30::numeric) AND ("inner".p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..2629046.91 rows=1924246 width=36)
                     Filter: (((l_shipmode = 'AIR'::bpchar) OR (l_shipmode = 'AIR REG'::bpchar)) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
               ->  Hash  (cost=76082.00..76082.00 rows=1999806 width=36)
                     ->  Seq Scan on part  (cost=0.00..76082.00 rows=1999806 width=36)
                           Filter: (p_size >= 1)
(10 rows)

query 19 run 3
SET


 Limit  (cost=2926276.17..2926276.17 rows=1 width=22)
   ->  Aggregate  (cost=2926276.17..2926276.17 rows=1 width=22)
         ->  Hash Join  (cost=98658.51..2926275.16 rows=403 width=22)
               Hash Cond: ("outer".l_partkey = "inner".p_partkey)
               Join Filter: ((("inner".p_brand = 'Brand#24'::bpchar) AND (("inner".p_container = 'SM CASE'::bpchar) OR ("inner".p_container = 'SM BOX'::bpchar) OR ("inner".p_container = 'SM PACK'::bpchar) OR ("inner".p_container = 'SM PKG'::bpchar)) AND ("outer".l_quantity >= 10::numeric) AND ("outer".l_quantity <= 20::numeric) AND ("inner".p_size <= 5)) OR (("inner".p_brand = 'Brand#43'::bpchar) AND (("inner".p_container = 'MED BAG'::bpchar) OR ("inner".p_container = 'MED BOX'::bpchar) OR ("inner".p_container = 'MED PKG'::bpchar) OR ("inner".p_container = 'MED PACK'::bpchar)) AND ("outer".l_quantity >= 10::numeric) AND ("outer".l_quantity <= 20::numeric) AND ("inner".p_size <= 10)) OR (("inner".p_brand = 'Brand#44'::bpchar) AND (("inner".p_container = 'LG CASE'::bpchar) OR ("inner".p_container = 'LG BOX'::bpchar) OR ("inner".p_container = 'LG PACK'::bpchar) OR ("inner".p_container = 'LG PKG'::bpchar)) AND ("outer".l_quantity >= 20::numeric) AND ("outer".l_quantity <= 30::numeric) AND ("inner".p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..2629046.91 rows=1924246 width=36)
                     Filter: (((l_shipmode = 'AIR'::bpchar) OR (l_shipmode = 'AIR REG'::bpchar)) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
               ->  Hash  (cost=76082.00..76082.00 rows=1999806 width=36)
                     ->  Seq Scan on part  (cost=0.00..76082.00 rows=1999806 width=36)
                           Filter: (p_size >= 1)
(10 rows)

query 20 run 1
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3998010.32..3998010.33 rows=1 width=58)
   ->  Sort  (cost=3998010.32..3998010.33 rows=1 width=58)
         Sort Key: supplier.s_name
         ->  Nested Loop  (cost=3998005.96..3998010.31 rows=1 width=58)
               Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
               ->  Nested Loop  (cost=3998005.96..3998008.99 rows=1 width=62)
                     ->  HashAggregate  (cost=3998005.96..3998005.96 rows=1 width=8)
                           ->  Nested Loop  (cost=3892921.54..3998005.96 rows=1 width=8)
                                 Join Filter: (("inner".ps_availqty)::numeric > "outer".agg_quantity)
                                 ->  Merge Join  (cost=3892921.54..3998002.71 rows=1 width=44)
                                       Merge Cond: ("outer".agg_partkey = "inner".p_partkey)
                                       ->  Subquery Scan agg_lineitem  (cost=3816839.53..3919684.91 rows=894308 width=40)
                                             ->  GroupAggregate  (cost=3816839.53..3910741.83 rows=894308 width=18)
                                                   ->  Sort  (cost=3816839.53..3839197.22 rows=8943076 width=18)
                                                         Sort Key: l_partkey, l_suppkey
                                                         ->  Seq Scan on lineitem  (cost=0.00..2479081.78 rows=8943076 width=18)
                                                               Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Sort  (cost=76082.01..76082.02 rows=1 width=4)
                                             Sort Key: part.p_partkey
                                             ->  HashAggregate  (cost=76082.00..76082.00 rows=1 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..76082.00 rows=1 width=4)
                                                         Filter: ((p_name)::text ~~ 'olive%'::text)
                                 ->  Index Scan using partsupp_pkey on partsupp  (cost=0.00..3.23 rows=1 width=12)
                                       Index Cond: ((partsupp.ps_partkey = "outer".p_partkey) AND ("outer".agg_suppkey = partsupp.ps_suppkey))
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=66)
                           Index Cond: (supplier.s_suppkey = "outer".agg_suppkey)
               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                     Filter: (n_name = 'IRAQ'::bpchar)
(28 rows)

query 20 run 2
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3998010.32..3998010.33 rows=1 width=58)
   ->  Sort  (cost=3998010.32..3998010.33 rows=1 width=58)
         Sort Key: supplier.s_name
         ->  Nested Loop  (cost=3998005.96..3998010.31 rows=1 width=58)
               Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
               ->  Nested Loop  (cost=3998005.96..3998008.99 rows=1 width=62)
                     ->  HashAggregate  (cost=3998005.96..3998005.96 rows=1 width=8)
                           ->  Nested Loop  (cost=3892921.54..3998005.96 rows=1 width=8)
                                 Join Filter: (("inner".ps_availqty)::numeric > "outer".agg_quantity)
                                 ->  Merge Join  (cost=3892921.54..3998002.71 rows=1 width=44)
                                       Merge Cond: ("outer".agg_partkey = "inner".p_partkey)
                                       ->  Subquery Scan agg_lineitem  (cost=3816839.53..3919684.91 rows=894308 width=40)
                                             ->  GroupAggregate  (cost=3816839.53..3910741.83 rows=894308 width=18)
                                                   ->  Sort  (cost=3816839.53..3839197.22 rows=8943076 width=18)
                                                         Sort Key: l_partkey, l_suppkey
                                                         ->  Seq Scan on lineitem  (cost=0.00..2479081.78 rows=8943076 width=18)
                                                               Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Sort  (cost=76082.01..76082.02 rows=1 width=4)
                                             Sort Key: part.p_partkey
                                             ->  HashAggregate  (cost=76082.00..76082.00 rows=1 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..76082.00 rows=1 width=4)
                                                         Filter: ((p_name)::text ~~ 'olive%'::text)
                                 ->  Index Scan using partsupp_pkey on partsupp  (cost=0.00..3.23 rows=1 width=12)
                                       Index Cond: ((partsupp.ps_partkey = "outer".p_partkey) AND ("outer".agg_suppkey = partsupp.ps_suppkey))
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=66)
                           Index Cond: (supplier.s_suppkey = "outer".agg_suppkey)
               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                     Filter: (n_name = 'IRAQ'::bpchar)
(28 rows)

query 20 run 3
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3998010.32..3998010.33 rows=1 width=58)
   ->  Sort  (cost=3998010.32..3998010.33 rows=1 width=58)
         Sort Key: supplier.s_name
         ->  Nested Loop  (cost=3998005.96..3998010.31 rows=1 width=58)
               Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
               ->  Nested Loop  (cost=3998005.96..3998008.99 rows=1 width=62)
                     ->  HashAggregate  (cost=3998005.96..3998005.96 rows=1 width=8)
                           ->  Nested Loop  (cost=3892921.54..3998005.96 rows=1 width=8)
                                 Join Filter: (("inner".ps_availqty)::numeric > "outer".agg_quantity)
                                 ->  Merge Join  (cost=3892921.54..3998002.71 rows=1 width=44)
                                       Merge Cond: ("outer".agg_partkey = "inner".p_partkey)
                                       ->  Subquery Scan agg_lineitem  (cost=3816839.53..3919684.91 rows=894308 width=40)
                                             ->  GroupAggregate  (cost=3816839.53..3910741.83 rows=894308 width=18)
                                                   ->  Sort  (cost=3816839.53..3839197.22 rows=8943076 width=18)
                                                         Sort Key: l_partkey, l_suppkey
                                                         ->  Seq Scan on lineitem  (cost=0.00..2479081.78 rows=8943076 width=18)
                                                               Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Sort  (cost=76082.01..76082.02 rows=1 width=4)
                                             Sort Key: part.p_partkey
                                             ->  HashAggregate  (cost=76082.00..76082.00 rows=1 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..76082.00 rows=1 width=4)
                                                         Filter: ((p_name)::text ~~ 'olive%'::text)
                                 ->  Index Scan using partsupp_pkey on partsupp  (cost=0.00..3.23 rows=1 width=12)
                                       Index Cond: ((partsupp.ps_partkey = "outer".p_partkey) AND ("outer".agg_suppkey = partsupp.ps_suppkey))
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=66)
                           Index Cond: (supplier.s_suppkey = "outer".agg_suppkey)
               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                     Filter: (n_name = 'IRAQ'::bpchar)
(28 rows)

query 21 run 1
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14591711.69..14591711.94 rows=100 width=29)
   ->  Sort  (cost=14591711.69..14591928.26 rows=86625 width=29)
         Sort Key: count(*), supplier.s_name
         ->  HashAggregate  (cost=14584390.80..14584607.36 rows=86625 width=29)
               ->  Nested Loop  (cost=3834.32..14583957.68 rows=86625 width=29)
                     ->  Hash Join  (cost=3834.32..14037413.37 rows=180467 width=33)
                           Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                           ->  Hash Join  (cost=3833.00..14013049.04 rows=4511669 width=37)
                                 Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                 ->  Seq Scan on lineitem l1  (cost=0.00..13889116.78 rows=4998838 width=8)
                                       Filter: ((l_receiptdate > l_commitdate) AND (subplan) AND (NOT (subplan)))
                                       SubPlan
                                         ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.00..107.90 rows=737 width=152)
                                               Index Cond: (l_orderkey = $0)
                                               Filter: ((l_suppkey <> $1) AND (l_receiptdate > l_commitdate))
                                         ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..102.38 rows=2211 width=152)
                                               Index Cond: (l_orderkey = $0)
                                               Filter: (l_suppkey <> $1)
                                 ->  Hash  (cost=3583.00..3583.00 rows=100000 width=37)
                                       ->  Seq Scan on supplier  (cost=0.00..3583.00 rows=100000 width=37)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'PERU'::bpchar)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..3.02 rows=1 width=4)
                           Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                           Filter: (o_orderstatus = 'F'::bpchar)
(26 rows)

query 21 run 2
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14591711.69..14591711.94 rows=100 width=29)
   ->  Sort  (cost=14591711.69..14591928.26 rows=86625 width=29)
         Sort Key: count(*), supplier.s_name
         ->  HashAggregate  (cost=14584390.80..14584607.36 rows=86625 width=29)
               ->  Nested Loop  (cost=3834.32..14583957.68 rows=86625 width=29)
                     ->  Hash Join  (cost=3834.32..14037413.37 rows=180467 width=33)
                           Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                           ->  Hash Join  (cost=3833.00..14013049.04 rows=4511669 width=37)
                                 Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                 ->  Seq Scan on lineitem l1  (cost=0.00..13889116.78 rows=4998838 width=8)
                                       Filter: ((l_receiptdate > l_commitdate) AND (subplan) AND (NOT (subplan)))
                                       SubPlan
                                         ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.00..107.90 rows=737 width=152)
                                               Index Cond: (l_orderkey = $0)
                                               Filter: ((l_suppkey <> $1) AND (l_receiptdate > l_commitdate))
                                         ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..102.38 rows=2211 width=152)
                                               Index Cond: (l_orderkey = $0)
                                               Filter: (l_suppkey <> $1)
                                 ->  Hash  (cost=3583.00..3583.00 rows=100000 width=37)
                                       ->  Seq Scan on supplier  (cost=0.00..3583.00 rows=100000 width=37)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'PERU'::bpchar)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..3.02 rows=1 width=4)
                           Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                           Filter: (o_orderstatus = 'F'::bpchar)
(26 rows)

query 21 run 3
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14591711.69..14591711.94 rows=100 width=29)
   ->  Sort  (cost=14591711.69..14591928.26 rows=86625 width=29)
         Sort Key: count(*), supplier.s_name
         ->  HashAggregate  (cost=14584390.80..14584607.36 rows=86625 width=29)
               ->  Nested Loop  (cost=3834.32..14583957.68 rows=86625 width=29)
                     ->  Hash Join  (cost=3834.32..14037413.37 rows=180467 width=33)
                           Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                           ->  Hash Join  (cost=3833.00..14013049.04 rows=4511669 width=37)
                                 Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                 ->  Seq Scan on lineitem l1  (cost=0.00..13889116.78 rows=4998838 width=8)
                                       Filter: ((l_receiptdate > l_commitdate) AND (subplan) AND (NOT (subplan)))
                                       SubPlan
                                         ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.00..107.90 rows=737 width=152)
                                               Index Cond: (l_orderkey = $0)
                                               Filter: ((l_suppkey <> $1) AND (l_receiptdate > l_commitdate))
                                         ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..102.38 rows=2211 width=152)
                                               Index Cond: (l_orderkey = $0)
                                               Filter: (l_suppkey <> $1)
                                 ->  Hash  (cost=3583.00..3583.00 rows=100000 width=37)
                                       ->  Seq Scan on supplier  (cost=0.00..3583.00 rows=100000 width=37)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'PERU'::bpchar)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..3.02 rows=1 width=4)
                           Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                           Filter: (o_orderstatus = 'F'::bpchar)
(26 rows)

query 22 run 1
SET
                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2716178.40..2716178.42 rows=1 width=30)
   InitPlan
     ->  Aggregate  (cost=139765.93..139765.93 rows=1 width=11)
           ->  Seq Scan on customer  (cost=0.00..139648.00 rows=47171 width=11)
                 Filter: ((c_acctbal > 0.00) AND (("substring"((c_phone)::text, 1, 2) = '21'::text) OR ("substring"((c_phone)::text, 1, 2) = '29'::text) OR ("substring"((c_phone)::text, 1, 2) = '26'::text) OR ("substring"((c_phone)::text, 1, 2) = '34'::text) OR ("substring"((c_phone)::text, 1, 2) = '14'::text) OR ("substring"((c_phone)::text, 1, 2) = '15'::text) OR ("substring"((c_phone)::text, 1, 2) = '17'::text)))
   ->  GroupAggregate  (cost=2576412.47..2576584.87 rows=8620 width=30)
         ->  Sort  (cost=2576412.47..2576434.02 rows=8620 width=30)
               Sort Key: "substring"((customer.c_phone)::text, 1, 2)
               ->  Seq Scan on customer  (cost=0.00..2575849.01 rows=8620 width=30)
                     Filter: ((("substring"((c_phone)::text, 1, 2) = '21'::text) OR ("substring"((c_phone)::text, 1, 2) = '29'::text) OR ("substring"((c_phone)::text, 1, 2) = '26'::text) OR ("substring"((c_phone)::text, 1, 2) = '34'::text) OR ("substring"((c_phone)::text, 1, 2) = '14'::text) OR ("substring"((c_phone)::text, 1, 2) = '15'::text) OR ("substring"((c_phone)::text, 1, 2) = '17'::text)) AND (c_acctbal > $0) AND (NOT (subplan)))
                     SubPlan
                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..29.23 rows=18 width=124)
                             Index Cond: (o_custkey = $1)
(13 rows)

query 22 run 2
SET
                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2716178.40..2716178.42 rows=1 width=30)
   InitPlan
     ->  Aggregate  (cost=139765.93..139765.93 rows=1 width=11)
           ->  Seq Scan on customer  (cost=0.00..139648.00 rows=47171 width=11)
                 Filter: ((c_acctbal > 0.00) AND (("substring"((c_phone)::text, 1, 2) = '21'::text) OR ("substring"((c_phone)::text, 1, 2) = '29'::text) OR ("substring"((c_phone)::text, 1, 2) = '26'::text) OR ("substring"((c_phone)::text, 1, 2) = '34'::text) OR ("substring"((c_phone)::text, 1, 2) = '14'::text) OR ("substring"((c_phone)::text, 1, 2) = '15'::text) OR ("substring"((c_phone)::text, 1, 2) = '17'::text)))
   ->  GroupAggregate  (cost=2576412.47..2576584.87 rows=8620 width=30)
         ->  Sort  (cost=2576412.47..2576434.02 rows=8620 width=30)
               Sort Key: "substring"((customer.c_phone)::text, 1, 2)
               ->  Seq Scan on customer  (cost=0.00..2575849.01 rows=8620 width=30)
                     Filter: ((("substring"((c_phone)::text, 1, 2) = '21'::text) OR ("substring"((c_phone)::text, 1, 2) = '29'::text) OR ("substring"((c_phone)::text, 1, 2) = '26'::text) OR ("substring"((c_phone)::text, 1, 2) = '34'::text) OR ("substring"((c_phone)::text, 1, 2) = '14'::text) OR ("substring"((c_phone)::text, 1, 2) = '15'::text) OR ("substring"((c_phone)::text, 1, 2) = '17'::text)) AND (c_acctbal > $0) AND (NOT (subplan)))
                     SubPlan
                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..29.23 rows=18 width=124)
                             Index Cond: (o_custkey = $1)
(13 rows)

query 22 run 3
SET
                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2716178.40..2716178.42 rows=1 width=30)
   InitPlan
     ->  Aggregate  (cost=139765.93..139765.93 rows=1 width=11)
           ->  Seq Scan on customer  (cost=0.00..139648.00 rows=47171 width=11)
                 Filter: ((c_acctbal > 0.00) AND (("substring"((c_phone)::text, 1, 2) = '21'::text) OR ("substring"((c_phone)::text, 1, 2) = '29'::text) OR ("substring"((c_phone)::text, 1, 2) = '26'::text) OR ("substring"((c_phone)::text, 1, 2) = '34'::text) OR ("substring"((c_phone)::text, 1, 2) = '14'::text) OR ("substring"((c_phone)::text, 1, 2) = '15'::text) OR ("substring"((c_phone)::text, 1, 2) = '17'::text)))
   ->  GroupAggregate  (cost=2576412.47..2576584.87 rows=8620 width=30)
         ->  Sort  (cost=2576412.47..2576434.02 rows=8620 width=30)
               Sort Key: "substring"((customer.c_phone)::text, 1, 2)
               ->  Seq Scan on customer  (cost=0.00..2575849.01 rows=8620 width=30)
                     Filter: ((("substring"((c_phone)::text, 1, 2) = '21'::text) OR ("substring"((c_phone)::text, 1, 2) = '29'::text) OR ("substring"((c_phone)::text, 1, 2) = '26'::text) OR ("substring"((c_phone)::text, 1, 2) = '34'::text) OR ("substring"((c_phone)::text, 1, 2) = '14'::text) OR ("substring"((c_phone)::text, 1, 2) = '15'::text) OR ("substring"((c_phone)::text, 1, 2) = '17'::text)) AND (c_acctbal > $0) AND (NOT (subplan)))
                     SubPlan
                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..29.23 rows=18 width=124)
                             Index Cond: (o_custkey = $1)
(13 rows)

