query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1906122.85..1906123.06 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1906122.85..1906124.10 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=1906122.85..1906122.91 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=1906119.74..1906122.30 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=1905119.74..1905119.90 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312610.57 rows=14812729 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1906122.85..1906123.06 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1906122.85..1906124.10 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=1906122.85..1906122.91 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=1906119.74..1906122.30 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=1905119.74..1905119.90 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312610.57 rows=14812729 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1906122.85..1906123.06 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1906122.85..1906124.10 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=1906122.85..1906122.91 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=1906119.74..1906122.30 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=1905119.74..1905119.90 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312610.57 rows=14812729 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=913438.52..913438.52 rows=1 width=192)
   ->  Sort  (cost=913438.52..913438.52 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=366438.61..913438.51 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89211.63 rows=7958 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=366437.25..374438.56 rows=1600263 width=172)
                     ->  Sort  (cost=366437.25..370437.90 rows=1600263 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..113625.87 rows=1600263 width=172)
                                 ->  Nested Loop  (cost=0.29..1278.52 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.18 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.81 rows=81 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.98..69.99 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..69.97 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.67 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.84 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(37 rows)

query 2 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=913438.52..913438.52 rows=1 width=192)
   ->  Sort  (cost=913438.52..913438.52 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=366438.61..913438.51 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89211.63 rows=7958 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=366437.25..374438.56 rows=1600263 width=172)
                     ->  Sort  (cost=366437.25..370437.90 rows=1600263 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..113625.87 rows=1600263 width=172)
                                 ->  Nested Loop  (cost=0.29..1278.52 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.18 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.81 rows=81 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.98..69.99 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..69.97 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.67 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.84 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(37 rows)

query 2 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=913438.52..913438.52 rows=1 width=192)
   ->  Sort  (cost=913438.52..913438.52 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=366438.61..913438.51 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89211.63 rows=7958 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=366437.25..374438.56 rows=1600263 width=172)
                     ->  Sort  (cost=366437.25..370437.90 rows=1600263 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..113625.87 rows=1600263 width=172)
                                 ->  Nested Loop  (cost=0.29..1278.52 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.18 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.81 rows=81 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.98..69.99 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..69.97 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.67 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.84 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(37 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2184233.12..2184233.14 rows=10 width=44)
   ->  Sort  (cost=2184233.12..2191984.31 rows=3100477 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=2024218.61..2117232.92 rows=3100477 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=2024218.61..2031969.81 rows=3100477 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Gather  (cost=59412.22..1649048.52 rows=3100477 width=24)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=58412.22..1338000.82 rows=775119 width=24)
                                 ->  Hash Join  (cost=58411.65..376891.24 rows=357112 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308146.12 rows=1803294 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54698.28..54698.28 rows=297070 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54698.28 rows=297070 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 3 run 2
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2184233.12..2184233.14 rows=10 width=44)
   ->  Sort  (cost=2184233.12..2191984.31 rows=3100477 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=2024218.61..2117232.92 rows=3100477 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=2024218.61..2031969.81 rows=3100477 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Gather  (cost=59412.22..1649048.52 rows=3100477 width=24)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=58412.22..1338000.82 rows=775119 width=24)
                                 ->  Hash Join  (cost=58411.65..376891.24 rows=357112 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308146.12 rows=1803294 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54698.28..54698.28 rows=297070 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54698.28 rows=297070 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 3 run 3
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2184233.12..2184233.14 rows=10 width=44)
   ->  Sort  (cost=2184233.12..2191984.31 rows=3100477 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=2024218.61..2117232.92 rows=3100477 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=2024218.61..2031969.81 rows=3100477 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Gather  (cost=59412.22..1649048.52 rows=3100477 width=24)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=58412.22..1338000.82 rows=775119 width=24)
                                 ->  Hash Join  (cost=58411.65..376891.24 rows=357112 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308146.12 rows=1803294 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54698.28..54698.28 rows=297070 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54698.28 rows=297070 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 4 run 1
SET
SET
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=666003.23..666003.27 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=666003.23..666003.43 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=666003.23..666003.28 rows=20 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=666000.75..666002.80 rows=20 width=24)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=665000.75..665000.80 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=0.56..664322.06 rows=135738 width=16)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..317521.74 rows=135771 width=20)
                                       Filter: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 2
SET
SET
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=666003.23..666003.27 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=666003.23..666003.43 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=666003.23..666003.28 rows=20 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=666000.75..666002.80 rows=20 width=24)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=665000.75..665000.80 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=0.56..664322.06 rows=135738 width=16)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..317521.74 rows=135771 width=20)
                                       Filter: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 3
SET
SET
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=666003.23..666003.27 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=666003.23..666003.43 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=666003.23..666003.28 rows=20 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=666000.75..666002.80 rows=20 width=24)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=665000.75..665000.80 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=0.56..664322.06 rows=135738 width=16)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..317521.74 rows=135771 width=20)
                                       Filter: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=703357.88..703357.88 rows=1 width=58)
   ->  Sort  (cost=703357.88..703357.94 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=703356.44..703357.76 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=703356.44..703356.69 rows=100 width=58)
                     Sort Key: nation.n_name
                     ->  Gather  (cost=703117.73..703353.12 rows=100 width=58)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=702117.73..702343.12 rows=25 width=58)
                                 Group Key: nation.n_name
                                 ->  Sort  (cost=702117.73..702162.75 rows=18006 width=38)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=68047.95..700845.05 rows=18006 width=38)
                                             Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                             ->  Nested Loop  (cost=63326.95..692568.71 rows=450038 width=50)
                                                   ->  Hash Join  (cost=63326.38..384083.55 rows=112536 width=38)
                                                         Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317521.74 rows=562683 width=8)
                                                               Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Hash  (cost=59576.13..59576.13 rows=300020 width=38)
                                                               ->  Hash Join  (cost=2.53..59576.13 rows=300020 width=38)
                                                                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                                     ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=8)
                                                                     ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                                           ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                                                 Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                                 ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                             Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                             ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(35 rows)

query 5 run 2
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=703357.88..703357.88 rows=1 width=58)
   ->  Sort  (cost=703357.88..703357.94 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=703356.44..703357.76 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=703356.44..703356.69 rows=100 width=58)
                     Sort Key: nation.n_name
                     ->  Gather  (cost=703117.73..703353.12 rows=100 width=58)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=702117.73..702343.12 rows=25 width=58)
                                 Group Key: nation.n_name
                                 ->  Sort  (cost=702117.73..702162.75 rows=18006 width=38)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=68047.95..700845.05 rows=18006 width=38)
                                             Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                             ->  Nested Loop  (cost=63326.95..692568.71 rows=450038 width=50)
                                                   ->  Hash Join  (cost=63326.38..384083.55 rows=112536 width=38)
                                                         Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317521.74 rows=562683 width=8)
                                                               Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Hash  (cost=59576.13..59576.13 rows=300020 width=38)
                                                               ->  Hash Join  (cost=2.53..59576.13 rows=300020 width=38)
                                                                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                                     ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=8)
                                                                     ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                                           ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                                                 Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                                 ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                             Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                             ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(35 rows)

query 5 run 3
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=703357.88..703357.88 rows=1 width=58)
   ->  Sort  (cost=703357.88..703357.94 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=703356.44..703357.76 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=703356.44..703356.69 rows=100 width=58)
                     Sort Key: nation.n_name
                     ->  Gather  (cost=703117.73..703353.12 rows=100 width=58)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=702117.73..702343.12 rows=25 width=58)
                                 Group Key: nation.n_name
                                 ->  Sort  (cost=702117.73..702162.75 rows=18006 width=38)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=68047.95..700845.05 rows=18006 width=38)
                                             Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                             ->  Nested Loop  (cost=63326.95..692568.71 rows=450038 width=50)
                                                   ->  Hash Join  (cost=63326.38..384083.55 rows=112536 width=38)
                                                         Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317521.74 rows=562683 width=8)
                                                               Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Hash  (cost=59576.13..59576.13 rows=300020 width=38)
                                                               ->  Hash Join  (cost=2.53..59576.13 rows=300020 width=38)
                                                                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                                     ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=8)
                                                                     ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                                           ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                                                 Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                                 ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                             Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                             ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1090129.62..1090129.63 rows=1 width=32)
   ->  Aggregate  (cost=1090129.62..1090129.63 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=210595.82..1084142.87 rows=1197348 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..210296.48 rows=1197348 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 2
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1090129.62..1090129.63 rows=1 width=32)
   ->  Aggregate  (cost=1090129.62..1090129.63 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=210595.82..1084142.87 rows=1197348 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..210296.48 rows=1197348 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 3
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1090129.62..1090129.63 rows=1 width=32)
   ->  Aggregate  (cost=1090129.62..1090129.63 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=210595.82..1084142.87 rows=1197348 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..210296.48 rows=1197348 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1195570.11..1195570.19 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1195570.11..1196346.97 rows=10024 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=1195570.11..1195670.35 rows=40096 width=92)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Gather  (cost=1188057.48..1192504.54 rows=40096 width=92)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1187057.48..1187494.94 rows=10024 width=92)
                           Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Sort  (cost=1187057.48..1187094.91 rows=14974 width=72)
                                 Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=63052.95..1186019.02 rows=14974 width=72)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                       ->  Nested Loop  (cost=59275.55..1180241.77 rows=359808 width=46)
                                             ->  Hash Join  (cost=59274.98..375109.11 rows=300020 width=30)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298770.49 rows=3750250 width=8)
                                                   ->  Hash  (cost=57774.88..57774.88 rows=120008 width=30)
                                                         ->  Hash Join  (cost=1.40..57774.88 rows=120008 width=30)
                                                               Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=8)
                                                               ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=1 width=24)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                                   Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=3677.40..3677.40 rows=8000 width=30)
                                             ->  Hash Join  (cost=1.40..3677.40 rows=8000 width=30)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                               Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(35 rows)

query 7 run 2
SET
SET
SET
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1195570.11..1195570.19 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1195570.11..1196346.97 rows=10024 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=1195570.11..1195670.35 rows=40096 width=92)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Gather  (cost=1188057.48..1192504.54 rows=40096 width=92)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1187057.48..1187494.94 rows=10024 width=92)
                           Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Sort  (cost=1187057.48..1187094.91 rows=14974 width=72)
                                 Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=63052.95..1186019.02 rows=14974 width=72)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                       ->  Nested Loop  (cost=59275.55..1180241.77 rows=359808 width=46)
                                             ->  Hash Join  (cost=59274.98..375109.11 rows=300020 width=30)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298770.49 rows=3750250 width=8)
                                                   ->  Hash  (cost=57774.88..57774.88 rows=120008 width=30)
                                                         ->  Hash Join  (cost=1.40..57774.88 rows=120008 width=30)
                                                               Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=8)
                                                               ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=1 width=24)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                                   Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=3677.40..3677.40 rows=8000 width=30)
                                             ->  Hash Join  (cost=1.40..3677.40 rows=8000 width=30)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                               Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(35 rows)

query 7 run 3
SET
SET
SET
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1195570.11..1195570.19 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1195570.11..1196346.97 rows=10024 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=1195570.11..1195670.35 rows=40096 width=92)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Gather  (cost=1188057.48..1192504.54 rows=40096 width=92)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1187057.48..1187494.94 rows=10024 width=92)
                           Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Sort  (cost=1187057.48..1187094.91 rows=14974 width=72)
                                 Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=63052.95..1186019.02 rows=14974 width=72)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                       ->  Nested Loop  (cost=59275.55..1180241.77 rows=359808 width=46)
                                             ->  Hash Join  (cost=59274.98..375109.11 rows=300020 width=30)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298770.49 rows=3750250 width=8)
                                                   ->  Hash  (cost=57774.88..57774.88 rows=120008 width=30)
                                                         ->  Hash Join  (cost=1.40..57774.88 rows=120008 width=30)
                                                               Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=8)
                                                               ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=1 width=24)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                                   Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=3677.40..3677.40 rows=8000 width=30)
                                             ->  Hash Join  (cost=1.40..3677.40 rows=8000 width=30)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                               Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(35 rows)

query 8 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=505035.55..505035.63 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=505035.55..505234.04 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=505035.55..505059.61 rows=9624 width=72)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Gather  (cost=503252.47..504398.80 rows=9624 width=72)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=502252.47..502436.40 rows=2406 width=72)
                           Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=502252.47..502267.56 rows=6036 width=46)
                                 Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=67799.95..501873.43 rows=6036 width=46)
                                       Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                       ->  Hash Join  (cost=67798.38..501758.70 rows=6036 width=20)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Hash Join  (cost=63327.38..497204.70 rows=6036 width=20)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Nested Loop  (cost=1.00..433704.79 rows=30178 width=24)
                                                         ->  Nested Loop  (cost=0.56..191337.26 rows=99982 width=20)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..47230.88 rows=3333 width=4)
                                                                     Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..42.92 rows=32 width=24)
                                                                     Index Cond: (l_partkey = part.p_partkey)
                                                         ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                               Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Hash  (cost=59576.13..59576.13 rows=300020 width=4)
                                                         ->  Hash Join  (cost=2.53..59576.13 rows=300020 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=8)
                                                               ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(41 rows)

query 8 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=505035.55..505035.63 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=505035.55..505234.04 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=505035.55..505059.61 rows=9624 width=72)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Gather  (cost=503252.47..504398.80 rows=9624 width=72)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=502252.47..502436.40 rows=2406 width=72)
                           Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=502252.47..502267.56 rows=6036 width=46)
                                 Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=67799.95..501873.43 rows=6036 width=46)
                                       Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                       ->  Hash Join  (cost=67798.38..501758.70 rows=6036 width=20)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Hash Join  (cost=63327.38..497204.70 rows=6036 width=20)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Nested Loop  (cost=1.00..433704.79 rows=30178 width=24)
                                                         ->  Nested Loop  (cost=0.56..191337.26 rows=99982 width=20)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..47230.88 rows=3333 width=4)
                                                                     Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..42.92 rows=32 width=24)
                                                                     Index Cond: (l_partkey = part.p_partkey)
                                                         ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                               Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Hash  (cost=59576.13..59576.13 rows=300020 width=4)
                                                         ->  Hash Join  (cost=2.53..59576.13 rows=300020 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=8)
                                                               ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(41 rows)

query 8 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=505035.55..505035.63 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=505035.55..505234.04 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=505035.55..505059.61 rows=9624 width=72)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Gather  (cost=503252.47..504398.80 rows=9624 width=72)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=502252.47..502436.40 rows=2406 width=72)
                           Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=502252.47..502267.56 rows=6036 width=46)
                                 Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=67799.95..501873.43 rows=6036 width=46)
                                       Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                       ->  Hash Join  (cost=67798.38..501758.70 rows=6036 width=20)
                                             Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                             ->  Hash Join  (cost=63327.38..497204.70 rows=6036 width=20)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Nested Loop  (cost=1.00..433704.79 rows=30178 width=24)
                                                         ->  Nested Loop  (cost=0.56..191337.26 rows=99982 width=20)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..47230.88 rows=3333 width=4)
                                                                     Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..42.92 rows=32 width=24)
                                                                     Index Cond: (l_partkey = part.p_partkey)
                                                         ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                               Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Hash  (cost=59576.13..59576.13 rows=300020 width=4)
                                                         ->  Hash Join  (cost=2.53..59576.13 rows=300020 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=8)
                                                               ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(41 rows)

query 9 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=120822.28..120822.31 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=120822.28..120823.04 rows=26 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=120822.28..120822.34 rows=24 width=66)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Gather  (cost=120819.11..120821.73 rows=24 width=66)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=119819.11..119819.33 rows=6 width=66)
                           Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=119819.11..119819.12 rows=6 width=57)
                                 Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                                 ->  Hash Join  (cost=3.29..119819.03 rows=6 width=57)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=1.73..119817.35 rows=6 width=31)
                                             ->  Nested Loop  (cost=1.29..119802.31 rows=6 width=31)
                                                   ->  Nested Loop  (cost=1.00..119788.30 rows=6 width=35)
                                                         ->  Nested Loop  (cost=0.43..64858.61 rows=20206 width=18)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..47230.88 rows=5050 width=4)
                                                                     Filter: ((p_name)::text ~~ '%navy%'::text)
                                                               ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.30 rows=19 width=14)
                                                                     Index Cond: (ps_partkey = part.p_partkey)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                                               Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                                   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                                         Index Cond: (s_suppkey = lineitem.l_suppkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                                   Index Cond: (o_orderkey = lineitem.l_orderkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 9 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=120822.28..120822.31 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=120822.28..120823.04 rows=26 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=120822.28..120822.34 rows=24 width=66)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Gather  (cost=120819.11..120821.73 rows=24 width=66)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=119819.11..119819.33 rows=6 width=66)
                           Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=119819.11..119819.12 rows=6 width=57)
                                 Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                                 ->  Hash Join  (cost=3.29..119819.03 rows=6 width=57)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=1.73..119817.35 rows=6 width=31)
                                             ->  Nested Loop  (cost=1.29..119802.31 rows=6 width=31)
                                                   ->  Nested Loop  (cost=1.00..119788.30 rows=6 width=35)
                                                         ->  Nested Loop  (cost=0.43..64858.61 rows=20206 width=18)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..47230.88 rows=5050 width=4)
                                                                     Filter: ((p_name)::text ~~ '%navy%'::text)
                                                               ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.30 rows=19 width=14)
                                                                     Index Cond: (ps_partkey = part.p_partkey)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                                               Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                                   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                                         Index Cond: (s_suppkey = lineitem.l_suppkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                                   Index Cond: (o_orderkey = lineitem.l_orderkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 9 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=120822.28..120822.31 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=120822.28..120823.04 rows=26 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=120822.28..120822.34 rows=24 width=66)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Gather  (cost=120819.11..120821.73 rows=24 width=66)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=119819.11..119819.33 rows=6 width=66)
                           Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=119819.11..119819.12 rows=6 width=57)
                                 Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                                 ->  Hash Join  (cost=3.29..119819.03 rows=6 width=57)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=1.73..119817.35 rows=6 width=31)
                                             ->  Nested Loop  (cost=1.29..119802.31 rows=6 width=31)
                                                   ->  Nested Loop  (cost=1.00..119788.30 rows=6 width=35)
                                                         ->  Nested Loop  (cost=0.43..64858.61 rows=20206 width=18)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..47230.88 rows=5050 width=4)
                                                                     Filter: ((p_name)::text ~~ '%navy%'::text)
                                                               ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.30 rows=19 width=14)
                                                                     Index Cond: (ps_partkey = part.p_partkey)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                                               Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                                   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                                         Index Cond: (s_suppkey = lineitem.l_suppkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                                   Index Cond: (o_orderkey = lineitem.l_orderkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 10 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1020437.11..1020437.16 rows=20 width=201)
   ->  Sort  (cost=1020437.11..1021799.59 rows=544994 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=990947.68..1005935.01 rows=544994 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Sort  (cost=990947.68..992310.16 rows=544994 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     ->  Gather  (cost=102930.42..907885.48 rows=544994 width=181)
                           Workers Planned: 4
                           ->  Hash Join  (cost=101930.42..852386.08 rows=136248 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=101928.86..850511.10 rows=136248 width=159)
                                       ->  Hash Join  (cost=101928.30..454797.27 rows=136682 width=151)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..317521.74 rows=136682 width=8)
                                                   Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Hash  (cost=50948.02..50948.02 rows=1500102 width=147)
                                                   ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=147)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.89 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 2
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1020437.11..1020437.16 rows=20 width=201)
   ->  Sort  (cost=1020437.11..1021799.59 rows=544994 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=990947.68..1005935.01 rows=544994 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Sort  (cost=990947.68..992310.16 rows=544994 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     ->  Gather  (cost=102930.42..907885.48 rows=544994 width=181)
                           Workers Planned: 4
                           ->  Hash Join  (cost=101930.42..852386.08 rows=136248 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=101928.86..850511.10 rows=136248 width=159)
                                       ->  Hash Join  (cost=101928.30..454797.27 rows=136682 width=151)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..317521.74 rows=136682 width=8)
                                                   Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Hash  (cost=50948.02..50948.02 rows=1500102 width=147)
                                                   ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=147)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.89 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 3
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1020437.11..1020437.16 rows=20 width=201)
   ->  Sort  (cost=1020437.11..1021799.59 rows=544994 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=990947.68..1005935.01 rows=544994 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Sort  (cost=990947.68..992310.16 rows=544994 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     ->  Gather  (cost=102930.42..907885.48 rows=544994 width=181)
                           Workers Planned: 4
                           ->  Hash Join  (cost=101930.42..852386.08 rows=136248 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=101928.86..850511.10 rows=136248 width=159)
                                       ->  Hash Join  (cost=101928.30..454797.27 rows=136682 width=151)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..317521.74 rows=136682 width=8)
                                                   Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Hash  (cost=50948.02..50948.02 rows=1500102 width=147)
                                                   ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=147)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.89 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=85495.09..85495.09 rows=1 width=36)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=18684.46..18684.47 rows=1 width=32)
           ->  Gather  (cost=18684.34..18684.45 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17684.34..17684.35 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..16272.35 rows=188266 width=10)
                             ->  Hash Join  (cost=1.32..3054.68 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.81 rows=81 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=66810.62..67610.75 rows=320053 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=54008.50..65210.35 rows=320053 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $1)
               ->  Sort  (cost=54008.50..54808.63 rows=320053 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24742.93 rows=320053 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.81 rows=81 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(32 rows)

query 11 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=85495.09..85495.09 rows=1 width=36)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=18684.46..18684.47 rows=1 width=32)
           ->  Gather  (cost=18684.34..18684.45 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17684.34..17684.35 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..16272.35 rows=188266 width=10)
                             ->  Hash Join  (cost=1.32..3054.68 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.81 rows=81 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=66810.62..67610.75 rows=320053 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=54008.50..65210.35 rows=320053 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $1)
               ->  Sort  (cost=54008.50..54808.63 rows=320053 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24742.93 rows=320053 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.81 rows=81 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(32 rows)

query 11 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=85495.09..85495.09 rows=1 width=36)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=18684.46..18684.47 rows=1 width=32)
           ->  Gather  (cost=18684.34..18684.45 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17684.34..17684.35 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..16272.35 rows=188266 width=10)
                             ->  Hash Join  (cost=1.32..3054.68 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.81 rows=81 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=66810.62..67610.75 rows=320053 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=54008.50..65210.35 rows=320053 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $1)
               ->  Sort  (cost=54008.50..54808.63 rows=320053 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24742.93 rows=320053 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.81 rows=81 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(32 rows)

query 12 run 1
SET
SET
SET
                                                                                                                          QUERY PLAN                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1648826.11..1648826.16 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1648826.11..1648826.46 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=1648826.11..1648826.18 rows=28 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Gather  (cost=1647393.49..1648825.44 rows=28 width=27)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1646393.49..1647822.64 rows=7 width=27)
                           Group Key: lineitem.l_shipmode
                           ->  Sort  (cost=1646393.49..1646572.13 rows=71454 width=27)
                                 Sort Key: lineitem.l_shipmode
                                 ->  Nested Loop  (cost=0.43..1640632.61 rows=71454 width=27)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1462584.64 rows=71454 width=15)
                                             Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(16 rows)

query 12 run 2
SET
SET
SET
                                                                                                                          QUERY PLAN                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1648826.11..1648826.16 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1648826.11..1648826.46 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=1648826.11..1648826.18 rows=28 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Gather  (cost=1647393.49..1648825.44 rows=28 width=27)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1646393.49..1647822.64 rows=7 width=27)
                           Group Key: lineitem.l_shipmode
                           ->  Sort  (cost=1646393.49..1646572.13 rows=71454 width=27)
                                 Sort Key: lineitem.l_shipmode
                                 ->  Nested Loop  (cost=0.43..1640632.61 rows=71454 width=27)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1462584.64 rows=71454 width=15)
                                             Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(16 rows)

query 12 run 3
SET
SET
SET
                                                                                                                          QUERY PLAN                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1648826.11..1648826.16 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1648826.11..1648826.46 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=1648826.11..1648826.18 rows=28 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Gather  (cost=1647393.49..1648825.44 rows=28 width=27)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1646393.49..1647822.64 rows=7 width=27)
                           Group Key: lineitem.l_shipmode
                           ->  Sort  (cost=1646393.49..1646572.13 rows=71454 width=27)
                                 Sort Key: lineitem.l_shipmode
                                 ->  Nested Loop  (cost=0.43..1640632.61 rows=71454 width=27)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1462584.64 rows=71454 width=15)
                                             Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(16 rows)

query 13 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1048464.14..1048464.14 rows=1 width=16)
   ->  Sort  (cost=1048464.14..1048464.64 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1048461.14..1048463.14 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=0.86..1025959.61 rows=1500102 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=0.86..935966.10 rows=14998499 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28675.96 rows=1500102 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716106.88 rows=14998499 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 2
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1048464.14..1048464.14 rows=1 width=16)
   ->  Sort  (cost=1048464.14..1048464.64 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1048461.14..1048463.14 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=0.86..1025959.61 rows=1500102 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=0.86..935966.10 rows=14998499 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28675.96 rows=1500102 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716106.88 rows=14998499 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 3
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1048464.14..1048464.14 rows=1 width=16)
   ->  Sort  (cost=1048464.14..1048464.64 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1048461.14..1048463.14 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=0.86..1025959.61 rows=1500102 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=0.86..935966.10 rows=14998499 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28675.96 rows=1500102 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716106.88 rows=14998499 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=836685.24..836685.26 rows=1 width=32)
   ->  Aggregate  (cost=836685.24..836685.26 rows=1 width=32)
         ->  Hash Join  (cost=112290.86..822885.51 rows=788556 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=12638.76..690031.07 rows=788556 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12441.63 rows=788556 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.60..60980.60 rows=1999960 width=25)
                     ->  Seq Scan on part  (cost=0.00..60980.60 rows=1999960 width=25)
(10 rows)

query 14 run 2
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=836685.24..836685.26 rows=1 width=32)
   ->  Aggregate  (cost=836685.24..836685.26 rows=1 width=32)
         ->  Hash Join  (cost=112290.86..822885.51 rows=788556 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=12638.76..690031.07 rows=788556 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12441.63 rows=788556 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.60..60980.60 rows=1999960 width=25)
                     ->  Seq Scan on part  (cost=0.00..60980.60 rows=1999960 width=25)
(10 rows)

query 14 run 3
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=836685.24..836685.26 rows=1 width=32)
   ->  Aggregate  (cost=836685.24..836685.26 rows=1 width=32)
         ->  Hash Join  (cost=112290.86..822885.51 rows=788556 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=12638.76..690031.07 rows=788556 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12441.63 rows=788556 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.60..60980.60 rows=1999960 width=25)
                     ->  Seq Scan on part  (cost=0.00..60980.60 rows=1999960 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2650042.45..2650042.97 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1209112.19..1209112.20 rows=1 width=32)
           ->  HashAggregate  (cost=1206619.64..1207865.92 rows=99702 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=35310.82..1184586.22 rows=2203342 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34759.99 rows=2203342 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1440930.25..1493121.41 rows=99702 width=103)
         Merge Cond: (lineitem.l_suppkey = supplier.s_suppkey)
         ->  GroupAggregate  (cost=1440929.96..1486492.33 rows=99702 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Sort  (cost=1440929.96..1446438.31 rows=2203342 width=16)
                     Sort Key: lineitem.l_suppkey
                     ->  Bitmap Heap Scan on lineitem  (cost=35310.82..1184586.22 rows=2203342 width=16)
                           Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34759.99 rows=2203342 width=0)
                                 Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=71)
(21 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2650042.45..2650042.97 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1209112.19..1209112.20 rows=1 width=32)
           ->  HashAggregate  (cost=1206619.64..1207865.92 rows=99702 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=35310.82..1184586.22 rows=2203342 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34759.99 rows=2203342 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1440930.25..1493121.41 rows=99702 width=103)
         Merge Cond: (lineitem.l_suppkey = supplier.s_suppkey)
         ->  GroupAggregate  (cost=1440929.96..1486492.33 rows=99702 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Sort  (cost=1440929.96..1446438.31 rows=2203342 width=16)
                     Sort Key: lineitem.l_suppkey
                     ->  Bitmap Heap Scan on lineitem  (cost=35310.82..1184586.22 rows=2203342 width=16)
                           Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34759.99 rows=2203342 width=0)
                                 Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=71)
(21 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2650042.45..2650042.97 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1209112.19..1209112.20 rows=1 width=32)
           ->  HashAggregate  (cost=1206619.64..1207865.92 rows=99702 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=35310.82..1184586.22 rows=2203342 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34759.99 rows=2203342 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1440930.25..1493121.41 rows=99702 width=103)
         Merge Cond: (lineitem.l_suppkey = supplier.s_suppkey)
         ->  GroupAggregate  (cost=1440929.96..1486492.33 rows=99702 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Sort  (cost=1440929.96..1446438.31 rows=2203342 width=16)
                     Sort Key: lineitem.l_suppkey
                     ->  Bitmap Heap Scan on lineitem  (cost=35310.82..1184586.22 rows=2203342 width=16)
                           Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34759.99 rows=2203342 width=0)
                                 Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=71)
(21 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=360900.19..360900.20 rows=1 width=44)
   ->  Sort  (cost=360900.19..361282.58 rows=152956 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=351272.13..360135.41 rows=152956 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=351272.13..352738.87 rows=586698 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=90947.90..284745.83 rows=586698 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176399.95 rows=4000657 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=83810.25..83810.25 rows=293295 width=40)
                                 ->  Gather  (cost=1000.00..83810.25 rows=293295 width=40)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.75 rows=73324 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=360900.19..360900.20 rows=1 width=44)
   ->  Sort  (cost=360900.19..361282.58 rows=152956 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=351272.13..360135.41 rows=152956 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=351272.13..352738.87 rows=586698 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=90947.90..284745.83 rows=586698 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176399.95 rows=4000657 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=83810.25..83810.25 rows=293295 width=40)
                                 ->  Gather  (cost=1000.00..83810.25 rows=293295 width=40)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.75 rows=73324 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=360900.19..360900.20 rows=1 width=44)
   ->  Sort  (cost=360900.19..361282.58 rows=152956 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=351272.13..360135.41 rows=152956 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=351272.13..352738.87 rows=586698 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=90947.90..284745.83 rows=586698 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176399.95 rows=4000657 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=83810.25..83810.25 rows=293295 width=40)
                                 ->  Gather  (cost=1000.00..83810.25 rows=293295 width=40)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.75 rows=73324 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5324364.55..5324364.56 rows=1 width=32)
   ->  Aggregate  (cost=5324364.55..5324364.56 rows=1 width=32)
         ->  Merge Join  (cost=5196107.29..5324319.20 rows=18141 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=5112400.48..5216079.88 rows=1885080 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=5112400.48..5131251.28 rows=7540320 width=36)
                           Sort Key: lineitem_1.l_partkey
                           ->  Gather  (cost=3228441.10..4118517.15 rows=7540320 width=36)
                                 Workers Planned: 4
                                 ->  Partial GroupAggregate  (cost=3227441.10..3363485.15 rows=1885080 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Sort  (cost=3227441.10..3264934.62 rows=14997406 width=9)
                                             Sort Key: lineitem_1.l_partkey
                                             ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275117.06 rows=14997406 width=9)
               ->  Sort  (cost=83706.81..83851.17 rows=57741 width=21)
                     Sort Key: lineitem.l_partkey
                     ->  Gather  (cost=1000.57..79140.28 rows=57741 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.56..72366.18 rows=14435 width=21)
                                 ->  Parallel Seq Scan on part  (cost=0.00..48480.85 rows=481 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..49.34 rows=32 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(25 rows)

query 17 run 2
SET
SET
SET
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5324364.55..5324364.56 rows=1 width=32)
   ->  Aggregate  (cost=5324364.55..5324364.56 rows=1 width=32)
         ->  Merge Join  (cost=5196107.29..5324319.20 rows=18141 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=5112400.48..5216079.88 rows=1885080 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=5112400.48..5131251.28 rows=7540320 width=36)
                           Sort Key: lineitem_1.l_partkey
                           ->  Gather  (cost=3228441.10..4118517.15 rows=7540320 width=36)
                                 Workers Planned: 4
                                 ->  Partial GroupAggregate  (cost=3227441.10..3363485.15 rows=1885080 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Sort  (cost=3227441.10..3264934.62 rows=14997406 width=9)
                                             Sort Key: lineitem_1.l_partkey
                                             ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275117.06 rows=14997406 width=9)
               ->  Sort  (cost=83706.81..83851.17 rows=57741 width=21)
                     Sort Key: lineitem.l_partkey
                     ->  Gather  (cost=1000.57..79140.28 rows=57741 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.56..72366.18 rows=14435 width=21)
                                 ->  Parallel Seq Scan on part  (cost=0.00..48480.85 rows=481 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..49.34 rows=32 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(25 rows)

query 17 run 3
SET
SET
SET
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5324364.55..5324364.56 rows=1 width=32)
   ->  Aggregate  (cost=5324364.55..5324364.56 rows=1 width=32)
         ->  Merge Join  (cost=5196107.29..5324319.20 rows=18141 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=5112400.48..5216079.88 rows=1885080 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=5112400.48..5131251.28 rows=7540320 width=36)
                           Sort Key: lineitem_1.l_partkey
                           ->  Gather  (cost=3228441.10..4118517.15 rows=7540320 width=36)
                                 Workers Planned: 4
                                 ->  Partial GroupAggregate  (cost=3227441.10..3363485.15 rows=1885080 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Sort  (cost=3227441.10..3264934.62 rows=14997406 width=9)
                                             Sort Key: lineitem_1.l_partkey
                                             ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275117.06 rows=14997406 width=9)
               ->  Sort  (cost=83706.81..83851.17 rows=57741 width=21)
                     Sort Key: lineitem.l_partkey
                     ->  Gather  (cost=1000.57..79140.28 rows=57741 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.56..72366.18 rows=14435 width=21)
                                 ->  Parallel Seq Scan on part  (cost=0.00..48480.85 rows=481 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..49.34 rows=32 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(25 rows)

query 18 run 1
SET
SET
SET
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=13546649.62..13546649.87 rows=100 width=71)
   ->  Sort  (cost=13546649.62..13621636.65 rows=29994812 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=11725386.20..12400269.47 rows=29994812 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=11725386.20..11800373.23 rows=29994812 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=78605.49..7407138.31 rows=29994812 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=116.20..6459850.83 rows=29994812 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Semi Join  (cost=1.00..3719542.17 rows=7500499 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..547980.41 rows=15000998 width=20)
                                       ->  Materialize  (cost=0.56..2946591.70 rows=14997406 width=4)
                                             ->  GroupAggregate  (cost=0.56..2759124.12 rows=14997406 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271708.43 rows=59989624 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2271708.43 rows=59989624 width=9)
                           ->  Hash  (cost=50948.02..50948.02 rows=1500102 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=23)
(22 rows)

query 18 run 2
SET
SET
SET
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=13546649.62..13546649.87 rows=100 width=71)
   ->  Sort  (cost=13546649.62..13621636.65 rows=29994812 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=11725386.20..12400269.47 rows=29994812 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=11725386.20..11800373.23 rows=29994812 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=78605.49..7407138.31 rows=29994812 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=116.20..6459850.83 rows=29994812 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Semi Join  (cost=1.00..3719542.17 rows=7500499 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..547980.41 rows=15000998 width=20)
                                       ->  Materialize  (cost=0.56..2946591.70 rows=14997406 width=4)
                                             ->  GroupAggregate  (cost=0.56..2759124.12 rows=14997406 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271708.43 rows=59989624 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2271708.43 rows=59989624 width=9)
                           ->  Hash  (cost=50948.02..50948.02 rows=1500102 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=23)
(22 rows)

query 18 run 3
SET
SET
SET
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=13546649.62..13546649.87 rows=100 width=71)
   ->  Sort  (cost=13546649.62..13621636.65 rows=29994812 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=11725386.20..12400269.47 rows=29994812 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=11725386.20..11800373.23 rows=29994812 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=78605.49..7407138.31 rows=29994812 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=116.20..6459850.83 rows=29994812 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Semi Join  (cost=1.00..3719542.17 rows=7500499 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..547980.41 rows=15000998 width=20)
                                       ->  Materialize  (cost=0.56..2946591.70 rows=14997406 width=4)
                                             ->  GroupAggregate  (cost=0.56..2759124.12 rows=14997406 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271708.43 rows=59989624 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2271708.43 rows=59989624 width=9)
                           ->  Hash  (cost=50948.02..50948.02 rows=1500102 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..50948.02 rows=1500102 width=23)
(22 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=122783.37..122783.38 rows=1 width=32)
   ->  Finalize Aggregate  (cost=122783.37..122783.38 rows=1 width=32)
         ->  Gather  (cost=122782.94..122783.35 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=121782.94..121782.95 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..121780.90 rows=271 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.57 rows=1200 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..49.62 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=122783.37..122783.38 rows=1 width=32)
   ->  Finalize Aggregate  (cost=122783.37..122783.38 rows=1 width=32)
         ->  Gather  (cost=122782.94..122783.35 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=121782.94..121782.95 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..121780.90 rows=271 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.57 rows=1200 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..49.62 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=122783.37..122783.38 rows=1 width=32)
   ->  Finalize Aggregate  (cost=122783.37..122783.38 rows=1 width=32)
         ->  Gather  (cost=122782.94..122783.35 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=121782.94..121782.95 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..121780.90 rows=271 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.57 rows=1200 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..49.62 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2935120.50..2935120.50 rows=1 width=51)
   ->  Sort  (cost=2935120.50..2935125.50 rows=2000 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2687459.73..2935110.50 rows=2000 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=55)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=59)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2687410.44..2923837.42 rows=150 width=8)
                     ->  Merge Join  (cost=2687410.44..2923836.67 rows=150 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2533739.97..2695270.69 rows=4805457 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=2533739.97..2556102.19 rows=8944886 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=143345.65..1402661.94 rows=8944886 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..141109.42 rows=8944886 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=153670.47..154608.14 rows=375070 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=1000.43..118944.98 rows=375070 width=16)
                                       ->  Gather  (cost=1000.00..50251.07 rows=20202 width=4)
                                             Workers Planned: 4
                                             ->  Parallel Seq Scan on part  (cost=0.00..47230.88 rows=5050 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.21 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(33 rows)

query 20 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2935120.50..2935120.50 rows=1 width=51)
   ->  Sort  (cost=2935120.50..2935125.50 rows=2000 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2687459.73..2935110.50 rows=2000 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=55)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=59)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2687410.44..2923837.42 rows=150 width=8)
                     ->  Merge Join  (cost=2687410.44..2923836.67 rows=150 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2533739.97..2695270.69 rows=4805457 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=2533739.97..2556102.19 rows=8944886 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=143345.65..1402661.94 rows=8944886 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..141109.42 rows=8944886 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=153670.47..154608.14 rows=375070 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=1000.43..118944.98 rows=375070 width=16)
                                       ->  Gather  (cost=1000.00..50251.07 rows=20202 width=4)
                                             Workers Planned: 4
                                             ->  Parallel Seq Scan on part  (cost=0.00..47230.88 rows=5050 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.21 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(33 rows)

query 20 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2935120.50..2935120.50 rows=1 width=51)
   ->  Sort  (cost=2935120.50..2935125.50 rows=2000 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2687459.73..2935110.50 rows=2000 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=55)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=59)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2687410.44..2923837.42 rows=150 width=8)
                     ->  Merge Join  (cost=2687410.44..2923836.67 rows=150 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2533739.97..2695270.69 rows=4805457 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=2533739.97..2556102.19 rows=8944886 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=143345.65..1402661.94 rows=8944886 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..141109.42 rows=8944886 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=153670.47..154608.14 rows=375070 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=1000.43..118944.98 rows=375070 width=16)
                                       ->  Gather  (cost=1000.00..50251.07 rows=20202 width=4)
                                             Workers Planned: 4
                                             ->  Parallel Seq Scan on part  (cost=0.00..47230.88 rows=5050 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.21 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(33 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1991068.39..1991068.40 rows=1 width=34)
   ->  Sort  (cost=1991068.39..1991068.40 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1991068.36..1991068.38 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1991068.36..1991068.37 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=3325.02..1991068.35 rows=1 width=26)
                           ->  Nested Loop  (cost=3324.46..1991062.42 rows=1 width=34)
                                 ->  Gather  (cost=3324.02..1991059.38 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=2324.02..1990059.28 rows=1 width=38)
                                             ->  Hash Join  (cost=2323.46..1335680.44 rows=199966 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312610.57 rows=4999135 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.23 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 21 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1991068.39..1991068.40 rows=1 width=34)
   ->  Sort  (cost=1991068.39..1991068.40 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1991068.36..1991068.38 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1991068.36..1991068.37 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=3325.02..1991068.35 rows=1 width=26)
                           ->  Nested Loop  (cost=3324.46..1991062.42 rows=1 width=34)
                                 ->  Gather  (cost=3324.02..1991059.38 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=2324.02..1990059.28 rows=1 width=38)
                                             ->  Hash Join  (cost=2323.46..1335680.44 rows=199966 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312610.57 rows=4999135 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.23 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 21 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1991068.39..1991068.40 rows=1 width=34)
   ->  Sort  (cost=1991068.39..1991068.40 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1991068.36..1991068.38 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1991068.36..1991068.37 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=3325.02..1991068.35 rows=1 width=26)
                           ->  Nested Loop  (cost=3324.46..1991062.42 rows=1 width=34)
                                 ->  Gather  (cost=3324.02..1991059.38 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=2324.02..1990059.28 rows=1 width=38)
                                             ->  Hash Join  (cost=2323.46..1335680.44 rows=199966 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312610.57 rows=4999135 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.23 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 22 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=132724.34..132724.36 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Finalize Aggregate  (cost=46821.76..46821.77 rows=1 width=32)
           ->  Gather  (cost=46821.33..46821.74 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45821.33..45821.34 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.42 rows=11964 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=85902.56..86119.32 rows=7882 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=85902.56..85922.27 rows=7882 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..85392.43 rows=7882 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75324.68 rows=17501 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.99 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

query 22 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=132724.34..132724.36 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Finalize Aggregate  (cost=46821.76..46821.77 rows=1 width=32)
           ->  Gather  (cost=46821.33..46821.74 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45821.33..45821.34 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.42 rows=11964 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=85902.56..86119.32 rows=7882 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=85902.56..85922.27 rows=7882 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..85392.43 rows=7882 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75324.68 rows=17501 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.99 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

query 22 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=132724.34..132724.36 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Finalize Aggregate  (cost=46821.76..46821.77 rows=1 width=32)
           ->  Gather  (cost=46821.33..46821.74 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45821.33..45821.34 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.42 rows=11964 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=85902.56..86119.32 rows=7882 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=85902.56..85922.27 rows=7882 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..85392.43 rows=7882 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75324.68 rows=17501 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.99 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

