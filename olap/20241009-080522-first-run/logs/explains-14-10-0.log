query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3948501.10..3948501.10 rows=1 width=236)
   ->  Sort  (cost=3948501.10..3948501.12 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3948500.91..3948501.07 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874931.75 rows=59244833 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 2
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3948501.10..3948501.10 rows=1 width=236)
   ->  Sort  (cost=3948501.10..3948501.12 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3948500.91..3948501.07 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874931.75 rows=59244833 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 3
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3948501.10..3948501.10 rows=1 width=236)
   ->  Sort  (cost=3948501.10..3948501.12 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3948500.91..3948501.07 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874931.75 rows=59244833 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=870650.30..870650.31 rows=1 width=192)
   ->  Sort  (cost=870650.30..870650.31 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=361864.50..870650.29 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89212.61 rows=7685 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=361864.07..369866.55 rows=1600495 width=172)
                     ->  Sort  (cost=361864.07..365865.31 rows=1600495 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..109013.62 rows=1600495 width=172)
                                 ->  Nested Loop  (cost=0.29..1239.22 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..207.32 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.58 rows=81 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(37 rows)

query 2 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=870650.30..870650.31 rows=1 width=192)
   ->  Sort  (cost=870650.30..870650.31 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=361864.50..870650.29 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89212.61 rows=7685 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=361864.07..369866.55 rows=1600495 width=172)
                     ->  Sort  (cost=361864.07..365865.31 rows=1600495 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..109013.62 rows=1600495 width=172)
                                 ->  Nested Loop  (cost=0.29..1239.22 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..207.32 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.58 rows=81 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(37 rows)

query 2 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=870650.30..870650.31 rows=1 width=192)
   ->  Sort  (cost=870650.30..870650.31 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=361864.50..870650.29 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89212.61 rows=7685 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=361864.07..369866.55 rows=1600495 width=172)
                     ->  Sort  (cost=361864.07..365865.31 rows=1600495 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..109013.62 rows=1600495 width=172)
                                 ->  Nested Loop  (cost=0.29..1239.22 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..207.32 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.58 rows=81 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(37 rows)

query 3 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3186487.82..3186487.85 rows=10 width=44)
   ->  Sort  (cost=3186487.82..3194370.94 rows=3153247 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3041979.59..3118347.29 rows=3153247 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 32
               ->  Hash Join  (cost=518784.73..2876187.77 rows=3153247 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874931.75 rows=32843951 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=493750.88..493750.88 rows=1440148 width=12)
                           ->  Hash Join  (cost=123517.13..493750.88 rows=1440148 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=65072.60..416394.90 rows=7204344 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..63271.51 rows=7204344 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54696.50..54696.50 rows=299842 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54696.50 rows=299842 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3186487.82..3186487.85 rows=10 width=44)
   ->  Sort  (cost=3186487.82..3194370.94 rows=3153247 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3041979.59..3118347.29 rows=3153247 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 32
               ->  Hash Join  (cost=518784.73..2876187.77 rows=3153247 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874931.75 rows=32843951 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=493750.88..493750.88 rows=1440148 width=12)
                           ->  Hash Join  (cost=123517.13..493750.88 rows=1440148 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=65072.60..416394.90 rows=7204344 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..63271.51 rows=7204344 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54696.50..54696.50 rows=299842 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54696.50 rows=299842 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3186487.82..3186487.85 rows=10 width=44)
   ->  Sort  (cost=3186487.82..3194370.94 rows=3153247 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3041979.59..3118347.29 rows=3153247 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 32
               ->  Hash Join  (cost=518784.73..2876187.77 rows=3153247 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874931.75 rows=32843951 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=493750.88..493750.88 rows=1440148 width=12)
                           ->  Hash Join  (cost=123517.13..493750.88 rows=1440148 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=65072.60..416394.90 rows=7204344 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..63271.51 rows=7204344 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54696.50..54696.50 rows=299842 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54696.50 rows=299842 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 4 run 1
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1686819.28..1686819.29 rows=1 width=24)
   ->  Sort  (cost=1686819.28..1686819.30 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=1686819.21..1686819.26 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=6452.90..1684023.30 rows=559181 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=6452.33..276110.67 rows=559356 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6312.50 rows=559356 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.83 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 4 run 2
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1686819.28..1686819.29 rows=1 width=24)
   ->  Sort  (cost=1686819.28..1686819.30 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=1686819.21..1686819.26 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=6452.90..1684023.30 rows=559181 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=6452.33..276110.67 rows=559356 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6312.50 rows=559356 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.83 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 4 run 3
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1686819.28..1686819.29 rows=1 width=24)
   ->  Sort  (cost=1686819.28..1686819.30 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=1686819.21..1686819.26 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=6452.90..1684023.30 rows=559181 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=6452.33..276110.67 rows=559356 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6312.50 rows=559356 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.83 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1662154.66..1662154.66 rows=1 width=58)
   ->  Sort  (cost=1662154.66..1662154.72 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1661233.68..1662154.53 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1661233.68..1661417.79 rows=73643 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=94598.88..1655280.29 rows=73643 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=89877.88..1640892.21 rows=1841345 width=50)
                                 ->  Hash Join  (cost=89877.31..398920.11 rows=460480 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=26553.53..322357.53 rows=2302400 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25977.94 rows=2302400 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59573.88..59573.88 rows=299992 width=38)
                                             ->  Hash Join  (cost=2.51..59573.88 rows=299992 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50946.60 rows=1499960 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.66 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 5 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1662154.66..1662154.66 rows=1 width=58)
   ->  Sort  (cost=1662154.66..1662154.72 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1661233.68..1662154.53 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1661233.68..1661417.79 rows=73643 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=94598.88..1655280.29 rows=73643 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=89877.88..1640892.21 rows=1841345 width=50)
                                 ->  Hash Join  (cost=89877.31..398920.11 rows=460480 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=26553.53..322357.53 rows=2302400 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25977.94 rows=2302400 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59573.88..59573.88 rows=299992 width=38)
                                             ->  Hash Join  (cost=2.51..59573.88 rows=299992 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50946.60 rows=1499960 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.66 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 5 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1662154.66..1662154.66 rows=1 width=58)
   ->  Sort  (cost=1662154.66..1662154.72 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1661233.68..1662154.53 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1661233.68..1661417.79 rows=73643 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=94598.88..1655280.29 rows=73643 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=89877.88..1640892.21 rows=1841345 width=50)
                                 ->  Hash Join  (cost=89877.31..398920.11 rows=460480 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=26553.53..322357.53 rows=2302400 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25977.94 rows=2302400 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59573.88..59573.88 rows=299992 width=38)
                                             ->  Hash Join  (cost=2.51..59573.88 rows=299992 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50946.60 rows=1499960 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.66 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                       QUERY PLAN                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1460547.98..1460547.99 rows=1 width=32)
   ->  Aggregate  (cost=1460547.98..1460547.99 rows=1 width=32)
         ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..1454698.04 rows=1169988 width=12)
               Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(4 rows)

query 6 run 2
SET
SET
SET
                                                                                                       QUERY PLAN                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1460547.98..1460547.99 rows=1 width=32)
   ->  Aggregate  (cost=1460547.98..1460547.99 rows=1 width=32)
         ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..1454698.04 rows=1169988 width=12)
               Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(4 rows)

query 6 run 3
SET
SET
SET
                                                                                                       QUERY PLAN                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1460547.98..1460547.99 rows=1 width=32)
   ->  Aggregate  (cost=1460547.98..1460547.99 rows=1 width=32)
         ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..1454698.04 rows=1169988 width=12)
               Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(4 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718204.85..2718204.97 rows=1 width=116)
   ->  GroupAggregate  (cost=2718204.85..2719420.49 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718204.85..2718357.01 rows=60863 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563411.39..2713368.29 rows=60863 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111697.84 rows=1462487 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024889.50 rows=18281085 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536577.52..536577.52 rows=1200037 width=30)
                           ->  Hash Join  (cost=57052.84..536577.52 rows=1200037 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411272.58 rows=15000458 width=8)
                                 ->  Hash  (cost=55552.87..55552.87 rows=119997 width=30)
                                       ->  Hash Join  (cost=1.40..55552.87 rows=119997 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.60 rows=1499960 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 7 run 2
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718204.85..2718204.97 rows=1 width=116)
   ->  GroupAggregate  (cost=2718204.85..2719420.49 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718204.85..2718357.01 rows=60863 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563411.39..2713368.29 rows=60863 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111697.84 rows=1462487 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024889.50 rows=18281085 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536577.52..536577.52 rows=1200037 width=30)
                           ->  Hash Join  (cost=57052.84..536577.52 rows=1200037 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411272.58 rows=15000458 width=8)
                                 ->  Hash  (cost=55552.87..55552.87 rows=119997 width=30)
                                       ->  Hash Join  (cost=1.40..55552.87 rows=119997 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.60 rows=1499960 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 7 run 3
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718204.85..2718204.97 rows=1 width=116)
   ->  GroupAggregate  (cost=2718204.85..2719420.49 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718204.85..2718357.01 rows=60863 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563411.39..2713368.29 rows=60863 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111697.84 rows=1462487 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024889.50 rows=18281085 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536577.52..536577.52 rows=1200037 width=30)
                           ->  Hash Join  (cost=57052.84..536577.52 rows=1200037 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411272.58 rows=15000458 width=8)
                                 ->  Hash  (cost=55552.87..55552.87 rows=119997 width=30)
                                       ->  Hash Join  (cost=1.40..55552.87 rows=119997 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.60 rows=1499960 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 8 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1115839.35..1115839.59 rows=1 width=64)
   ->  GroupAggregate  (cost=1115839.35..1116436.71 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=1115839.35..1115900.37 rows=24411 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=763977.40..1114060.36 rows=24411 width=70)
                     ->  Hash Join  (cost=763977.25..1113379.76 rows=24411 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=759506.25..1108844.68 rows=24411 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=696182.47..1044819.08 rows=122057 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=52986.70..383173.13 rows=4594562 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..51838.06 rows=4594562 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=638214.57..638214.57 rows=398496 width=20)
                                             ->  Nested Loop  (cost=0.44..638214.57 rows=398496 width=20)
                                                   ->  Seq Scan on part  (cost=0.00..65981.11 rows=13287 width=4)
                                                         Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..42.75 rows=32 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59573.88..59573.88 rows=299992 width=4)
                                       ->  Hash Join  (cost=2.51..59573.88 rows=299992 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.60 rows=1499960 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.91 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1115839.35..1115839.59 rows=1 width=64)
   ->  GroupAggregate  (cost=1115839.35..1116436.71 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=1115839.35..1115900.37 rows=24411 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=763977.40..1114060.36 rows=24411 width=70)
                     ->  Hash Join  (cost=763977.25..1113379.76 rows=24411 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=759506.25..1108844.68 rows=24411 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=696182.47..1044819.08 rows=122057 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=52986.70..383173.13 rows=4594562 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..51838.06 rows=4594562 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=638214.57..638214.57 rows=398496 width=20)
                                             ->  Nested Loop  (cost=0.44..638214.57 rows=398496 width=20)
                                                   ->  Seq Scan on part  (cost=0.00..65981.11 rows=13287 width=4)
                                                         Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..42.75 rows=32 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59573.88..59573.88 rows=299992 width=4)
                                       ->  Hash Join  (cost=2.51..59573.88 rows=299992 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.60 rows=1499960 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.91 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1115839.35..1115839.59 rows=1 width=64)
   ->  GroupAggregate  (cost=1115839.35..1116436.71 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=1115839.35..1115900.37 rows=24411 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=763977.40..1114060.36 rows=24411 width=70)
                     ->  Hash Join  (cost=763977.25..1113379.76 rows=24411 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=759506.25..1108844.68 rows=24411 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=696182.47..1044819.08 rows=122057 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=52986.70..383173.13 rows=4594562 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..51838.06 rows=4594562 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=638214.57..638214.57 rows=398496 width=20)
                                             ->  Nested Loop  (cost=0.44..638214.57 rows=398496 width=20)
                                                   ->  Seq Scan on part  (cost=0.00..65981.11 rows=13287 width=4)
                                                         Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..42.75 rows=32 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59573.88..59573.88 rows=299992 width=4)
                                       ->  Hash Join  (cost=2.51..59573.88 rows=299992 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.60 rows=1499960 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.91 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 9 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1373304.34..1373304.38 rows=1 width=90)
   ->  GroupAggregate  (cost=1373304.34..1373308.93 rows=131 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=1373304.34..1373304.67 rows=131 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               ->  Nested Loop  (cost=67244.92..1373299.73 rows=131 width=81)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=67244.92..1373250.70 rows=131 width=31)
                           ->  Nested Loop  (cost=67244.48..1372923.55 rows=131 width=31)
                                 ->  Nested Loop  (cost=67244.19..1372616.63 rows=132 width=35)
                                       ->  Hash Join  (cost=67243.75..343497.05 rows=404167 width=18)
                                             Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                             ->  Seq Scan on partsupp  (cost=0.00..255246.76 rows=8002476 width=14)
                                             ->  Hash  (cost=65981.11..65981.11 rows=101011 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..65981.11 rows=101011 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..2.54 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 9 run 2
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1373304.34..1373304.38 rows=1 width=90)
   ->  GroupAggregate  (cost=1373304.34..1373308.93 rows=131 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=1373304.34..1373304.67 rows=131 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               ->  Nested Loop  (cost=67244.92..1373299.73 rows=131 width=81)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=67244.92..1373250.70 rows=131 width=31)
                           ->  Nested Loop  (cost=67244.48..1372923.55 rows=131 width=31)
                                 ->  Nested Loop  (cost=67244.19..1372616.63 rows=132 width=35)
                                       ->  Hash Join  (cost=67243.75..343497.05 rows=404167 width=18)
                                             Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                             ->  Seq Scan on partsupp  (cost=0.00..255246.76 rows=8002476 width=14)
                                             ->  Hash  (cost=65981.11..65981.11 rows=101011 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..65981.11 rows=101011 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..2.54 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 9 run 3
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1373304.34..1373304.38 rows=1 width=90)
   ->  GroupAggregate  (cost=1373304.34..1373308.93 rows=131 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=1373304.34..1373304.67 rows=131 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               ->  Nested Loop  (cost=67244.92..1373299.73 rows=131 width=81)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=67244.92..1373250.70 rows=131 width=31)
                           ->  Nested Loop  (cost=67244.48..1372923.55 rows=131 width=31)
                                 ->  Nested Loop  (cost=67244.19..1372616.63 rows=132 width=35)
                                       ->  Hash Join  (cost=67243.75..343497.05 rows=404167 width=18)
                                             Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                             ->  Seq Scan on partsupp  (cost=0.00..255246.76 rows=8002476 width=14)
                                             ->  Hash  (cost=65981.11..65981.11 rows=101011 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..65981.11 rows=101011 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..2.54 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 10 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2064981.65..2064981.70 rows=20 width=201)
   ->  Sort  (cost=2064981.65..2066331.89 rows=540096 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=329356.18..2050609.89 rows=540096 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=329356.18..2037107.49 rows=540096 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=329353.06..2012803.17 rows=540096 width=181)
                           ->  Nested Loop  (cost=329352.91..1999577.08 rows=540096 width=159)
                                 ->  Merge Join  (cost=329352.34..406094.71 rows=558125 width=151)
                                       Merge Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Index Scan using customer_pkey on customer  (cost=0.43..64621.33 rows=1499960 width=147)
                                       ->  Sort  (cost=329351.76..330747.07 rows=558125 width=8)
                                             Sort Key: orders.o_custkey
                                             ->  Bitmap Heap Scan on orders  (cost=6438.22..276078.09 rows=558125 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6298.69 rows=558125 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.85 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..0.91 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
(27 rows)

query 10 run 2
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2064981.65..2064981.70 rows=20 width=201)
   ->  Sort  (cost=2064981.65..2066331.89 rows=540096 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=329356.18..2050609.89 rows=540096 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=329356.18..2037107.49 rows=540096 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=329353.06..2012803.17 rows=540096 width=181)
                           ->  Nested Loop  (cost=329352.91..1999577.08 rows=540096 width=159)
                                 ->  Merge Join  (cost=329352.34..406094.71 rows=558125 width=151)
                                       Merge Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Index Scan using customer_pkey on customer  (cost=0.43..64621.33 rows=1499960 width=147)
                                       ->  Sort  (cost=329351.76..330747.07 rows=558125 width=8)
                                             Sort Key: orders.o_custkey
                                             ->  Bitmap Heap Scan on orders  (cost=6438.22..276078.09 rows=558125 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6298.69 rows=558125 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.85 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..0.91 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
(27 rows)

query 10 run 3
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2064981.65..2064981.70 rows=20 width=201)
   ->  Sort  (cost=2064981.65..2066331.89 rows=540096 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=329356.18..2050609.89 rows=540096 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=329356.18..2037107.49 rows=540096 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=329353.06..2012803.17 rows=540096 width=181)
                           ->  Nested Loop  (cost=329352.91..1999577.08 rows=540096 width=159)
                                 ->  Merge Join  (cost=329352.34..406094.71 rows=558125 width=151)
                                       Merge Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Index Scan using customer_pkey on customer  (cost=0.43..64621.33 rows=1499960 width=147)
                                       ->  Sort  (cost=329351.76..330747.07 rows=558125 width=8)
                                             Sort Key: orders.o_custkey
                                             ->  Bitmap Heap Scan on orders  (cost=6438.22..276078.09 rows=558125 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6298.69 rows=558125 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.85 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..0.91 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
(27 rows)

query 11 run 1
SET
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=72786.31..72786.31 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=26217.08..26217.10 rows=1 width=32)
           ->  Nested Loop  (cost=37.72..23816.34 rows=320099 width=10)
                 ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=37.29..2220.15 rows=4000 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.58 rows=81 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=46569.21..46835.96 rows=106700 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=38108.26..46035.71 rows=106700 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               Planned Partitions: 4
               ->  Nested Loop  (cost=37.72..23816.34 rows=320099 width=14)
                     ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.58 rows=81 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(29 rows)

query 11 run 2
SET
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=72786.31..72786.31 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=26217.08..26217.10 rows=1 width=32)
           ->  Nested Loop  (cost=37.72..23816.34 rows=320099 width=10)
                 ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=37.29..2220.15 rows=4000 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.58 rows=81 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=46569.21..46835.96 rows=106700 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=38108.26..46035.71 rows=106700 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               Planned Partitions: 4
               ->  Nested Loop  (cost=37.72..23816.34 rows=320099 width=14)
                     ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.58 rows=81 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(29 rows)

query 11 run 3
SET
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=72786.31..72786.31 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=26217.08..26217.10 rows=1 width=32)
           ->  Nested Loop  (cost=37.72..23816.34 rows=320099 width=10)
                 ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=37.29..2220.15 rows=4000 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.58 rows=81 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=46569.21..46835.96 rows=106700 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=38108.26..46035.71 rows=106700 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               Planned Partitions: 4
               ->  Nested Loop  (cost=37.72..23816.34 rows=320099 width=14)
                     ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.58 rows=81 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(29 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3029814.65..3030606.17 rows=1 width=27)
   ->  GroupAggregate  (cost=3029814.65..3035355.26 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=3029814.65..3030507.22 rows=277027 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Hash Join  (cost=2478225.59..3004771.87 rows=277027 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411272.58 rows=15000458 width=20)
                     ->  Hash  (cost=2474762.75..2474762.75 rows=277027 width=15)
                           ->  Seq Scan on lineitem  (cost=0.00..2474762.75 rows=277027 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 2
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3029814.65..3030606.17 rows=1 width=27)
   ->  GroupAggregate  (cost=3029814.65..3035355.26 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=3029814.65..3030507.22 rows=277027 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Hash Join  (cost=2478225.59..3004771.87 rows=277027 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411272.58 rows=15000458 width=20)
                     ->  Hash  (cost=2474762.75..2474762.75 rows=277027 width=15)
                           ->  Seq Scan on lineitem  (cost=0.00..2474762.75 rows=277027 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 3
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3029814.65..3030606.17 rows=1 width=27)
   ->  GroupAggregate  (cost=3029814.65..3035355.26 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=3029814.65..3030507.22 rows=277027 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Hash Join  (cost=2478225.59..3004771.87 rows=277027 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411272.58 rows=15000458 width=20)
                     ->  Hash  (cost=2474762.75..2474762.75 rows=277027 width=15)
                           ->  Seq Scan on lineitem  (cost=0.00..2474762.75 rows=277027 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 13 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1007237.71..1007237.71 rows=1 width=16)
   ->  Sort  (cost=1007237.71..1007238.21 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1007234.71..1007236.71 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=39.99..984735.31 rows=1499960 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=39.99..895491.02 rows=14848938 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28673.83 rows=1499960 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..677495.80 rows=14848938 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 2
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1007237.71..1007237.71 rows=1 width=16)
   ->  Sort  (cost=1007237.71..1007238.21 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1007234.71..1007236.71 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=39.99..984735.31 rows=1499960 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=39.99..895491.02 rows=14848938 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28673.83 rows=1499960 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..677495.80 rows=14848938 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 3
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1007237.71..1007237.71 rows=1 width=16)
   ->  Sort  (cost=1007237.71..1007238.21 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1007234.71..1007236.71 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=39.99..984735.31 rows=1499960 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=39.99..895491.02 rows=14848938 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28673.83 rows=1499960 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..677495.80 rows=14848938 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Limit  (cost=997539.69..997539.71 rows=1 width=32)
   ->  Aggregate  (cost=997539.69..997539.71 rows=1 width=32)
         ->  Hash Join  (cost=99653.77..984531.43 rows=743329 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..861994.99 rows=743329 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60981.09..60981.09 rows=2000009 width=25)
                     ->  Seq Scan on part  (cost=0.00..60981.09 rows=2000009 width=25)
(8 rows)

query 14 run 2
SET
SET
SET
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Limit  (cost=997539.69..997539.71 rows=1 width=32)
   ->  Aggregate  (cost=997539.69..997539.71 rows=1 width=32)
         ->  Hash Join  (cost=99653.77..984531.43 rows=743329 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..861994.99 rows=743329 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60981.09..60981.09 rows=2000009 width=25)
                     ->  Seq Scan on part  (cost=0.00..60981.09 rows=2000009 width=25)
(8 rows)

query 14 run 3
SET
SET
SET
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Limit  (cost=997539.69..997539.71 rows=1 width=32)
   ->  Aggregate  (cost=997539.69..997539.71 rows=1 width=32)
         ->  Hash Join  (cost=99653.77..984531.43 rows=743329 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..861994.99 rows=743329 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60981.09..60981.09 rows=2000009 width=25)
                     ->  Seq Scan on part  (cost=0.00..60981.09 rows=2000009 width=25)
(8 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3769178.69..3769187.55 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1885071.46..1885071.47 rows=1 width=32)
           ->  HashAggregate  (cost=1882592.21..1883831.84 rows=99170 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=36561.78..1859790.54 rows=2280167 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35991.74 rows=2280167 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1884107.22..1888500.16 rows=496 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=71)
         ->  Sort  (cost=1884106.93..1884108.17 rows=496 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1882592.21..1884084.72 rows=496 width=36)
                     ->  HashAggregate  (cost=1882592.21..1884079.76 rows=496 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=36561.78..1859790.54 rows=2280167 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35991.74 rows=2280167 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3769178.69..3769187.55 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1885071.46..1885071.47 rows=1 width=32)
           ->  HashAggregate  (cost=1882592.21..1883831.84 rows=99170 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=36561.78..1859790.54 rows=2280167 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35991.74 rows=2280167 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1884107.22..1888500.16 rows=496 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=71)
         ->  Sort  (cost=1884106.93..1884108.17 rows=496 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1882592.21..1884084.72 rows=496 width=36)
                     ->  HashAggregate  (cost=1882592.21..1884079.76 rows=496 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=36561.78..1859790.54 rows=2280167 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35991.74 rows=2280167 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3769178.69..3769187.55 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1885071.46..1885071.47 rows=1 width=32)
           ->  HashAggregate  (cost=1882592.21..1883831.84 rows=99170 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=36561.78..1859790.54 rows=2280167 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35991.74 rows=2280167 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1884107.22..1888500.16 rows=496 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=71)
         ->  Sort  (cost=1884106.93..1884108.17 rows=496 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1882592.21..1884084.72 rows=496 width=36)
                     ->  HashAggregate  (cost=1882592.21..1884079.76 rows=496 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=36561.78..1859790.54 rows=2280167 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35991.74 rows=2280167 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=358718.01..358718.01 rows=1 width=44)
   ->  Sort  (cost=358718.01..359102.26 rows=153701 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=348990.70..357949.50 rows=153701 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=348990.70..350475.06 rows=593743 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98162.45..281614.55 rows=593743 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176420.29 rows=4001238 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90981.23..90981.23 rows=296781 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90981.23 rows=296781 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 2
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=358718.01..358718.01 rows=1 width=44)
   ->  Sort  (cost=358718.01..359102.26 rows=153701 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=348990.70..357949.50 rows=153701 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=348990.70..350475.06 rows=593743 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98162.45..281614.55 rows=593743 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176420.29 rows=4001238 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90981.23..90981.23 rows=296781 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90981.23 rows=296781 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 3
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=358718.01..358718.01 rows=1 width=44)
   ->  Sort  (cost=358718.01..359102.26 rows=153701 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=348990.70..357949.50 rows=153701 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=348990.70..350475.06 rows=593743 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98162.45..281614.55 rows=593743 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176420.29 rows=4001238 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90981.23..90981.23 rows=296781 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90981.23 rows=296781 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=4869184.44..4869184.45 rows=1 width=32)
   ->  Aggregate  (cost=4869184.44..4869184.45 rows=1 width=32)
         ->  Nested Loop  (cost=4174217.79..4869136.11 rows=19330 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Hash Join  (cost=4174217.35..4811301.96 rows=1934 width=40)
                     Hash Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=4103210.19..4716844.45 rows=1857453 width=36)
                           Group Key: lineitem_1.l_partkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..1724974.00 rows=59983100 width=9)
                     ->  Hash  (cost=70981.13..70981.13 rows=2082 width=4)
                           ->  Seq Scan on part  (cost=0.00..70981.13 rows=2082 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..29.77 rows=11 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(16 rows)

query 17 run 2
SET
SET
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=4869184.44..4869184.45 rows=1 width=32)
   ->  Aggregate  (cost=4869184.44..4869184.45 rows=1 width=32)
         ->  Nested Loop  (cost=4174217.79..4869136.11 rows=19330 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Hash Join  (cost=4174217.35..4811301.96 rows=1934 width=40)
                     Hash Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=4103210.19..4716844.45 rows=1857453 width=36)
                           Group Key: lineitem_1.l_partkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..1724974.00 rows=59983100 width=9)
                     ->  Hash  (cost=70981.13..70981.13 rows=2082 width=4)
                           ->  Seq Scan on part  (cost=0.00..70981.13 rows=2082 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..29.77 rows=11 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(16 rows)

query 17 run 3
SET
SET
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=4869184.44..4869184.45 rows=1 width=32)
   ->  Aggregate  (cost=4869184.44..4869184.45 rows=1 width=32)
         ->  Nested Loop  (cost=4174217.79..4869136.11 rows=19330 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Hash Join  (cost=4174217.35..4811301.96 rows=1934 width=40)
                     Hash Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=4103210.19..4716844.45 rows=1857453 width=36)
                           Group Key: lineitem_1.l_partkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..1724974.00 rows=59983100 width=9)
                     ->  Hash  (cost=70981.13..70981.13 rows=2082 width=4)
                           ->  Seq Scan on part  (cost=0.00..70981.13 rows=2082 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..29.77 rows=11 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(16 rows)

query 18 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8774256.76..8774257.01 rows=100 width=71)
   ->  Sort  (cost=8774256.76..8824227.08 rows=19988126 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7409119.61..8010324.96 rows=19988126 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 256
               ->  Hash Join  (cost=78736.49..6332415.48 rows=19988126 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=251.39..5919396.40 rows=19988126 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3390220.46 rows=4998592 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547972.31 rows=15000458 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692278.69 rows=4998592 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167426.56 rows=59983100 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167426.56 rows=59983100 width=9)
                     ->  Hash  (cost=50946.60..50946.60 rows=1499960 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50946.60 rows=1499960 width=23)
(20 rows)

query 18 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8774256.76..8774257.01 rows=100 width=71)
   ->  Sort  (cost=8774256.76..8824227.08 rows=19988126 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7409119.61..8010324.96 rows=19988126 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 256
               ->  Hash Join  (cost=78736.49..6332415.48 rows=19988126 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=251.39..5919396.40 rows=19988126 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3390220.46 rows=4998592 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547972.31 rows=15000458 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692278.69 rows=4998592 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167426.56 rows=59983100 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167426.56 rows=59983100 width=9)
                     ->  Hash  (cost=50946.60..50946.60 rows=1499960 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50946.60 rows=1499960 width=23)
(20 rows)

query 18 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8774256.76..8774257.01 rows=100 width=71)
   ->  Sort  (cost=8774256.76..8824227.08 rows=19988126 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7409119.61..8010324.96 rows=19988126 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 256
               ->  Hash Join  (cost=78736.49..6332415.48 rows=19988126 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=251.39..5919396.40 rows=19988126 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3390220.46 rows=4998592 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547972.31 rows=15000458 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692278.69 rows=4998592 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167426.56 rows=59983100 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167426.56 rows=59983100 width=9)
                     ->  Hash  (cost=50946.60..50946.60 rows=1499960 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50946.60 rows=1499960 width=23)
(20 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=361043.89..361043.90 rows=1 width=32)
   ->  Aggregate  (cost=361043.89..361043.90 rows=1 width=32)
         ->  Nested Loop  (cost=0.44..361035.36 rows=1136 width=12)
               ->  Seq Scan on part  (cost=0.00..125981.38 rows=4748 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..49.50 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=361043.89..361043.90 rows=1 width=32)
   ->  Aggregate  (cost=361043.89..361043.90 rows=1 width=32)
         ->  Nested Loop  (cost=0.44..361035.36 rows=1136 width=12)
               ->  Seq Scan on part  (cost=0.00..125981.38 rows=4748 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..49.50 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 3
SET
SET
SET

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=361043.89..361043.90 rows=1 width=32)
   ->  Aggregate  (cost=361043.89..361043.90 rows=1 width=32)
         ->  Nested Loop  (cost=0.44..361035.36 rows=1136 width=12)
               ->  Seq Scan on part  (cost=0.00..125981.38 rows=4748 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..49.50 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2698453.62..2698453.63 rows=1 width=51)
   ->  Sort  (cost=2698453.62..2698453.63 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2444792.40..2698453.61 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2444792.40..2693801.31 rows=3 width=8)
                     ->  Nested Loop  (cost=2444792.40..2693801.29 rows=3 width=8)
                           ->  Hash Join  (cost=2444791.96..2667918.68 rows=48974 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=2378558.33..2540473.82 rows=4848412 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 64
                                       ->  Bitmap Heap Scan on lineitem  (cost=146439.17..1993617.24 rows=9132986 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..144155.92 rows=9132986 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=65981.11..65981.11 rows=20202 width=4)
                                       ->  Seq Scan on part  (cost=0.00..65981.11 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2698453.62..2698453.63 rows=1 width=51)
   ->  Sort  (cost=2698453.62..2698453.63 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2444792.40..2698453.61 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2444792.40..2693801.31 rows=3 width=8)
                     ->  Nested Loop  (cost=2444792.40..2693801.29 rows=3 width=8)
                           ->  Hash Join  (cost=2444791.96..2667918.68 rows=48974 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=2378558.33..2540473.82 rows=4848412 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 64
                                       ->  Bitmap Heap Scan on lineitem  (cost=146439.17..1993617.24 rows=9132986 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..144155.92 rows=9132986 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=65981.11..65981.11 rows=20202 width=4)
                                       ->  Seq Scan on part  (cost=0.00..65981.11 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2698453.62..2698453.63 rows=1 width=51)
   ->  Sort  (cost=2698453.62..2698453.63 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2444792.40..2698453.61 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2444792.40..2693801.31 rows=3 width=8)
                     ->  Nested Loop  (cost=2444792.40..2693801.29 rows=3 width=8)
                           ->  Hash Join  (cost=2444791.96..2667918.68 rows=48974 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=2378558.33..2540473.82 rows=4848412 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 64
                                       ->  Bitmap Heap Scan on lineitem  (cost=146439.17..1993617.24 rows=9132986 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..144155.92 rows=9132986 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=65981.11..65981.11 rows=20202 width=4)
                                       ->  Seq Scan on part  (cost=0.00..65981.11 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3629029.26..3629029.26 rows=1 width=34)
   ->  Sort  (cost=3629029.26..3629029.26 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=3629029.23..3629029.25 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=3629029.23..3629029.23 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=1976467.15..3629029.22 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop Anti Join  (cost=1976466.59..3629025.98 rows=1 width=38)
                                 ->  Hash Join  (cost=1976466.02..2519446.75 rows=387704 width=38)
                                       Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..448773.72 rows=7271722 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                                       ->  Hash  (cost=1960219.84..1960219.84 rows=799775 width=34)
                                             ->  Hash Join  (cost=2311.46..1960219.84 rows=799775 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Seq Scan on lineitem l1  (cost=0.00..1874931.75 rows=19994367 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2261.46..2261.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.23 rows=1 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3629029.26..3629029.26 rows=1 width=34)
   ->  Sort  (cost=3629029.26..3629029.26 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=3629029.23..3629029.25 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=3629029.23..3629029.23 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=1976467.15..3629029.22 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop Anti Join  (cost=1976466.59..3629025.98 rows=1 width=38)
                                 ->  Hash Join  (cost=1976466.02..2519446.75 rows=387704 width=38)
                                       Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..448773.72 rows=7271722 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                                       ->  Hash  (cost=1960219.84..1960219.84 rows=799775 width=34)
                                             ->  Hash Join  (cost=2311.46..1960219.84 rows=799775 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Seq Scan on lineitem l1  (cost=0.00..1874931.75 rows=19994367 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2261.46..2261.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.23 rows=1 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3629029.26..3629029.26 rows=1 width=34)
   ->  Sort  (cost=3629029.26..3629029.26 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=3629029.23..3629029.25 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=3629029.23..3629029.23 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=1976467.15..3629029.22 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop Anti Join  (cost=1976466.59..3629025.98 rows=1 width=38)
                                 ->  Hash Join  (cost=1976466.02..2519446.75 rows=387704 width=38)
                                       Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..448773.72 rows=7271722 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                                       ->  Hash  (cost=1960219.84..1960219.84 rows=799775 width=34)
                                             ->  Hash Join  (cost=2311.46..1960219.84 rows=799775 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Seq Scan on lineitem l1  (cost=0.00..1874931.75 rows=19994367 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2261.46..2261.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.23 rows=1 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 22 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161086.84..161086.86 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75440.62..75440.63 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75320.95 rows=47868 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=85646.20..85833.42 rows=6808 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=85646.20..85663.22 rows=6808 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..85212.77 rows=6808 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75320.95 rows=17500 width=26)
                           Filter: ((c_acctbal > $0) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.67 rows=16 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 2
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161086.84..161086.86 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75440.62..75440.63 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75320.95 rows=47868 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=85646.20..85833.42 rows=6808 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=85646.20..85663.22 rows=6808 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..85212.77 rows=6808 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75320.95 rows=17500 width=26)
                           Filter: ((c_acctbal > $0) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.67 rows=16 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 3
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161086.84..161086.86 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75440.62..75440.63 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75320.95 rows=47868 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=85646.20..85833.42 rows=6808 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=85646.20..85663.22 rows=6808 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..85212.77 rows=6808 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75320.95 rows=17500 width=26)
                           Filter: ((c_acctbal > $0) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.67 rows=16 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

