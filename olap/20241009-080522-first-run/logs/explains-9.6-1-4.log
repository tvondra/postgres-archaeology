query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191519.24..191519.44 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191519.24..191520.48 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=191519.24..191519.30 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=191516.12..191518.69 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=190516.12..190516.29 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.64 rows=1480037 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191519.24..191519.44 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191519.24..191520.48 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=191519.24..191519.30 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=191516.12..191518.69 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=190516.12..190516.29 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.64 rows=1480037 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191519.24..191519.44 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191519.24..191520.48 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=191519.24..191519.30 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=191516.12..191518.69 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=190516.12..190516.29 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.64 rows=1480037 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=45464.70..45464.70 rows=1 width=192)
   ->  Sort  (cost=45464.70..45464.70 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=25059.34..45464.69 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=726 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Sort  (cost=25058.92..25456.93 rows=159204 width=172)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=0.71..11303.28 rows=159204 width=172)
                           ->  Nested Loop  (cost=0.29..134.30 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..22.34 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.52..18.53 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.52 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.41 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.74 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 2 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=45464.70..45464.70 rows=1 width=192)
   ->  Sort  (cost=45464.70..45464.70 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=25059.34..45464.69 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=726 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Sort  (cost=25058.92..25456.93 rows=159204 width=172)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=0.71..11303.28 rows=159204 width=172)
                           ->  Nested Loop  (cost=0.29..134.30 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..22.34 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.52..18.53 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.52 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.41 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.74 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 2 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=45464.70..45464.70 rows=1 width=192)
   ->  Sort  (cost=45464.70..45464.70 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=25059.34..45464.69 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=726 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Sort  (cost=25058.92..25456.93 rows=159204 width=172)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=0.71..11303.28 rows=159204 width=172)
                           ->  Nested Loop  (cost=0.29..134.30 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..22.34 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.52..18.53 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.52 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.41 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.74 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 3 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=153231.00..153231.03 rows=10 width=44)
   ->  Sort  (cost=153231.00..154029.03 rows=319210 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=138352.75..146332.99 rows=319210 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=138352.75..139017.77 rows=266008 width=44)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Gather  (cost=86120.60..114383.95 rows=266008 width=44)
                           Workers Planned: 2
                           ->  Partial HashAggregate  (cost=85120.60..86783.15 rows=133004 width=44)
                                 Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=0.86..83125.54 rows=133004 width=24)
                                       ->  Nested Loop  (cost=0.43..34055.27 rows=61350 width=12)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12712 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.25 rows=8 width=16)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.78 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(21 rows)

query 3 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=153231.00..153231.03 rows=10 width=44)
   ->  Sort  (cost=153231.00..154029.03 rows=319210 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=138352.75..146332.99 rows=319210 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=138352.75..139017.77 rows=266008 width=44)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Gather  (cost=86120.60..114383.95 rows=266008 width=44)
                           Workers Planned: 2
                           ->  Partial HashAggregate  (cost=85120.60..86783.15 rows=133004 width=44)
                                 Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=0.86..83125.54 rows=133004 width=24)
                                       ->  Nested Loop  (cost=0.43..34055.27 rows=61350 width=12)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12712 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.25 rows=8 width=16)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.78 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(21 rows)

query 3 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=153231.00..153231.03 rows=10 width=44)
   ->  Sort  (cost=153231.00..154029.03 rows=319210 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=138352.75..146332.99 rows=319210 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=138352.75..139017.77 rows=266008 width=44)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Gather  (cost=86120.60..114383.95 rows=266008 width=44)
                           Workers Planned: 2
                           ->  Partial HashAggregate  (cost=85120.60..86783.15 rows=133004 width=44)
                                 Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=0.86..83125.54 rows=133004 width=24)
                                       ->  Nested Loop  (cost=0.43..34055.27 rows=61350 width=12)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12712 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.25 rows=8 width=16)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.78 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(21 rows)

query 4 run 1
SET
SET
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=69140.25..69140.28 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=69140.25..69140.41 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=69140.25..69140.28 rows=15 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=69138.40..69139.95 rows=15 width=24)
                     Workers Planned: 3
                     ->  Partial HashAggregate  (cost=68138.40..68138.45 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=0.43..68047.98 rows=18085 width=16)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=18085 width=20)
                                       Filter: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.15 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 2
SET
SET
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=69140.25..69140.28 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=69140.25..69140.41 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=69140.25..69140.28 rows=15 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=69138.40..69139.95 rows=15 width=24)
                     Workers Planned: 3
                     ->  Partial HashAggregate  (cost=68138.40..68138.45 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=0.43..68047.98 rows=18085 width=16)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=18085 width=20)
                                       Filter: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.15 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 3
SET
SET
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=69140.25..69140.28 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=69140.25..69140.41 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=69140.25..69140.28 rows=15 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=69138.40..69139.95 rows=15 width=24)
                     Workers Planned: 3
                     ->  Partial HashAggregate  (cost=68138.40..68138.45 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=0.43..68047.98 rows=18085 width=16)
                                 ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=18085 width=20)
                                       Filter: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.15 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=47494.81..47494.81 rows=1 width=58)
   ->  Sort  (cost=47494.81..47494.87 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=47493.87..47494.68 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=47493.87..47493.99 rows=50 width=58)
                     Sort Key: nation.n_name
                     ->  Gather  (cost=47449.57..47492.46 rows=50 width=58)
                           Workers Planned: 2
                           ->  Partial GroupAggregate  (cost=46449.57..46487.46 rows=25 width=58)
                                 Group Key: nation.n_name
                                 ->  Sort  (cost=46449.57..46457.09 rows=3006 width=38)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=476.39..46275.92 rows=3006 width=38)
                                             Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                             ->  Nested Loop  (cost=3.39..45207.94 rows=75323 width=50)
                                                   ->  Nested Loop  (cost=2.96..18864.78 rows=18831 width=38)
                                                         ->  Hash Join  (cost=2.53..4583.91 rows=12500 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                               ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                                         ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.11 rows=3 width=8)
                                                               Index Cond: (o_custkey = customer.c_custkey)
                                                               Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.36 rows=4 width=20)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                             ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(34 rows)

query 5 run 2
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=47494.81..47494.81 rows=1 width=58)
   ->  Sort  (cost=47494.81..47494.87 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=47493.87..47494.68 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=47493.87..47493.99 rows=50 width=58)
                     Sort Key: nation.n_name
                     ->  Gather  (cost=47449.57..47492.46 rows=50 width=58)
                           Workers Planned: 2
                           ->  Partial GroupAggregate  (cost=46449.57..46487.46 rows=25 width=58)
                                 Group Key: nation.n_name
                                 ->  Sort  (cost=46449.57..46457.09 rows=3006 width=38)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=476.39..46275.92 rows=3006 width=38)
                                             Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                             ->  Nested Loop  (cost=3.39..45207.94 rows=75323 width=50)
                                                   ->  Nested Loop  (cost=2.96..18864.78 rows=18831 width=38)
                                                         ->  Hash Join  (cost=2.53..4583.91 rows=12500 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                               ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                                         ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.11 rows=3 width=8)
                                                               Index Cond: (o_custkey = customer.c_custkey)
                                                               Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.36 rows=4 width=20)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                             ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(34 rows)

query 5 run 3
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=47494.81..47494.81 rows=1 width=58)
   ->  Sort  (cost=47494.81..47494.87 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=47493.87..47494.68 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=47493.87..47493.99 rows=50 width=58)
                     Sort Key: nation.n_name
                     ->  Gather  (cost=47449.57..47492.46 rows=50 width=58)
                           Workers Planned: 2
                           ->  Partial GroupAggregate  (cost=46449.57..46487.46 rows=25 width=58)
                                 Group Key: nation.n_name
                                 ->  Sort  (cost=46449.57..46457.09 rows=3006 width=38)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=476.39..46275.92 rows=3006 width=38)
                                             Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                             ->  Nested Loop  (cost=3.39..45207.94 rows=75323 width=50)
                                                   ->  Nested Loop  (cost=2.96..18864.78 rows=18831 width=38)
                                                         ->  Hash Join  (cost=2.53..4583.91 rows=12500 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                               ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                                         ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.11 rows=3 width=8)
                                                               Index Cond: (o_custkey = customer.c_custkey)
                                                               Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.36 rows=4 width=20)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                             ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(34 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=110271.97..110271.98 rows=1 width=32)
   ->  Aggregate  (cost=110271.97..110271.98 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=21539.99..109663.71 rows=121652 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21509.58 rows=121652 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 2
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=110271.97..110271.98 rows=1 width=32)
   ->  Aggregate  (cost=110271.97..110271.98 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=21539.99..109663.71 rows=121652 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21509.58 rows=121652 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 3
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=110271.97..110271.98 rows=1 width=32)
   ->  Aggregate  (cost=110271.97..110271.98 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=21539.99..109663.71 rows=121652 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21509.58 rows=121652 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=46227.33..46227.36 rows=1 width=92)
   ->  GroupAggregate  (cost=46227.33..46441.77 rows=6127 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=46227.33..46242.65 rows=6127 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Gather  (cost=1301.03..45841.91 rows=6127 width=72)
                     Workers Planned: 2
                     ->  Hash Join  (cost=301.03..44211.34 rows=2553 width=72)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                           ->  Nested Loop  (cost=2.26..43570.97 rows=61512 width=46)
                                 ->  Nested Loop  (cost=1.83..10495.12 rows=50000 width=30)
                                       ->  Hash Join  (cost=1.40..4507.77 rows=5000 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.03 rows=17 width=8)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.65 rows=1 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=288.77..288.77 rows=800 width=30)
                                 ->  Nested Loop  (cost=6.38..288.77 rows=800 width=30)
                                       ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                             Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                       ->  Bitmap Heap Scan on supplier  (cost=6.38..139.70 rows=400 width=8)
                                             Recheck Cond: (s_nationkey = n1.n_nationkey)
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                   Index Cond: (s_nationkey = n1.n_nationkey)
(31 rows)

query 7 run 2
SET
SET
SET
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=46227.33..46227.36 rows=1 width=92)
   ->  GroupAggregate  (cost=46227.33..46441.77 rows=6127 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=46227.33..46242.65 rows=6127 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Gather  (cost=1301.03..45841.91 rows=6127 width=72)
                     Workers Planned: 2
                     ->  Hash Join  (cost=301.03..44211.34 rows=2553 width=72)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                           ->  Nested Loop  (cost=2.26..43570.97 rows=61512 width=46)
                                 ->  Nested Loop  (cost=1.83..10495.12 rows=50000 width=30)
                                       ->  Hash Join  (cost=1.40..4507.77 rows=5000 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.03 rows=17 width=8)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.65 rows=1 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=288.77..288.77 rows=800 width=30)
                                 ->  Nested Loop  (cost=6.38..288.77 rows=800 width=30)
                                       ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                             Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                       ->  Bitmap Heap Scan on supplier  (cost=6.38..139.70 rows=400 width=8)
                                             Recheck Cond: (s_nationkey = n1.n_nationkey)
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                   Index Cond: (s_nationkey = n1.n_nationkey)
(31 rows)

query 7 run 3
SET
SET
SET
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=46227.33..46227.36 rows=1 width=92)
   ->  GroupAggregate  (cost=46227.33..46441.77 rows=6127 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=46227.33..46242.65 rows=6127 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Gather  (cost=1301.03..45841.91 rows=6127 width=72)
                     Workers Planned: 2
                     ->  Hash Join  (cost=301.03..44211.34 rows=2553 width=72)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                           ->  Nested Loop  (cost=2.26..43570.97 rows=61512 width=46)
                                 ->  Nested Loop  (cost=1.83..10495.12 rows=50000 width=30)
                                       ->  Hash Join  (cost=1.40..4507.77 rows=5000 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.03 rows=17 width=8)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.65 rows=1 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=288.77..288.77 rows=800 width=30)
                                 ->  Nested Loop  (cost=6.38..288.77 rows=800 width=30)
                                       ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                             Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                       ->  Bitmap Heap Scan on supplier  (cost=6.38..139.70 rows=400 width=8)
                                             Recheck Cond: (s_nationkey = n1.n_nationkey)
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                   Index Cond: (s_nationkey = n1.n_nationkey)
(31 rows)

query 8 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=39766.88..39766.91 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=39766.88..39851.49 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=39766.88..39771.96 rows=2032 width=72)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Gather  (cost=39408.85..39655.23 rows=2032 width=72)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=38408.85..38452.03 rows=1016 width=72)
                           Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=38408.85..38411.39 rows=1016 width=46)
                                 Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=5.66..38358.11 rows=1016 width=46)
                                       Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                       ->  Nested Loop  (cost=4.10..38337.50 rows=1016 width=20)
                                             ->  Hash Join  (cost=3.81..38019.00 rows=1019 width=20)
                                                   Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                   ->  Nested Loop  (cost=1.28..37987.17 rows=5096 width=24)
                                                         ->  Nested Loop  (cost=0.86..35639.87 rows=5096 width=24)
                                                               ->  Nested Loop  (cost=0.43..27847.05 rows=16667 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=555 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..40.61 rows=30 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                               ->  Index Scan using orders_pkey on orders  (cost=0.43..0.46 rows=1 width=12)
                                                                     Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                                     Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=8)
                                                               Index Cond: (c_custkey = orders.o_custkey)
                                                   ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                         ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                               Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                                   Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 8 run 2
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=39766.88..39766.91 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=39766.88..39851.49 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=39766.88..39771.96 rows=2032 width=72)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Gather  (cost=39408.85..39655.23 rows=2032 width=72)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=38408.85..38452.03 rows=1016 width=72)
                           Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=38408.85..38411.39 rows=1016 width=46)
                                 Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=5.66..38358.11 rows=1016 width=46)
                                       Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                       ->  Nested Loop  (cost=4.10..38337.50 rows=1016 width=20)
                                             ->  Hash Join  (cost=3.81..38019.00 rows=1019 width=20)
                                                   Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                   ->  Nested Loop  (cost=1.28..37987.17 rows=5096 width=24)
                                                         ->  Nested Loop  (cost=0.86..35639.87 rows=5096 width=24)
                                                               ->  Nested Loop  (cost=0.43..27847.05 rows=16667 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=555 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..40.61 rows=30 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                               ->  Index Scan using orders_pkey on orders  (cost=0.43..0.46 rows=1 width=12)
                                                                     Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                                     Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=8)
                                                               Index Cond: (c_custkey = orders.o_custkey)
                                                   ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                         ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                               Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                                   Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 8 run 3
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=39766.88..39766.91 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=39766.88..39851.49 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=39766.88..39771.96 rows=2032 width=72)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Gather  (cost=39408.85..39655.23 rows=2032 width=72)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=38408.85..38452.03 rows=1016 width=72)
                           Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=38408.85..38411.39 rows=1016 width=46)
                                 Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                 ->  Hash Join  (cost=5.66..38358.11 rows=1016 width=46)
                                       Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                       ->  Nested Loop  (cost=4.10..38337.50 rows=1016 width=20)
                                             ->  Hash Join  (cost=3.81..38019.00 rows=1019 width=20)
                                                   Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                   ->  Nested Loop  (cost=1.28..37987.17 rows=5096 width=24)
                                                         ->  Nested Loop  (cost=0.86..35639.87 rows=5096 width=24)
                                                               ->  Nested Loop  (cost=0.43..27847.05 rows=16667 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=555 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..40.61 rows=30 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                               ->  Index Scan using orders_pkey on orders  (cost=0.43..0.46 rows=1 width=12)
                                                                     Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                                     Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=8)
                                                               Index Cond: (c_custkey = orders.o_custkey)
                                                   ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                         ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                               Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                                   Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 9 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=26535.18..26535.21 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=26535.18..26538.53 rows=120 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=26535.18..26535.43 rows=100 width=66)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Gather  (cost=26519.98..26531.86 rows=100 width=66)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=25519.98..25521.86 rows=50 width=66)
                           Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=25519.98..25520.11 rows=50 width=57)
                                 Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                                 ->  Hash Join  (cost=3.13..25518.57 rows=50 width=57)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=1.57..25516.07 rows=50 width=31)
                                             ->  Nested Loop  (cost=1.14..25492.94 rows=50 width=31)
                                                   ->  Nested Loop  (cost=0.86..25477.32 rows=50 width=35)
                                                         ->  Nested Loop  (cost=0.42..13667.23 rows=16766 width=18)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=4209 width=4)
                                                                     Filter: ((p_name)::text ~~ '%navy%'::text)
                                                               ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.99 rows=4 width=14)
                                                                     Index Cond: (ps_partkey = part.p_partkey)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.69 rows=1 width=29)
                                                               Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                                   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                                         Index Cond: (s_suppkey = lineitem.l_suppkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                                                   Index Cond: (o_orderkey = lineitem.l_orderkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 9 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=26535.18..26535.21 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=26535.18..26538.53 rows=120 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=26535.18..26535.43 rows=100 width=66)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Gather  (cost=26519.98..26531.86 rows=100 width=66)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=25519.98..25521.86 rows=50 width=66)
                           Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=25519.98..25520.11 rows=50 width=57)
                                 Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                                 ->  Hash Join  (cost=3.13..25518.57 rows=50 width=57)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=1.57..25516.07 rows=50 width=31)
                                             ->  Nested Loop  (cost=1.14..25492.94 rows=50 width=31)
                                                   ->  Nested Loop  (cost=0.86..25477.32 rows=50 width=35)
                                                         ->  Nested Loop  (cost=0.42..13667.23 rows=16766 width=18)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=4209 width=4)
                                                                     Filter: ((p_name)::text ~~ '%navy%'::text)
                                                               ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.99 rows=4 width=14)
                                                                     Index Cond: (ps_partkey = part.p_partkey)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.69 rows=1 width=29)
                                                               Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                                   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                                         Index Cond: (s_suppkey = lineitem.l_suppkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                                                   Index Cond: (o_orderkey = lineitem.l_orderkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 9 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=26535.18..26535.21 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=26535.18..26538.53 rows=120 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=26535.18..26535.43 rows=100 width=66)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Gather  (cost=26519.98..26531.86 rows=100 width=66)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=25519.98..25521.86 rows=50 width=66)
                           Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Sort  (cost=25519.98..25520.11 rows=50 width=57)
                                 Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                                 ->  Hash Join  (cost=3.13..25518.57 rows=50 width=57)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=1.57..25516.07 rows=50 width=31)
                                             ->  Nested Loop  (cost=1.14..25492.94 rows=50 width=31)
                                                   ->  Nested Loop  (cost=0.86..25477.32 rows=50 width=35)
                                                         ->  Nested Loop  (cost=0.42..13667.23 rows=16766 width=18)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=4209 width=4)
                                                                     Filter: ((p_name)::text ~~ '%navy%'::text)
                                                               ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.99 rows=4 width=14)
                                                                     Index Cond: (ps_partkey = part.p_partkey)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.69 rows=1 width=29)
                                                               Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                                   ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                                         Index Cond: (s_suppkey = lineitem.l_suppkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                                                   Index Cond: (o_orderkey = lineitem.l_orderkey)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 10 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=91692.89..91692.94 rows=20 width=202)
   ->  Sort  (cost=91692.89..91841.73 rows=59533 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=89364.58..90108.74 rows=59533 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=7973.99..88620.42 rows=59533 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=6973.99..81667.12 rows=19204 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=6972.43..81401.50 rows=19204 width=160)
                                 ->  Hash Join  (cost=6972.00..40625.09 rows=19202 width=152)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=19202 width=8)
                                             Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.11 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(21 rows)

query 10 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=91692.89..91692.94 rows=20 width=202)
   ->  Sort  (cost=91692.89..91841.73 rows=59533 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=89364.58..90108.74 rows=59533 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=7973.99..88620.42 rows=59533 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=6973.99..81667.12 rows=19204 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=6972.43..81401.50 rows=19204 width=160)
                                 ->  Hash Join  (cost=6972.00..40625.09 rows=19202 width=152)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=19202 width=8)
                                             Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.11 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(21 rows)

query 10 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=91692.89..91692.94 rows=20 width=202)
   ->  Sort  (cost=91692.89..91841.73 rows=59533 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=89364.58..90108.74 rows=59533 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=7973.99..88620.42 rows=59533 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=6973.99..81667.12 rows=19204 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=6972.43..81401.50 rows=19204 width=160)
                                 ->  Hash Join  (cost=6972.00..40625.09 rows=19202 width=152)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=19202 width=8)
                                             Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.11 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(21 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6361.60..6361.60 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2703.18..2703.19 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..2464.37 rows=31841 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.78 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3658.41..3738.01 rows=31841 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=3021.59..3499.20 rows=31841 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..2464.37 rows=31841 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 2
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6361.60..6361.60 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2703.18..2703.19 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..2464.37 rows=31841 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.78 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3658.41..3738.01 rows=31841 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=3021.59..3499.20 rows=31841 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..2464.37 rows=31841 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 3
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6361.60..6361.60 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2703.18..2703.19 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..2464.37 rows=31841 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.78 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3658.41..3738.01 rows=31841 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=3021.59..3499.20 rows=31841 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..2464.37 rows=31841 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                                                          QUERY PLAN                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=159493.51..159493.56 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=159493.51..159493.86 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=159493.51..159493.58 rows=28 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Gather  (cost=159349.69..159492.84 rows=28 width=27)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=158349.69..158490.04 rows=7 width=27)
                           Group Key: lineitem.l_shipmode
                           ->  Sort  (cost=158349.69..158367.22 rows=7014 width=27)
                                 Sort Key: lineitem.l_shipmode
                                 ->  Nested Loop  (cost=0.43..157901.63 rows=7014 width=27)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..146318.35 rows=7016 width=15)
                                             Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..1.64 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(16 rows)

query 12 run 2
SET
SET
SET
                                                                                                                          QUERY PLAN                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=159493.51..159493.56 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=159493.51..159493.86 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=159493.51..159493.58 rows=28 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Gather  (cost=159349.69..159492.84 rows=28 width=27)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=158349.69..158490.04 rows=7 width=27)
                           Group Key: lineitem.l_shipmode
                           ->  Sort  (cost=158349.69..158367.22 rows=7014 width=27)
                                 Sort Key: lineitem.l_shipmode
                                 ->  Nested Loop  (cost=0.43..157901.63 rows=7014 width=27)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..146318.35 rows=7016 width=15)
                                             Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..1.64 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(16 rows)

query 12 run 3
SET
SET
SET
                                                                                                                          QUERY PLAN                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=159493.51..159493.56 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=159493.51..159493.86 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=159493.51..159493.58 rows=28 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Gather  (cost=159349.69..159492.84 rows=28 width=27)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=158349.69..158490.04 rows=7 width=27)
                           Group Key: lineitem.l_shipmode
                           ->  Sort  (cost=158349.69..158367.22 rows=7014 width=27)
                                 Sort Key: lineitem.l_shipmode
                                 ->  Nested Loop  (cost=0.43..157901.63 rows=7014 width=27)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..146318.35 rows=7016 width=15)
                                             Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..1.64 rows=1 width=20)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(16 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=81502.61..81502.61 rows=1 width=16)
   ->  Sort  (cost=81502.61..81503.11 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=81499.61..81501.61 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=77749.61..79249.61 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..70250.36 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=81502.61..81502.61 rows=1 width=16)
   ->  Sort  (cost=81502.61..81503.11 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=81499.61..81501.61 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=77749.61..79249.61 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..70250.36 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=81502.61..81502.61 rows=1 width=16)
   ->  Sort  (cost=81502.61..81503.11 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=81499.61..81501.61 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=77749.61..79249.61 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..70250.36 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=80952.09..80952.10 rows=1 width=32)
   ->  Aggregate  (cost=80952.09..80952.10 rows=1 width=32)
         ->  Hash Join  (cost=9888.02..79545.96 rows=80350 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1289.02..69842.15 rows=80350 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1268.93 rows=80350 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 14 run 2
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=80952.09..80952.10 rows=1 width=32)
   ->  Aggregate  (cost=80952.09..80952.10 rows=1 width=32)
         ->  Hash Join  (cost=9888.02..79545.96 rows=80350 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1289.02..69842.15 rows=80350 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1268.93 rows=80350 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 14 run 3
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=80952.09..80952.10 rows=1 width=32)
   ->  Aggregate  (cost=80952.09..80952.10 rows=1 width=32)
         ->  Hash Join  (cost=9888.02..79545.96 rows=80350 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1289.02..69842.15 rows=80350 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1268.93 rows=80350 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=244375.09..244375.15 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=121026.60..121026.61 rows=1 width=32)
           ->  HashAggregate  (cost=120775.92..120901.26 rows=10027 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3537.58..118568.95 rows=220697 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3482.40 rows=220697 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=123348.49..123942.39 rows=10027 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=123348.20..123373.27 rows=10027 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=122431.15..122681.83 rows=10027 width=36)
                     ->  HashAggregate  (cost=122431.15..122581.56 rows=10027 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3537.58..118568.95 rows=220697 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3482.40 rows=220697 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=244375.09..244375.15 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=121026.60..121026.61 rows=1 width=32)
           ->  HashAggregate  (cost=120775.92..120901.26 rows=10027 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3537.58..118568.95 rows=220697 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3482.40 rows=220697 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=123348.49..123942.39 rows=10027 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=123348.20..123373.27 rows=10027 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=122431.15..122681.83 rows=10027 width=36)
                     ->  HashAggregate  (cost=122431.15..122581.56 rows=10027 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3537.58..118568.95 rows=220697 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3482.40 rows=220697 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=244375.09..244375.15 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=121026.60..121026.61 rows=1 width=32)
           ->  HashAggregate  (cost=120775.92..120901.26 rows=10027 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3537.58..118568.95 rows=220697 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3482.40 rows=220697 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=123348.49..123942.39 rows=10027 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=123348.20..123373.27 rows=10027 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=122431.15..122681.83 rows=10027 width=36)
                     ->  HashAggregate  (cost=122431.15..122581.56 rows=10027 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3537.58..118568.95 rows=220697 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3482.40 rows=220697 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=34844.14..34844.14 rows=1 width=44)
   ->  Sort  (cost=34844.14..34884.05 rows=15964 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=33868.24..34764.32 rows=15964 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=33868.24..34015.53 rows=58915 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9817.15..29200.30 rows=58915 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17642.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29578 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29578 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 2
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=34844.14..34844.14 rows=1 width=44)
   ->  Sort  (cost=34844.14..34884.05 rows=15964 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=33868.24..34764.32 rows=15964 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=33868.24..34015.53 rows=58915 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9817.15..29200.30 rows=58915 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17642.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29578 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29578 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 3
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=34844.14..34844.14 rows=1 width=44)
   ->  Sort  (cost=34844.14..34884.05 rows=15964 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=33868.24..34764.32 rows=15964 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=33868.24..34015.53 rows=58915 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9817.15..29200.30 rows=58915 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17642.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29578 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29578 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=328329.69..328329.70 rows=1 width=32)
   ->  Aggregate  (cost=328329.69..328329.70 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..328324.83 rows=1944 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..327909.98 rows=194 width=40)
                     Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  GroupAggregate  (cost=0.43..316514.99 rows=197291 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..283548.20 rows=6001485 width=9)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=197 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..2.01 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 17 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=328329.69..328329.70 rows=1 width=32)
   ->  Aggregate  (cost=328329.69..328329.70 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..328324.83 rows=1944 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..327909.98 rows=194 width=40)
                     Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  GroupAggregate  (cost=0.43..316514.99 rows=197291 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..283548.20 rows=6001485 width=9)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=197 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..2.01 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 17 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=328329.69..328329.70 rows=1 width=32)
   ->  Aggregate  (cost=328329.69..328329.70 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..328324.83 rows=1944 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..327909.98 rows=194 width=40)
                     Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  GroupAggregate  (cost=0.43..316514.99 rows=197291 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..283548.20 rows=6001485 width=9)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=197 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..2.01 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 18 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1258691.73..1258691.98 rows=100 width=71)
   ->  Sort  (cost=1258691.73..1266191.73 rows=3000000 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1076533.89..1144033.89 rows=3000000 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=1076533.89..1084033.89 rows=3000000 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=6977.29..694457.92 rows=3000000 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=5.29..646235.92 rows=3000000 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Semi Join  (cost=0.86..372095.97 rows=750000 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..54805.93 rows=1500000 width=20)
                                       ->  Materialize  (cost=0.43..294785.41 rows=1500371 width=4)
                                             ->  GroupAggregate  (cost=0.43..276030.77 rows=1500371 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227268.71 rows=6001485 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..227268.71 rows=6001485 width=9)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 18 run 2
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1258691.73..1258691.98 rows=100 width=71)
   ->  Sort  (cost=1258691.73..1266191.73 rows=3000000 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1076533.89..1144033.89 rows=3000000 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=1076533.89..1084033.89 rows=3000000 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=6977.29..694457.92 rows=3000000 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=5.29..646235.92 rows=3000000 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Semi Join  (cost=0.86..372095.97 rows=750000 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..54805.93 rows=1500000 width=20)
                                       ->  Materialize  (cost=0.43..294785.41 rows=1500371 width=4)
                                             ->  GroupAggregate  (cost=0.43..276030.77 rows=1500371 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227268.71 rows=6001485 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..227268.71 rows=6001485 width=9)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 18 run 3
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1258691.73..1258691.98 rows=100 width=71)
   ->  Sort  (cost=1258691.73..1266191.73 rows=3000000 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1076533.89..1144033.89 rows=3000000 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=1076533.89..1084033.89 rows=3000000 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=6977.29..694457.92 rows=3000000 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=5.29..646235.92 rows=3000000 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Semi Join  (cost=0.86..372095.97 rows=750000 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..54805.93 rows=1500000 width=20)
                                       ->  Materialize  (cost=0.43..294785.41 rows=1500371 width=4)
                                             ->  GroupAggregate  (cost=0.43..276030.77 rows=1500371 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227268.71 rows=6001485 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..227268.71 rows=6001485 width=9)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=18375.61..18375.62 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18375.61..18375.62 rows=1 width=32)
         ->  Gather  (cost=18375.38..18375.59 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17375.38..17375.39 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17375.02 rows=48 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=209 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.57 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=18375.61..18375.62 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18375.61..18375.62 rows=1 width=32)
         ->  Gather  (cost=18375.38..18375.59 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17375.38..17375.39 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17375.02 rows=48 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=209 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.57 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=18375.61..18375.62 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18375.61..18375.62 rows=1 width=32)
         ->  Gather  (cost=18375.38..18375.59 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17375.38..17375.39 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17375.02 rows=48 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=209 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.57 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=278618.61..278618.62 rows=1 width=51)
   ->  Sort  (cost=278618.61..278619.11 rows=200 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=254436.47..278617.61 rows=200 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=6.38..230.58 rows=400 width=55)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=59)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=254430.09..278195.12 rows=32 width=8)
                     ->  Merge Join  (cost=254430.09..278194.96 rows=32 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=241543.70..257968.95 rows=485283 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=241543.70..243830.20 rows=914600 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=14658.08..140937.08 rows=914600 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14429.43 rows=914600 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=12886.39..12906.50 rows=8047 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=1000.42..12364.37 rows=8047 width=16)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..2.94 rows=4 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(33 rows)

query 20 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=278618.61..278618.62 rows=1 width=51)
   ->  Sort  (cost=278618.61..278619.11 rows=200 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=254436.47..278617.61 rows=200 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=6.38..230.58 rows=400 width=55)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=59)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=254430.09..278195.12 rows=32 width=8)
                     ->  Merge Join  (cost=254430.09..278194.96 rows=32 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=241543.70..257968.95 rows=485283 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=241543.70..243830.20 rows=914600 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=14658.08..140937.08 rows=914600 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14429.43 rows=914600 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=12886.39..12906.50 rows=8047 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=1000.42..12364.37 rows=8047 width=16)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..2.94 rows=4 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(33 rows)

query 20 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=278618.61..278618.62 rows=1 width=51)
   ->  Sort  (cost=278618.61..278619.11 rows=200 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=254436.47..278617.61 rows=200 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=6.38..230.58 rows=400 width=55)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=59)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=254430.09..278195.12 rows=32 width=8)
                     ->  Merge Join  (cost=254430.09..278194.96 rows=32 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=241543.70..257968.95 rows=485283 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=241543.70..243830.20 rows=914600 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=14658.08..140937.08 rows=914600 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14429.43 rows=914600 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=12886.39..12906.50 rows=8047 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=1000.42..12364.37 rows=8047 width=16)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..2.94 rows=4 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(33 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=147579.77..147579.77 rows=1 width=34)
   ->  Sort  (cost=147579.77..147579.77 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=147579.74..147579.76 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=147579.74..147579.74 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=1236.87..147579.73 rows=1 width=26)
                           ->  Nested Loop  (cost=1236.44..147578.91 rows=1 width=34)
                                 ->  Gather  (cost=1236.01..147578.43 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=236.01..146578.33 rows=1 width=38)
                                             ->  Hash Join  (cost=235.58..133625.19 rows=19951 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131314.64 rows=500124 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                         ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.61 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.62 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 21 run 2
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=147579.77..147579.77 rows=1 width=34)
   ->  Sort  (cost=147579.77..147579.77 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=147579.74..147579.76 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=147579.74..147579.74 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=1236.87..147579.73 rows=1 width=26)
                           ->  Nested Loop  (cost=1236.44..147578.91 rows=1 width=34)
                                 ->  Gather  (cost=1236.01..147578.43 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=236.01..146578.33 rows=1 width=38)
                                             ->  Hash Join  (cost=235.58..133625.19 rows=19951 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131314.64 rows=500124 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                         ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.61 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.62 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 21 run 3
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=147579.77..147579.77 rows=1 width=34)
   ->  Sort  (cost=147579.77..147579.77 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=147579.74..147579.76 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=147579.74..147579.74 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=1236.87..147579.73 rows=1 width=26)
                           ->  Nested Loop  (cost=1236.44..147578.91 rows=1 width=34)
                                 ->  Gather  (cost=1236.01..147578.43 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=236.01..146578.33 rows=1 width=38)
                                             ->  Hash Join  (cost=235.58..133625.19 rows=19951 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131314.64 rows=500124 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                         ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.61 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.62 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 22 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14821.03..14821.06 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Finalize Aggregate  (cost=6242.81..6242.82 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1985 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8578.21..8598.31 rows=731 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8578.21..8580.04 rows=731 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8543.44 rows=731 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.96 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

query 22 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14821.03..14821.06 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Finalize Aggregate  (cost=6242.81..6242.82 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1985 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8578.21..8598.31 rows=731 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8578.21..8580.04 rows=731 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8543.44 rows=731 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.96 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

query 22 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14821.03..14821.06 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Finalize Aggregate  (cost=6242.81..6242.82 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1985 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8578.21..8598.31 rows=731 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8578.21..8580.04 rows=731 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8543.44 rows=731 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.96 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

