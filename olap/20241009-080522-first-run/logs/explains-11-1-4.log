query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191560.38..191561.05 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191560.38..191564.44 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=191560.38..191563.25 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=190560.32..190560.33 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=190560.08..190560.24 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.20 rows=1481147 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191560.38..191561.05 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191560.38..191564.44 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=191560.38..191563.25 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=190560.32..190560.33 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=190560.08..190560.24 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.20 rows=1481147 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191560.38..191561.05 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191560.38..191564.44 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=191560.38..191563.25 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=190560.32..190560.33 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=190560.08..190560.24 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.20 rows=1481147 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=36821.97..36821.97 rows=1 width=192)
   ->  Sort  (cost=36821.97..36821.97 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=18592.59..36821.96 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6445.10 rows=961 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=400 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=11303.30..11303.30 rows=159553 width=172)
                     ->  Nested Loop  (cost=0.71..11303.30 rows=159553 width=172)
                           ->  Nested Loop  (cost=0.29..134.30 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..22.34 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 2 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=36821.97..36821.97 rows=1 width=192)
   ->  Sort  (cost=36821.97..36821.97 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=18592.59..36821.96 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6445.10 rows=961 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=400 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=11303.30..11303.30 rows=159553 width=172)
                     ->  Nested Loop  (cost=0.71..11303.30 rows=159553 width=172)
                           ->  Nested Loop  (cost=0.29..134.30 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..22.34 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 2 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=36821.97..36821.97 rows=1 width=192)
   ->  Sort  (cost=36821.97..36821.97 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=18592.59..36821.96 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6445.10 rows=961 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=400 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=11303.30..11303.30 rows=159553 width=172)
                     ->  Nested Loop  (cost=0.71..11303.30 rows=159553 width=172)
                           ->  Nested Loop  (cost=0.29..134.30 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..22.34 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 3 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=143414.01..143414.03 rows=10 width=44)
   ->  Sort  (cost=143414.01..144209.29 rows=318113 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=94674.78..136539.70 rows=318113 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=94674.78..129249.61 rows=265094 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=93674.75..97651.16 rows=132547 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=93674.75..94006.12 rows=132547 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=0.86..82397.56 rows=132547 width=24)
                                       ->  Nested Loop  (cost=0.43..33905.20 rows=60694 width=12)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12535 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.28 rows=8 width=16)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.78 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(21 rows)

query 3 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=143414.01..143414.03 rows=10 width=44)
   ->  Sort  (cost=143414.01..144209.29 rows=318113 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=94674.78..136539.70 rows=318113 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=94674.78..129249.61 rows=265094 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=93674.75..97651.16 rows=132547 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=93674.75..94006.12 rows=132547 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=0.86..82397.56 rows=132547 width=24)
                                       ->  Nested Loop  (cost=0.43..33905.20 rows=60694 width=12)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12535 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.28 rows=8 width=16)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.78 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(21 rows)

query 3 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=143414.01..143414.03 rows=10 width=44)
   ->  Sort  (cost=143414.01..144209.29 rows=318113 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=94674.78..136539.70 rows=318113 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=94674.78..129249.61 rows=265094 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=93674.75..97651.16 rows=132547 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=93674.75..94006.12 rows=132547 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=0.86..82397.56 rows=132547 width=24)
                                       ->  Nested Loop  (cost=0.43..33905.20 rows=60694 width=12)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12535 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.28 rows=8 width=16)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.78 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(21 rows)

query 4 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=62539.39..62539.77 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=62539.39..62541.29 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Gather Merge  (cost=62539.39..62541.16 rows=15 width=24)
               Workers Planned: 3
               ->  Sort  (cost=61539.35..61539.36 rows=5 width=24)
                     Sort Key: orders.o_orderpriority
                     ->  Partial HashAggregate  (cost=61539.24..61539.29 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=794.01..61450.31 rows=17786 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=793.58..27191.37 rows=17786 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..779.80 rows=55137 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.17 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 4 run 2
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=62539.39..62539.77 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=62539.39..62541.29 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Gather Merge  (cost=62539.39..62541.16 rows=15 width=24)
               Workers Planned: 3
               ->  Sort  (cost=61539.35..61539.36 rows=5 width=24)
                     Sort Key: orders.o_orderpriority
                     ->  Partial HashAggregate  (cost=61539.24..61539.29 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=794.01..61450.31 rows=17786 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=793.58..27191.37 rows=17786 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..779.80 rows=55137 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.17 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 4 run 3
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=62539.39..62539.77 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=62539.39..62541.29 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Gather Merge  (cost=62539.39..62541.16 rows=15 width=24)
               Workers Planned: 3
               ->  Sort  (cost=61539.35..61539.36 rows=5 width=24)
                     Sort Key: orders.o_orderpriority
                     ->  Partial HashAggregate  (cost=61539.24..61539.29 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=794.01..61450.31 rows=17786 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=793.58..27191.37 rows=17786 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..779.80 rows=55137 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.17 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 5 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=47377.40..47377.41 rows=1 width=58)
   ->  Sort  (cost=47377.40..47377.47 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=47332.57..47377.28 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=47332.57..47376.59 rows=50 width=58)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=46332.55..46370.80 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=46332.55..46340.13 rows=3035 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=476.37..46157.01 rows=3035 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=3.37..45285.56 rows=75895 width=50)
                                             ->  Nested Loop  (cost=2.94..18864.76 rows=18974 width=38)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.11 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.35 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(32 rows)

query 5 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=47377.40..47377.41 rows=1 width=58)
   ->  Sort  (cost=47377.40..47377.47 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=47332.57..47377.28 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=47332.57..47376.59 rows=50 width=58)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=46332.55..46370.80 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=46332.55..46340.13 rows=3035 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=476.37..46157.01 rows=3035 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=3.37..45285.56 rows=75895 width=50)
                                             ->  Nested Loop  (cost=2.94..18864.76 rows=18974 width=38)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.11 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.35 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(32 rows)

query 5 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=47377.40..47377.41 rows=1 width=58)
   ->  Sort  (cost=47377.40..47377.47 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=47332.57..47377.28 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=47332.57..47376.59 rows=50 width=58)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=46332.55..46370.80 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=46332.55..46340.13 rows=3035 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=476.37..46157.01 rows=3035 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=3.37..45285.56 rows=75895 width=50)
                                             ->  Nested Loop  (cost=2.94..18864.76 rows=18974 width=38)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.11 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.35 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(32 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=106589.83..106589.84 rows=1 width=32)
   ->  Finalize Aggregate  (cost=106589.83..106589.84 rows=1 width=32)
         ->  Gather  (cost=106589.39..106589.80 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=105589.39..105589.40 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=20834.29..105442.16 rows=29447 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..20804.85 rows=117787 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=106589.83..106589.84 rows=1 width=32)
   ->  Finalize Aggregate  (cost=106589.83..106589.84 rows=1 width=32)
         ->  Gather  (cost=106589.39..106589.80 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=105589.39..105589.40 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=20834.29..105442.16 rows=29447 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..20804.85 rows=117787 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=106589.83..106589.84 rows=1 width=32)
   ->  Finalize Aggregate  (cost=106589.83..106589.84 rows=1 width=32)
         ->  Gather  (cost=106589.39..106589.80 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=105589.39..105589.40 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=20834.29..105442.16 rows=29447 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..20804.85 rows=117787 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=45266.66..45266.80 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=45266.66..46123.08 rows=6175 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=45266.66..45950.70 rows=5146 width=92)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=44266.64..44356.70 rows=2573 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=44266.64..44273.07 rows=2573 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Hash Join  (cost=301.03..44120.89 rows=2573 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=2.26..43478.47 rows=61829 width=46)
                                       ->  Nested Loop  (cost=1.83..10402.62 rows=50000 width=30)
                                             ->  Hash Join  (cost=1.40..4415.27 rows=5000 width=30)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                               Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.03 rows=17 width=8)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.65 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=288.77..288.77 rows=800 width=30)
                                       ->  Nested Loop  (cost=6.38..288.77 rows=800 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                             ->  Bitmap Heap Scan on supplier  (cost=6.38..139.70 rows=400 width=8)
                                                   Recheck Cond: (s_nationkey = n1.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                         Index Cond: (s_nationkey = n1.n_nationkey)
(33 rows)

query 7 run 2
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=45266.66..45266.80 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=45266.66..46123.08 rows=6175 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=45266.66..45950.70 rows=5146 width=92)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=44266.64..44356.70 rows=2573 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=44266.64..44273.07 rows=2573 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Hash Join  (cost=301.03..44120.89 rows=2573 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=2.26..43478.47 rows=61829 width=46)
                                       ->  Nested Loop  (cost=1.83..10402.62 rows=50000 width=30)
                                             ->  Hash Join  (cost=1.40..4415.27 rows=5000 width=30)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                               Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.03 rows=17 width=8)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.65 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=288.77..288.77 rows=800 width=30)
                                       ->  Nested Loop  (cost=6.38..288.77 rows=800 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                             ->  Bitmap Heap Scan on supplier  (cost=6.38..139.70 rows=400 width=8)
                                                   Recheck Cond: (s_nationkey = n1.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                         Index Cond: (s_nationkey = n1.n_nationkey)
(33 rows)

query 7 run 3
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=45266.66..45266.80 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=45266.66..46123.08 rows=6175 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=45266.66..45950.70 rows=5146 width=92)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=44266.64..44356.70 rows=2573 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=44266.64..44273.07 rows=2573 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Hash Join  (cost=301.03..44120.89 rows=2573 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=2.26..43478.47 rows=61829 width=46)
                                       ->  Nested Loop  (cost=1.83..10402.62 rows=50000 width=30)
                                             ->  Hash Join  (cost=1.40..4415.27 rows=5000 width=30)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                               Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.03 rows=17 width=8)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.65 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=288.77..288.77 rows=800 width=30)
                                       ->  Nested Loop  (cost=6.38..288.77 rows=800 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                             ->  Bitmap Heap Scan on supplier  (cost=6.38..139.70 rows=400 width=8)
                                                   Recheck Cond: (s_nationkey = n1.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                         Index Cond: (s_nationkey = n1.n_nationkey)
(33 rows)

query 8 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=38933.34..38933.49 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=38933.34..39287.02 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=38933.34..39207.79 rows=2008 width=72)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=37933.32..37975.99 rows=1004 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=37933.32..37935.83 rows=1004 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=5.64..37883.26 rows=1004 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Nested Loop  (cost=4.07..37873.60 rows=1004 width=20)
                                       ->  Hash Join  (cost=3.79..37569.83 rows=1004 width=20)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Nested Loop  (cost=1.28..37538.45 rows=5020 width=24)
                                                   ->  Nested Loop  (cost=0.86..35275.87 rows=5020 width=24)
                                                         ->  Nested Loop  (cost=0.43..27707.37 rows=16541 width=20)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=551 width=4)
                                                                     Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..40.66 rows=30 width=24)
                                                                     Index Cond: (l_partkey = part.p_partkey)
                                                         ->  Index Scan using orders_pkey on orders  (cost=0.43..0.46 rows=1 width=12)
                                                               Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=8)
                                                         Index Cond: (c_custkey = orders.o_custkey)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                             Index Cond: (s_suppkey = lineitem.l_suppkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(37 rows)

query 8 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=38933.34..38933.49 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=38933.34..39287.02 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=38933.34..39207.79 rows=2008 width=72)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=37933.32..37975.99 rows=1004 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=37933.32..37935.83 rows=1004 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=5.64..37883.26 rows=1004 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Nested Loop  (cost=4.07..37873.60 rows=1004 width=20)
                                       ->  Hash Join  (cost=3.79..37569.83 rows=1004 width=20)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Nested Loop  (cost=1.28..37538.45 rows=5020 width=24)
                                                   ->  Nested Loop  (cost=0.86..35275.87 rows=5020 width=24)
                                                         ->  Nested Loop  (cost=0.43..27707.37 rows=16541 width=20)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=551 width=4)
                                                                     Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..40.66 rows=30 width=24)
                                                                     Index Cond: (l_partkey = part.p_partkey)
                                                         ->  Index Scan using orders_pkey on orders  (cost=0.43..0.46 rows=1 width=12)
                                                               Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=8)
                                                         Index Cond: (c_custkey = orders.o_custkey)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                             Index Cond: (s_suppkey = lineitem.l_suppkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(37 rows)

query 8 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=38933.34..38933.49 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=38933.34..39287.02 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=38933.34..39207.79 rows=2008 width=72)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=37933.32..37975.99 rows=1004 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=37933.32..37935.83 rows=1004 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=5.64..37883.26 rows=1004 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Nested Loop  (cost=4.07..37873.60 rows=1004 width=20)
                                       ->  Hash Join  (cost=3.79..37569.83 rows=1004 width=20)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Nested Loop  (cost=1.28..37538.45 rows=5020 width=24)
                                                   ->  Nested Loop  (cost=0.86..35275.87 rows=5020 width=24)
                                                         ->  Nested Loop  (cost=0.43..27707.37 rows=16541 width=20)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=551 width=4)
                                                                     Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..40.66 rows=30 width=24)
                                                                     Index Cond: (l_partkey = part.p_partkey)
                                                         ->  Index Scan using orders_pkey on orders  (cost=0.43..0.46 rows=1 width=12)
                                                               Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Index Scan using customer_pkey on customer  (cost=0.42..0.45 rows=1 width=8)
                                                         Index Cond: (c_custkey = orders.o_custkey)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                             Index Cond: (s_suppkey = lineitem.l_suppkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(37 rows)

query 9 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=37028.87..37029.00 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=37028.87..37055.31 rows=193 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=37028.87..37050.34 rows=160 width=66)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=36028.84..36031.84 rows=80 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=36028.84..36029.04 rows=80 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3.13..36026.32 rows=80 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=1.57..36024.11 rows=80 width=31)
                                       ->  Nested Loop  (cost=1.14..35987.90 rows=80 width=31)
                                             ->  Nested Loop  (cost=0.86..35963.70 rows=80 width=35)
                                                   ->  Nested Loop  (cost=0.42..17030.65 rows=26878 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=6734 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.73 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.69 rows=1 width=29)
                                                         Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                             ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                                   Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 9 run 2
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=37028.87..37029.00 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=37028.87..37055.31 rows=193 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=37028.87..37050.34 rows=160 width=66)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=36028.84..36031.84 rows=80 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=36028.84..36029.04 rows=80 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3.13..36026.32 rows=80 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=1.57..36024.11 rows=80 width=31)
                                       ->  Nested Loop  (cost=1.14..35987.90 rows=80 width=31)
                                             ->  Nested Loop  (cost=0.86..35963.70 rows=80 width=35)
                                                   ->  Nested Loop  (cost=0.42..17030.65 rows=26878 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=6734 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.73 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.69 rows=1 width=29)
                                                         Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                             ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                                   Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 9 run 3
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=37028.87..37029.00 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=37028.87..37055.31 rows=193 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=37028.87..37050.34 rows=160 width=66)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=36028.84..36031.84 rows=80 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=36028.84..36029.04 rows=80 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3.13..36026.32 rows=80 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=1.57..36024.11 rows=80 width=31)
                                       ->  Nested Loop  (cost=1.14..35987.90 rows=80 width=31)
                                             ->  Nested Loop  (cost=0.86..35963.70 rows=80 width=35)
                                                   ->  Nested Loop  (cost=0.42..17030.65 rows=26878 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=6734 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.73 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.69 rows=1 width=29)
                                                         Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                             ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                                   Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 10 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=83274.48..83274.53 rows=20 width=202)
   ->  Sort  (cost=83274.48..83421.57 rows=58836 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=80973.42..81708.87 rows=58836 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6867.29..80237.97 rows=58836 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5867.29..73354.37 rows=18979 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5865.73..73294.55 rows=18979 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=862.48..68241.48 rows=18979 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=862.05..27282.95 rows=19327 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..847.07 rows=59914 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.11 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=83274.48..83274.53 rows=20 width=202)
   ->  Sort  (cost=83274.48..83421.57 rows=58836 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=80973.42..81708.87 rows=58836 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6867.29..80237.97 rows=58836 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5867.29..73354.37 rows=18979 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5865.73..73294.55 rows=18979 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=862.48..68241.48 rows=18979 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=862.05..27282.95 rows=19327 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..847.07 rows=59914 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.11 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=83274.48..83274.53 rows=20 width=202)
   ->  Sort  (cost=83274.48..83421.57 rows=58836 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=80973.42..81708.87 rows=58836 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6867.29..80237.97 rows=58836 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5867.29..73354.37 rows=18979 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5865.73..73294.55 rows=18979 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=862.48..68241.48 rows=18979 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=862.05..27282.95 rows=19327 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..847.07 rows=59914 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.11 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6338.17..6338.17 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2703.71..2703.72 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..2464.37 rows=31911 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.78 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3634.44..3661.04 rows=10637 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=3022.82..3581.26 rows=10637 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..2464.37 rows=31911 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 2
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6338.17..6338.17 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2703.71..2703.72 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..2464.37 rows=31911 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.78 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3634.44..3661.04 rows=10637 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=3022.82..3581.26 rows=10637 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..2464.37 rows=31911 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 3
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6338.17..6338.17 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2703.71..2703.72 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..2464.37 rows=31911 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.78 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3634.44..3661.04 rows=10637 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=3022.82..3581.26 rows=10637 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..2464.37 rows=31911 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=159250.95..159271.45 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=159250.95..159394.44 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=159250.95..159394.16 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=158250.89..158390.76 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=158250.89..158268.37 rows=6990 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..157804.54 rows=6990 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..146317.55 rows=6992 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..1.64 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 12 run 2
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=159250.95..159271.45 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=159250.95..159394.44 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=159250.95..159394.16 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=158250.89..158390.76 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=158250.89..158268.37 rows=6990 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..157804.54 rows=6990 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..146317.55 rows=6992 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..1.64 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 12 run 3
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=159250.95..159271.45 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=159250.95..159394.44 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=159250.95..159394.16 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=158250.89..158390.76 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=158250.89..158268.37 rows=6990 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..157804.54 rows=6990 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..146317.55 rows=6992 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..1.64 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64702.50..64702.50 rows=1 width=16)
   ->  Sort  (cost=64702.50..64703.00 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64699.50..64701.50 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60949.50..62449.50 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53525.26 rows=1484848 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484848 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64702.50..64702.50 rows=1 width=16)
   ->  Sort  (cost=64702.50..64703.00 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64699.50..64701.50 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60949.50..62449.50 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53525.26 rows=1484848 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484848 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64702.50..64702.50 rows=1 width=16)
   ->  Sort  (cost=64702.50..64703.00 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64699.50..64701.50 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60949.50..62449.50 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53525.26 rows=1484848 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484848 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=75917.66..75917.67 rows=1 width=32)
   ->  Finalize Aggregate  (cost=75917.66..75917.67 rows=1 width=32)
         ->  Gather  (cost=75917.20..75917.61 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=74917.20..74917.21 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7251.02..74568.86 rows=19905 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1277.03..68542.62 rows=19905 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1257.12 rows=79619 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=75917.66..75917.67 rows=1 width=32)
   ->  Finalize Aggregate  (cost=75917.66..75917.67 rows=1 width=32)
         ->  Gather  (cost=75917.20..75917.61 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=74917.20..74917.21 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7251.02..74568.86 rows=19905 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1277.03..68542.62 rows=19905 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1257.12 rows=79619 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=75917.66..75917.67 rows=1 width=32)
   ->  Finalize Aggregate  (cost=75917.66..75917.67 rows=1 width=32)
         ->  Gather  (cost=75917.20..75917.61 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=74917.20..74917.21 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7251.02..74568.86 rows=19905 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1277.03..68542.62 rows=19905 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1257.12 rows=79619 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=241485.83..241597.55 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122094.58..122094.59 rows=1 width=32)
           ->  HashAggregate  (cost=121844.73..121969.66 rows=9994 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3627.78..119581.95 rows=226278 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3571.21 rows=226278 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=119391.24..124977.18 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=119390.95..124852.06 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Gather Merge  (cost=119390.95..124177.46 rows=39976 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=118390.89..118415.88 rows=9994 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=117602.02..117726.95 rows=9994 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=3627.78..117036.32 rows=56570 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3571.21 rows=226278 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.49 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=241485.83..241597.55 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122094.58..122094.59 rows=1 width=32)
           ->  HashAggregate  (cost=121844.73..121969.66 rows=9994 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3627.78..119581.95 rows=226278 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3571.21 rows=226278 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=119391.24..124977.18 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=119390.95..124852.06 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Gather Merge  (cost=119390.95..124177.46 rows=39976 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=118390.89..118415.88 rows=9994 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=117602.02..117726.95 rows=9994 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=3627.78..117036.32 rows=56570 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3571.21 rows=226278 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.49 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=241485.83..241597.55 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122094.58..122094.59 rows=1 width=32)
           ->  HashAggregate  (cost=121844.73..121969.66 rows=9994 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3627.78..119581.95 rows=226278 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3571.21 rows=226278 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=119391.24..124977.18 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=119390.95..124852.06 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Gather Merge  (cost=119390.95..124177.46 rows=39976 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=118390.89..118415.88 rows=9994 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=117602.02..117726.95 rows=9994 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=3627.78..117036.32 rows=56570 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3571.21 rows=226278 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.49 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29420.74..29420.74 rows=1 width=44)
   ->  Sort  (cost=29420.74..29460.82 rows=16034 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=28434.90..29340.57 rows=16034 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=28434.90..28583.97 rows=59626 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=7686.37..23705.47 rows=59626 width=40)
                           Workers Planned: 4
                           ->  Parallel Hash Join  (cost=6686.37..16742.87 rows=14906 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12449 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12449 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29420.74..29420.74 rows=1 width=44)
   ->  Sort  (cost=29420.74..29460.82 rows=16034 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=28434.90..29340.57 rows=16034 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=28434.90..28583.97 rows=59626 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=7686.37..23705.47 rows=59626 width=40)
                           Workers Planned: 4
                           ->  Parallel Hash Join  (cost=6686.37..16742.87 rows=14906 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12449 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12449 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29420.74..29420.74 rows=1 width=44)
   ->  Sort  (cost=29420.74..29460.82 rows=16034 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=28434.90..29340.57 rows=16034 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=28434.90..28583.97 rows=59626 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=7686.37..23705.47 rows=59626 width=40)
                           Workers Planned: 4
                           ->  Parallel Hash Join  (cost=6686.37..16742.87 rows=14906 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12449 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12449 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=328397.70..328397.71 rows=1 width=32)
   ->  Aggregate  (cost=328397.70..328397.71 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..328392.66 rows=2014 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..327964.91 rows=201 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=202 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..316543.62 rows=199389 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..283546.07 rows=6001343 width=9)
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..2.00 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 17 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=328397.70..328397.71 rows=1 width=32)
   ->  Aggregate  (cost=328397.70..328397.71 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..328392.66 rows=2014 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..327964.91 rows=201 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=202 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..316543.62 rows=199389 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..283546.07 rows=6001343 width=9)
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..2.00 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 17 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=328397.70..328397.71 rows=1 width=32)
   ->  Aggregate  (cost=328397.70..328397.71 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..328392.66 rows=2014 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..327964.91 rows=201 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=202 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..316543.62 rows=199389 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..283546.07 rows=6001343 width=9)
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..2.00 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 18 run 1
SET
SET
SET
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=875873.69..875873.94 rows=100 width=71)
   ->  Sort  (cost=875873.69..880874.81 rows=2000448 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=513063.47..799418.00 rows=2000448 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=513063.47..755053.22 rows=1935918 width=71)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=512063.43..526582.82 rows=645306 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=512063.43..513676.70 rows=645306 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Nested Loop  (cost=296034.54..437030.62 rows=645306 width=44)
                                       ->  Parallel Hash Join  (cost=296034.10..328697.47 rows=161326 width=43)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Hash Join  (cost=291030.85..323270.72 rows=161326 width=24)
                                                   Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=20)
                                                   ->  Hash  (cost=284779.45..284779.45 rows=500112 width=4)
                                                         ->  GroupAggregate  (cost=0.43..279778.33 rows=500112 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                               ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227266.58 rows=6001343 width=9)
                                             ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=23)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=23)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.63 rows=4 width=9)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
(26 rows)

query 18 run 2
SET
SET
SET
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=875873.69..875873.94 rows=100 width=71)
   ->  Sort  (cost=875873.69..880874.81 rows=2000448 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=513063.47..799418.00 rows=2000448 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=513063.47..755053.22 rows=1935918 width=71)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=512063.43..526582.82 rows=645306 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=512063.43..513676.70 rows=645306 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Nested Loop  (cost=296034.54..437030.62 rows=645306 width=44)
                                       ->  Parallel Hash Join  (cost=296034.10..328697.47 rows=161326 width=43)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Hash Join  (cost=291030.85..323270.72 rows=161326 width=24)
                                                   Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=20)
                                                   ->  Hash  (cost=284779.45..284779.45 rows=500112 width=4)
                                                         ->  GroupAggregate  (cost=0.43..279778.33 rows=500112 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                               ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227266.58 rows=6001343 width=9)
                                             ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=23)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=23)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.63 rows=4 width=9)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
(26 rows)

query 18 run 3
SET
SET
SET
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=875873.69..875873.94 rows=100 width=71)
   ->  Sort  (cost=875873.69..880874.81 rows=2000448 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=513063.47..799418.00 rows=2000448 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=513063.47..755053.22 rows=1935918 width=71)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=512063.43..526582.82 rows=645306 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=512063.43..513676.70 rows=645306 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Nested Loop  (cost=296034.54..437030.62 rows=645306 width=44)
                                       ->  Parallel Hash Join  (cost=296034.10..328697.47 rows=161326 width=43)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Hash Join  (cost=291030.85..323270.72 rows=161326 width=24)
                                                   Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=20)
                                                   ->  Hash  (cost=284779.45..284779.45 rows=500112 width=4)
                                                         ->  GroupAggregate  (cost=0.43..279778.33 rows=500112 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                               ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227266.58 rows=6001343 width=9)
                                             ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=23)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=23)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.63 rows=4 width=9)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
(26 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=17935.77..17935.78 rows=1 width=32)
   ->  Finalize Aggregate  (cost=17935.77..17935.78 rows=1 width=32)
         ->  Gather  (cost=17935.55..17935.76 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=16935.55..16935.56 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..16935.20 rows=46 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=199 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.70 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=17935.77..17935.78 rows=1 width=32)
   ->  Finalize Aggregate  (cost=17935.77..17935.78 rows=1 width=32)
         ->  Gather  (cost=17935.55..17935.76 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=16935.55..16935.56 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..16935.20 rows=46 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=199 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.70 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=17935.77..17935.78 rows=1 width=32)
   ->  Finalize Aggregate  (cost=17935.77..17935.78 rows=1 width=32)
         ->  Gather  (cost=17935.55..17935.76 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=16935.55..16935.56 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..16935.20 rows=46 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=199 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.70 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=276698.79..276698.79 rows=1 width=51)
   ->  Sort  (cost=276698.79..276698.79 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=242597.27..276698.78 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=242597.27..276243.47 rows=1 width=8)
                     ->  Nested Loop  (cost=242597.27..276243.46 rows=1 width=8)
                           ->  Merge Join  (cost=242596.85..273682.75 rows=4917 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  GroupAggregate  (cost=242596.43..259116.29 rows=486866 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Sort  (cost=242596.43..244900.65 rows=921687 width=13)
                                             Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                             ->  Bitmap Heap Scan on lineitem  (cost=14772.72..141158.03 rows=921687 width=13)
                                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14542.30 rows=921687 width=0)
                                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Index Scan using part_pkey on part  (cost=0.42..8426.42 rows=2020 width=4)
                                       Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=276698.79..276698.79 rows=1 width=51)
   ->  Sort  (cost=276698.79..276698.79 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=242597.27..276698.78 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=242597.27..276243.47 rows=1 width=8)
                     ->  Nested Loop  (cost=242597.27..276243.46 rows=1 width=8)
                           ->  Merge Join  (cost=242596.85..273682.75 rows=4917 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  GroupAggregate  (cost=242596.43..259116.29 rows=486866 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Sort  (cost=242596.43..244900.65 rows=921687 width=13)
                                             Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                             ->  Bitmap Heap Scan on lineitem  (cost=14772.72..141158.03 rows=921687 width=13)
                                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14542.30 rows=921687 width=0)
                                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Index Scan using part_pkey on part  (cost=0.42..8426.42 rows=2020 width=4)
                                       Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=276698.79..276698.79 rows=1 width=51)
   ->  Sort  (cost=276698.79..276698.79 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=242597.27..276698.78 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=242597.27..276243.47 rows=1 width=8)
                     ->  Nested Loop  (cost=242597.27..276243.46 rows=1 width=8)
                           ->  Merge Join  (cost=242596.85..273682.75 rows=4917 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  GroupAggregate  (cost=242596.43..259116.29 rows=486866 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Sort  (cost=242596.43..244900.65 rows=921687 width=13)
                                             Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                             ->  Bitmap Heap Scan on lineitem  (cost=14772.72..141158.03 rows=921687 width=13)
                                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14542.30 rows=921687 width=0)
                                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Index Scan using part_pkey on part  (cost=0.42..8426.42 rows=2020 width=4)
                                       Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146651.80..146651.80 rows=1 width=34)
   ->  Sort  (cost=146651.80..146651.80 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=146651.77..146651.79 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=146651.77..146651.77 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1236.87..146651.76 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1236.44..146651.29 rows=1 width=34)
                                 ->  Gather  (cost=1236.01..146650.66 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=236.01..145650.56 rows=1 width=34)
                                             ->  Hash Join  (cost=235.58..133625.23 rows=20004 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131314.20 rows=500112 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                         ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.62 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.61 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(33 rows)

query 21 run 2
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146651.80..146651.80 rows=1 width=34)
   ->  Sort  (cost=146651.80..146651.80 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=146651.77..146651.79 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=146651.77..146651.77 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1236.87..146651.76 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1236.44..146651.29 rows=1 width=34)
                                 ->  Gather  (cost=1236.01..146650.66 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=236.01..145650.56 rows=1 width=34)
                                             ->  Hash Join  (cost=235.58..133625.23 rows=20004 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131314.20 rows=500112 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                         ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.62 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.61 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(33 rows)

query 21 run 3
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146651.80..146651.80 rows=1 width=34)
   ->  Sort  (cost=146651.80..146651.80 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=146651.77..146651.79 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=146651.77..146651.77 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1236.87..146651.76 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1236.44..146651.29 rows=1 width=34)
                                 ->  Gather  (cost=1236.01..146650.66 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=236.01..145650.56 rows=1 width=34)
                                             ->  Hash Join  (cost=235.58..133625.23 rows=20004 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131314.20 rows=500112 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                         ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.62 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.61 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(33 rows)

query 22 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12913.27..12913.40 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.82..6242.83 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1987 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Finalize GroupAggregate  (cost=6670.44..6768.15 rows=732 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Gather Merge  (cost=6670.44..6749.24 rows=610 width=72)
               Workers Planned: 2
               Params Evaluated: $1
               ->  Partial GroupAggregate  (cost=5670.42..5678.81 rows=305 width=72)
                     Group Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Sort  (cost=5670.42..5671.18 rows=305 width=38)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Nested Loop Anti Join  (cost=0.43..5657.83 rows=305 width=38)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                       Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                                 ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.96 rows=17 width=4)
                                       Index Cond: (o_custkey = customer.c_custkey)
(22 rows)

query 22 run 2
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12913.27..12913.40 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.82..6242.83 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1987 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Finalize GroupAggregate  (cost=6670.44..6768.15 rows=732 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Gather Merge  (cost=6670.44..6749.24 rows=610 width=72)
               Workers Planned: 2
               Params Evaluated: $1
               ->  Partial GroupAggregate  (cost=5670.42..5678.81 rows=305 width=72)
                     Group Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Sort  (cost=5670.42..5671.18 rows=305 width=38)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Nested Loop Anti Join  (cost=0.43..5657.83 rows=305 width=38)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                       Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                                 ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.96 rows=17 width=4)
                                       Index Cond: (o_custkey = customer.c_custkey)
(22 rows)

query 22 run 3
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12913.27..12913.40 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.82..6242.83 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1987 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Finalize GroupAggregate  (cost=6670.44..6768.15 rows=732 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Gather Merge  (cost=6670.44..6749.24 rows=610 width=72)
               Workers Planned: 2
               Params Evaluated: $1
               ->  Partial GroupAggregate  (cost=5670.42..5678.81 rows=305 width=72)
                     Group Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Sort  (cost=5670.42..5671.18 rows=305 width=38)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Nested Loop Anti Join  (cost=0.43..5657.83 rows=305 width=38)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                       Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                                 ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.96 rows=17 width=4)
                                       Index Cond: (o_custkey = customer.c_custkey)
(22 rows)

