query 1 run 1
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=4244385.44..4244385.44 rows=1 width=25)
   ->  Sort  (cost=4244385.44..4244385.45 rows=6 width=25)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=4244385.30..4244385.41 rows=6 width=25)
               ->  Seq Scan on lineitem  (cost=0.00..1874968.10 rows=59235430 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(6 rows)

query 1 run 2
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=4244385.44..4244385.44 rows=1 width=25)
   ->  Sort  (cost=4244385.44..4244385.45 rows=6 width=25)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=4244385.30..4244385.41 rows=6 width=25)
               ->  Seq Scan on lineitem  (cost=0.00..1874968.10 rows=59235430 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(6 rows)

query 1 run 3
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=4244385.44..4244385.44 rows=1 width=25)
   ->  Sort  (cost=4244385.44..4244385.45 rows=6 width=25)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=4244385.30..4244385.41 rows=6 width=25)
               ->  Seq Scan on lineitem  (cost=0.00..1874968.10 rows=59235430 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(6 rows)

query 2 run 1
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1122365.93..1122365.93 rows=1 width=193)
   ->  Sort  (cost=1122365.93..1122365.93 rows=1 width=193)
         Sort Key: public.supplier.s_acctbal, public.nation.n_name, public.supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=558040.50..1122365.92 rows=1 width=193)
               Merge Cond: (part.p_partkey = public.partsupp.ps_partkey)
               Join Filter: (public.partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.00..89211.93 rows=8753 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=558039.97..566039.99 rows=1600003 width=173)
                     ->  Sort  (cost=558039.97..562039.98 rows=1600003 width=173)
                           Sort Key: public.partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.53..305270.77 rows=1600003 width=173)
                                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255222.15 rows=8000015 width=14)
                                 ->  Hash  (cost=3798.53..3798.53 rows=20000 width=167)
                                       ->  Hash Join  (cost=2.53..3798.53 rows=20000 width=167)
                                             Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (public.nation.n_regionkey = public.region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=66.12..66.13 rows=1 width=6)
                       ->  Nested Loop  (cost=1.56..66.11 rows=4 width=6)
                             Join Filter: (public.nation.n_regionkey = public.region.r_regionkey)
                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=1.56..64.82 rows=18 width=10)
                                   Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                   ->  Nested Loop  (cost=0.00..63.01 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.89 rows=18 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.27 rows=1 width=8)
                                               Index Cond: (s_suppkey = public.partsupp.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
(40 rows)

query 2 run 2
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1122365.93..1122365.93 rows=1 width=193)
   ->  Sort  (cost=1122365.93..1122365.93 rows=1 width=193)
         Sort Key: public.supplier.s_acctbal, public.nation.n_name, public.supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=558040.50..1122365.92 rows=1 width=193)
               Merge Cond: (part.p_partkey = public.partsupp.ps_partkey)
               Join Filter: (public.partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.00..89211.93 rows=8753 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=558039.97..566039.99 rows=1600003 width=173)
                     ->  Sort  (cost=558039.97..562039.98 rows=1600003 width=173)
                           Sort Key: public.partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.53..305270.77 rows=1600003 width=173)
                                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255222.15 rows=8000015 width=14)
                                 ->  Hash  (cost=3798.53..3798.53 rows=20000 width=167)
                                       ->  Hash Join  (cost=2.53..3798.53 rows=20000 width=167)
                                             Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (public.nation.n_regionkey = public.region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=66.12..66.13 rows=1 width=6)
                       ->  Nested Loop  (cost=1.56..66.11 rows=4 width=6)
                             Join Filter: (public.nation.n_regionkey = public.region.r_regionkey)
                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=1.56..64.82 rows=18 width=10)
                                   Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                   ->  Nested Loop  (cost=0.00..63.01 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.89 rows=18 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.27 rows=1 width=8)
                                               Index Cond: (s_suppkey = public.partsupp.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
(40 rows)

query 2 run 3
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1122365.93..1122365.93 rows=1 width=193)
   ->  Sort  (cost=1122365.93..1122365.93 rows=1 width=193)
         Sort Key: public.supplier.s_acctbal, public.nation.n_name, public.supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=558040.50..1122365.92 rows=1 width=193)
               Merge Cond: (part.p_partkey = public.partsupp.ps_partkey)
               Join Filter: (public.partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.00..89211.93 rows=8753 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=558039.97..566039.99 rows=1600003 width=173)
                     ->  Sort  (cost=558039.97..562039.98 rows=1600003 width=173)
                           Sort Key: public.partsupp.ps_partkey
                           ->  Hash Join  (cost=4048.53..305270.77 rows=1600003 width=173)
                                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..255222.15 rows=8000015 width=14)
                                 ->  Hash  (cost=3798.53..3798.53 rows=20000 width=167)
                                       ->  Hash Join  (cost=2.53..3798.53 rows=20000 width=167)
                                             Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (public.nation.n_regionkey = public.region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=66.12..66.13 rows=1 width=6)
                       ->  Nested Loop  (cost=1.56..66.11 rows=4 width=6)
                             Join Filter: (public.nation.n_regionkey = public.region.r_regionkey)
                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=1.56..64.82 rows=18 width=10)
                                   Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                   ->  Nested Loop  (cost=0.00..63.01 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.89 rows=18 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.27 rows=1 width=8)
                                               Index Cond: (s_suppkey = public.partsupp.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
(40 rows)

query 3 run 1
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3492955.43..3492955.46 rows=10 width=24)
   ->  Sort  (cost=3492955.43..3500510.80 rows=3022146 width=24)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         ->  GroupAggregate  (cost=3344538.93..3427647.95 rows=3022146 width=24)
               ->  Sort  (cost=3344538.93..3352094.30 rows=3022146 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=632147.64..2979405.10 rows=3022146 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1874968.10 rows=32199173 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=607674.09..607674.09 rows=1407884 width=12)
                                 ->  Hash Join  (cost=143642.99..607674.09 rows=1407884 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=85272.65..436390.30 rows=7187972 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..83475.66 rows=7187972 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54697.70..54697.70 rows=293811 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54697.70 rows=293811 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 2
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3492955.43..3492955.46 rows=10 width=24)
   ->  Sort  (cost=3492955.43..3500510.80 rows=3022146 width=24)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         ->  GroupAggregate  (cost=3344538.93..3427647.95 rows=3022146 width=24)
               ->  Sort  (cost=3344538.93..3352094.30 rows=3022146 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=632147.64..2979405.10 rows=3022146 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1874968.10 rows=32199173 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=607674.09..607674.09 rows=1407884 width=12)
                                 ->  Hash Join  (cost=143642.99..607674.09 rows=1407884 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=85272.65..436390.30 rows=7187972 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..83475.66 rows=7187972 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54697.70..54697.70 rows=293811 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54697.70 rows=293811 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 3
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3492955.43..3492955.46 rows=10 width=24)
   ->  Sort  (cost=3492955.43..3500510.80 rows=3022146 width=24)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         ->  GroupAggregate  (cost=3344538.93..3427647.95 rows=3022146 width=24)
               ->  Sort  (cost=3344538.93..3352094.30 rows=3022146 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=632147.64..2979405.10 rows=3022146 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1874968.10 rows=32199173 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=607674.09..607674.09 rows=1407884 width=12)
                                 ->  Hash Join  (cost=143642.99..607674.09 rows=1407884 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=85272.65..436390.30 rows=7187972 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..83475.66 rows=7187972 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54697.70..54697.70 rows=293811 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54697.70 rows=293811 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 4 run 1
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3001757.50..3001757.51 rows=1 width=16)
   ->  Sort  (cost=3001757.50..3001757.51 rows=1 width=16)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=3001757.48..3001757.49 rows=1 width=16)
               ->  Nested Loop Semi Join  (cost=7883.41..2999014.23 rows=548651 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=7883.41..277383.19 rows=548785 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7746.22 rows=548785 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..5.78 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(12 rows)

query 4 run 2
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3001757.50..3001757.51 rows=1 width=16)
   ->  Sort  (cost=3001757.50..3001757.51 rows=1 width=16)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=3001757.48..3001757.49 rows=1 width=16)
               ->  Nested Loop Semi Join  (cost=7883.41..2999014.23 rows=548651 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=7883.41..277383.19 rows=548785 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7746.22 rows=548785 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..5.78 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(12 rows)

query 4 run 3
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3001757.50..3001757.51 rows=1 width=16)
   ->  Sort  (cost=3001757.50..3001757.51 rows=1 width=16)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=3001757.48..3001757.49 rows=1 width=16)
               ->  Nested Loop Semi Join  (cost=7883.41..2999014.23 rows=548651 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=7883.41..277383.19 rows=548785 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7746.22 rows=548785 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..5.78 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(12 rows)

query 5 run 1
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2939416.51..2939416.51 rows=1 width=38)
   ->  Sort  (cost=2939416.51..2939416.57 rows=25 width=38)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  HashAggregate  (cost=2939416.13..2939416.38 rows=25 width=38)
               ->  Hash Join  (cost=452601.70..2938689.90 rows=72623 width=38)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Merge Join  (cost=447880.70..2896692.45 rows=1827511 width=50)
                           Merge Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2271656.34 rows=59986008 width=20)
                           ->  Sort  (cost=447787.85..448930.32 rows=456989 width=38)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=96146.12..404826.77 rows=456989 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=32820.57..328362.78 rows=2284947 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..32249.34 rows=2284947 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59575.41..59575.41 rows=300011 width=38)
                                             ->  Hash Join  (cost=2.53..59575.41 rows=300011 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                                   ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(30 rows)

query 5 run 2
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2939416.51..2939416.51 rows=1 width=38)
   ->  Sort  (cost=2939416.51..2939416.57 rows=25 width=38)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  HashAggregate  (cost=2939416.13..2939416.38 rows=25 width=38)
               ->  Hash Join  (cost=452601.70..2938689.90 rows=72623 width=38)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Merge Join  (cost=447880.70..2896692.45 rows=1827511 width=50)
                           Merge Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2271656.34 rows=59986008 width=20)
                           ->  Sort  (cost=447787.85..448930.32 rows=456989 width=38)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=96146.12..404826.77 rows=456989 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=32820.57..328362.78 rows=2284947 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..32249.34 rows=2284947 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59575.41..59575.41 rows=300011 width=38)
                                             ->  Hash Join  (cost=2.53..59575.41 rows=300011 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                                   ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(30 rows)

query 5 run 3
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2939416.51..2939416.51 rows=1 width=38)
   ->  Sort  (cost=2939416.51..2939416.57 rows=25 width=38)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  HashAggregate  (cost=2939416.13..2939416.38 rows=25 width=38)
               ->  Hash Join  (cost=452601.70..2938689.90 rows=72623 width=38)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Merge Join  (cost=447880.70..2896692.45 rows=1827511 width=50)
                           Merge Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2271656.34 rows=59986008 width=20)
                           ->  Sort  (cost=447787.85..448930.32 rows=456989 width=38)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=96146.12..404826.77 rows=456989 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=32820.57..328362.78 rows=2284947 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..32249.34 rows=2284947 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59575.41..59575.41 rows=300011 width=38)
                                             ->  Hash Join  (cost=2.53..59575.41 rows=300011 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                                   ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(30 rows)

query 6 run 1
SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1089381.49..1089381.50 rows=1 width=12)
   ->  Aggregate  (cost=1089381.49..1089381.50 rows=1 width=12)
         ->  Bitmap Heap Scan on lineitem  (cost=210870.02..1083407.51 rows=1194797 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..210571.32 rows=1194797 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(6 rows)

query 6 run 2
SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1089381.49..1089381.50 rows=1 width=12)
   ->  Aggregate  (cost=1089381.49..1089381.50 rows=1 width=12)
         ->  Bitmap Heap Scan on lineitem  (cost=210870.02..1083407.51 rows=1194797 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..210571.32 rows=1194797 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(6 rows)

query 6 run 3
SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1089381.49..1089381.50 rows=1 width=12)
   ->  Aggregate  (cost=1089381.49..1089381.50 rows=1 width=12)
         ->  Bitmap Heap Scan on lineitem  (cost=210870.02..1083407.51 rows=1194797 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..210571.32 rows=1194797 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(6 rows)

query 7 run 1
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2596217.04..2596217.05 rows=1 width=68)
   ->  Sort  (cost=2596217.04..2596360.65 rows=57442 width=68)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2595068.20..2595929.83 rows=57442 width=68)
               ->  Hash Join  (cost=861121.80..2594206.57 rows=57442 width=68)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (n1.n_nationkey = supplier.s_nationkey))
                     ->  Hash Join  (cost=856400.80..2559720.76 rows=1445159 width=76)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=289732.48..1686059.78 rows=18078953 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..285212.74 rows=18078953 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=538799.14..538799.14 rows=1199054 width=60)
                                 ->  Hash Join  (cost=59288.31..538799.14 rows=1199054 width=60)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..411269.70 rows=15000170 width=8)
                                       ->  Hash  (cost=57789.46..57789.46 rows=119908 width=60)
                                             ->  Hash Join  (cost=16.65..57789.46 rows=119908 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                                   ->  Hash  (cost=16.62..16.62 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..16.62 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=30)
                                                               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
                     ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(28 rows)

query 7 run 2
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2596217.04..2596217.05 rows=1 width=68)
   ->  Sort  (cost=2596217.04..2596360.65 rows=57442 width=68)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2595068.20..2595929.83 rows=57442 width=68)
               ->  Hash Join  (cost=861121.80..2594206.57 rows=57442 width=68)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (n1.n_nationkey = supplier.s_nationkey))
                     ->  Hash Join  (cost=856400.80..2559720.76 rows=1445159 width=76)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=289732.48..1686059.78 rows=18078953 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..285212.74 rows=18078953 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=538799.14..538799.14 rows=1199054 width=60)
                                 ->  Hash Join  (cost=59288.31..538799.14 rows=1199054 width=60)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..411269.70 rows=15000170 width=8)
                                       ->  Hash  (cost=57789.46..57789.46 rows=119908 width=60)
                                             ->  Hash Join  (cost=16.65..57789.46 rows=119908 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                                   ->  Hash  (cost=16.62..16.62 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..16.62 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=30)
                                                               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
                     ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(28 rows)

query 7 run 3
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2596217.04..2596217.05 rows=1 width=68)
   ->  Sort  (cost=2596217.04..2596360.65 rows=57442 width=68)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2595068.20..2595929.83 rows=57442 width=68)
               ->  Hash Join  (cost=861121.80..2594206.57 rows=57442 width=68)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (n1.n_nationkey = supplier.s_nationkey))
                     ->  Hash Join  (cost=856400.80..2559720.76 rows=1445159 width=76)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=289732.48..1686059.78 rows=18078953 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..285212.74 rows=18078953 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=538799.14..538799.14 rows=1199054 width=60)
                                 ->  Hash Join  (cost=59288.31..538799.14 rows=1199054 width=60)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..411269.70 rows=15000170 width=8)
                                       ->  Hash  (cost=57789.46..57789.46 rows=119908 width=60)
                                             ->  Hash Join  (cost=16.65..57789.46 rows=119908 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                                   ->  Hash  (cost=16.62..16.62 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..16.62 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=30)
                                                               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
                     ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(28 rows)

query 8 run 1
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1234129.21..1234129.21 rows=1 width=42)
   ->  Sort  (cost=1234129.21..1234131.06 rows=741 width=42)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1234112.54..1234125.51 rows=741 width=42)
               ->  Nested Loop  (cost=506310.81..1233634.34 rows=23910 width=42)
                     Join Filter: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=506310.81..1224547.23 rows=23910 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=501839.81..1219596.51 rows=24062 width=20)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.00..707861.12 rows=390922 width=20)
                                       ->  Seq Scan on part  (cost=0.00..65980.75 rows=13333 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..47.85 rows=29 width=24)
                                             Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=486691.77..486691.77 rows=923283 width=8)
                                       ->  Hash Join  (cost=129633.17..486691.77 rows=923283 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=66307.62..396821.85 rows=4616415 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..65153.52 rows=4616415 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59575.41..59575.41 rows=300011 width=4)
                                                   ->  Hash Join  (cost=2.53..59575.41 rows=300011 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(37 rows)

query 8 run 2
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1234129.21..1234129.21 rows=1 width=42)
   ->  Sort  (cost=1234129.21..1234131.06 rows=741 width=42)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1234112.54..1234125.51 rows=741 width=42)
               ->  Nested Loop  (cost=506310.81..1233634.34 rows=23910 width=42)
                     Join Filter: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=506310.81..1224547.23 rows=23910 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=501839.81..1219596.51 rows=24062 width=20)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.00..707861.12 rows=390922 width=20)
                                       ->  Seq Scan on part  (cost=0.00..65980.75 rows=13333 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..47.85 rows=29 width=24)
                                             Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=486691.77..486691.77 rows=923283 width=8)
                                       ->  Hash Join  (cost=129633.17..486691.77 rows=923283 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=66307.62..396821.85 rows=4616415 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..65153.52 rows=4616415 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59575.41..59575.41 rows=300011 width=4)
                                                   ->  Hash Join  (cost=2.53..59575.41 rows=300011 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(37 rows)

query 8 run 3
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1234129.21..1234129.21 rows=1 width=42)
   ->  Sort  (cost=1234129.21..1234131.06 rows=741 width=42)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1234112.54..1234125.51 rows=741 width=42)
               ->  Nested Loop  (cost=506310.81..1233634.34 rows=23910 width=42)
                     Join Filter: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=506310.81..1224547.23 rows=23910 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=501839.81..1219596.51 rows=24062 width=20)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.00..707861.12 rows=390922 width=20)
                                       ->  Seq Scan on part  (cost=0.00..65980.75 rows=13333 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..47.85 rows=29 width=24)
                                             Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=486691.77..486691.77 rows=923283 width=8)
                                       ->  Hash Join  (cost=129633.17..486691.77 rows=923283 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=66307.62..396821.85 rows=4616415 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..65153.52 rows=4616415 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59575.41..59575.41 rows=300011 width=4)
                                                   ->  Hash Join  (cost=2.53..59575.41 rows=300011 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(37 rows)

query 9 run 1
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2247281.26..2247281.26 rows=1 width=53)
   ->  Sort  (cost=2247281.26..2247281.49 rows=92 width=53)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2247279.42..2247280.80 rows=92 width=53)
               ->  Nested Loop  (cost=0.00..2247277.81 rows=92 width=53)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=0.00..2247241.54 rows=92 width=31)
                           ->  Nested Loop  (cost=0.00..2246885.76 rows=92 width=31)
                                 ->  Nested Loop  (cost=0.00..2246586.55 rows=92 width=35)
                                       ->  Nested Loop  (cost=0.00..396384.63 rows=323212 width=18)
                                             ->  Seq Scan on part  (cost=0.00..65980.75 rows=80802 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.91 rows=18 width=14)
                                                   Index Cond: (ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..5.71 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.24 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..3.86 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 9 run 2
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2247281.26..2247281.26 rows=1 width=53)
   ->  Sort  (cost=2247281.26..2247281.49 rows=92 width=53)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2247279.42..2247280.80 rows=92 width=53)
               ->  Nested Loop  (cost=0.00..2247277.81 rows=92 width=53)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=0.00..2247241.54 rows=92 width=31)
                           ->  Nested Loop  (cost=0.00..2246885.76 rows=92 width=31)
                                 ->  Nested Loop  (cost=0.00..2246586.55 rows=92 width=35)
                                       ->  Nested Loop  (cost=0.00..396384.63 rows=323212 width=18)
                                             ->  Seq Scan on part  (cost=0.00..65980.75 rows=80802 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.91 rows=18 width=14)
                                                   Index Cond: (ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..5.71 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.24 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..3.86 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 9 run 3
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2247281.26..2247281.26 rows=1 width=53)
   ->  Sort  (cost=2247281.26..2247281.49 rows=92 width=53)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2247279.42..2247280.80 rows=92 width=53)
               ->  Nested Loop  (cost=0.00..2247277.81 rows=92 width=53)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=0.00..2247241.54 rows=92 width=31)
                           ->  Nested Loop  (cost=0.00..2246885.76 rows=92 width=31)
                                 ->  Nested Loop  (cost=0.00..2246586.55 rows=92 width=35)
                                       ->  Nested Loop  (cost=0.00..396384.63 rows=323212 width=18)
                                             ->  Seq Scan on part  (cost=0.00..65980.75 rows=80802 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.91 rows=18 width=14)
                                                   Index Cond: (ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..5.71 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.24 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..3.86 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 10 run 1
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2651492.50..2651492.55 rows=20 width=181)
   ->  Sort  (cost=2651492.50..2652904.86 rows=564943 width=181)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  GroupAggregate  (cost=2615274.21..2636459.57 rows=564943 width=181)
               ->  Sort  (cost=2615274.21..2616686.57 rows=564943 width=181)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=386767.98..2529024.02 rows=564943 width=181)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=386766.42..2521254.49 rows=564943 width=159)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=284840.16..2372401.91 rows=564943 width=16)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..1874968.10 rows=15050489 width=16)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=277801.98..277801.98 rows=563054 width=8)
                                             ->  Bitmap Heap Scan on orders  (cost=8088.17..277801.98 rows=563054 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7947.41 rows=563054 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Hash  (cost=50947.56..50947.56 rows=1500056 width=147)
                                       ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=147)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 2
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2651492.50..2651492.55 rows=20 width=181)
   ->  Sort  (cost=2651492.50..2652904.86 rows=564943 width=181)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  GroupAggregate  (cost=2615274.21..2636459.57 rows=564943 width=181)
               ->  Sort  (cost=2615274.21..2616686.57 rows=564943 width=181)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=386767.98..2529024.02 rows=564943 width=181)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=386766.42..2521254.49 rows=564943 width=159)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=284840.16..2372401.91 rows=564943 width=16)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..1874968.10 rows=15050489 width=16)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=277801.98..277801.98 rows=563054 width=8)
                                             ->  Bitmap Heap Scan on orders  (cost=8088.17..277801.98 rows=563054 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7947.41 rows=563054 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Hash  (cost=50947.56..50947.56 rows=1500056 width=147)
                                       ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=147)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 3
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2651492.50..2651492.55 rows=20 width=181)
   ->  Sort  (cost=2651492.50..2652904.86 rows=564943 width=181)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  GroupAggregate  (cost=2615274.21..2636459.57 rows=564943 width=181)
               ->  Sort  (cost=2615274.21..2616686.57 rows=564943 width=181)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=386767.98..2529024.02 rows=564943 width=181)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=386766.42..2521254.49 rows=564943 width=159)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=284840.16..2372401.91 rows=564943 width=16)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..1874968.10 rows=15050489 width=16)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=277801.98..277801.98 rows=563054 width=8)
                                             ->  Bitmap Heap Scan on orders  (cost=8088.17..277801.98 rows=563054 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7947.41 rows=563054 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Hash  (cost=50947.56..50947.56 rows=1500056 width=147)
                                       ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=147)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=685151.88..685151.88 rows=1 width=14)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=323145.70..323145.71 rows=1 width=10)
           ->  Hash Join  (cost=2323.42..320745.69 rows=320001 width=10)
                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..255222.15 rows=8000015 width=14)
                 ->  Hash  (cost=2273.42..2273.42 rows=4000 width=4)
                       ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = public.nation.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                         Index Cond: (s_nationkey = public.nation.n_nationkey)
   ->  Sort  (cost=362006.17..362806.17 rows=320001 width=14)
         Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
         ->  GroupAggregate  (cost=350006.13..360406.16 rows=320001 width=14)
               Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $1)
               ->  Sort  (cost=350006.13..350806.13 rows=320001 width=14)
                     Sort Key: public.partsupp.ps_partkey
                     ->  Hash Join  (cost=2323.42..320745.69 rows=320001 width=14)
                           Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..255222.15 rows=8000015 width=18)
                           ->  Hash  (cost=2273.42..2273.42 rows=4000 width=4)
                                 ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=4)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=8)
                                             Recheck Cond: (s_nationkey = public.nation.n_nationkey)
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                   Index Cond: (s_nationkey = public.nation.n_nationkey)
(31 rows)

query 11 run 2
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=685151.88..685151.88 rows=1 width=14)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=323145.70..323145.71 rows=1 width=10)
           ->  Hash Join  (cost=2323.42..320745.69 rows=320001 width=10)
                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..255222.15 rows=8000015 width=14)
                 ->  Hash  (cost=2273.42..2273.42 rows=4000 width=4)
                       ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = public.nation.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                         Index Cond: (s_nationkey = public.nation.n_nationkey)
   ->  Sort  (cost=362006.17..362806.17 rows=320001 width=14)
         Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
         ->  GroupAggregate  (cost=350006.13..360406.16 rows=320001 width=14)
               Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $1)
               ->  Sort  (cost=350006.13..350806.13 rows=320001 width=14)
                     Sort Key: public.partsupp.ps_partkey
                     ->  Hash Join  (cost=2323.42..320745.69 rows=320001 width=14)
                           Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..255222.15 rows=8000015 width=18)
                           ->  Hash  (cost=2273.42..2273.42 rows=4000 width=4)
                                 ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=4)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=8)
                                             Recheck Cond: (s_nationkey = public.nation.n_nationkey)
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                   Index Cond: (s_nationkey = public.nation.n_nationkey)
(31 rows)

query 11 run 3
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=685151.88..685151.88 rows=1 width=14)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=323145.70..323145.71 rows=1 width=10)
           ->  Hash Join  (cost=2323.42..320745.69 rows=320001 width=10)
                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..255222.15 rows=8000015 width=14)
                 ->  Hash  (cost=2273.42..2273.42 rows=4000 width=4)
                       ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = public.nation.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                         Index Cond: (s_nationkey = public.nation.n_nationkey)
   ->  Sort  (cost=362006.17..362806.17 rows=320001 width=14)
         Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
         ->  GroupAggregate  (cost=350006.13..360406.16 rows=320001 width=14)
               Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $1)
               ->  Sort  (cost=350006.13..350806.13 rows=320001 width=14)
                     Sort Key: public.partsupp.ps_partkey
                     ->  Hash Join  (cost=2323.42..320745.69 rows=320001 width=14)
                           Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..255222.15 rows=8000015 width=18)
                           ->  Hash  (cost=2273.42..2273.42 rows=4000 width=4)
                                 ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=4)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=8)
                                             Recheck Cond: (s_nationkey = public.nation.n_nationkey)
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                   Index Cond: (s_nationkey = public.nation.n_nationkey)
(31 rows)

query 12 run 1
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3097202.44..3097202.45 rows=1 width=27)
   ->  Sort  (cost=3097202.44..3097202.45 rows=1 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=3097202.42..3097202.43 rows=1 width=27)
               ->  Merge Join  (cost=2502017.65..3091970.69 rows=298956 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..547968.42 rows=15000170 width=20)
                     ->  Sort  (cost=2502017.59..2502764.98 rows=298956 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..2474828.18 rows=298956 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 2
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3097202.44..3097202.45 rows=1 width=27)
   ->  Sort  (cost=3097202.44..3097202.45 rows=1 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=3097202.42..3097202.43 rows=1 width=27)
               ->  Merge Join  (cost=2502017.65..3091970.69 rows=298956 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..547968.42 rows=15000170 width=20)
                     ->  Sort  (cost=2502017.59..2502764.98 rows=298956 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..2474828.18 rows=298956 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 3
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3097202.44..3097202.45 rows=1 width=27)
   ->  Sort  (cost=3097202.44..3097202.45 rows=1 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=3097202.42..3097202.43 rows=1 width=27)
               ->  Merge Join  (cost=2502017.65..3091970.69 rows=298956 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..547968.42 rows=15000170 width=20)
                     ->  Sort  (cost=2502017.59..2502764.98 rows=298956 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..2474828.18 rows=298956 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 13 run 1
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2752072.14..2752072.15 rows=1 width=8)
   ->  Sort  (cost=2752072.14..2752072.64 rows=200 width=8)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         ->  HashAggregate  (cost=2752069.14..2752071.14 rows=200 width=8)
               ->  GroupAggregate  (cost=2348045.94..2729568.30 rows=1500056 width=8)
                     ->  Merge Left Join  (cost=2348045.94..2640324.07 rows=14848734 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.00..28675.15 rows=1500056 width=4)
                           ->  Materialize  (cost=2348045.94..2422289.61 rows=14848734 width=8)
                                 ->  Sort  (cost=2348045.94..2385167.77 rows=14848734 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..448770.12 rows=14848734 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 13 run 2
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2752072.14..2752072.15 rows=1 width=8)
   ->  Sort  (cost=2752072.14..2752072.64 rows=200 width=8)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         ->  HashAggregate  (cost=2752069.14..2752071.14 rows=200 width=8)
               ->  GroupAggregate  (cost=2348045.94..2729568.30 rows=1500056 width=8)
                     ->  Merge Left Join  (cost=2348045.94..2640324.07 rows=14848734 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.00..28675.15 rows=1500056 width=4)
                           ->  Materialize  (cost=2348045.94..2422289.61 rows=14848734 width=8)
                                 ->  Sort  (cost=2348045.94..2385167.77 rows=14848734 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..448770.12 rows=14848734 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 13 run 3
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2752072.14..2752072.15 rows=1 width=8)
   ->  Sort  (cost=2752072.14..2752072.64 rows=200 width=8)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         ->  HashAggregate  (cost=2752069.14..2752071.14 rows=200 width=8)
               ->  GroupAggregate  (cost=2348045.94..2729568.30 rows=1500056 width=8)
                     ->  Merge Left Join  (cost=2348045.94..2640324.07 rows=14848734 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.00..28675.15 rows=1500056 width=4)
                           ->  Materialize  (cost=2348045.94..2422289.61 rows=14848734 width=8)
                                 ->  Sort  (cost=2348045.94..2385167.77 rows=14848734 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..448770.12 rows=14848734 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 14 run 1
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=838587.62..838587.64 rows=1 width=33)
   ->  Aggregate  (cost=838587.62..838587.64 rows=1 width=33)
         ->  Hash Join  (cost=112200.46..825197.02 rows=765177 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=12547.91..686790.32 rows=782751 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12352.22 rows=782751 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.80..60980.80 rows=1999980 width=25)
                     ->  Seq Scan on part  (cost=0.00..60980.80 rows=1999980 width=25)
(10 rows)

query 14 run 2
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=838587.62..838587.64 rows=1 width=33)
   ->  Aggregate  (cost=838587.62..838587.64 rows=1 width=33)
         ->  Hash Join  (cost=112200.46..825197.02 rows=765177 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=12547.91..686790.32 rows=782751 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12352.22 rows=782751 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.80..60980.80 rows=1999980 width=25)
                     ->  Seq Scan on part  (cost=0.00..60980.80 rows=1999980 width=25)
(10 rows)

query 14 run 3
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=838587.62..838587.64 rows=1 width=33)
   ->  Aggregate  (cost=838587.62..838587.64 rows=1 width=33)
         ->  Hash Join  (cost=112200.46..825197.02 rows=765177 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=12547.91..686790.32 rows=782751 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12352.22 rows=782751 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.80..60980.80 rows=1999980 width=25)
                     ->  Seq Scan on part  (cost=0.00..60980.80 rows=1999980 width=25)
(10 rows)

query 15 run 1
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2454044.42..2454045.58 rows=1 width=104)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1218393.47..1218393.48 rows=1 width=32)
           ->  HashAggregate  (cost=1218307.74..1218345.84 rows=3810 width=16)
                 ->  Bitmap Heap Scan on lineitem  (cost=36395.22..1195599.93 rows=2270781 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35827.52 rows=2270781 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1235650.94..1240093.84 rows=3810 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..4135.75 rows=100000 width=72)
         ->  Sort  (cost=1235650.94..1235660.46 rows=3810 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1235338.60..1235424.33 rows=3810 width=36)
                     ->  HashAggregate  (cost=1235338.60..1235386.23 rows=3810 width=16)
                           Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=36395.22..1195599.93 rows=2270781 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35827.52 rows=2270781 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(20 rows)

DROP VIEW
query 15 run 2
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2454044.42..2454045.58 rows=1 width=104)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1218393.47..1218393.48 rows=1 width=32)
           ->  HashAggregate  (cost=1218307.74..1218345.84 rows=3810 width=16)
                 ->  Bitmap Heap Scan on lineitem  (cost=36395.22..1195599.93 rows=2270781 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35827.52 rows=2270781 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1235650.94..1240093.84 rows=3810 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..4135.75 rows=100000 width=72)
         ->  Sort  (cost=1235650.94..1235660.46 rows=3810 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1235338.60..1235424.33 rows=3810 width=36)
                     ->  HashAggregate  (cost=1235338.60..1235386.23 rows=3810 width=16)
                           Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=36395.22..1195599.93 rows=2270781 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35827.52 rows=2270781 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(20 rows)

DROP VIEW
query 15 run 3
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2454044.42..2454045.58 rows=1 width=104)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1218393.47..1218393.48 rows=1 width=32)
           ->  HashAggregate  (cost=1218307.74..1218345.84 rows=3810 width=16)
                 ->  Bitmap Heap Scan on lineitem  (cost=36395.22..1195599.93 rows=2270781 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35827.52 rows=2270781 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1235650.94..1240093.84 rows=3810 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..4135.75 rows=100000 width=72)
         ->  Sort  (cost=1235650.94..1235660.46 rows=3810 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1235338.60..1235424.33 rows=3810 width=36)
                     ->  HashAggregate  (cost=1235338.60..1235386.23 rows=3810 width=16)
                           Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=36395.22..1195599.93 rows=2270781 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35827.52 rows=2270781 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(20 rows)

DROP VIEW
query 16 run 1
SET
SET
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=377005.73..377005.73 rows=1 width=40)
   ->  Sort  (cost=377005.73..377074.94 rows=27684 width=40)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=369208.23..376867.31 rows=27684 width=40)
               ->  Sort  (cost=369208.23..370684.68 rows=590579 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Merge Join  (cost=3483.14..302214.51 rows=590579 width=40)
                           Merge Cond: (part.p_partkey = partsupp.ps_partkey)
                           ->  Index Scan using part_pkey on part  (cost=0.00..109211.73 rows=295286 width=40)
                                 Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.03..176377.37 rows=4000008 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
(15 rows)

query 16 run 2
SET
SET
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=377005.73..377005.73 rows=1 width=40)
   ->  Sort  (cost=377005.73..377074.94 rows=27684 width=40)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=369208.23..376867.31 rows=27684 width=40)
               ->  Sort  (cost=369208.23..370684.68 rows=590579 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Merge Join  (cost=3483.14..302214.51 rows=590579 width=40)
                           Merge Cond: (part.p_partkey = partsupp.ps_partkey)
                           ->  Index Scan using part_pkey on part  (cost=0.00..109211.73 rows=295286 width=40)
                                 Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.03..176377.37 rows=4000008 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
(15 rows)

query 16 run 3
SET
SET
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=377005.73..377005.73 rows=1 width=40)
   ->  Sort  (cost=377005.73..377074.94 rows=27684 width=40)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=369208.23..376867.31 rows=27684 width=40)
               ->  Sort  (cost=369208.23..370684.68 rows=590579 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Merge Join  (cost=3483.14..302214.51 rows=590579 width=40)
                           Merge Cond: (part.p_partkey = partsupp.ps_partkey)
                           ->  Index Scan using part_pkey on part  (cost=0.00..109211.73 rows=295286 width=40)
                                 Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.03..176377.37 rows=4000008 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
(15 rows)

query 17 run 1
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10833826.10..10833826.11 rows=1 width=8)
   ->  Aggregate  (cost=10833826.10..10833826.11 rows=1 width=8)
         ->  Merge Join  (cost=10133659.50..10833772.26 rows=21535 width=8)
               Merge Cond: (public.lineitem.l_partkey = part.p_partkey)
               Join Filter: (public.lineitem.l_quantity < ((0.2 * avg(public.lineitem.l_quantity))))
               ->  GroupAggregate  (cost=10133659.50..10614243.27 rows=2045914 width=9)
                     ->  Sort  (cost=10133659.50..10283624.52 rows=59986008 width=9)
                           Sort Key: public.lineitem.l_partkey
                           ->  Seq Scan on lineitem  (cost=0.00..1725003.08 rows=59986008 width=9)
               ->  Materialize  (cost=0.00..192982.36 rows=63155 width=21)
                     ->  Nested Loop  (cost=0.00..192824.48 rows=63155 width=21)
                           ->  Index Scan using part_pkey on part  (cost=0.00..89211.93 rows=2154 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..47.81 rows=29 width=17)
                                 Index Cond: (l_partkey = part.p_partkey)
(15 rows)

query 17 run 2
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10833826.10..10833826.11 rows=1 width=8)
   ->  Aggregate  (cost=10833826.10..10833826.11 rows=1 width=8)
         ->  Merge Join  (cost=10133659.50..10833772.26 rows=21535 width=8)
               Merge Cond: (public.lineitem.l_partkey = part.p_partkey)
               Join Filter: (public.lineitem.l_quantity < ((0.2 * avg(public.lineitem.l_quantity))))
               ->  GroupAggregate  (cost=10133659.50..10614243.27 rows=2045914 width=9)
                     ->  Sort  (cost=10133659.50..10283624.52 rows=59986008 width=9)
                           Sort Key: public.lineitem.l_partkey
                           ->  Seq Scan on lineitem  (cost=0.00..1725003.08 rows=59986008 width=9)
               ->  Materialize  (cost=0.00..192982.36 rows=63155 width=21)
                     ->  Nested Loop  (cost=0.00..192824.48 rows=63155 width=21)
                           ->  Index Scan using part_pkey on part  (cost=0.00..89211.93 rows=2154 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..47.81 rows=29 width=17)
                                 Index Cond: (l_partkey = part.p_partkey)
(15 rows)

query 17 run 3
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10833826.10..10833826.11 rows=1 width=8)
   ->  Aggregate  (cost=10833826.10..10833826.11 rows=1 width=8)
         ->  Merge Join  (cost=10133659.50..10833772.26 rows=21535 width=8)
               Merge Cond: (public.lineitem.l_partkey = part.p_partkey)
               Join Filter: (public.lineitem.l_quantity < ((0.2 * avg(public.lineitem.l_quantity))))
               ->  GroupAggregate  (cost=10133659.50..10614243.27 rows=2045914 width=9)
                     ->  Sort  (cost=10133659.50..10283624.52 rows=59986008 width=9)
                           Sort Key: public.lineitem.l_partkey
                           ->  Seq Scan on lineitem  (cost=0.00..1725003.08 rows=59986008 width=9)
               ->  Materialize  (cost=0.00..192982.36 rows=63155 width=21)
                     ->  Nested Loop  (cost=0.00..192824.48 rows=63155 width=21)
                           ->  Index Scan using part_pkey on part  (cost=0.00..89211.93 rows=2154 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..47.81 rows=29 width=17)
                                 Index Cond: (l_partkey = part.p_partkey)
(15 rows)

query 18 run 1
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=11874770.92..11874773.67 rows=100 width=44)
   ->  GroupAggregate  (cost=11874770.92..12699578.53 rows=29993004 width=44)
         ->  Sort  (cost=11874770.92..11949753.43 rows=29993004 width=44)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               ->  Hash Join  (cost=78581.11..7556796.61 rows=29993004 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=92.85..6459596.27 rows=29993004 width=25)
                           Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=0.00..3719424.04 rows=7500085 width=24)
                                 Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.00..547968.42 rows=15000170 width=20)
                                 ->  Materialize  (cost=0.00..2946498.93 rows=14996502 width=4)
                                       ->  GroupAggregate  (cost=0.00..2759042.65 rows=14996502 width=9)
                                             Filter: (sum(public.lineitem.l_quantity) > 313::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2271656.34 rows=59986008 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2271656.34 rows=59986008 width=9)
                     ->  Hash  (cost=50947.56..50947.56 rows=1500056 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=23)
(18 rows)

query 18 run 2
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=11874770.92..11874773.67 rows=100 width=44)
   ->  GroupAggregate  (cost=11874770.92..12699578.53 rows=29993004 width=44)
         ->  Sort  (cost=11874770.92..11949753.43 rows=29993004 width=44)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               ->  Hash Join  (cost=78581.11..7556796.61 rows=29993004 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=92.85..6459596.27 rows=29993004 width=25)
                           Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=0.00..3719424.04 rows=7500085 width=24)
                                 Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.00..547968.42 rows=15000170 width=20)
                                 ->  Materialize  (cost=0.00..2946498.93 rows=14996502 width=4)
                                       ->  GroupAggregate  (cost=0.00..2759042.65 rows=14996502 width=9)
                                             Filter: (sum(public.lineitem.l_quantity) > 313::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2271656.34 rows=59986008 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2271656.34 rows=59986008 width=9)
                     ->  Hash  (cost=50947.56..50947.56 rows=1500056 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=23)
(18 rows)

query 18 run 3
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=11874770.92..11874773.67 rows=100 width=44)
   ->  GroupAggregate  (cost=11874770.92..12699578.53 rows=29993004 width=44)
         ->  Sort  (cost=11874770.92..11949753.43 rows=29993004 width=44)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               ->  Hash Join  (cost=78581.11..7556796.61 rows=29993004 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=92.85..6459596.27 rows=29993004 width=25)
                           Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=0.00..3719424.04 rows=7500085 width=24)
                                 Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.00..547968.42 rows=15000170 width=20)
                                 ->  Materialize  (cost=0.00..2946498.93 rows=14996502 width=4)
                                       ->  GroupAggregate  (cost=0.00..2759042.65 rows=14996502 width=9)
                                             Filter: (sum(public.lineitem.l_quantity) > 313::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2271656.34 rows=59986008 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2271656.34 rows=59986008 width=9)
                     ->  Hash  (cost=50947.56..50947.56 rows=1500056 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=23)
(18 rows)

query 19 run 1
SET
SET
                                                                                                                                                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                   

 Limit  (cost=3131708.10..3131708.11 rows=1 width=12)
   ->  Aggregate  (cost=3131708.10..3131708.11 rows=1 width=12)
         ->  Hash Join  (cost=104652.50..3131699.77 rows=1110 width=12)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               Join Filter: (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..2924723.24 rows=1136797 width=21)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))))
               ->  Hash  (cost=65980.75..65980.75 rows=1999980 width=30)
                     ->  Seq Scan on part  (cost=0.00..65980.75 rows=1999980 width=30)
                           Filter: (p_size >= 1)
(10 rows)

query 19 run 2
SET
SET


 Limit  (cost=3131708.10..3131708.11 rows=1 width=12)
   ->  Aggregate  (cost=3131708.10..3131708.11 rows=1 width=12)
         ->  Hash Join  (cost=104652.50..3131699.77 rows=1110 width=12)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               Join Filter: (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..2924723.24 rows=1136797 width=21)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))))
               ->  Hash  (cost=65980.75..65980.75 rows=1999980 width=30)
                     ->  Seq Scan on part  (cost=0.00..65980.75 rows=1999980 width=30)
                           Filter: (p_size >= 1)
(10 rows)

query 19 run 3
SET
SET


 Limit  (cost=3131708.10..3131708.11 rows=1 width=12)
   ->  Aggregate  (cost=3131708.10..3131708.11 rows=1 width=12)
         ->  Hash Join  (cost=104652.50..3131699.77 rows=1110 width=12)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               Join Filter: (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..2924723.24 rows=1136797 width=21)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))))
               ->  Hash  (cost=65980.75..65980.75 rows=1999980 width=30)
                     ->  Seq Scan on part  (cost=0.00..65980.75 rows=1999980 width=30)
                           Filter: (p_size >= 1)
(10 rows)

query 20 run 1
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2860874.11..2860874.11 rows=1 width=52)
   ->  Sort  (cost=2860874.11..2860879.11 rows=2000 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2738243.23..2860864.11 rows=2000 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=56)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=60)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2738193.97..2856910.76 rows=28 width=8)
                     ->  Merge Join  (cost=2738193.97..2856910.62 rows=28 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2558757.89..2661095.81 rows=909671 width=13)
                                 ->  Sort  (cost=2558757.89..2581499.65 rows=9096703 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=145785.42..1407378.97 rows=9096703 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..143511.24 rows=9096703 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=179436.08..180347.26 rows=364472 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=0.00..145767.16 rows=364472 width=16)
                                       ->  Seq Scan on part  (cost=0.00..65980.75 rows=20200 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.77 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 20 run 2
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2860874.11..2860874.11 rows=1 width=52)
   ->  Sort  (cost=2860874.11..2860879.11 rows=2000 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2738243.23..2860864.11 rows=2000 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=56)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=60)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2738193.97..2856910.76 rows=28 width=8)
                     ->  Merge Join  (cost=2738193.97..2856910.62 rows=28 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2558757.89..2661095.81 rows=909671 width=13)
                                 ->  Sort  (cost=2558757.89..2581499.65 rows=9096703 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=145785.42..1407378.97 rows=9096703 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..143511.24 rows=9096703 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=179436.08..180347.26 rows=364472 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=0.00..145767.16 rows=364472 width=16)
                                       ->  Seq Scan on part  (cost=0.00..65980.75 rows=20200 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.77 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 20 run 3
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2860874.11..2860874.11 rows=1 width=52)
   ->  Sort  (cost=2860874.11..2860879.11 rows=2000 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2738243.23..2860864.11 rows=2000 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=56)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=60)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2738193.97..2856910.76 rows=28 width=8)
                     ->  Merge Join  (cost=2738193.97..2856910.62 rows=28 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2558757.89..2661095.81 rows=909671 width=13)
                                 ->  Sort  (cost=2558757.89..2581499.65 rows=9096703 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=145785.42..1407378.97 rows=9096703 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..143511.24 rows=9096703 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=179436.08..180347.26 rows=364472 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=0.00..145767.16 rows=364472 width=16)
                                       ->  Seq Scan on part  (cost=0.00..65980.75 rows=20200 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.77 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 21 run 1
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4826109.17..4826109.17 rows=1 width=26)
   ->  Sort  (cost=4826109.17..4826109.17 rows=1 width=26)
         Sort Key: (count(*)), supplier.s_name
         ->  HashAggregate  (cost=4826109.15..4826109.16 rows=1 width=26)
               ->  Nested Loop Anti Join  (cost=570212.82..4826109.14 rows=1 width=26)
                     ->  Nested Loop Semi Join  (cost=570212.82..4826097.54 rows=1 width=34)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Hash Join  (cost=570212.82..2581681.17 rows=384694 width=38)
                                 Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Hash Join  (cost=2323.42..1960221.70 rows=794767 width=34)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on lineitem l1  (cost=0.00..1874968.10 rows=19995336 width=8)
                                             Filter: (l_receiptdate > l_commitdate)
                                       ->  Hash  (cost=2273.42..2273.42 rows=4000 width=30)
                                             ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                         Filter: (n_name = 'PERU'::bpchar)
                                                   ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=34)
                                                         Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                         ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                               Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Hash  (cost=448770.12..448770.12 rows=7260582 width=4)
                                       ->  Seq Scan on orders  (cost=0.00..448770.12 rows=7260582 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..5.78 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.00..5.79 rows=1 width=8)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(29 rows)

query 21 run 2
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4826109.17..4826109.17 rows=1 width=26)
   ->  Sort  (cost=4826109.17..4826109.17 rows=1 width=26)
         Sort Key: (count(*)), supplier.s_name
         ->  HashAggregate  (cost=4826109.15..4826109.16 rows=1 width=26)
               ->  Nested Loop Anti Join  (cost=570212.82..4826109.14 rows=1 width=26)
                     ->  Nested Loop Semi Join  (cost=570212.82..4826097.54 rows=1 width=34)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Hash Join  (cost=570212.82..2581681.17 rows=384694 width=38)
                                 Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Hash Join  (cost=2323.42..1960221.70 rows=794767 width=34)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on lineitem l1  (cost=0.00..1874968.10 rows=19995336 width=8)
                                             Filter: (l_receiptdate > l_commitdate)
                                       ->  Hash  (cost=2273.42..2273.42 rows=4000 width=30)
                                             ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                         Filter: (n_name = 'PERU'::bpchar)
                                                   ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=34)
                                                         Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                         ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                               Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Hash  (cost=448770.12..448770.12 rows=7260582 width=4)
                                       ->  Seq Scan on orders  (cost=0.00..448770.12 rows=7260582 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..5.78 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.00..5.79 rows=1 width=8)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(29 rows)

query 21 run 3
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4826109.17..4826109.17 rows=1 width=26)
   ->  Sort  (cost=4826109.17..4826109.17 rows=1 width=26)
         Sort Key: (count(*)), supplier.s_name
         ->  HashAggregate  (cost=4826109.15..4826109.16 rows=1 width=26)
               ->  Nested Loop Anti Join  (cost=570212.82..4826109.14 rows=1 width=26)
                     ->  Nested Loop Semi Join  (cost=570212.82..4826097.54 rows=1 width=34)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Hash Join  (cost=570212.82..2581681.17 rows=384694 width=38)
                                 Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Hash Join  (cost=2323.42..1960221.70 rows=794767 width=34)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on lineitem l1  (cost=0.00..1874968.10 rows=19995336 width=8)
                                             Filter: (l_receiptdate > l_commitdate)
                                       ->  Hash  (cost=2273.42..2273.42 rows=4000 width=30)
                                             ->  Nested Loop  (cost=49.25..2273.42 rows=4000 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                         Filter: (n_name = 'PERU'::bpchar)
                                                   ->  Bitmap Heap Scan on supplier  (cost=49.25..2232.11 rows=4000 width=34)
                                                         Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                         ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                               Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Hash  (cost=448770.12..448770.12 rows=7260582 width=4)
                                       ->  Seq Scan on orders  (cost=0.00..448770.12 rows=7260582 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..5.78 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.00..5.79 rows=1 width=8)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(29 rows)

query 22 run 1
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154938.04..154938.04 rows=1 width=22)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75442.86..75442.87 rows=1 width=6)
           ->  Seq Scan on customer  (cost=0.00..75323.47 rows=47756 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Sort  (cost=79495.17..79515.07 rows=7963 width=22)
         Sort Key: ("substring"((public.customer.c_phone)::text, 1, 2))
         ->  HashAggregate  (cost=79335.91..79455.35 rows=7963 width=22)
               ->  Nested Loop Anti Join  (cost=0.00..79276.18 rows=7963 width=22)
                     ->  Seq Scan on customer  (cost=0.00..75323.47 rows=17501 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.00..2.61 rows=18 width=4)
                           Index Cond: (o_custkey = public.customer.c_custkey)
(13 rows)

query 22 run 2
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154938.04..154938.04 rows=1 width=22)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75442.86..75442.87 rows=1 width=6)
           ->  Seq Scan on customer  (cost=0.00..75323.47 rows=47756 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Sort  (cost=79495.17..79515.07 rows=7963 width=22)
         Sort Key: ("substring"((public.customer.c_phone)::text, 1, 2))
         ->  HashAggregate  (cost=79335.91..79455.35 rows=7963 width=22)
               ->  Nested Loop Anti Join  (cost=0.00..79276.18 rows=7963 width=22)
                     ->  Seq Scan on customer  (cost=0.00..75323.47 rows=17501 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.00..2.61 rows=18 width=4)
                           Index Cond: (o_custkey = public.customer.c_custkey)
(13 rows)

query 22 run 3
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154938.04..154938.04 rows=1 width=22)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75442.86..75442.87 rows=1 width=6)
           ->  Seq Scan on customer  (cost=0.00..75323.47 rows=47756 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Sort  (cost=79495.17..79515.07 rows=7963 width=22)
         Sort Key: ("substring"((public.customer.c_phone)::text, 1, 2))
         ->  HashAggregate  (cost=79335.91..79455.35 rows=7963 width=22)
               ->  Nested Loop Anti Join  (cost=0.00..79276.18 rows=7963 width=22)
                     ->  Seq Scan on customer  (cost=0.00..75323.47 rows=17501 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.00..2.61 rows=18 width=4)
                           Index Cond: (o_custkey = public.customer.c_custkey)
(13 rows)

