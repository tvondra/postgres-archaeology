query 1 run 1
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=383026.13..383026.13 rows=1 width=51)
   ->  Sort  (cost=383026.13..383026.14 rows=6 width=51)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=383025.84..383026.05 rows=6 width=51)
               ->  Seq Scan on lineitem  (cost=0.00..233010.19 rows=6000626 width=51)
                     Filter: (l_shipdate <= '1998-12-01 00:00:00'::timestamp without time zone)
(6 rows)

query 1 run 2
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=383026.13..383026.13 rows=1 width=51)
   ->  Sort  (cost=383026.13..383026.14 rows=6 width=51)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=383025.84..383026.05 rows=6 width=51)
               ->  Seq Scan on lineitem  (cost=0.00..233010.19 rows=6000626 width=51)
                     Filter: (l_shipdate <= '1998-12-01 00:00:00'::timestamp without time zone)
(6 rows)

query 1 run 3
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=383026.13..383026.13 rows=1 width=51)
   ->  Sort  (cost=383026.13..383026.14 rows=6 width=51)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=383025.84..383026.05 rows=6 width=51)
               ->  Seq Scan on lineitem  (cost=0.00..233010.19 rows=6000626 width=51)
                     Filter: (l_shipdate <= '1998-12-01 00:00:00'::timestamp without time zone)
(6 rows)

query 2 run 1
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=9446.12..9446.12 rows=1 width=215)
   ->  Sort  (cost=9446.12..9446.12 rows=1 width=215)
         Sort Key: supplier.s_acctbal, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=0.00..9446.11 rows=1 width=215)
               Join Filter: ("outer".n_regionkey = "inner".r_regionkey)
               ->  Nested Loop  (cost=0.00..9445.03 rows=1 width=219)
                     Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Nested Loop  (cost=0.00..9443.47 rows=1 width=190)
                           ->  Nested Loop  (cost=0.00..9440.44 rows=1 width=37)
                                 Join Filter: ("inner".ps_supplycost = (subplan))
                                 ->  Seq Scan on part  (cost=0.00..8108.00 rows=1 width=33)
                                       Filter: ((p_size = 16) AND ((p_type)::text ~~ '%NICKEL'::text))
                                 ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.27 rows=20 width=19)
                                       Index Cond: ("outer".p_partkey = partsupp.ps_partkey)
                                 SubPlan
                                   ->  Aggregate  (cost=66.44..66.44 rows=1 width=11)
                                         ->  Hash Join  (cost=2.50..66.43 rows=4 width=11)
                                               Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                                               ->  Nested Loop  (cost=0.00..63.79 rows=20 width=15)
                                                     ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.27 rows=20 width=15)
                                                           Index Cond: ($0 = ps_partkey)
                                                     ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=8)
                                                           Index Cond: (supplier.s_suppkey = "outer".ps_suppkey)
                                               ->  Hash  (cost=2.49..2.49 rows=5 width=4)
                                                     ->  Hash Join  (cost=1.06..2.49 rows=5 width=4)
                                                           Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=161)
                                 Index Cond: (supplier.s_suppkey = "outer".ps_suppkey)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=37)
               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                     Filter: (r_name = 'AMERICA'::bpchar)
(35 rows)

query 2 run 2
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=9446.12..9446.12 rows=1 width=215)
   ->  Sort  (cost=9446.12..9446.12 rows=1 width=215)
         Sort Key: supplier.s_acctbal, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=0.00..9446.11 rows=1 width=215)
               Join Filter: ("outer".n_regionkey = "inner".r_regionkey)
               ->  Nested Loop  (cost=0.00..9445.03 rows=1 width=219)
                     Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Nested Loop  (cost=0.00..9443.47 rows=1 width=190)
                           ->  Nested Loop  (cost=0.00..9440.44 rows=1 width=37)
                                 Join Filter: ("inner".ps_supplycost = (subplan))
                                 ->  Seq Scan on part  (cost=0.00..8108.00 rows=1 width=33)
                                       Filter: ((p_size = 16) AND ((p_type)::text ~~ '%NICKEL'::text))
                                 ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.27 rows=20 width=19)
                                       Index Cond: ("outer".p_partkey = partsupp.ps_partkey)
                                 SubPlan
                                   ->  Aggregate  (cost=66.44..66.44 rows=1 width=11)
                                         ->  Hash Join  (cost=2.50..66.43 rows=4 width=11)
                                               Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                                               ->  Nested Loop  (cost=0.00..63.79 rows=20 width=15)
                                                     ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.27 rows=20 width=15)
                                                           Index Cond: ($0 = ps_partkey)
                                                     ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=8)
                                                           Index Cond: (supplier.s_suppkey = "outer".ps_suppkey)
                                               ->  Hash  (cost=2.49..2.49 rows=5 width=4)
                                                     ->  Hash Join  (cost=1.06..2.49 rows=5 width=4)
                                                           Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=161)
                                 Index Cond: (supplier.s_suppkey = "outer".ps_suppkey)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=37)
               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                     Filter: (r_name = 'AMERICA'::bpchar)
(35 rows)

query 2 run 3
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=9446.12..9446.12 rows=1 width=215)
   ->  Sort  (cost=9446.12..9446.12 rows=1 width=215)
         Sort Key: supplier.s_acctbal, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=0.00..9446.11 rows=1 width=215)
               Join Filter: ("outer".n_regionkey = "inner".r_regionkey)
               ->  Nested Loop  (cost=0.00..9445.03 rows=1 width=219)
                     Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Nested Loop  (cost=0.00..9443.47 rows=1 width=190)
                           ->  Nested Loop  (cost=0.00..9440.44 rows=1 width=37)
                                 Join Filter: ("inner".ps_supplycost = (subplan))
                                 ->  Seq Scan on part  (cost=0.00..8108.00 rows=1 width=33)
                                       Filter: ((p_size = 16) AND ((p_type)::text ~~ '%NICKEL'::text))
                                 ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.27 rows=20 width=19)
                                       Index Cond: ("outer".p_partkey = partsupp.ps_partkey)
                                 SubPlan
                                   ->  Aggregate  (cost=66.44..66.44 rows=1 width=11)
                                         ->  Hash Join  (cost=2.50..66.43 rows=4 width=11)
                                               Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                                               ->  Nested Loop  (cost=0.00..63.79 rows=20 width=15)
                                                     ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.27 rows=20 width=15)
                                                           Index Cond: ($0 = ps_partkey)
                                                     ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=8)
                                                           Index Cond: (supplier.s_suppkey = "outer".ps_suppkey)
                                               ->  Hash  (cost=2.49..2.49 rows=5 width=4)
                                                     ->  Hash Join  (cost=1.06..2.49 rows=5 width=4)
                                                           Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=161)
                                 Index Cond: (supplier.s_suppkey = "outer".ps_suppkey)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=37)
               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                     Filter: (r_name = 'AMERICA'::bpchar)
(35 rows)

query 3 run 1
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=378361.98..378362.00 rows=10 width=34)
   ->  Sort  (cost=378361.98..379148.63 rows=314663 width=34)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))), orders.o_orderdate
         ->  GroupAggregate  (cost=343334.56..349627.82 rows=314663 width=34)
               ->  Sort  (cost=343334.56..344121.22 rows=314663 width=34)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=62293.69..314600.40 rows=314663 width=34)
                           Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..233010.19 rows=3229980 width=26)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=61928.36..61928.36 rows=146129 width=12)
                                 ->  Hash Join  (cost=6166.75..61928.36 rows=146129 width=12)
                                       Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..50635.00 rows=733064 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=6092.00..6092.00 rows=29901 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..6092.00 rows=29901 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(18 rows)

query 3 run 2
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=378361.98..378362.00 rows=10 width=34)
   ->  Sort  (cost=378361.98..379148.63 rows=314663 width=34)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))), orders.o_orderdate
         ->  GroupAggregate  (cost=343334.56..349627.82 rows=314663 width=34)
               ->  Sort  (cost=343334.56..344121.22 rows=314663 width=34)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=62293.69..314600.40 rows=314663 width=34)
                           Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..233010.19 rows=3229980 width=26)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=61928.36..61928.36 rows=146129 width=12)
                                 ->  Hash Join  (cost=6166.75..61928.36 rows=146129 width=12)
                                       Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..50635.00 rows=733064 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=6092.00..6092.00 rows=29901 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..6092.00 rows=29901 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(18 rows)

query 3 run 3
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=378361.98..378362.00 rows=10 width=34)
   ->  Sort  (cost=378361.98..379148.63 rows=314663 width=34)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))), orders.o_orderdate
         ->  GroupAggregate  (cost=343334.56..349627.82 rows=314663 width=34)
               ->  Sort  (cost=343334.56..344121.22 rows=314663 width=34)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=62293.69..314600.40 rows=314663 width=34)
                           Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..233010.19 rows=3229980 width=26)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=61928.36..61928.36 rows=146129 width=12)
                                 ->  Hash Join  (cost=6166.75..61928.36 rows=146129 width=12)
                                       Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..50635.00 rows=733064 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=6092.00..6092.00 rows=29901 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..6092.00 rows=29901 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(18 rows)

query 4 run 1
SET
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit  (cost=91058.30..91058.30 rows=1 width=19)
   ->  Sort  (cost=91058.30..91058.30 rows=1 width=19)
         Sort Key: o_orderpriority
         ->  HashAggregate  (cost=91058.28..91058.29 rows=1 width=19)
               ->  Index Scan using idx_orders_orderdate on orders  (cost=0.00..90919.31 rows=27795 width=19)
                     Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     Filter: (subplan)
                     SubPlan
                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..11.28 rows=69 width=152)
                             Index Cond: (l_orderkey = $0)
                             Filter: (l_commitdate < l_receiptdate)
(11 rows)

query 4 run 2
SET
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit  (cost=91058.30..91058.30 rows=1 width=19)
   ->  Sort  (cost=91058.30..91058.30 rows=1 width=19)
         Sort Key: o_orderpriority
         ->  HashAggregate  (cost=91058.28..91058.29 rows=1 width=19)
               ->  Index Scan using idx_orders_orderdate on orders  (cost=0.00..90919.31 rows=27795 width=19)
                     Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     Filter: (subplan)
                     SubPlan
                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..11.28 rows=69 width=152)
                             Index Cond: (l_orderkey = $0)
                             Filter: (l_commitdate < l_receiptdate)
(11 rows)

query 4 run 3
SET
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit  (cost=91058.30..91058.30 rows=1 width=19)
   ->  Sort  (cost=91058.30..91058.30 rows=1 width=19)
         Sort Key: o_orderpriority
         ->  HashAggregate  (cost=91058.28..91058.29 rows=1 width=19)
               ->  Index Scan using idx_orders_orderdate on orders  (cost=0.00..90919.31 rows=27795 width=19)
                     Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     Filter: (subplan)
                     SubPlan
                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..11.28 rows=69 width=152)
                             Index Cond: (l_orderkey = $0)
                             Filter: (l_commitdate < l_receiptdate)
(11 rows)

query 5 run 1
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=315095.29..315095.29 rows=1 width=51)
   ->  Sort  (cost=315095.29..315095.35 rows=25 width=51)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))
         ->  HashAggregate  (cost=315094.52..315094.71 rows=25 width=51)
               ->  Hash Join  (cost=63340.55..315058.20 rows=7264 width=51)
                     Hash Cond: (("outer".c_nationkey = "inner".s_nationkey) AND ("outer".l_suppkey = "inner".s_suppkey))
                     ->  Hash Join  (cost=62931.55..312760.67 rows=181589 width=63)
                           Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..218007.15 rows=6001215 width=30)
                           ->  Hash  (cost=62818.08..62818.08 rows=45388 width=41)
                                 ->  Hash Join  (cost=6844.50..62818.08 rows=45388 width=41)
                                       Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..54385.00 rows=226940 width=8)
                                             Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=6769.50..6769.50 rows=30000 width=41)
                                             ->  Hash Join  (cost=2.50..6769.50 rows=30000 width=41)
                                                   Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5717.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.49..2.49 rows=5 width=33)
                                                         ->  Hash Join  (cost=1.06..2.49 rows=5 width=33)
                                                               Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=37)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=359.00..359.00 rows=10000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..359.00 rows=10000 width=8)
(27 rows)

query 5 run 2
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=315095.29..315095.29 rows=1 width=51)
   ->  Sort  (cost=315095.29..315095.35 rows=25 width=51)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))
         ->  HashAggregate  (cost=315094.52..315094.71 rows=25 width=51)
               ->  Hash Join  (cost=63340.55..315058.20 rows=7264 width=51)
                     Hash Cond: (("outer".c_nationkey = "inner".s_nationkey) AND ("outer".l_suppkey = "inner".s_suppkey))
                     ->  Hash Join  (cost=62931.55..312760.67 rows=181589 width=63)
                           Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..218007.15 rows=6001215 width=30)
                           ->  Hash  (cost=62818.08..62818.08 rows=45388 width=41)
                                 ->  Hash Join  (cost=6844.50..62818.08 rows=45388 width=41)
                                       Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..54385.00 rows=226940 width=8)
                                             Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=6769.50..6769.50 rows=30000 width=41)
                                             ->  Hash Join  (cost=2.50..6769.50 rows=30000 width=41)
                                                   Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5717.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.49..2.49 rows=5 width=33)
                                                         ->  Hash Join  (cost=1.06..2.49 rows=5 width=33)
                                                               Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=37)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=359.00..359.00 rows=10000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..359.00 rows=10000 width=8)
(27 rows)

query 5 run 3
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=315095.29..315095.29 rows=1 width=51)
   ->  Sort  (cost=315095.29..315095.35 rows=25 width=51)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))
         ->  HashAggregate  (cost=315094.52..315094.71 rows=25 width=51)
               ->  Hash Join  (cost=63340.55..315058.20 rows=7264 width=51)
                     Hash Cond: (("outer".c_nationkey = "inner".s_nationkey) AND ("outer".l_suppkey = "inner".s_suppkey))
                     ->  Hash Join  (cost=62931.55..312760.67 rows=181589 width=63)
                           Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..218007.15 rows=6001215 width=30)
                           ->  Hash  (cost=62818.08..62818.08 rows=45388 width=41)
                                 ->  Hash Join  (cost=6844.50..62818.08 rows=45388 width=41)
                                       Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..54385.00 rows=226940 width=8)
                                             Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=6769.50..6769.50 rows=30000 width=41)
                                             ->  Hash Join  (cost=2.50..6769.50 rows=30000 width=41)
                                                   Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5717.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.49..2.49 rows=5 width=33)
                                                         ->  Hash Join  (cost=1.06..2.49 rows=5 width=33)
                                                               Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=37)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=359.00..359.00 rows=10000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..359.00 rows=10000 width=8)
(27 rows)

query 6 run 1
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3.53..3.53 rows=1 width=22)
   ->  Aggregate  (cost=3.53..3.53 rows=1 width=22)
         ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.00..3.52 rows=1 width=22)
               Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1993-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(4 rows)

query 6 run 2
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3.53..3.53 rows=1 width=22)
   ->  Aggregate  (cost=3.53..3.53 rows=1 width=22)
         ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.00..3.52 rows=1 width=22)
               Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1993-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(4 rows)

query 6 run 3
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3.53..3.53 rows=1 width=22)
   ->  Aggregate  (cost=3.53..3.53 rows=1 width=22)
         ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.00..3.52 rows=1 width=22)
               Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1993-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(4 rows)

query 7 run 1
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=341475.22..341475.24 rows=1 width=84)
   ->  GroupAggregate  (cost=341475.22..341622.17 rows=5878 width=84)
         ->  Sort  (cost=341475.22..341489.91 rows=5878 width=84)
               Sort Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
               ->  Hash Join  (cost=278191.99..341107.22 rows=5878 width=84)
                     Hash Cond: (("outer".o_custkey = "inner".c_custkey) AND ("outer".n_nationkey = "inner".c_nationkey))
                     ->  Merge Join  (cost=271724.99..330144.06 rows=146933 width=92)
                           Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..52501.00 rows=1500000 width=8)
                           ->  Sort  (cost=271724.99..272092.32 rows=146933 width=92)
                                 Sort Key: lineitem.l_orderkey
                                 ->  Hash Join  (cost=440.28..259114.61 rows=146933 width=92)
                                       Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..248013.22 rows=1838122 width=34)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=438.28..438.28 rows=800 width=66)
                                             ->  Hash Join  (cost=21.28..438.28 rows=800 width=66)
                                                   Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..359.00 rows=10000 width=8)
                                                   ->  Hash  (cost=21.27..21.27 rows=2 width=66)
                                                         ->  Nested Loop  (cost=1.27..21.27 rows=2 width=66)
                                                               Join Filter: ((("outer".n_name = 'PERU'::bpchar) AND ("inner".n_name = 'MOROCCO'::bpchar)) OR (("outer".n_name = 'MOROCCO'::bpchar) AND ("inner".n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=33)
                                                               ->  Materialize  (cost=1.27..1.52 rows=25 width=33)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=33)
                     ->  Hash  (cost=5717.00..5717.00 rows=150000 width=8)
                           ->  Seq Scan on customer  (cost=0.00..5717.00 rows=150000 width=8)
(27 rows)

query 7 run 2
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=341475.22..341475.24 rows=1 width=84)
   ->  GroupAggregate  (cost=341475.22..341622.17 rows=5878 width=84)
         ->  Sort  (cost=341475.22..341489.91 rows=5878 width=84)
               Sort Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
               ->  Hash Join  (cost=278191.99..341107.22 rows=5878 width=84)
                     Hash Cond: (("outer".o_custkey = "inner".c_custkey) AND ("outer".n_nationkey = "inner".c_nationkey))
                     ->  Merge Join  (cost=271724.99..330144.06 rows=146933 width=92)
                           Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..52501.00 rows=1500000 width=8)
                           ->  Sort  (cost=271724.99..272092.32 rows=146933 width=92)
                                 Sort Key: lineitem.l_orderkey
                                 ->  Hash Join  (cost=440.28..259114.61 rows=146933 width=92)
                                       Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..248013.22 rows=1838122 width=34)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=438.28..438.28 rows=800 width=66)
                                             ->  Hash Join  (cost=21.28..438.28 rows=800 width=66)
                                                   Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..359.00 rows=10000 width=8)
                                                   ->  Hash  (cost=21.27..21.27 rows=2 width=66)
                                                         ->  Nested Loop  (cost=1.27..21.27 rows=2 width=66)
                                                               Join Filter: ((("outer".n_name = 'PERU'::bpchar) AND ("inner".n_name = 'MOROCCO'::bpchar)) OR (("outer".n_name = 'MOROCCO'::bpchar) AND ("inner".n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=33)
                                                               ->  Materialize  (cost=1.27..1.52 rows=25 width=33)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=33)
                     ->  Hash  (cost=5717.00..5717.00 rows=150000 width=8)
                           ->  Seq Scan on customer  (cost=0.00..5717.00 rows=150000 width=8)
(27 rows)

query 7 run 3
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=341475.22..341475.24 rows=1 width=84)
   ->  GroupAggregate  (cost=341475.22..341622.17 rows=5878 width=84)
         ->  Sort  (cost=341475.22..341489.91 rows=5878 width=84)
               Sort Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
               ->  Hash Join  (cost=278191.99..341107.22 rows=5878 width=84)
                     Hash Cond: (("outer".o_custkey = "inner".c_custkey) AND ("outer".n_nationkey = "inner".c_nationkey))
                     ->  Merge Join  (cost=271724.99..330144.06 rows=146933 width=92)
                           Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..52501.00 rows=1500000 width=8)
                           ->  Sort  (cost=271724.99..272092.32 rows=146933 width=92)
                                 Sort Key: lineitem.l_orderkey
                                 ->  Hash Join  (cost=440.28..259114.61 rows=146933 width=92)
                                       Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..248013.22 rows=1838122 width=34)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=438.28..438.28 rows=800 width=66)
                                             ->  Hash Join  (cost=21.28..438.28 rows=800 width=66)
                                                   Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..359.00 rows=10000 width=8)
                                                   ->  Hash  (cost=21.27..21.27 rows=2 width=66)
                                                         ->  Nested Loop  (cost=1.27..21.27 rows=2 width=66)
                                                               Join Filter: ((("outer".n_name = 'PERU'::bpchar) AND ("inner".n_name = 'MOROCCO'::bpchar)) OR (("outer".n_name = 'MOROCCO'::bpchar) AND ("inner".n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=33)
                                                               ->  Materialize  (cost=1.27..1.52 rows=25 width=33)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=33)
                     ->  Hash  (cost=5717.00..5717.00 rows=150000 width=8)
                           ->  Seq Scan on customer  (cost=0.00..5717.00 rows=150000 width=8)
(27 rows)

query 8 run 1
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=155101.84..155101.84 rows=1 width=55)
   ->  Sort  (cost=155101.84..155103.66 rows=728 width=55)
         Sort Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  HashAggregate  (cost=155049.03..155067.23 rows=728 width=55)
               ->  Hash Join  (cost=64999.18..155026.71 rows=2977 width=55)
                     Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                     ->  Hash Join  (cost=385.31..90120.86 rows=49464 width=55)
                           Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                           ->  Hash Join  (cost=384.00..89377.59 rows=49464 width=30)
                                 Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                 ->  Nested Loop  (cost=0.00..88251.62 rows=49464 width=30)
                                       ->  Seq Scan on part  (cost=0.00..7608.00 rows=1867 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..42.86 rows=27 width=34)
                                             Index Cond: ("outer".p_partkey = lineitem.l_partkey)
                                 ->  Hash  (cost=359.00..359.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..359.00 rows=10000 width=8)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=33)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=33)
                     ->  Hash  (cost=64388.24..64388.24 rows=90250 width=8)
                           ->  Hash Join  (cost=6844.50..64388.24 rows=90250 width=8)
                                 Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..54385.00 rows=451248 width=12)
                                       Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=6769.50..6769.50 rows=30000 width=4)
                                       ->  Hash Join  (cost=2.50..6769.50 rows=30000 width=4)
                                             Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5717.00 rows=150000 width=8)
                                             ->  Hash  (cost=2.49..2.49 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.06..2.49 rows=5 width=4)
                                                         Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
(35 rows)

query 8 run 2
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=155101.84..155101.84 rows=1 width=55)
   ->  Sort  (cost=155101.84..155103.66 rows=728 width=55)
         Sort Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  HashAggregate  (cost=155049.03..155067.23 rows=728 width=55)
               ->  Hash Join  (cost=64999.18..155026.71 rows=2977 width=55)
                     Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                     ->  Hash Join  (cost=385.31..90120.86 rows=49464 width=55)
                           Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                           ->  Hash Join  (cost=384.00..89377.59 rows=49464 width=30)
                                 Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                 ->  Nested Loop  (cost=0.00..88251.62 rows=49464 width=30)
                                       ->  Seq Scan on part  (cost=0.00..7608.00 rows=1867 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..42.86 rows=27 width=34)
                                             Index Cond: ("outer".p_partkey = lineitem.l_partkey)
                                 ->  Hash  (cost=359.00..359.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..359.00 rows=10000 width=8)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=33)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=33)
                     ->  Hash  (cost=64388.24..64388.24 rows=90250 width=8)
                           ->  Hash Join  (cost=6844.50..64388.24 rows=90250 width=8)
                                 Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..54385.00 rows=451248 width=12)
                                       Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=6769.50..6769.50 rows=30000 width=4)
                                       ->  Hash Join  (cost=2.50..6769.50 rows=30000 width=4)
                                             Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5717.00 rows=150000 width=8)
                                             ->  Hash  (cost=2.49..2.49 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.06..2.49 rows=5 width=4)
                                                         Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
(35 rows)

query 8 run 3
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=155101.84..155101.84 rows=1 width=55)
   ->  Sort  (cost=155101.84..155103.66 rows=728 width=55)
         Sort Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  HashAggregate  (cost=155049.03..155067.23 rows=728 width=55)
               ->  Hash Join  (cost=64999.18..155026.71 rows=2977 width=55)
                     Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                     ->  Hash Join  (cost=385.31..90120.86 rows=49464 width=55)
                           Hash Cond: ("outer".s_nationkey = "inner".n_nationkey)
                           ->  Hash Join  (cost=384.00..89377.59 rows=49464 width=30)
                                 Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                                 ->  Nested Loop  (cost=0.00..88251.62 rows=49464 width=30)
                                       ->  Seq Scan on part  (cost=0.00..7608.00 rows=1867 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..42.86 rows=27 width=34)
                                             Index Cond: ("outer".p_partkey = lineitem.l_partkey)
                                 ->  Hash  (cost=359.00..359.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..359.00 rows=10000 width=8)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=33)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=33)
                     ->  Hash  (cost=64388.24..64388.24 rows=90250 width=8)
                           ->  Hash Join  (cost=6844.50..64388.24 rows=90250 width=8)
                                 Hash Cond: ("outer".o_custkey = "inner".c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..54385.00 rows=451248 width=12)
                                       Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=6769.50..6769.50 rows=30000 width=4)
                                       ->  Hash Join  (cost=2.50..6769.50 rows=30000 width=4)
                                             Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5717.00 rows=150000 width=8)
                                             ->  Hash  (cost=2.49..2.49 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.06..2.49 rows=5 width=4)
                                                         Hash Cond: ("outer".n_regionkey = "inner".r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
(35 rows)

query 9 run 1
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35973.49..35973.52 rows=1 width=76)
   ->  GroupAggregate  (cost=35973.49..35973.91 rows=15 width=76)
         ->  Sort  (cost=35973.49..35973.53 rows=15 width=76)
               Sort Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=0.00..35973.20 rows=15 width=76)
                     Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Nested Loop  (cost=0.00..35948.13 rows=16 width=51)
                           ->  Nested Loop  (cost=0.00..35902.74 rows=15 width=51)
                                 ->  Nested Loop  (cost=0.00..35857.35 rows=15 width=55)
                                       ->  Nested Loop  (cost=0.00..13241.53 rows=6405 width=23)
                                             ->  Seq Scan on part  (cost=0.00..7608.00 rows=1601 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.27 rows=20 width=19)
                                                   Index Cond: ("outer".p_partkey = partsupp.ps_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..3.52 rows=1 width=44)
                                             Index Cond: (("outer".p_partkey = lineitem.l_partkey) AND ("outer".ps_suppkey = lineitem.l_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=8)
                                       Index Cond: ("outer".ps_suppkey = supplier.s_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..3.01 rows=1 width=8)
                                 Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=33)
(21 rows)

query 9 run 2
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35973.49..35973.52 rows=1 width=76)
   ->  GroupAggregate  (cost=35973.49..35973.91 rows=15 width=76)
         ->  Sort  (cost=35973.49..35973.53 rows=15 width=76)
               Sort Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=0.00..35973.20 rows=15 width=76)
                     Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Nested Loop  (cost=0.00..35948.13 rows=16 width=51)
                           ->  Nested Loop  (cost=0.00..35902.74 rows=15 width=51)
                                 ->  Nested Loop  (cost=0.00..35857.35 rows=15 width=55)
                                       ->  Nested Loop  (cost=0.00..13241.53 rows=6405 width=23)
                                             ->  Seq Scan on part  (cost=0.00..7608.00 rows=1601 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.27 rows=20 width=19)
                                                   Index Cond: ("outer".p_partkey = partsupp.ps_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..3.52 rows=1 width=44)
                                             Index Cond: (("outer".p_partkey = lineitem.l_partkey) AND ("outer".ps_suppkey = lineitem.l_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=8)
                                       Index Cond: ("outer".ps_suppkey = supplier.s_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..3.01 rows=1 width=8)
                                 Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=33)
(21 rows)

query 9 run 3
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35973.49..35973.52 rows=1 width=76)
   ->  GroupAggregate  (cost=35973.49..35973.91 rows=15 width=76)
         ->  Sort  (cost=35973.49..35973.53 rows=15 width=76)
               Sort Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=0.00..35973.20 rows=15 width=76)
                     Join Filter: ("outer".s_nationkey = "inner".n_nationkey)
                     ->  Nested Loop  (cost=0.00..35948.13 rows=16 width=51)
                           ->  Nested Loop  (cost=0.00..35902.74 rows=15 width=51)
                                 ->  Nested Loop  (cost=0.00..35857.35 rows=15 width=55)
                                       ->  Nested Loop  (cost=0.00..13241.53 rows=6405 width=23)
                                             ->  Seq Scan on part  (cost=0.00..7608.00 rows=1601 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.27 rows=20 width=19)
                                                   Index Cond: ("outer".p_partkey = partsupp.ps_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..3.52 rows=1 width=44)
                                             Index Cond: (("outer".p_partkey = lineitem.l_partkey) AND ("outer".ps_suppkey = lineitem.l_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.01 rows=1 width=8)
                                       Index Cond: ("outer".ps_suppkey = supplier.s_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..3.01 rows=1 width=8)
                                 Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=33)
(21 rows)

query 10 run 1
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=324518.56..324518.61 rows=20 width=211)
   ->  Sort  (cost=324518.56..324669.46 rows=60361 width=211)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))
         ->  GroupAggregate  (cost=317914.66..319725.49 rows=60361 width=211)
               ->  Sort  (cost=317914.66..318065.57 rows=60361 width=211)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=304655.43..313121.60 rows=60361 width=211)
                           Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                           ->  Merge Join  (cost=304654.12..312214.87 rows=60361 width=186)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..6281.00 rows=150000 width=164)
                                 ->  Sort  (cost=304654.12..304805.02 rows=60361 width=26)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=54529.88..299861.06 rows=60361 width=26)
                                             Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                                             ->  Seq Scan on lineitem  (cost=0.00..233010.19 rows=1562317 width=26)
                                                   Filter: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=54385.00..54385.00 rows=57953 width=8)
                                                   ->  Seq Scan on orders  (cost=0.00..54385.00 rows=57953 width=8)
                                                         Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Hash  (cost=1.25..1.25 rows=25 width=33)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=33)
(22 rows)

query 10 run 2
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=324518.56..324518.61 rows=20 width=211)
   ->  Sort  (cost=324518.56..324669.46 rows=60361 width=211)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))
         ->  GroupAggregate  (cost=317914.66..319725.49 rows=60361 width=211)
               ->  Sort  (cost=317914.66..318065.57 rows=60361 width=211)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=304655.43..313121.60 rows=60361 width=211)
                           Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                           ->  Merge Join  (cost=304654.12..312214.87 rows=60361 width=186)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..6281.00 rows=150000 width=164)
                                 ->  Sort  (cost=304654.12..304805.02 rows=60361 width=26)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=54529.88..299861.06 rows=60361 width=26)
                                             Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                                             ->  Seq Scan on lineitem  (cost=0.00..233010.19 rows=1562317 width=26)
                                                   Filter: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=54385.00..54385.00 rows=57953 width=8)
                                                   ->  Seq Scan on orders  (cost=0.00..54385.00 rows=57953 width=8)
                                                         Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Hash  (cost=1.25..1.25 rows=25 width=33)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=33)
(22 rows)

query 10 run 3
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=324518.56..324518.61 rows=20 width=211)
   ->  Sort  (cost=324518.56..324669.46 rows=60361 width=211)
         Sort Key: sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))
         ->  GroupAggregate  (cost=317914.66..319725.49 rows=60361 width=211)
               ->  Sort  (cost=317914.66..318065.57 rows=60361 width=211)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=304655.43..313121.60 rows=60361 width=211)
                           Hash Cond: ("outer".c_nationkey = "inner".n_nationkey)
                           ->  Merge Join  (cost=304654.12..312214.87 rows=60361 width=186)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..6281.00 rows=150000 width=164)
                                 ->  Sort  (cost=304654.12..304805.02 rows=60361 width=26)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=54529.88..299861.06 rows=60361 width=26)
                                             Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                                             ->  Seq Scan on lineitem  (cost=0.00..233010.19 rows=1562317 width=26)
                                                   Filter: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=54385.00..54385.00 rows=57953 width=8)
                                                   ->  Seq Scan on orders  (cost=0.00..54385.00 rows=57953 width=8)
                                                         Filter: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Hash  (cost=1.25..1.25 rows=25 width=33)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=33)
(22 rows)

query 11 run 1
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=66331.23..66331.24 rows=1 width=19)
   InitPlan
     ->  Aggregate  (cost=31674.44..31674.44 rows=1 width=15)
           ->  Hash Join  (cost=353.26..31597.60 rows=30734 width=15)
                 Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..26937.00 rows=800000 width=19)
                 ->  Hash  (cost=352.26..352.26 rows=400 width=4)
                       ->  Nested Loop  (cost=0.00..352.26 rows=400 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..345.95 rows=400 width=8)
                                   Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
   ->  Sort  (cost=34656.79..34733.63 rows=30734 width=19)
         Sort Key: sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))
         ->  HashAggregate  (cost=31828.10..32365.95 rows=30734 width=19)
               Filter: (sum((ps_supplycost * (ps_availqty)::numeric)) > $0)
               ->  Hash Join  (cost=353.26..31597.60 rows=30734 width=19)
                     Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..26937.00 rows=800000 width=23)
                     ->  Hash  (cost=352.26..352.26 rows=400 width=4)
                           ->  Nested Loop  (cost=0.00..352.26 rows=400 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..345.95 rows=400 width=8)
                                       Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
(25 rows)

query 11 run 2
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=66331.23..66331.24 rows=1 width=19)
   InitPlan
     ->  Aggregate  (cost=31674.44..31674.44 rows=1 width=15)
           ->  Hash Join  (cost=353.26..31597.60 rows=30734 width=15)
                 Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..26937.00 rows=800000 width=19)
                 ->  Hash  (cost=352.26..352.26 rows=400 width=4)
                       ->  Nested Loop  (cost=0.00..352.26 rows=400 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..345.95 rows=400 width=8)
                                   Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
   ->  Sort  (cost=34656.79..34733.63 rows=30734 width=19)
         Sort Key: sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))
         ->  HashAggregate  (cost=31828.10..32365.95 rows=30734 width=19)
               Filter: (sum((ps_supplycost * (ps_availqty)::numeric)) > $0)
               ->  Hash Join  (cost=353.26..31597.60 rows=30734 width=19)
                     Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..26937.00 rows=800000 width=23)
                     ->  Hash  (cost=352.26..352.26 rows=400 width=4)
                           ->  Nested Loop  (cost=0.00..352.26 rows=400 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..345.95 rows=400 width=8)
                                       Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
(25 rows)

query 11 run 3
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=66331.23..66331.24 rows=1 width=19)
   InitPlan
     ->  Aggregate  (cost=31674.44..31674.44 rows=1 width=15)
           ->  Hash Join  (cost=353.26..31597.60 rows=30734 width=15)
                 Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..26937.00 rows=800000 width=19)
                 ->  Hash  (cost=352.26..352.26 rows=400 width=4)
                       ->  Nested Loop  (cost=0.00..352.26 rows=400 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..345.95 rows=400 width=8)
                                   Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
   ->  Sort  (cost=34656.79..34733.63 rows=30734 width=19)
         Sort Key: sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))
         ->  HashAggregate  (cost=31828.10..32365.95 rows=30734 width=19)
               Filter: (sum((ps_supplycost * (ps_availqty)::numeric)) > $0)
               ->  Hash Join  (cost=353.26..31597.60 rows=30734 width=19)
                     Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..26937.00 rows=800000 width=23)
                     ->  Hash  (cost=352.26..352.26 rows=400 width=4)
                           ->  Nested Loop  (cost=0.00..352.26 rows=400 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..345.95 rows=400 width=8)
                                       Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
(25 rows)

query 12 run 1
SET
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=366770.74..366770.75 rows=1 width=33)
   ->  Sort  (cost=366770.74..366770.75 rows=1 width=33)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=366770.72..366770.73 rows=1 width=33)
               ->  Merge Join  (cost=309962.21..366572.91 rows=26375 width=33)
                     Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..52501.00 rows=1500000 width=23)
                     ->  Sort  (cost=309962.21..310028.15 rows=26375 width=18)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..308025.38 rows=26375 width=18)
                                 Filter: (((l_shipmode = 'SHIP'::bpchar) OR (l_shipmode = 'REG AIR'::bpchar)) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 2
SET
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=366770.74..366770.75 rows=1 width=33)
   ->  Sort  (cost=366770.74..366770.75 rows=1 width=33)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=366770.72..366770.73 rows=1 width=33)
               ->  Merge Join  (cost=309962.21..366572.91 rows=26375 width=33)
                     Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..52501.00 rows=1500000 width=23)
                     ->  Sort  (cost=309962.21..310028.15 rows=26375 width=18)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..308025.38 rows=26375 width=18)
                                 Filter: (((l_shipmode = 'SHIP'::bpchar) OR (l_shipmode = 'REG AIR'::bpchar)) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 3
SET
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=366770.74..366770.75 rows=1 width=33)
   ->  Sort  (cost=366770.74..366770.75 rows=1 width=33)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=366770.72..366770.73 rows=1 width=33)
               ->  Merge Join  (cost=309962.21..366572.91 rows=26375 width=33)
                     Merge Cond: ("outer".o_orderkey = "inner".l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..52501.00 rows=1500000 width=23)
                     ->  Sort  (cost=309962.21..310028.15 rows=26375 width=18)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..308025.38 rows=26375 width=18)
                                 Filter: (((l_shipmode = 'SHIP'::bpchar) OR (l_shipmode = 'REG AIR'::bpchar)) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 13 run 1
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=261860.63..261860.63 rows=1 width=8)
   ->  Sort  (cost=261860.63..261861.13 rows=200 width=8)
         Sort Key: count(*), c_count
         ->  HashAggregate  (cost=261852.48..261852.98 rows=200 width=8)
               ->  Subquery Scan c_orders  (cost=222571.48..261102.48 rows=150000 width=8)
                     ->  GroupAggregate  (cost=222571.48..259602.48 rows=150000 width=8)
                           ->  Merge Left Join  (cost=222571.48..251727.48 rows=1500000 width=8)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..6281.00 rows=150000 width=4)
                                 ->  Sort  (cost=222571.48..226321.48 rows=1500000 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..50635.00 rows=1500000 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 13 run 2
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=261860.63..261860.63 rows=1 width=8)
   ->  Sort  (cost=261860.63..261861.13 rows=200 width=8)
         Sort Key: count(*), c_count
         ->  HashAggregate  (cost=261852.48..261852.98 rows=200 width=8)
               ->  Subquery Scan c_orders  (cost=222571.48..261102.48 rows=150000 width=8)
                     ->  GroupAggregate  (cost=222571.48..259602.48 rows=150000 width=8)
                           ->  Merge Left Join  (cost=222571.48..251727.48 rows=1500000 width=8)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..6281.00 rows=150000 width=4)
                                 ->  Sort  (cost=222571.48..226321.48 rows=1500000 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..50635.00 rows=1500000 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 13 run 3
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=261860.63..261860.63 rows=1 width=8)
   ->  Sort  (cost=261860.63..261861.13 rows=200 width=8)
         Sort Key: count(*), c_count
         ->  HashAggregate  (cost=261852.48..261852.98 rows=200 width=8)
               ->  Subquery Scan c_orders  (cost=222571.48..261102.48 rows=150000 width=8)
                     ->  GroupAggregate  (cost=222571.48..259602.48 rows=150000 width=8)
                           ->  Merge Left Join  (cost=222571.48..251727.48 rows=1500000 width=8)
                                 Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.00..6281.00 rows=150000 width=4)
                                 ->  Sort  (cost=222571.48..226321.48 rows=1500000 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..50635.00 rows=1500000 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 14 run 1
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=135365.86..135365.88 rows=1 width=46)
   ->  Aggregate  (cost=135365.86..135365.88 rows=1 width=46)
         ->  Merge Join  (cost=125570.60..135017.98 rows=69576 width=46)
               Merge Cond: ("outer".p_partkey = "inner".l_partkey)
               ->  Index Scan using part_pkey on part  (cost=0.00..7859.00 rows=200000 width=28)
               ->  Sort  (cost=125570.60..125767.60 rows=78799 width=26)
                     Sort Key: lineitem.l_partkey
                     ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.00..119161.92 rows=78799 width=26)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
(9 rows)

query 14 run 2
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=135365.86..135365.88 rows=1 width=46)
   ->  Aggregate  (cost=135365.86..135365.88 rows=1 width=46)
         ->  Merge Join  (cost=125570.60..135017.98 rows=69576 width=46)
               Merge Cond: ("outer".p_partkey = "inner".l_partkey)
               ->  Index Scan using part_pkey on part  (cost=0.00..7859.00 rows=200000 width=28)
               ->  Sort  (cost=125570.60..125767.60 rows=78799 width=26)
                     Sort Key: lineitem.l_partkey
                     ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.00..119161.92 rows=78799 width=26)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
(9 rows)

query 14 run 3
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=135365.86..135365.88 rows=1 width=46)
   ->  Aggregate  (cost=135365.86..135365.88 rows=1 width=46)
         ->  Merge Join  (cost=125570.60..135017.98 rows=69576 width=46)
               Merge Cond: ("outer".p_partkey = "inner".l_partkey)
               ->  Index Scan using part_pkey on part  (cost=0.00..7859.00 rows=200000 width=28)
               ->  Sort  (cost=125570.60..125767.60 rows=78799 width=26)
                     Sort Key: lineitem.l_partkey
                     ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.00..119161.92 rows=78799 width=26)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
(9 rows)

query 15 run 1
SET
CREATE VIEW
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit  (cost=498856.51..498857.71 rows=1 width=112)
   InitPlan
     ->  Aggregate  (cost=249139.50..249139.50 rows=1 width=32)
           ->  Subquery Scan revenue0  (cost=249132.29..249138.59 rows=360 width=32)
                 ->  HashAggregate  (cost=249132.29..249134.99 rows=360 width=26)
                       ->  Seq Scan on lineitem  (cost=0.00..248013.22 rows=223814 width=26)
                             Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=249717.02..250146.42 rows=360 width=112)
         Merge Cond: ("outer".s_suppkey = "inner".supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..399.00 rows=10000 width=80)
         ->  Sort  (cost=249717.02..249717.92 rows=360 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan revenue0  (cost=249691.83..249701.73 rows=360 width=36)
                     ->  HashAggregate  (cost=249691.83..249698.13 rows=360 width=26)
                           Filter: (sum((l_extendedprice * (1::numeric - l_discount))) = $0)
                           ->  Seq Scan on lineitem  (cost=0.00..248013.22 rows=223814 width=26)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(17 rows)

DROP VIEW
query 15 run 2
SET
CREATE VIEW
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit  (cost=498856.51..498857.71 rows=1 width=112)
   InitPlan
     ->  Aggregate  (cost=249139.50..249139.50 rows=1 width=32)
           ->  Subquery Scan revenue0  (cost=249132.29..249138.59 rows=360 width=32)
                 ->  HashAggregate  (cost=249132.29..249134.99 rows=360 width=26)
                       ->  Seq Scan on lineitem  (cost=0.00..248013.22 rows=223814 width=26)
                             Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=249717.02..250146.42 rows=360 width=112)
         Merge Cond: ("outer".s_suppkey = "inner".supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..399.00 rows=10000 width=80)
         ->  Sort  (cost=249717.02..249717.92 rows=360 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan revenue0  (cost=249691.83..249701.73 rows=360 width=36)
                     ->  HashAggregate  (cost=249691.83..249698.13 rows=360 width=26)
                           Filter: (sum((l_extendedprice * (1::numeric - l_discount))) = $0)
                           ->  Seq Scan on lineitem  (cost=0.00..248013.22 rows=223814 width=26)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(17 rows)

DROP VIEW
query 15 run 3
SET
CREATE VIEW
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit  (cost=498856.51..498857.71 rows=1 width=112)
   InitPlan
     ->  Aggregate  (cost=249139.50..249139.50 rows=1 width=32)
           ->  Subquery Scan revenue0  (cost=249132.29..249138.59 rows=360 width=32)
                 ->  HashAggregate  (cost=249132.29..249134.99 rows=360 width=26)
                       ->  Seq Scan on lineitem  (cost=0.00..248013.22 rows=223814 width=26)
                             Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=249717.02..250146.42 rows=360 width=112)
         Merge Cond: ("outer".s_suppkey = "inner".supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..399.00 rows=10000 width=80)
         ->  Sort  (cost=249717.02..249717.92 rows=360 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan revenue0  (cost=249691.83..249701.73 rows=360 width=36)
                     ->  HashAggregate  (cost=249691.83..249698.13 rows=360 width=26)
                           Filter: (sum((l_extendedprice * (1::numeric - l_discount))) = $0)
                           ->  Seq Scan on lineitem  (cost=0.00..248013.22 rows=223814 width=26)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(17 rows)

DROP VIEW
query 16 run 1
SET
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=50394.53..50394.54 rows=1 width=46)
   ->  Sort  (cost=50394.53..50401.59 rows=2823 width=46)
         Sort Key: count(DISTINCT partsupp.ps_suppkey), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=49519.96..50232.73 rows=2823 width=46)
               ->  Sort  (cost=49519.96..49661.11 rows=56457 width=46)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=12562.57..45064.13 rows=56457 width=46)
                           Hash Cond: ("outer".ps_partkey = "inner".p_partkey)
                           ->  Seq Scan on partsupp  (cost=384.00..29321.00 rows=400000 width=8)
                                 Filter: (NOT (hashed subplan))
                                 SubPlan
                                   ->  Seq Scan on supplier  (cost=0.00..384.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=12108.00..12108.00 rows=28228 width=46)
                                 ->  Seq Scan on part  (cost=0.00..12108.00 rows=28228 width=46)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND ((p_size = 12) OR (p_size = 32) OR (p_size = 36) OR (p_size = 26) OR (p_size = 40) OR (p_size = 34) OR (p_size = 49) OR (p_size = 9)))
(16 rows)

query 16 run 2
SET
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=50394.53..50394.54 rows=1 width=46)
   ->  Sort  (cost=50394.53..50401.59 rows=2823 width=46)
         Sort Key: count(DISTINCT partsupp.ps_suppkey), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=49519.96..50232.73 rows=2823 width=46)
               ->  Sort  (cost=49519.96..49661.11 rows=56457 width=46)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=12562.57..45064.13 rows=56457 width=46)
                           Hash Cond: ("outer".ps_partkey = "inner".p_partkey)
                           ->  Seq Scan on partsupp  (cost=384.00..29321.00 rows=400000 width=8)
                                 Filter: (NOT (hashed subplan))
                                 SubPlan
                                   ->  Seq Scan on supplier  (cost=0.00..384.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=12108.00..12108.00 rows=28228 width=46)
                                 ->  Seq Scan on part  (cost=0.00..12108.00 rows=28228 width=46)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND ((p_size = 12) OR (p_size = 32) OR (p_size = 36) OR (p_size = 26) OR (p_size = 40) OR (p_size = 34) OR (p_size = 49) OR (p_size = 9)))
(16 rows)

query 16 run 3
SET
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=50394.53..50394.54 rows=1 width=46)
   ->  Sort  (cost=50394.53..50401.59 rows=2823 width=46)
         Sort Key: count(DISTINCT partsupp.ps_suppkey), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=49519.96..50232.73 rows=2823 width=46)
               ->  Sort  (cost=49519.96..49661.11 rows=56457 width=46)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=12562.57..45064.13 rows=56457 width=46)
                           Hash Cond: ("outer".ps_partkey = "inner".p_partkey)
                           ->  Seq Scan on partsupp  (cost=384.00..29321.00 rows=400000 width=8)
                                 Filter: (NOT (hashed subplan))
                                 SubPlan
                                   ->  Seq Scan on supplier  (cost=0.00..384.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=12108.00..12108.00 rows=28228 width=46)
                                 ->  Seq Scan on part  (cost=0.00..12108.00 rows=28228 width=46)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND ((p_size = 12) OR (p_size = 32) OR (p_size = 36) OR (p_size = 26) OR (p_size = 40) OR (p_size = 34) OR (p_size = 49) OR (p_size = 9)))
(16 rows)

query 17 run 1
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=274462.96..274462.96 rows=1 width=13)
   ->  Aggregate  (cost=274462.96..274462.96 rows=1 width=13)
         ->  Nested Loop  (cost=256121.93..274455.91 rows=2818 width=13)
               Join Filter: ("inner".l_quantity < "outer".avg_quantity)
               ->  Hash Join  (cost=256121.93..260655.42 rows=319 width=40)
                     Hash Cond: ("outer".agg_partkey = "inner".p_partkey)
                     ->  Subquery Scan part_agg  (cost=248013.23..251410.95 rows=226515 width=36)
                           ->  HashAggregate  (cost=248013.23..249145.80 rows=226515 width=14)
                                 ->  Seq Scan on lineitem  (cost=0.00..218007.15 rows=6001215 width=14)
                     ->  Hash  (cost=8108.00..8108.00 rows=281 width=4)
                           ->  Seq Scan on part  (cost=0.00..8108.00 rows=281 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..42.86 rows=27 width=27)
                     Index Cond: ("outer".agg_partkey = lineitem.l_partkey)
(14 rows)

query 17 run 2
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=274462.96..274462.96 rows=1 width=13)
   ->  Aggregate  (cost=274462.96..274462.96 rows=1 width=13)
         ->  Nested Loop  (cost=256121.93..274455.91 rows=2818 width=13)
               Join Filter: ("inner".l_quantity < "outer".avg_quantity)
               ->  Hash Join  (cost=256121.93..260655.42 rows=319 width=40)
                     Hash Cond: ("outer".agg_partkey = "inner".p_partkey)
                     ->  Subquery Scan part_agg  (cost=248013.23..251410.95 rows=226515 width=36)
                           ->  HashAggregate  (cost=248013.23..249145.80 rows=226515 width=14)
                                 ->  Seq Scan on lineitem  (cost=0.00..218007.15 rows=6001215 width=14)
                     ->  Hash  (cost=8108.00..8108.00 rows=281 width=4)
                           ->  Seq Scan on part  (cost=0.00..8108.00 rows=281 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..42.86 rows=27 width=27)
                     Index Cond: ("outer".agg_partkey = lineitem.l_partkey)
(14 rows)

query 17 run 3
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=274462.96..274462.96 rows=1 width=13)
   ->  Aggregate  (cost=274462.96..274462.96 rows=1 width=13)
         ->  Nested Loop  (cost=256121.93..274455.91 rows=2818 width=13)
               Join Filter: ("inner".l_quantity < "outer".avg_quantity)
               ->  Hash Join  (cost=256121.93..260655.42 rows=319 width=40)
                     Hash Cond: ("outer".agg_partkey = "inner".p_partkey)
                     ->  Subquery Scan part_agg  (cost=248013.23..251410.95 rows=226515 width=36)
                           ->  HashAggregate  (cost=248013.23..249145.80 rows=226515 width=14)
                                 ->  Seq Scan on lineitem  (cost=0.00..218007.15 rows=6001215 width=14)
                     ->  Hash  (cost=8108.00..8108.00 rows=281 width=4)
                           ->  Seq Scan on part  (cost=0.00..8108.00 rows=281 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..42.86 rows=27 width=27)
                     Index Cond: ("outer".agg_partkey = lineitem.l_partkey)
(14 rows)

query 18 run 1
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=583791.64..583791.89 rows=100 width=57)
   ->  Sort  (cost=583791.64..584084.46 rows=117128 width=57)
         Sort Key: orders.o_totalprice, orders.o_orderdate
         ->  GroupAggregate  (cost=571588.23..573930.79 rows=117128 width=57)
               ->  Sort  (cost=571588.23..571881.05 rows=117128 width=57)
                     Sort Key: customer.c_name, customer.c_custkey, orders.o_orderkey, orders.o_orderdate, orders.o_totalprice
                     ->  Hash Join  (cost=312542.88..561727.39 rows=117128 width=57)
                           Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..218007.15 rows=6001215 width=14)
                           ->  Hash  (cost=312469.69..312469.69 rows=29276 width=51)
                                 ->  Merge Join  (cost=305375.22..312469.69 rows=29276 width=51)
                                       Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                       ->  Index Scan using customer_pkey on customer  (cost=0.00..6281.00 rows=150000 width=26)
                                       ->  Sort  (cost=305375.22..305448.41 rows=29276 width=29)
                                             Sort Key: orders.o_custkey
                                             ->  Hash Join  (cost=248525.56..303203.32 rows=29276 width=29)
                                                   Hash Cond: ("outer".o_orderkey = "inner".l_orderkey)
                                                   ->  Seq Scan on orders  (cost=0.00..46885.00 rows=1500000 width=25)
                                                   ->  Hash  (cost=248452.37..248452.37 rows=29276 width=4)
                                                         ->  Subquery Scan "IN_subquery"  (cost=248013.23..248452.37 rows=29276 width=4)
                                                               ->  HashAggregate  (cost=248013.23..248159.61 rows=29276 width=14)
                                                                     Filter: (sum(l_quantity) > 313::numeric)
                                                                     ->  Seq Scan on lineitem  (cost=0.00..218007.15 rows=6001215 width=14)
(23 rows)

query 18 run 2
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=583791.64..583791.89 rows=100 width=57)
   ->  Sort  (cost=583791.64..584084.46 rows=117128 width=57)
         Sort Key: orders.o_totalprice, orders.o_orderdate
         ->  GroupAggregate  (cost=571588.23..573930.79 rows=117128 width=57)
               ->  Sort  (cost=571588.23..571881.05 rows=117128 width=57)
                     Sort Key: customer.c_name, customer.c_custkey, orders.o_orderkey, orders.o_orderdate, orders.o_totalprice
                     ->  Hash Join  (cost=312542.88..561727.39 rows=117128 width=57)
                           Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..218007.15 rows=6001215 width=14)
                           ->  Hash  (cost=312469.69..312469.69 rows=29276 width=51)
                                 ->  Merge Join  (cost=305375.22..312469.69 rows=29276 width=51)
                                       Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                       ->  Index Scan using customer_pkey on customer  (cost=0.00..6281.00 rows=150000 width=26)
                                       ->  Sort  (cost=305375.22..305448.41 rows=29276 width=29)
                                             Sort Key: orders.o_custkey
                                             ->  Hash Join  (cost=248525.56..303203.32 rows=29276 width=29)
                                                   Hash Cond: ("outer".o_orderkey = "inner".l_orderkey)
                                                   ->  Seq Scan on orders  (cost=0.00..46885.00 rows=1500000 width=25)
                                                   ->  Hash  (cost=248452.37..248452.37 rows=29276 width=4)
                                                         ->  Subquery Scan "IN_subquery"  (cost=248013.23..248452.37 rows=29276 width=4)
                                                               ->  HashAggregate  (cost=248013.23..248159.61 rows=29276 width=14)
                                                                     Filter: (sum(l_quantity) > 313::numeric)
                                                                     ->  Seq Scan on lineitem  (cost=0.00..218007.15 rows=6001215 width=14)
(23 rows)

query 18 run 3
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=583791.64..583791.89 rows=100 width=57)
   ->  Sort  (cost=583791.64..584084.46 rows=117128 width=57)
         Sort Key: orders.o_totalprice, orders.o_orderdate
         ->  GroupAggregate  (cost=571588.23..573930.79 rows=117128 width=57)
               ->  Sort  (cost=571588.23..571881.05 rows=117128 width=57)
                     Sort Key: customer.c_name, customer.c_custkey, orders.o_orderkey, orders.o_orderdate, orders.o_totalprice
                     ->  Hash Join  (cost=312542.88..561727.39 rows=117128 width=57)
                           Hash Cond: ("outer".l_orderkey = "inner".o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..218007.15 rows=6001215 width=14)
                           ->  Hash  (cost=312469.69..312469.69 rows=29276 width=51)
                                 ->  Merge Join  (cost=305375.22..312469.69 rows=29276 width=51)
                                       Merge Cond: ("outer".c_custkey = "inner".o_custkey)
                                       ->  Index Scan using customer_pkey on customer  (cost=0.00..6281.00 rows=150000 width=26)
                                       ->  Sort  (cost=305375.22..305448.41 rows=29276 width=29)
                                             Sort Key: orders.o_custkey
                                             ->  Hash Join  (cost=248525.56..303203.32 rows=29276 width=29)
                                                   Hash Cond: ("outer".o_orderkey = "inner".l_orderkey)
                                                   ->  Seq Scan on orders  (cost=0.00..46885.00 rows=1500000 width=25)
                                                   ->  Hash  (cost=248452.37..248452.37 rows=29276 width=4)
                                                         ->  Subquery Scan "IN_subquery"  (cost=248013.23..248452.37 rows=29276 width=4)
                                                               ->  HashAggregate  (cost=248013.23..248159.61 rows=29276 width=14)
                                                                     Filter: (sum(l_quantity) > 313::numeric)
                                                                     ->  Seq Scan on lineitem  (cost=0.00..218007.15 rows=6001215 width=14)
(23 rows)

query 19 run 1
SET


 Limit  (cost=296479.42..296479.42 rows=1 width=22)
   ->  Aggregate  (cost=296479.42..296479.42 rows=1 width=22)
         ->  Hash Join  (cost=9865.95..296479.17 rows=97 width=22)
               Hash Cond: ("outer".l_partkey = "inner".p_partkey)
               Join Filter: ((("inner".p_brand = 'Brand#24'::bpchar) AND (("inner".p_container = 'SM CASE'::bpchar) OR ("inner".p_container = 'SM BOX'::bpchar) OR ("inner".p_container = 'SM PACK'::bpchar) OR ("inner".p_container = 'SM PKG'::bpchar)) AND ("outer".l_quantity >= 10::numeric) AND ("outer".l_quantity <= 20::numeric) AND ("inner".p_size <= 5)) OR (("inner".p_brand = 'Brand#43'::bpchar) AND (("inner".p_container = 'MED BAG'::bpchar) OR ("inner".p_container = 'MED BOX'::bpchar) OR ("inner".p_container = 'MED PKG'::bpchar) OR ("inner".p_container = 'MED PACK'::bpchar)) AND ("outer".l_quantity >= 10::numeric) AND ("outer".l_quantity <= 20::numeric) AND ("inner".p_size <= 10)) OR (("inner".p_brand = 'Brand#44'::bpchar) AND (("inner".p_container = 'LG CASE'::bpchar) OR ("inner".p_container = 'LG BOX'::bpchar) OR ("inner".p_container = 'LG PACK'::bpchar) OR ("inner".p_container = 'LG PKG'::bpchar)) AND ("outer".l_quantity >= 20::numeric) AND ("outer".l_quantity <= 30::numeric) AND ("inner".p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..263016.26 rows=231391 width=36)
                     Filter: (((l_shipmode = 'AIR'::bpchar) OR (l_shipmode = 'AIR REG'::bpchar)) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
               ->  Hash  (cost=7608.00..7608.00 rows=199982 width=36)
                     ->  Seq Scan on part  (cost=0.00..7608.00 rows=199982 width=36)
                           Filter: (p_size >= 1)
(10 rows)

query 19 run 2
SET


 Limit  (cost=296479.42..296479.42 rows=1 width=22)
   ->  Aggregate  (cost=296479.42..296479.42 rows=1 width=22)
         ->  Hash Join  (cost=9865.95..296479.17 rows=97 width=22)
               Hash Cond: ("outer".l_partkey = "inner".p_partkey)
               Join Filter: ((("inner".p_brand = 'Brand#24'::bpchar) AND (("inner".p_container = 'SM CASE'::bpchar) OR ("inner".p_container = 'SM BOX'::bpchar) OR ("inner".p_container = 'SM PACK'::bpchar) OR ("inner".p_container = 'SM PKG'::bpchar)) AND ("outer".l_quantity >= 10::numeric) AND ("outer".l_quantity <= 20::numeric) AND ("inner".p_size <= 5)) OR (("inner".p_brand = 'Brand#43'::bpchar) AND (("inner".p_container = 'MED BAG'::bpchar) OR ("inner".p_container = 'MED BOX'::bpchar) OR ("inner".p_container = 'MED PKG'::bpchar) OR ("inner".p_container = 'MED PACK'::bpchar)) AND ("outer".l_quantity >= 10::numeric) AND ("outer".l_quantity <= 20::numeric) AND ("inner".p_size <= 10)) OR (("inner".p_brand = 'Brand#44'::bpchar) AND (("inner".p_container = 'LG CASE'::bpchar) OR ("inner".p_container = 'LG BOX'::bpchar) OR ("inner".p_container = 'LG PACK'::bpchar) OR ("inner".p_container = 'LG PKG'::bpchar)) AND ("outer".l_quantity >= 20::numeric) AND ("outer".l_quantity <= 30::numeric) AND ("inner".p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..263016.26 rows=231391 width=36)
                     Filter: (((l_shipmode = 'AIR'::bpchar) OR (l_shipmode = 'AIR REG'::bpchar)) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
               ->  Hash  (cost=7608.00..7608.00 rows=199982 width=36)
                     ->  Seq Scan on part  (cost=0.00..7608.00 rows=199982 width=36)
                           Filter: (p_size >= 1)
(10 rows)

query 19 run 3
SET


 Limit  (cost=296479.42..296479.42 rows=1 width=22)
   ->  Aggregate  (cost=296479.42..296479.42 rows=1 width=22)
         ->  Hash Join  (cost=9865.95..296479.17 rows=97 width=22)
               Hash Cond: ("outer".l_partkey = "inner".p_partkey)
               Join Filter: ((("inner".p_brand = 'Brand#24'::bpchar) AND (("inner".p_container = 'SM CASE'::bpchar) OR ("inner".p_container = 'SM BOX'::bpchar) OR ("inner".p_container = 'SM PACK'::bpchar) OR ("inner".p_container = 'SM PKG'::bpchar)) AND ("outer".l_quantity >= 10::numeric) AND ("outer".l_quantity <= 20::numeric) AND ("inner".p_size <= 5)) OR (("inner".p_brand = 'Brand#43'::bpchar) AND (("inner".p_container = 'MED BAG'::bpchar) OR ("inner".p_container = 'MED BOX'::bpchar) OR ("inner".p_container = 'MED PKG'::bpchar) OR ("inner".p_container = 'MED PACK'::bpchar)) AND ("outer".l_quantity >= 10::numeric) AND ("outer".l_quantity <= 20::numeric) AND ("inner".p_size <= 10)) OR (("inner".p_brand = 'Brand#44'::bpchar) AND (("inner".p_container = 'LG CASE'::bpchar) OR ("inner".p_container = 'LG BOX'::bpchar) OR ("inner".p_container = 'LG PACK'::bpchar) OR ("inner".p_container = 'LG PKG'::bpchar)) AND ("outer".l_quantity >= 20::numeric) AND ("outer".l_quantity <= 30::numeric) AND ("inner".p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..263016.26 rows=231391 width=36)
                     Filter: (((l_shipmode = 'AIR'::bpchar) OR (l_shipmode = 'AIR REG'::bpchar)) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
               ->  Hash  (cost=7608.00..7608.00 rows=199982 width=36)
                     ->  Seq Scan on part  (cost=0.00..7608.00 rows=199982 width=36)
                           Filter: (p_size >= 1)
(10 rows)

query 20 run 1
SET
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=264918.85..264918.85 rows=1 width=57)
   ->  Sort  (cost=264918.85..264918.85 rows=1 width=57)
         Sort Key: supplier.s_name
         ->  Hash Join  (cost=264918.37..264918.84 rows=1 width=57)
               Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
               ->  HashAggregate  (cost=264565.11..264565.11 rows=1 width=8)
                     ->  Nested Loop  (cost=262679.61..264565.11 rows=1 width=8)
                           Join Filter: (("inner".ps_availqty)::numeric > "outer".agg_quantity)
                           ->  Hash Join  (cost=262679.61..264561.86 rows=1 width=44)
                                 Hash Cond: ("outer".agg_partkey = "inner".p_partkey)
                                 ->  Subquery Scan agg_lineitem  (cost=255071.60..256483.28 rows=94112 width=40)
                                       ->  HashAggregate  (cost=255071.60..255542.16 rows=94112 width=18)
                                             ->  Seq Scan on lineitem  (cost=0.00..248013.22 rows=941117 width=18)
                                                   Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=7608.00..7608.00 rows=1 width=4)
                                       ->  HashAggregate  (cost=7608.00..7608.00 rows=1 width=4)
                                             ->  Seq Scan on part  (cost=0.00..7608.00 rows=1 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.00..3.23 rows=1 width=12)
                                 Index Cond: ((partsupp.ps_partkey = "outer".p_partkey) AND ("outer".agg_suppkey = partsupp.ps_suppkey))
               ->  Hash  (cost=352.26..352.26 rows=400 width=61)
                     ->  Nested Loop  (cost=0.00..352.26 rows=400 width=61)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'IRAQ'::bpchar)
                           ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..345.95 rows=400 width=65)
                                 Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
(26 rows)

query 20 run 2
SET
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=264918.85..264918.85 rows=1 width=57)
   ->  Sort  (cost=264918.85..264918.85 rows=1 width=57)
         Sort Key: supplier.s_name
         ->  Hash Join  (cost=264918.37..264918.84 rows=1 width=57)
               Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
               ->  HashAggregate  (cost=264565.11..264565.11 rows=1 width=8)
                     ->  Nested Loop  (cost=262679.61..264565.11 rows=1 width=8)
                           Join Filter: (("inner".ps_availqty)::numeric > "outer".agg_quantity)
                           ->  Hash Join  (cost=262679.61..264561.86 rows=1 width=44)
                                 Hash Cond: ("outer".agg_partkey = "inner".p_partkey)
                                 ->  Subquery Scan agg_lineitem  (cost=255071.60..256483.28 rows=94112 width=40)
                                       ->  HashAggregate  (cost=255071.60..255542.16 rows=94112 width=18)
                                             ->  Seq Scan on lineitem  (cost=0.00..248013.22 rows=941117 width=18)
                                                   Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=7608.00..7608.00 rows=1 width=4)
                                       ->  HashAggregate  (cost=7608.00..7608.00 rows=1 width=4)
                                             ->  Seq Scan on part  (cost=0.00..7608.00 rows=1 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.00..3.23 rows=1 width=12)
                                 Index Cond: ((partsupp.ps_partkey = "outer".p_partkey) AND ("outer".agg_suppkey = partsupp.ps_suppkey))
               ->  Hash  (cost=352.26..352.26 rows=400 width=61)
                     ->  Nested Loop  (cost=0.00..352.26 rows=400 width=61)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'IRAQ'::bpchar)
                           ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..345.95 rows=400 width=65)
                                 Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
(26 rows)

query 20 run 3
SET
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=264918.85..264918.85 rows=1 width=57)
   ->  Sort  (cost=264918.85..264918.85 rows=1 width=57)
         Sort Key: supplier.s_name
         ->  Hash Join  (cost=264918.37..264918.84 rows=1 width=57)
               Hash Cond: ("outer".ps_suppkey = "inner".s_suppkey)
               ->  HashAggregate  (cost=264565.11..264565.11 rows=1 width=8)
                     ->  Nested Loop  (cost=262679.61..264565.11 rows=1 width=8)
                           Join Filter: (("inner".ps_availqty)::numeric > "outer".agg_quantity)
                           ->  Hash Join  (cost=262679.61..264561.86 rows=1 width=44)
                                 Hash Cond: ("outer".agg_partkey = "inner".p_partkey)
                                 ->  Subquery Scan agg_lineitem  (cost=255071.60..256483.28 rows=94112 width=40)
                                       ->  HashAggregate  (cost=255071.60..255542.16 rows=94112 width=18)
                                             ->  Seq Scan on lineitem  (cost=0.00..248013.22 rows=941117 width=18)
                                                   Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=7608.00..7608.00 rows=1 width=4)
                                       ->  HashAggregate  (cost=7608.00..7608.00 rows=1 width=4)
                                             ->  Seq Scan on part  (cost=0.00..7608.00 rows=1 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.00..3.23 rows=1 width=12)
                                 Index Cond: ((partsupp.ps_partkey = "outer".p_partkey) AND ("outer".agg_suppkey = partsupp.ps_suppkey))
               ->  Hash  (cost=352.26..352.26 rows=400 width=61)
                     ->  Nested Loop  (cost=0.00..352.26 rows=400 width=61)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'IRAQ'::bpchar)
                           ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..345.95 rows=400 width=65)
                                 Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
(26 rows)

query 21 run 1
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1653234.47..1653234.72 rows=100 width=29)
   ->  Sort  (cost=1653234.47..1653259.32 rows=9943 width=29)
         Sort Key: count(*), supplier.s_name
         ->  HashAggregate  (cost=1652549.42..1652574.28 rows=9943 width=29)
               ->  Nested Loop  (cost=353.26..1652499.70 rows=9943 width=29)
                     ->  Hash Join  (cost=353.26..1591914.56 rows=20005 width=33)
                           Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                           ->  Seq Scan on lineitem l1  (cost=0.00..1588860.74 rows=500102 width=8)
                                 Filter: ((l_receiptdate > l_commitdate) AND (subplan) AND (NOT (subplan)))
                                 SubPlan
                                   ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.00..11.79 rows=69 width=152)
                                         Index Cond: (l_orderkey = $0)
                                         Filter: ((l_suppkey <> $1) AND (l_receiptdate > l_commitdate))
                                   ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..11.28 rows=205 width=152)
                                         Index Cond: (l_orderkey = $0)
                                         Filter: (l_suppkey <> $1)
                           ->  Hash  (cost=352.26..352.26 rows=400 width=33)
                                 ->  Nested Loop  (cost=0.00..352.26 rows=400 width=33)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'PERU'::bpchar)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..345.95 rows=400 width=37)
                                             Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..3.02 rows=1 width=4)
                           Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                           Filter: (o_orderstatus = 'F'::bpchar)
(25 rows)

query 21 run 2
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1653234.47..1653234.72 rows=100 width=29)
   ->  Sort  (cost=1653234.47..1653259.32 rows=9943 width=29)
         Sort Key: count(*), supplier.s_name
         ->  HashAggregate  (cost=1652549.42..1652574.28 rows=9943 width=29)
               ->  Nested Loop  (cost=353.26..1652499.70 rows=9943 width=29)
                     ->  Hash Join  (cost=353.26..1591914.56 rows=20005 width=33)
                           Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                           ->  Seq Scan on lineitem l1  (cost=0.00..1588860.74 rows=500102 width=8)
                                 Filter: ((l_receiptdate > l_commitdate) AND (subplan) AND (NOT (subplan)))
                                 SubPlan
                                   ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.00..11.79 rows=69 width=152)
                                         Index Cond: (l_orderkey = $0)
                                         Filter: ((l_suppkey <> $1) AND (l_receiptdate > l_commitdate))
                                   ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..11.28 rows=205 width=152)
                                         Index Cond: (l_orderkey = $0)
                                         Filter: (l_suppkey <> $1)
                           ->  Hash  (cost=352.26..352.26 rows=400 width=33)
                                 ->  Nested Loop  (cost=0.00..352.26 rows=400 width=33)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'PERU'::bpchar)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..345.95 rows=400 width=37)
                                             Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..3.02 rows=1 width=4)
                           Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                           Filter: (o_orderstatus = 'F'::bpchar)
(25 rows)

query 21 run 3
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1653234.47..1653234.72 rows=100 width=29)
   ->  Sort  (cost=1653234.47..1653259.32 rows=9943 width=29)
         Sort Key: count(*), supplier.s_name
         ->  HashAggregate  (cost=1652549.42..1652574.28 rows=9943 width=29)
               ->  Nested Loop  (cost=353.26..1652499.70 rows=9943 width=29)
                     ->  Hash Join  (cost=353.26..1591914.56 rows=20005 width=33)
                           Hash Cond: ("outer".l_suppkey = "inner".s_suppkey)
                           ->  Seq Scan on lineitem l1  (cost=0.00..1588860.74 rows=500102 width=8)
                                 Filter: ((l_receiptdate > l_commitdate) AND (subplan) AND (NOT (subplan)))
                                 SubPlan
                                   ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.00..11.79 rows=69 width=152)
                                         Index Cond: (l_orderkey = $0)
                                         Filter: ((l_suppkey <> $1) AND (l_receiptdate > l_commitdate))
                                   ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..11.28 rows=205 width=152)
                                         Index Cond: (l_orderkey = $0)
                                         Filter: (l_suppkey <> $1)
                           ->  Hash  (cost=352.26..352.26 rows=400 width=33)
                                 ->  Nested Loop  (cost=0.00..352.26 rows=400 width=33)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'PERU'::bpchar)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.00..345.95 rows=400 width=37)
                                             Index Cond: (supplier.s_nationkey = "outer".n_nationkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..3.02 rows=1 width=4)
                           Index Cond: (orders.o_orderkey = "outer".l_orderkey)
                           Filter: (o_orderstatus = 'F'::bpchar)
(25 rows)

query 22 run 1
SET
                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=276388.20..276388.22 rows=1 width=30)
   InitPlan
     ->  Aggregate  (cost=13978.77..13978.77 rows=1 width=11)
           ->  Seq Scan on customer  (cost=0.00..13967.00 rows=4708 width=11)
                 Filter: ((c_acctbal > 0.00) AND (("substring"((c_phone)::text, 1, 2) = '21'::text) OR ("substring"((c_phone)::text, 1, 2) = '29'::text) OR ("substring"((c_phone)::text, 1, 2) = '26'::text) OR ("substring"((c_phone)::text, 1, 2) = '34'::text) OR ("substring"((c_phone)::text, 1, 2) = '14'::text) OR ("substring"((c_phone)::text, 1, 2) = '15'::text) OR ("substring"((c_phone)::text, 1, 2) = '17'::text)))
   ->  GroupAggregate  (cost=262409.43..262426.67 rows=862 width=30)
         ->  Sort  (cost=262409.43..262411.58 rows=862 width=30)
               Sort Key: "substring"((customer.c_phone)::text, 1, 2)
               ->  Seq Scan on customer  (cost=0.00..262367.40 rows=862 width=30)
                     Filter: ((("substring"((c_phone)::text, 1, 2) = '21'::text) OR ("substring"((c_phone)::text, 1, 2) = '29'::text) OR ("substring"((c_phone)::text, 1, 2) = '26'::text) OR ("substring"((c_phone)::text, 1, 2) = '34'::text) OR ("substring"((c_phone)::text, 1, 2) = '14'::text) OR ("substring"((c_phone)::text, 1, 2) = '15'::text) OR ("substring"((c_phone)::text, 1, 2) = '17'::text)) AND (c_acctbal > $0) AND (NOT (subplan)))
                     SubPlan
                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..23.18 rows=14 width=124)
                             Index Cond: (o_custkey = $1)
(13 rows)

query 22 run 2
SET
                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=276388.20..276388.22 rows=1 width=30)
   InitPlan
     ->  Aggregate  (cost=13978.77..13978.77 rows=1 width=11)
           ->  Seq Scan on customer  (cost=0.00..13967.00 rows=4708 width=11)
                 Filter: ((c_acctbal > 0.00) AND (("substring"((c_phone)::text, 1, 2) = '21'::text) OR ("substring"((c_phone)::text, 1, 2) = '29'::text) OR ("substring"((c_phone)::text, 1, 2) = '26'::text) OR ("substring"((c_phone)::text, 1, 2) = '34'::text) OR ("substring"((c_phone)::text, 1, 2) = '14'::text) OR ("substring"((c_phone)::text, 1, 2) = '15'::text) OR ("substring"((c_phone)::text, 1, 2) = '17'::text)))
   ->  GroupAggregate  (cost=262409.43..262426.67 rows=862 width=30)
         ->  Sort  (cost=262409.43..262411.58 rows=862 width=30)
               Sort Key: "substring"((customer.c_phone)::text, 1, 2)
               ->  Seq Scan on customer  (cost=0.00..262367.40 rows=862 width=30)
                     Filter: ((("substring"((c_phone)::text, 1, 2) = '21'::text) OR ("substring"((c_phone)::text, 1, 2) = '29'::text) OR ("substring"((c_phone)::text, 1, 2) = '26'::text) OR ("substring"((c_phone)::text, 1, 2) = '34'::text) OR ("substring"((c_phone)::text, 1, 2) = '14'::text) OR ("substring"((c_phone)::text, 1, 2) = '15'::text) OR ("substring"((c_phone)::text, 1, 2) = '17'::text)) AND (c_acctbal > $0) AND (NOT (subplan)))
                     SubPlan
                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..23.18 rows=14 width=124)
                             Index Cond: (o_custkey = $1)
(13 rows)

query 22 run 3
SET
                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=276388.20..276388.22 rows=1 width=30)
   InitPlan
     ->  Aggregate  (cost=13978.77..13978.77 rows=1 width=11)
           ->  Seq Scan on customer  (cost=0.00..13967.00 rows=4708 width=11)
                 Filter: ((c_acctbal > 0.00) AND (("substring"((c_phone)::text, 1, 2) = '21'::text) OR ("substring"((c_phone)::text, 1, 2) = '29'::text) OR ("substring"((c_phone)::text, 1, 2) = '26'::text) OR ("substring"((c_phone)::text, 1, 2) = '34'::text) OR ("substring"((c_phone)::text, 1, 2) = '14'::text) OR ("substring"((c_phone)::text, 1, 2) = '15'::text) OR ("substring"((c_phone)::text, 1, 2) = '17'::text)))
   ->  GroupAggregate  (cost=262409.43..262426.67 rows=862 width=30)
         ->  Sort  (cost=262409.43..262411.58 rows=862 width=30)
               Sort Key: "substring"((customer.c_phone)::text, 1, 2)
               ->  Seq Scan on customer  (cost=0.00..262367.40 rows=862 width=30)
                     Filter: ((("substring"((c_phone)::text, 1, 2) = '21'::text) OR ("substring"((c_phone)::text, 1, 2) = '29'::text) OR ("substring"((c_phone)::text, 1, 2) = '26'::text) OR ("substring"((c_phone)::text, 1, 2) = '34'::text) OR ("substring"((c_phone)::text, 1, 2) = '14'::text) OR ("substring"((c_phone)::text, 1, 2) = '15'::text) OR ("substring"((c_phone)::text, 1, 2) = '17'::text)) AND (c_acctbal > $0) AND (NOT (subplan)))
                     SubPlan
                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..23.18 rows=14 width=124)
                             Index Cond: (o_custkey = $1)
(13 rows)

