query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1905860.40..1905860.61 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1905860.40..1905861.65 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=1905860.40..1905860.46 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=1905857.28..1905859.85 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=1904857.28..1904857.45 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312609.52 rows=14806194 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1905860.40..1905860.61 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1905860.40..1905861.65 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=1905860.40..1905860.46 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=1905857.28..1905859.85 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=1904857.28..1904857.45 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312609.52 rows=14806194 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1905860.40..1905860.61 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1905860.40..1905861.65 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Sort  (cost=1905860.40..1905860.46 rows=24 width=236)
               Sort Key: l_returnflag, l_linestatus
               ->  Gather  (cost=1905857.28..1905859.85 rows=24 width=236)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=1904857.28..1904857.45 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312609.52 rows=14806194 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=930615.10..930615.10 rows=1 width=192)
   ->  Sort  (cost=930615.10..930615.10 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=366900.03..930615.09 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68799.30 rows=9126 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.24 rows=2282 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=365899.05..373900.75 rows=1600341 width=172)
                     ->  Sort  (cost=365899.05..369899.90 rows=1600341 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..113074.58 rows=1600341 width=172)
                                 ->  Nested Loop  (cost=0.29..1278.45 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.16 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 2 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=930615.10..930615.10 rows=1 width=192)
   ->  Sort  (cost=930615.10..930615.10 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=366900.03..930615.09 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68799.30 rows=9126 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.24 rows=2282 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=365899.05..373900.75 rows=1600341 width=172)
                     ->  Sort  (cost=365899.05..369899.90 rows=1600341 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..113074.58 rows=1600341 width=172)
                                 ->  Nested Loop  (cost=0.29..1278.45 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.16 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 2 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=930615.10..930615.10 rows=1 width=192)
   ->  Sort  (cost=930615.10..930615.10 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=366900.03..930615.09 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68799.30 rows=9126 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.24 rows=2282 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=365899.05..373900.75 rows=1600341 width=172)
                     ->  Sort  (cost=365899.05..369899.90 rows=1600341 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..113074.58 rows=1600341 width=172)
                                 ->  Nested Loop  (cost=0.29..1278.45 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.16 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 3 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1964349.89..1964349.91 rows=10 width=44)
   ->  Sort  (cost=1964349.89..1972099.44 rows=3099819 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1427401.33..1897363.91 rows=3099819 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1427401.33..1819868.43 rows=3099820 width=44)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1426401.27..1449649.92 rows=774955 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1426401.27..1428338.66 rows=774955 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=58437.58..1340378.88 rows=774955 width=24)
                                       ->  Hash Join  (cost=58437.01..371325.60 rows=360066 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308150.07 rows=1805147 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Hash  (cost=54697.01..54697.01 rows=299200 width=4)
                                                   ->  Seq Scan on customer  (cost=0.00..54697.01 rows=299200 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(22 rows)

query 3 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1964349.89..1964349.91 rows=10 width=44)
   ->  Sort  (cost=1964349.89..1972099.44 rows=3099819 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1427401.33..1897363.91 rows=3099819 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1427401.33..1819868.43 rows=3099820 width=44)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1426401.27..1449649.92 rows=774955 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1426401.27..1428338.66 rows=774955 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=58437.58..1340378.88 rows=774955 width=24)
                                       ->  Hash Join  (cost=58437.01..371325.60 rows=360066 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308150.07 rows=1805147 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Hash  (cost=54697.01..54697.01 rows=299200 width=4)
                                                   ->  Seq Scan on customer  (cost=0.00..54697.01 rows=299200 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(22 rows)

query 3 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1964349.89..1964349.91 rows=10 width=44)
   ->  Sort  (cost=1964349.89..1972099.44 rows=3099819 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1427401.33..1897363.91 rows=3099819 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1427401.33..1819868.43 rows=3099820 width=44)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1426401.27..1449649.92 rows=774955 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1426401.27..1428338.66 rows=774955 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=58437.58..1340378.88 rows=774955 width=24)
                                       ->  Hash Join  (cost=58437.01..371325.60 rows=360066 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308150.07 rows=1805147 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Hash  (cost=54697.01..54697.01 rows=299200 width=4)
                                                   ->  Seq Scan on customer  (cost=0.00..54697.01 rows=299200 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(22 rows)

query 4 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=618711.23..618711.27 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=618711.23..618711.43 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=618711.23..618711.28 rows=20 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=618708.75..618710.80 rows=20 width=24)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=617708.75..617708.80 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=7780.24..617031.93 rows=135364 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=7779.67..271078.80 rows=135408 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7644.27 rows=541633 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 4 run 2
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=618711.23..618711.27 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=618711.23..618711.43 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=618711.23..618711.28 rows=20 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=618708.75..618710.80 rows=20 width=24)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=617708.75..617708.80 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=7780.24..617031.93 rows=135364 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=7779.67..271078.80 rows=135408 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7644.27 rows=541633 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 4 run 3
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=618711.23..618711.27 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=618711.23..618711.43 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Sort  (cost=618711.23..618711.28 rows=20 width=24)
               Sort Key: orders.o_orderpriority
               ->  Gather  (cost=618708.75..618710.80 rows=20 width=24)
                     Workers Planned: 4
                     ->  Partial HashAggregate  (cost=617708.75..617708.80 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=7780.24..617031.93 rows=135364 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=7779.67..271078.80 rows=135408 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7644.27 rows=541633 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=687490.46..687490.46 rows=1 width=58)
   ->  Sort  (cost=687490.46..687490.52 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=687252.79..687490.34 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=687252.79..687489.27 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=686252.73..686477.30 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=686252.73..686297.58 rows=17941 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=100449.73..684985.11 rows=17941 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=95728.73..677896.07 rows=451056 width=50)
                                             ->  Hash Join  (cost=95728.16..368699.27 rows=112801 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=32403.64..302131.72 rows=564005 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..31839.64 rows=2256020 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Hash  (cost=59574.52..59574.52 rows=300000 width=38)
                                                         ->  Hash Join  (cost=2.51..59574.52 rows=300000 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..50947.01 rows=1500001 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(35 rows)

query 5 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=687490.46..687490.46 rows=1 width=58)
   ->  Sort  (cost=687490.46..687490.52 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=687252.79..687490.34 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=687252.79..687489.27 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=686252.73..686477.30 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=686252.73..686297.58 rows=17941 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=100449.73..684985.11 rows=17941 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=95728.73..677896.07 rows=451056 width=50)
                                             ->  Hash Join  (cost=95728.16..368699.27 rows=112801 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=32403.64..302131.72 rows=564005 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..31839.64 rows=2256020 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Hash  (cost=59574.52..59574.52 rows=300000 width=38)
                                                         ->  Hash Join  (cost=2.51..59574.52 rows=300000 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..50947.01 rows=1500001 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(35 rows)

query 5 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=687490.46..687490.46 rows=1 width=58)
   ->  Sort  (cost=687490.46..687490.52 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=687252.79..687490.34 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=687252.79..687489.27 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=686252.73..686477.30 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=686252.73..686297.58 rows=17941 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=100449.73..684985.11 rows=17941 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=95728.73..677896.07 rows=451056 width=50)
                                             ->  Hash Join  (cost=95728.16..368699.27 rows=112801 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=32403.64..302131.72 rows=564005 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..31839.64 rows=2256020 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Hash  (cost=59574.52..59574.52 rows=300000 width=38)
                                                         ->  Hash Join  (cost=2.51..59574.52 rows=300000 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Seq Scan on customer  (cost=0.00..50947.01 rows=1500001 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1072444.39..1072444.40 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1072444.39..1072444.40 rows=1 width=32)
         ->  Gather  (cost=1072443.96..1072444.37 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1071443.96..1071443.97 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=214620.20..1069940.72 rows=300647 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..214319.56 rows=1202588 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1072444.39..1072444.40 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1072444.39..1072444.40 rows=1 width=32)
         ->  Gather  (cost=1072443.96..1072444.37 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1071443.96..1071443.97 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=214620.20..1069940.72 rows=300647 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..214319.56 rows=1202588 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1072444.39..1072444.40 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1072444.39..1072444.40 rows=1 width=32)
         ->  Gather  (cost=1072443.96..1072444.37 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1071443.96..1071443.97 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=214620.20..1069940.72 rows=300647 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..214319.56 rows=1202588 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1185713.91..1185714.50 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1185713.91..1191610.64 rows=10044 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=1185713.91..1190932.67 rows=40176 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1184713.85..1185147.26 rows=10044 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=1184713.85..1184750.66 rows=14722 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Hash Join  (cost=60683.38..1183694.67 rows=14722 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=57053.98..1178091.67 rows=355730 width=46)
                                       ->  Hash Join  (cost=57053.41..372892.13 rows=300045 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298773.65 rows=3750565 width=8)
                                             ->  Hash  (cost=55553.41..55553.41 rows=120000 width=30)
                                                   ->  Hash Join  (cost=1.40..55553.41 rows=120000 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50947.01 rows=1500001 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                       ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 7 run 2
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1185713.91..1185714.50 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1185713.91..1191610.64 rows=10044 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=1185713.91..1190932.67 rows=40176 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1184713.85..1185147.26 rows=10044 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=1184713.85..1184750.66 rows=14722 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Hash Join  (cost=60683.38..1183694.67 rows=14722 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=57053.98..1178091.67 rows=355730 width=46)
                                       ->  Hash Join  (cost=57053.41..372892.13 rows=300045 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298773.65 rows=3750565 width=8)
                                             ->  Hash  (cost=55553.41..55553.41 rows=120000 width=30)
                                                   ->  Hash Join  (cost=1.40..55553.41 rows=120000 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50947.01 rows=1500001 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                       ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 7 run 3
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1185713.91..1185714.50 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1185713.91..1191610.64 rows=10044 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=1185713.91..1190932.67 rows=40176 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1184713.85..1185147.26 rows=10044 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=1184713.85..1184750.66 rows=14722 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Hash Join  (cost=60683.38..1183694.67 rows=14722 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=57053.98..1178091.67 rows=355730 width=46)
                                       ->  Hash Join  (cost=57053.41..372892.13 rows=300045 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298773.65 rows=3750565 width=8)
                                             ->  Hash  (cost=55553.41..55553.41 rows=120000 width=30)
                                                   ->  Hash Join  (cost=1.40..55553.41 rows=120000 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50947.01 rows=1500001 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                       ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 8 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=497378.63..497379.25 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=497378.63..498883.84 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=497378.63..498709.41 rows=9624 width=72)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=496378.57..496563.04 rows=2406 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=496378.57..496393.72 rows=6060 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=67798.09..495997.85 rows=6060 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Hash Join  (cost=67796.52..495947.38 rows=6060 width=20)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Nested Loop  (cost=4472.00..432448.66 rows=30297 width=24)
                                             ->  Hash Join  (cost=4471.57..192428.02 rows=99424 width=20)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.56..187694.56 rows=99981 width=20)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..47230.93 rows=3333 width=4)
                                                               Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..41.83 rows=31 width=24)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                   Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                   Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=59574.52..59574.52 rows=300000 width=4)
                                             ->  Hash Join  (cost=2.51..59574.52 rows=300000 width=4)
                                                   Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.01 rows=1500001 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                               Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 8 run 2
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=497378.63..497379.25 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=497378.63..498883.84 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=497378.63..498709.41 rows=9624 width=72)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=496378.57..496563.04 rows=2406 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=496378.57..496393.72 rows=6060 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=67798.09..495997.85 rows=6060 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Hash Join  (cost=67796.52..495947.38 rows=6060 width=20)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Nested Loop  (cost=4472.00..432448.66 rows=30297 width=24)
                                             ->  Hash Join  (cost=4471.57..192428.02 rows=99424 width=20)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.56..187694.56 rows=99981 width=20)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..47230.93 rows=3333 width=4)
                                                               Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..41.83 rows=31 width=24)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                   Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                   Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=59574.52..59574.52 rows=300000 width=4)
                                             ->  Hash Join  (cost=2.51..59574.52 rows=300000 width=4)
                                                   Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.01 rows=1500001 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                               Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 8 run 3
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=497378.63..497379.25 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=497378.63..498883.84 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=497378.63..498709.41 rows=9624 width=72)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=496378.57..496563.04 rows=2406 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=496378.57..496393.72 rows=6060 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=67798.09..495997.85 rows=6060 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Hash Join  (cost=67796.52..495947.38 rows=6060 width=20)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Nested Loop  (cost=4472.00..432448.66 rows=30297 width=24)
                                             ->  Hash Join  (cost=4471.57..192428.02 rows=99424 width=20)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.56..187694.56 rows=99981 width=20)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..47230.93 rows=3333 width=4)
                                                               Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                         ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..41.83 rows=31 width=24)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                   Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                   Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=59574.52..59574.52 rows=300000 width=4)
                                             ->  Hash Join  (cost=2.51..59574.52 rows=300000 width=4)
                                                   Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.01 rows=1500001 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                               Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 9 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=262452.87..262453.03 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=262452.87..262464.71 rows=75 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=262452.87..262462.63 rows=76 width=66)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=261452.81..261453.52 rows=19 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=261452.81..261452.86 rows=19 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3.29..261452.41 rows=19 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=1.73..261450.69 rows=19 width=31)
                                       ->  Nested Loop  (cost=1.29..261403.24 rows=19 width=31)
                                             ->  Nested Loop  (cost=1.00..261359.06 rows=19 width=35)
                                                   ->  Nested Loop  (cost=0.43..96570.03 rows=60618 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..47230.93 rows=15151 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.08 rows=18 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                                         Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                             ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                                   Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 9 run 2
SET
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=262452.87..262453.03 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=262452.87..262464.71 rows=75 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=262452.87..262462.63 rows=76 width=66)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=261452.81..261453.52 rows=19 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=261452.81..261452.86 rows=19 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3.29..261452.41 rows=19 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=1.73..261450.69 rows=19 width=31)
                                       ->  Nested Loop  (cost=1.29..261403.24 rows=19 width=31)
                                             ->  Nested Loop  (cost=1.00..261359.06 rows=19 width=35)
                                                   ->  Nested Loop  (cost=0.43..96570.03 rows=60618 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..47230.93 rows=15151 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.08 rows=18 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                                         Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                             ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                                   Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 9 run 3
SET
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=262452.87..262453.03 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=262452.87..262464.71 rows=75 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=262452.87..262462.63 rows=76 width=66)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=261452.81..261453.52 rows=19 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=261452.81..261452.86 rows=19 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3.29..261452.41 rows=19 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=1.73..261450.69 rows=19 width=31)
                                       ->  Nested Loop  (cost=1.29..261403.24 rows=19 width=31)
                                             ->  Nested Loop  (cost=1.00..261359.06 rows=19 width=35)
                                                   ->  Nested Loop  (cost=0.43..96570.03 rows=60618 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..47230.93 rows=15151 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.08 rows=18 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                                         Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                             ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                                   Index Cond: (s_suppkey = lineitem.l_suppkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 10 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=906401.24..906401.29 rows=20 width=201)
   ->  Sort  (cost=906401.24..907805.04 rows=561519 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=808082.34..891459.42 rows=561519 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=808082.34..878825.24 rows=561520 width=201)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=807082.28..810942.73 rows=140380 width=201)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=807082.28..807433.23 rows=140380 width=181)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Nested Loop  (cost=331252.16..795080.51 rows=140380 width=181)
                                       ->  Hash Join  (cost=331251.60..390189.95 rows=140127 width=173)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Merge Join  (cost=331250.04..389758.20 rows=140127 width=151)
                                                   Merge Cond: (customer.c_custkey = orders.o_custkey)
                                                   ->  Parallel Index Scan using customer_pkey on customer  (cost=0.43..53371.94 rows=375000 width=147)
                                                   ->  Sort  (cost=331245.12..332646.39 rows=560508 width=8)
                                                         Sort Key: orders.o_custkey
                                                         ->  Bitmap Heap Scan on orders  (cost=8051.14..277726.76 rows=560508 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                               ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7911.02 rows=560508 width=0)
                                                                     Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
(28 rows)

query 10 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=906401.24..906401.29 rows=20 width=201)
   ->  Sort  (cost=906401.24..907805.04 rows=561519 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=808082.34..891459.42 rows=561519 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=808082.34..878825.24 rows=561520 width=201)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=807082.28..810942.73 rows=140380 width=201)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=807082.28..807433.23 rows=140380 width=181)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Nested Loop  (cost=331252.16..795080.51 rows=140380 width=181)
                                       ->  Hash Join  (cost=331251.60..390189.95 rows=140127 width=173)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Merge Join  (cost=331250.04..389758.20 rows=140127 width=151)
                                                   Merge Cond: (customer.c_custkey = orders.o_custkey)
                                                   ->  Parallel Index Scan using customer_pkey on customer  (cost=0.43..53371.94 rows=375000 width=147)
                                                   ->  Sort  (cost=331245.12..332646.39 rows=560508 width=8)
                                                         Sort Key: orders.o_custkey
                                                         ->  Bitmap Heap Scan on orders  (cost=8051.14..277726.76 rows=560508 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                               ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7911.02 rows=560508 width=0)
                                                                     Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
(28 rows)

query 10 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=906401.24..906401.29 rows=20 width=201)
   ->  Sort  (cost=906401.24..907805.04 rows=561519 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=808082.34..891459.42 rows=561519 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=808082.34..878825.24 rows=561520 width=201)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=807082.28..810942.73 rows=140380 width=201)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=807082.28..807433.23 rows=140380 width=181)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Nested Loop  (cost=331252.16..795080.51 rows=140380 width=181)
                                       ->  Hash Join  (cost=331251.60..390189.95 rows=140127 width=173)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Merge Join  (cost=331250.04..389758.20 rows=140127 width=151)
                                                   Merge Cond: (customer.c_custkey = orders.o_custkey)
                                                   ->  Parallel Index Scan using customer_pkey on customer  (cost=0.43..53371.94 rows=375000 width=147)
                                                   ->  Sort  (cost=331245.12..332646.39 rows=560508 width=8)
                                                         Sort Key: orders.o_custkey
                                                         ->  Bitmap Heap Scan on orders  (cost=8051.14..277726.76 rows=560508 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                               ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7911.02 rows=560508 width=0)
                                                                     Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
(28 rows)

query 11 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=85258.61..85258.62 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=18556.15..18556.16 rows=1 width=32)
           ->  Gather  (cost=18556.03..18556.14 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17556.03..17556.04 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..16143.97 rows=188275 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.79 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=66702.45..67502.62 rows=320068 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53899.73..65102.11 rows=320068 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53899.73..54699.90 rows=320068 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24632.68 rows=320068 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(32 rows)

query 11 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=85258.61..85258.62 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=18556.15..18556.16 rows=1 width=32)
           ->  Gather  (cost=18556.03..18556.14 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17556.03..17556.04 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..16143.97 rows=188275 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.79 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=66702.45..67502.62 rows=320068 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53899.73..65102.11 rows=320068 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53899.73..54699.90 rows=320068 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24632.68 rows=320068 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(32 rows)

query 11 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=85258.61..85258.62 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=18556.15..18556.16 rows=1 width=32)
           ->  Gather  (cost=18556.03..18556.14 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17556.03..17556.04 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..16143.97 rows=188275 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.79 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=66702.45..67502.62 rows=320068 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53899.73..65102.11 rows=320068 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53899.73..54699.90 rows=320068 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24632.68 rows=320068 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(32 rows)

query 12 run 1
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1650905.48..1651115.11 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1650905.48..1652372.92 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=1650905.48..1652372.64 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1649905.42..1651369.25 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=1649905.42..1650088.39 rows=73188 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..1643992.08 rows=73188 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1462582.75 rows=73188 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 12 run 2
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1650905.48..1651115.11 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1650905.48..1652372.92 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=1650905.48..1652372.64 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1649905.42..1651369.25 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=1649905.42..1650088.39 rows=73188 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..1643992.08 rows=73188 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1462582.75 rows=73188 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 12 run 3
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1650905.48..1651115.11 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1650905.48..1652372.92 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=1650905.48..1652372.64 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1649905.42..1651369.25 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=1649905.42..1650088.39 rows=73188 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..1643992.08 rows=73188 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1462582.75 rows=73188 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 13 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1040607.65..1040607.65 rows=1 width=16)
   ->  Sort  (cost=1040607.65..1040608.15 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1040604.65..1040606.65 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=0.86..1018104.63 rows=1500001 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=0.86..930365.02 rows=14547920 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.44 rows=1500001 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716136.12 rows=14547920 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 2
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1040607.65..1040607.65 rows=1 width=16)
   ->  Sort  (cost=1040607.65..1040608.15 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1040604.65..1040606.65 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=0.86..1018104.63 rows=1500001 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=0.86..930365.02 rows=14547920 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.44 rows=1500001 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716136.12 rows=14547920 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 3
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1040607.65..1040607.65 rows=1 width=16)
   ->  Sort  (cost=1040607.65..1040608.15 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1040604.65..1040606.65 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=0.86..1018104.63 rows=1500001 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=0.86..930365.02 rows=14547920 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.44 rows=1500001 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716136.12 rows=14547920 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=773358.17..773358.19 rows=1 width=32)
   ->  Finalize Aggregate  (cost=773358.17..773358.19 rows=1 width=32)
         ->  Gather  (cost=773357.72..773358.13 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=772357.72..772357.73 rows=1 width=64)
                     ->  Hash Join  (cost=111497.18..769124.45 rows=184758 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=11844.65..653508.93 rows=184758 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..11659.90 rows=739033 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Hash  (cost=60980.79..60980.79 rows=1999979 width=25)
                                 ->  Seq Scan on part  (cost=0.00..60980.79 rows=1999979 width=25)
(13 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=773358.17..773358.19 rows=1 width=32)
   ->  Finalize Aggregate  (cost=773358.17..773358.19 rows=1 width=32)
         ->  Gather  (cost=773357.72..773358.13 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=772357.72..772357.73 rows=1 width=64)
                     ->  Hash Join  (cost=111497.18..769124.45 rows=184758 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=11844.65..653508.93 rows=184758 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..11659.90 rows=739033 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Hash  (cost=60980.79..60980.79 rows=1999979 width=25)
                                 ->  Seq Scan on part  (cost=0.00..60980.79 rows=1999979 width=25)
(13 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=773358.17..773358.19 rows=1 width=32)
   ->  Finalize Aggregate  (cost=773358.17..773358.19 rows=1 width=32)
         ->  Gather  (cost=773357.72..773358.13 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=772357.72..772357.73 rows=1 width=64)
                     ->  Hash Join  (cost=111497.18..769124.45 rows=184758 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=11844.65..653508.93 rows=184758 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..11659.90 rows=739033 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Hash  (cost=60980.79..60980.79 rows=1999979 width=25)
                                 ->  Seq Scan on part  (cost=0.00..60980.79 rows=1999979 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2626566.71..2626567.22 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1199664.38..1199664.39 rows=1 width=32)
           ->  HashAggregate  (cost=1197150.38..1198407.38 rows=100560 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=34666.57..1175518.67 rows=2163171 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34125.78 rows=2163171 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1426902.31..1478322.23 rows=100560 width=103)
         Merge Cond: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=71)
         ->  GroupAggregate  (cost=1426902.02..1471673.84 rows=100560 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Sort  (cost=1426902.02..1432309.95 rows=2163171 width=16)
                     Sort Key: lineitem.l_suppkey
                     ->  Bitmap Heap Scan on lineitem  (cost=34666.57..1175518.67 rows=2163171 width=16)
                           Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34125.78 rows=2163171 width=0)
                                 Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(21 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2626566.71..2626567.22 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1199664.38..1199664.39 rows=1 width=32)
           ->  HashAggregate  (cost=1197150.38..1198407.38 rows=100560 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=34666.57..1175518.67 rows=2163171 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34125.78 rows=2163171 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1426902.31..1478322.23 rows=100560 width=103)
         Merge Cond: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=71)
         ->  GroupAggregate  (cost=1426902.02..1471673.84 rows=100560 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Sort  (cost=1426902.02..1432309.95 rows=2163171 width=16)
                     Sort Key: lineitem.l_suppkey
                     ->  Bitmap Heap Scan on lineitem  (cost=34666.57..1175518.67 rows=2163171 width=16)
                           Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34125.78 rows=2163171 width=0)
                                 Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(21 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2626566.71..2626567.22 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1199664.38..1199664.39 rows=1 width=32)
           ->  HashAggregate  (cost=1197150.38..1198407.38 rows=100560 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=34666.57..1175518.67 rows=2163171 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34125.78 rows=2163171 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1426902.31..1478322.23 rows=100560 width=103)
         Merge Cond: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=71)
         ->  GroupAggregate  (cost=1426902.02..1471673.84 rows=100560 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Sort  (cost=1426902.02..1432309.95 rows=2163171 width=16)
                     Sort Key: lineitem.l_suppkey
                     ->  Bitmap Heap Scan on lineitem  (cost=34666.57..1175518.67 rows=2163171 width=16)
                           Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..34125.78 rows=2163171 width=0)
                                 Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(21 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=335458.91..335458.91 rows=1 width=44)
   ->  Sort  (cost=335458.91..335842.38 rows=153386 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=325774.05..334691.98 rows=153386 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=325774.05..327250.86 rows=590726 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=99143.15..258760.67 rows=590726 width=40)
                           Workers Planned: 4
                           ->  Hash Join  (cost=98143.15..198688.07 rows=147682 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101390.81 rows=1000213 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Hash  (cost=90980.48..90980.48 rows=295297 width=40)
                                       ->  Seq Scan on part  (cost=0.00..90980.48 rows=295297 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=335458.91..335458.91 rows=1 width=44)
   ->  Sort  (cost=335458.91..335842.38 rows=153386 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=325774.05..334691.98 rows=153386 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=325774.05..327250.86 rows=590726 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=99143.15..258760.67 rows=590726 width=40)
                           Workers Planned: 4
                           ->  Hash Join  (cost=98143.15..198688.07 rows=147682 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101390.81 rows=1000213 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Hash  (cost=90980.48..90980.48 rows=295297 width=40)
                                       ->  Seq Scan on part  (cost=0.00..90980.48 rows=295297 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=335458.91..335458.91 rows=1 width=44)
   ->  Sort  (cost=335458.91..335842.38 rows=153386 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=325774.05..334691.98 rows=153386 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=325774.05..327250.86 rows=590726 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=99143.15..258760.67 rows=590726 width=40)
                           Workers Planned: 4
                           ->  Hash Join  (cost=98143.15..198688.07 rows=147682 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101390.81 rows=1000213 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Hash  (cost=90980.48..90980.48 rows=295297 width=40)
                                       ->  Seq Scan on part  (cost=0.00..90980.48 rows=295297 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4491577.62..4491577.63 rows=1 width=32)
   ->  Aggregate  (cost=4491577.62..4491577.63 rows=1 width=32)
         ->  Merge Join  (cost=3229430.75..4491528.84 rows=19513 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=3228429.70..4367044.49 rows=1921822 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=3228429.70..4280562.50 rows=7687288 width=36)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=3227429.64..3363932.33 rows=1921822 width=36)
                                 Group Key: lineitem_1.l_partkey
                                 ->  Sort  (cost=3227429.64..3264922.95 rows=14997322 width=9)
                                       Sort Key: lineitem_1.l_partkey
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275116.22 rows=14997322 width=9)
               ->  Materialize  (cost=1001.05..99577.53 rows=60920 width=21)
                     ->  Gather Merge  (cost=1001.05..99425.23 rows=60920 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.99..91169.01 rows=15230 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.24 rows=508 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..47.83 rows=31 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(22 rows)

query 17 run 2
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4491577.62..4491577.63 rows=1 width=32)
   ->  Aggregate  (cost=4491577.62..4491577.63 rows=1 width=32)
         ->  Merge Join  (cost=3229430.75..4491528.84 rows=19513 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=3228429.70..4367044.49 rows=1921822 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=3228429.70..4280562.50 rows=7687288 width=36)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=3227429.64..3363932.33 rows=1921822 width=36)
                                 Group Key: lineitem_1.l_partkey
                                 ->  Sort  (cost=3227429.64..3264922.95 rows=14997322 width=9)
                                       Sort Key: lineitem_1.l_partkey
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275116.22 rows=14997322 width=9)
               ->  Materialize  (cost=1001.05..99577.53 rows=60920 width=21)
                     ->  Gather Merge  (cost=1001.05..99425.23 rows=60920 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.99..91169.01 rows=15230 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.24 rows=508 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..47.83 rows=31 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(22 rows)

query 17 run 3
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4491577.62..4491577.63 rows=1 width=32)
   ->  Aggregate  (cost=4491577.62..4491577.63 rows=1 width=32)
         ->  Merge Join  (cost=3229430.75..4491528.84 rows=19513 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=3228429.70..4367044.49 rows=1921822 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=3228429.70..4280562.50 rows=7687288 width=36)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=3227429.64..3363932.33 rows=1921822 width=36)
                                 Group Key: lineitem_1.l_partkey
                                 ->  Sort  (cost=3227429.64..3264922.95 rows=14997322 width=9)
                                       Sort Key: lineitem_1.l_partkey
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275116.22 rows=14997322 width=9)
               ->  Materialize  (cost=1001.05..99577.53 rows=60920 width=21)
                     ->  Gather Merge  (cost=1001.05..99425.23 rows=60920 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.99..91169.01 rows=15230 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.24 rows=508 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..47.83 rows=31 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(22 rows)

query 18 run 1
SET
SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=19172722.03..19172722.28 rows=100 width=71)
   ->  Sort  (cost=19172722.03..19322645.88 rows=59969539 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=8051135.72..16880729.37 rows=59969539 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=8051135.72..15531414.74 rows=59969540 width=71)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=8050135.67..8387464.33 rows=14992385 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=8050135.67..8087616.63 rows=14992385 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Hash Join  (cost=3920349.99..5966731.29 rows=14992385 width=44)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Hash Join  (cost=3841862.97..5635123.15 rows=14992385 width=25)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Hash Join  (cost=3155140.10..4674668.30 rows=14997322 width=13)
                                                   Hash Cond: (lineitem.l_orderkey = lineitem_1.l_orderkey)
                                                   ->  Parallel Seq Scan on lineitem  (cost=0.00..1275116.22 rows=14997322 width=9)
                                                   ->  Hash  (cost=2909089.57..2909089.57 rows=14997322 width=4)
                                                         ->  GroupAggregate  (cost=0.56..2759116.35 rows=14997322 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                               ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271703.38 rows=59989288 width=9)
                                             ->  Hash  (cost=411290.61..411290.61 rows=15002261 width=20)
                                                   ->  Seq Scan on orders  (cost=0.00..411290.61 rows=15002261 width=20)
                                       ->  Hash  (cost=50947.01..50947.01 rows=1500001 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50947.01 rows=1500001 width=23)
(27 rows)

query 18 run 2
SET
SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=19172722.03..19172722.28 rows=100 width=71)
   ->  Sort  (cost=19172722.03..19322645.88 rows=59969539 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=8051135.72..16880729.37 rows=59969539 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=8051135.72..15531414.74 rows=59969540 width=71)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=8050135.67..8387464.33 rows=14992385 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=8050135.67..8087616.63 rows=14992385 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Hash Join  (cost=3920349.99..5966731.29 rows=14992385 width=44)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Hash Join  (cost=3841862.97..5635123.15 rows=14992385 width=25)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Hash Join  (cost=3155140.10..4674668.30 rows=14997322 width=13)
                                                   Hash Cond: (lineitem.l_orderkey = lineitem_1.l_orderkey)
                                                   ->  Parallel Seq Scan on lineitem  (cost=0.00..1275116.22 rows=14997322 width=9)
                                                   ->  Hash  (cost=2909089.57..2909089.57 rows=14997322 width=4)
                                                         ->  GroupAggregate  (cost=0.56..2759116.35 rows=14997322 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                               ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271703.38 rows=59989288 width=9)
                                             ->  Hash  (cost=411290.61..411290.61 rows=15002261 width=20)
                                                   ->  Seq Scan on orders  (cost=0.00..411290.61 rows=15002261 width=20)
                                       ->  Hash  (cost=50947.01..50947.01 rows=1500001 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50947.01 rows=1500001 width=23)
(27 rows)

query 18 run 3
SET
SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=19172722.03..19172722.28 rows=100 width=71)
   ->  Sort  (cost=19172722.03..19322645.88 rows=59969539 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=8051135.72..16880729.37 rows=59969539 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=8051135.72..15531414.74 rows=59969540 width=71)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=8050135.67..8387464.33 rows=14992385 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=8050135.67..8087616.63 rows=14992385 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Hash Join  (cost=3920349.99..5966731.29 rows=14992385 width=44)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Hash Join  (cost=3841862.97..5635123.15 rows=14992385 width=25)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Hash Join  (cost=3155140.10..4674668.30 rows=14997322 width=13)
                                                   Hash Cond: (lineitem.l_orderkey = lineitem_1.l_orderkey)
                                                   ->  Parallel Seq Scan on lineitem  (cost=0.00..1275116.22 rows=14997322 width=9)
                                                   ->  Hash  (cost=2909089.57..2909089.57 rows=14997322 width=4)
                                                         ->  GroupAggregate  (cost=0.56..2759116.35 rows=14997322 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                               ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271703.38 rows=59989288 width=9)
                                             ->  Hash  (cost=411290.61..411290.61 rows=15002261 width=20)
                                                   ->  Seq Scan on orders  (cost=0.00..411290.61 rows=15002261 width=20)
                                       ->  Hash  (cost=50947.01..50947.01 rows=1500001 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50947.01 rows=1500001 width=23)
(27 rows)

query 19 run 1
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

 Limit  (cost=121743.63..121743.64 rows=1 width=32)
   ->  Finalize Aggregate  (cost=121743.63..121743.64 rows=1 width=32)
         ->  Gather  (cost=121743.20..121743.61 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=120743.20..120743.21 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..120741.00 rows=293 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.78 rows=1214 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..48.19 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=121743.63..121743.64 rows=1 width=32)
   ->  Finalize Aggregate  (cost=121743.63..121743.64 rows=1 width=32)
         ->  Gather  (cost=121743.20..121743.61 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=120743.20..120743.21 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..120741.00 rows=293 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.78 rows=1214 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..48.19 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=121743.63..121743.64 rows=1 width=32)
   ->  Finalize Aggregate  (cost=121743.63..121743.64 rows=1 width=32)
         ->  Gather  (cost=121743.20..121743.61 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=120743.20..120743.21 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..120741.00 rows=293 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.78 rows=1214 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..48.19 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2832710.92..2832710.92 rows=1 width=51)
   ->  Sort  (cost=2832710.92..2832710.92 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2587348.72..2832710.91 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2587348.72..2828058.60 rows=3 width=8)
                     ->  Gather  (cost=2587348.72..2828058.59 rows=3 width=8)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=2586348.72..2827058.29 rows=1 width=8)
                                 ->  Merge Join  (cost=2586348.29..2820629.95 rows=12153 width=44)
                                       Merge Cond: (part.p_partkey = lineitem.l_partkey)
                                       ->  Sort  (cost=47541.56..47554.19 rows=5050 width=4)
                                             Sort Key: part.p_partkey
                                             ->  Parallel Seq Scan on part  (cost=0.00..47230.93 rows=5050 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Materialize  (cost=2538806.73..2760910.08 rows=4812614 width=40)
                                             ->  GroupAggregate  (cost=2538806.73..2700752.41 rows=4812614 width=40)
                                                   Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                                   ->  Sort  (cost=2538806.73..2561245.84 rows=8975647 width=13)
                                                         Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                                         ->  Bitmap Heap Scan on lineitem  (cost=143839.45..1403617.15 rows=8975647 width=13)
                                                               Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..141595.54 rows=8975647 width=0)
                                                                     Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                       Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                       Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(32 rows)

query 20 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2832710.92..2832710.92 rows=1 width=51)
   ->  Sort  (cost=2832710.92..2832710.92 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2587348.72..2832710.91 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2587348.72..2828058.60 rows=3 width=8)
                     ->  Gather  (cost=2587348.72..2828058.59 rows=3 width=8)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=2586348.72..2827058.29 rows=1 width=8)
                                 ->  Merge Join  (cost=2586348.29..2820629.95 rows=12153 width=44)
                                       Merge Cond: (part.p_partkey = lineitem.l_partkey)
                                       ->  Sort  (cost=47541.56..47554.19 rows=5050 width=4)
                                             Sort Key: part.p_partkey
                                             ->  Parallel Seq Scan on part  (cost=0.00..47230.93 rows=5050 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Materialize  (cost=2538806.73..2760910.08 rows=4812614 width=40)
                                             ->  GroupAggregate  (cost=2538806.73..2700752.41 rows=4812614 width=40)
                                                   Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                                   ->  Sort  (cost=2538806.73..2561245.84 rows=8975647 width=13)
                                                         Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                                         ->  Bitmap Heap Scan on lineitem  (cost=143839.45..1403617.15 rows=8975647 width=13)
                                                               Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..141595.54 rows=8975647 width=0)
                                                                     Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                       Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                       Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(32 rows)

query 20 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2832710.92..2832710.92 rows=1 width=51)
   ->  Sort  (cost=2832710.92..2832710.92 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2587348.72..2832710.91 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2587348.72..2828058.60 rows=3 width=8)
                     ->  Gather  (cost=2587348.72..2828058.59 rows=3 width=8)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=2586348.72..2827058.29 rows=1 width=8)
                                 ->  Merge Join  (cost=2586348.29..2820629.95 rows=12153 width=44)
                                       Merge Cond: (part.p_partkey = lineitem.l_partkey)
                                       ->  Sort  (cost=47541.56..47554.19 rows=5050 width=4)
                                             Sort Key: part.p_partkey
                                             ->  Parallel Seq Scan on part  (cost=0.00..47230.93 rows=5050 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Materialize  (cost=2538806.73..2760910.08 rows=4812614 width=40)
                                             ->  GroupAggregate  (cost=2538806.73..2700752.41 rows=4812614 width=40)
                                                   Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                                   ->  Sort  (cost=2538806.73..2561245.84 rows=8975647 width=13)
                                                         Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                                         ->  Bitmap Heap Scan on lineitem  (cost=143839.45..1403617.15 rows=8975647 width=13)
                                                               Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..141595.54 rows=8975647 width=0)
                                                                     Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                       Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                       Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(32 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1987401.99..1987402.00 rows=1 width=34)
   ->  Sort  (cost=1987401.99..1987402.00 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1987401.96..1987401.98 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1987401.96..1987401.97 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=3325.02..1987401.95 rows=1 width=26)
                           ->  Nested Loop  (cost=3324.46..1987398.70 rows=1 width=34)
                                 ->  Gather  (cost=3324.02..1987395.67 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=2324.02..1986395.57 rows=1 width=38)
                                             ->  Hash Join  (cost=2323.46..1335668.15 rows=198851 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312609.52 rows=4999107 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.23 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 21 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1987401.99..1987402.00 rows=1 width=34)
   ->  Sort  (cost=1987401.99..1987402.00 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1987401.96..1987401.98 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1987401.96..1987401.97 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=3325.02..1987401.95 rows=1 width=26)
                           ->  Nested Loop  (cost=3324.46..1987398.70 rows=1 width=34)
                                 ->  Gather  (cost=3324.02..1987395.67 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=2324.02..1986395.57 rows=1 width=38)
                                             ->  Hash Join  (cost=2323.46..1335668.15 rows=198851 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312609.52 rows=4999107 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.23 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 21 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1987401.99..1987402.00 rows=1 width=34)
   ->  Sort  (cost=1987401.99..1987402.00 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1987401.96..1987401.98 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1987401.96..1987401.97 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Anti Join  (cost=3325.02..1987401.95 rows=1 width=26)
                           ->  Nested Loop  (cost=3324.46..1987398.70 rows=1 width=34)
                                 ->  Gather  (cost=3324.02..1987395.67 rows=1 width=38)
                                       Workers Planned: 4
                                       ->  Nested Loop Semi Join  (cost=2324.02..1986395.57 rows=1 width=38)
                                             ->  Hash Join  (cost=2323.46..1335668.15 rows=198851 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312609.52 rows=4999107 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.23 rows=4 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                 Index Cond: (l_orderkey = l1.l_orderkey)
                                 Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(33 rows)

query 22 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=132837.91..132837.93 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46820.94..46820.95 rows=1 width=32)
           ->  Gather  (cost=46820.51..46820.92 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.51..45820.52 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.76 rows=11900 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86016.95..86217.18 rows=7281 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=86016.95..86035.16 rows=7281 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..85549.88 rows=7281 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75322.03 rows=17500 width=26)
                           Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.97 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

query 22 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=132837.91..132837.93 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46820.94..46820.95 rows=1 width=32)
           ->  Gather  (cost=46820.51..46820.92 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.51..45820.52 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.76 rows=11900 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86016.95..86217.18 rows=7281 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=86016.95..86035.16 rows=7281 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..85549.88 rows=7281 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75322.03 rows=17500 width=26)
                           Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.97 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

query 22 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=132837.91..132837.93 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46820.94..46820.95 rows=1 width=32)
           ->  Gather  (cost=46820.51..46820.92 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.51..45820.52 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.76 rows=11900 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86016.95..86217.18 rows=7281 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=86016.95..86035.16 rows=7281 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..85549.88 rows=7281 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75322.03 rows=17500 width=26)
                           Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.97 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(17 rows)

