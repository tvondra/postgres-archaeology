query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191514.29..191514.97 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191514.29..191518.35 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=191514.29..191517.17 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=190514.24..190514.25 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=190513.99..190514.16 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131315.19 rows=1479970 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191514.29..191514.97 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191514.29..191518.35 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=191514.29..191517.17 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=190514.24..190514.25 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=190513.99..190514.16 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131315.19 rows=1479970 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=191514.29..191514.97 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=191514.29..191518.35 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=191514.29..191517.17 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=190514.24..190514.25 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=190513.99..190514.16 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131315.19 rows=1479970 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35359.54..35359.55 rows=1 width=192)
   ->  Sort  (cost=35359.54..35359.55 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=18147.95..35359.53 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6434.10 rows=851 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=355 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=10840.95..10840.95 rows=160000 width=172)
                     ->  Nested Loop  (cost=0.71..10840.95 rows=160000 width=172)
                           ->  Nested Loop  (cost=0.29..129.20 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..21.32 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 2 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35359.54..35359.55 rows=1 width=192)
   ->  Sort  (cost=35359.54..35359.55 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=18147.95..35359.53 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6434.10 rows=851 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=355 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=10840.95..10840.95 rows=160000 width=172)
                     ->  Nested Loop  (cost=0.71..10840.95 rows=160000 width=172)
                           ->  Nested Loop  (cost=0.29..129.20 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..21.32 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 2 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35359.54..35359.55 rows=1 width=192)
   ->  Sort  (cost=35359.54..35359.55 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=18147.95..35359.53 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6434.10 rows=851 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=355 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=10840.95..10840.95 rows=160000 width=172)
                     ->  Nested Loop  (cost=0.71..10840.95 rows=160000 width=172)
                           ->  Nested Loop  (cost=0.29..129.20 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..21.32 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 3 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=141077.62..141077.64 rows=10 width=44)
   ->  Sort  (cost=141077.62..141872.08 rows=317786 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=92388.42..134210.38 rows=317786 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=92388.42..126927.78 rows=264822 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=91388.39..95360.72 rows=132411 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=91388.39..91719.42 rows=132411 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=0.86..80123.75 rows=132411 width=24)
                                       ->  Nested Loop  (cost=0.43..32379.88 rows=60700 width=12)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12633 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.14 rows=8 width=16)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.77 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(21 rows)

query 3 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=141077.62..141077.64 rows=10 width=44)
   ->  Sort  (cost=141077.62..141872.08 rows=317786 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=92388.42..134210.38 rows=317786 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=92388.42..126927.78 rows=264822 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=91388.39..95360.72 rows=132411 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=91388.39..91719.42 rows=132411 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=0.86..80123.75 rows=132411 width=24)
                                       ->  Nested Loop  (cost=0.43..32379.88 rows=60700 width=12)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12633 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.14 rows=8 width=16)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.77 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(21 rows)

query 3 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=141077.62..141077.64 rows=10 width=44)
   ->  Sort  (cost=141077.62..141872.08 rows=317786 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=92388.42..134210.38 rows=317786 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=92388.42..126927.78 rows=264822 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=91388.39..95360.72 rows=132411 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=91388.39..91719.42 rows=132411 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=0.86..80123.75 rows=132411 width=24)
                                       ->  Nested Loop  (cost=0.43..32379.88 rows=60700 width=12)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12633 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.14 rows=8 width=16)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.77 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(21 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29315.09..50279.14 rows=1 width=24)
   ->  GroupAggregate  (cost=29315.09..134135.33 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29315.09..133857.02 rows=55652 width=16)
               ->  Gather Merge  (cost=29314.66..35898.65 rows=55652 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28314.62..28359.50 rows=17952 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=645.86..27046.14 rows=17952 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..631.95 rows=55652 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.97 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29315.09..50279.14 rows=1 width=24)
   ->  GroupAggregate  (cost=29315.09..134135.33 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29315.09..133857.02 rows=55652 width=16)
               ->  Gather Merge  (cost=29314.66..35898.65 rows=55652 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28314.62..28359.50 rows=17952 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=645.86..27046.14 rows=17952 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..631.95 rows=55652 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.97 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29315.09..50279.14 rows=1 width=24)
   ->  GroupAggregate  (cost=29315.09..134135.33 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29315.09..133857.02 rows=55652 width=16)
               ->  Gather Merge  (cost=29314.66..35898.65 rows=55652 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28314.62..28359.50 rows=17952 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=645.86..27046.14 rows=17952 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..631.95 rows=55652 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.97 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=45737.39..45737.39 rows=1 width=58)
   ->  Sort  (cost=45737.39..45737.45 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=45693.66..45737.26 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=45693.66..45736.57 rows=50 width=58)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=44693.64..44730.78 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=44693.64..44701.01 rows=2946 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=476.37..44523.88 rows=2946 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=3.37..43664.12 rows=73670 width=50)
                                             ->  Nested Loop  (cost=2.94..18543.01 rows=18418 width=38)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.32 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(32 rows)

query 5 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=45737.39..45737.39 rows=1 width=58)
   ->  Sort  (cost=45737.39..45737.45 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=45693.66..45737.26 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=45693.66..45736.57 rows=50 width=58)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=44693.64..44730.78 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=44693.64..44701.01 rows=2946 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=476.37..44523.88 rows=2946 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=3.37..43664.12 rows=73670 width=50)
                                             ->  Nested Loop  (cost=2.94..18543.01 rows=18418 width=38)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.32 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(32 rows)

query 5 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=45737.39..45737.39 rows=1 width=58)
   ->  Sort  (cost=45737.39..45737.45 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=45693.66..45737.26 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=45693.66..45736.57 rows=50 width=58)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=44693.64..44730.78 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=44693.64..44701.01 rows=2946 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=476.37..44523.88 rows=2946 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=3.37..43664.12 rows=73670 width=50)
                                             ->  Nested Loop  (cost=2.94..18543.01 rows=18418 width=38)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.32 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(32 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=107574.07..107574.08 rows=1 width=32)
   ->  Finalize Aggregate  (cost=107574.07..107574.08 rows=1 width=32)
         ->  Gather  (cost=107573.63..107574.04 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=106573.63..106573.64 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=21125.69..106424.14 rows=29899 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21095.79 rows=119597 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=107574.07..107574.08 rows=1 width=32)
   ->  Finalize Aggregate  (cost=107574.07..107574.08 rows=1 width=32)
         ->  Gather  (cost=107573.63..107574.04 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=106573.63..106573.64 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=21125.69..106424.14 rows=29899 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21095.79 rows=119597 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=107574.07..107574.08 rows=1 width=32)
   ->  Finalize Aggregate  (cost=107574.07..107574.08 rows=1 width=32)
         ->  Gather  (cost=107573.63..107574.04 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=106573.63..106573.64 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=21125.69..106424.14 rows=29899 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21095.79 rows=119597 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=42409.14..42427.22 rows=1 width=92)
   ->  GroupAggregate  (cost=42409.14..152423.66 rows=6087 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Incremental Sort  (cost=42409.14..152225.83 rows=6087 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               Presorted Key: n1.n_name, n2.n_name
               ->  Nested Loop  (cost=5831.50..151632.73 rows=6087 width=72)
                     Join Filter: (n1.n_nationkey = supplier.s_nationkey)
                     ->  Nested Loop  (cost=5831.22..103635.00 rows=152177 width=76)
                           ->  Nested Loop  (cost=5830.79..21913.49 rows=124848 width=60)
                                 ->  Gather Merge  (cost=5830.36..7284.44 rows=12485 width=60)
                                       Workers Planned: 2
                                       ->  Sort  (cost=4830.33..4843.34 rows=5202 width=60)
                                             Sort Key: n1.n_name, n2.n_name
                                             ->  Hash Join  (cost=2.87..4509.24 rows=5202 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.00 rows=17 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.64 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
(32 rows)

query 7 run 2
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=42409.14..42427.22 rows=1 width=92)
   ->  GroupAggregate  (cost=42409.14..152423.66 rows=6087 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Incremental Sort  (cost=42409.14..152225.83 rows=6087 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               Presorted Key: n1.n_name, n2.n_name
               ->  Nested Loop  (cost=5831.50..151632.73 rows=6087 width=72)
                     Join Filter: (n1.n_nationkey = supplier.s_nationkey)
                     ->  Nested Loop  (cost=5831.22..103635.00 rows=152177 width=76)
                           ->  Nested Loop  (cost=5830.79..21913.49 rows=124848 width=60)
                                 ->  Gather Merge  (cost=5830.36..7284.44 rows=12485 width=60)
                                       Workers Planned: 2
                                       ->  Sort  (cost=4830.33..4843.34 rows=5202 width=60)
                                             Sort Key: n1.n_name, n2.n_name
                                             ->  Hash Join  (cost=2.87..4509.24 rows=5202 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.00 rows=17 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.64 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
(32 rows)

query 7 run 3
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=42409.14..42427.22 rows=1 width=92)
   ->  GroupAggregate  (cost=42409.14..152423.66 rows=6087 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Incremental Sort  (cost=42409.14..152225.83 rows=6087 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               Presorted Key: n1.n_name, n2.n_name
               ->  Nested Loop  (cost=5831.50..151632.73 rows=6087 width=72)
                     Join Filter: (n1.n_nationkey = supplier.s_nationkey)
                     ->  Nested Loop  (cost=5831.22..103635.00 rows=152177 width=76)
                           ->  Nested Loop  (cost=5830.79..21913.49 rows=124848 width=60)
                                 ->  Gather Merge  (cost=5830.36..7284.44 rows=12485 width=60)
                                       Workers Planned: 2
                                       ->  Sort  (cost=4830.33..4843.34 rows=5202 width=60)
                                             Sort Key: n1.n_name, n2.n_name
                                             ->  Hash Join  (cost=2.87..4509.24 rows=5202 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.00 rows=17 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.64 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
(32 rows)

query 8 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22779.81..22890.17 rows=1 width=40)
   ->  GroupAggregate  (cost=22779.81..288312.55 rows=2406 width=40)
         Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  Nested Loop  (cost=22779.81..288208.48 rows=2497 width=46)
               ->  Nested Loop  (cost=22779.67..287809.41 rows=2497 width=20)
                     ->  Nested Loop  (cost=22779.39..287053.91 rows=2497 width=20)
                           ->  Nested Loop  (cost=22778.97..121296.97 rows=375728 width=24)
                                 ->  Gather Merge  (cost=22778.53..33718.46 rows=93932 width=8)
                                       Workers Planned: 2
                                       ->  Sort  (cost=21778.51..21876.36 rows=39138 width=8)
                                             Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                             ->  Nested Loop  (cost=2.94..18793.01 rows=39138 width=8)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=5 width=12)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.89 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using part_pkey on part  (cost=0.42..0.44 rows=1 width=4)
                                 Index Cond: (p_partkey = lineitem.l_partkey)
                                 Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
(34 rows)

query 8 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22779.81..22890.17 rows=1 width=40)
   ->  GroupAggregate  (cost=22779.81..288312.55 rows=2406 width=40)
         Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  Nested Loop  (cost=22779.81..288208.48 rows=2497 width=46)
               ->  Nested Loop  (cost=22779.67..287809.41 rows=2497 width=20)
                     ->  Nested Loop  (cost=22779.39..287053.91 rows=2497 width=20)
                           ->  Nested Loop  (cost=22778.97..121296.97 rows=375728 width=24)
                                 ->  Gather Merge  (cost=22778.53..33718.46 rows=93932 width=8)
                                       Workers Planned: 2
                                       ->  Sort  (cost=21778.51..21876.36 rows=39138 width=8)
                                             Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                             ->  Nested Loop  (cost=2.94..18793.01 rows=39138 width=8)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=5 width=12)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.89 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using part_pkey on part  (cost=0.42..0.44 rows=1 width=4)
                                 Index Cond: (p_partkey = lineitem.l_partkey)
                                 Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
(34 rows)

query 8 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22779.81..22890.17 rows=1 width=40)
   ->  GroupAggregate  (cost=22779.81..288312.55 rows=2406 width=40)
         Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  Nested Loop  (cost=22779.81..288208.48 rows=2497 width=46)
               ->  Nested Loop  (cost=22779.67..287809.41 rows=2497 width=20)
                     ->  Nested Loop  (cost=22779.39..287053.91 rows=2497 width=20)
                           ->  Nested Loop  (cost=22778.97..121296.97 rows=375728 width=24)
                                 ->  Gather Merge  (cost=22778.53..33718.46 rows=93932 width=8)
                                       Workers Planned: 2
                                       ->  Sort  (cost=21778.51..21876.36 rows=39138 width=8)
                                             Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                             ->  Nested Loop  (cost=2.94..18793.01 rows=39138 width=8)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=5 width=12)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.89 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using part_pkey on part  (cost=0.42..0.44 rows=1 width=4)
                                 Index Cond: (p_partkey = lineitem.l_partkey)
                                 Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
(34 rows)

query 9 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22086.59..22341.16 rows=1 width=66)
   ->  GroupAggregate  (cost=22086.59..72237.86 rows=197 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Incremental Sort  (cost=22086.59..72230.96 rows=197 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=19997.37..72222.49 rows=197 width=57)
                     ->  Nested Loop  (cost=19996.94..72132.35 rows=197 width=53)
                           Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Gather Merge  (cost=19996.51..27525.84 rows=64648 width=48)
                                 Workers Planned: 2
                                 ->  Sort  (cost=18996.49..19063.83 rows=26937 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=449.99..17014.29 rows=26937 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Hash Join  (cost=448.43..16930.03 rows=26937 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.42..16411.29 rows=26937 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=6734 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.63 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.68 rows=1 width=29)
                                 Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(30 rows)

query 9 run 2
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22086.59..22341.16 rows=1 width=66)
   ->  GroupAggregate  (cost=22086.59..72237.86 rows=197 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Incremental Sort  (cost=22086.59..72230.96 rows=197 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=19997.37..72222.49 rows=197 width=57)
                     ->  Nested Loop  (cost=19996.94..72132.35 rows=197 width=53)
                           Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Gather Merge  (cost=19996.51..27525.84 rows=64648 width=48)
                                 Workers Planned: 2
                                 ->  Sort  (cost=18996.49..19063.83 rows=26937 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=449.99..17014.29 rows=26937 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Hash Join  (cost=448.43..16930.03 rows=26937 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.42..16411.29 rows=26937 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=6734 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.63 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.68 rows=1 width=29)
                                 Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(30 rows)

query 9 run 3
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22086.59..22341.16 rows=1 width=66)
   ->  GroupAggregate  (cost=22086.59..72237.86 rows=197 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Incremental Sort  (cost=22086.59..72230.96 rows=197 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=19997.37..72222.49 rows=197 width=57)
                     ->  Nested Loop  (cost=19996.94..72132.35 rows=197 width=53)
                           Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Gather Merge  (cost=19996.51..27525.84 rows=64648 width=48)
                                 Workers Planned: 2
                                 ->  Sort  (cost=18996.49..19063.83 rows=26937 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=449.99..17014.29 rows=26937 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Hash Join  (cost=448.43..16930.03 rows=26937 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.42..16411.29 rows=26937 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=6734 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.63 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.68 rows=1 width=29)
                                 Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(30 rows)

query 10 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=77817.92..77817.97 rows=20 width=202)
   ->  Sort  (cost=77817.92..77956.15 rows=55293 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=75655.43..76346.59 rows=55293 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6667.33..74964.26 rows=55293 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5667.33..68434.96 rows=17836 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5665.77..68378.65 rows=17836 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=662.52..63328.58 rows=17836 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=662.09..27069.33 rows=18416 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..647.82 rows=57089 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.96 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=77817.92..77817.97 rows=20 width=202)
   ->  Sort  (cost=77817.92..77956.15 rows=55293 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=75655.43..76346.59 rows=55293 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6667.33..74964.26 rows=55293 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5667.33..68434.96 rows=17836 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5665.77..68378.65 rows=17836 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=662.52..63328.58 rows=17836 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=662.09..27069.33 rows=18416 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..647.82 rows=57089 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.96 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=77817.92..77817.97 rows=20 width=202)
   ->  Sort  (cost=77817.92..77956.15 rows=55293 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=75655.43..76346.59 rows=55293 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6667.33..74964.26 rows=55293 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5667.33..68434.96 rows=17836 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5665.77..68378.65 rows=17836 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=662.52..63328.58 rows=17836 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=662.09..27069.33 rows=18416 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..647.82 rows=57089 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.96 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6156.20..6156.20 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2611.43..2611.44 rows=1 width=32)
           ->  Nested Loop  (cost=5.31..2371.43 rows=32000 width=10)
                 ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=4.88..223.76 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.56 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3544.76..3571.43 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=2931.43..3491.43 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=5.31..2371.43 rows=32000 width=14)
                     ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 2
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6156.20..6156.20 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2611.43..2611.44 rows=1 width=32)
           ->  Nested Loop  (cost=5.31..2371.43 rows=32000 width=10)
                 ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=4.88..223.76 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.56 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3544.76..3571.43 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=2931.43..3491.43 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=5.31..2371.43 rows=32000 width=14)
                     ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 3
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6156.20..6156.20 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2611.43..2611.44 rows=1 width=32)
           ->  Nested Loop  (cost=5.31..2371.43 rows=32000 width=10)
                 ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=4.88..223.76 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.56 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3544.76..3571.43 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=2931.43..3491.43 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=5.31..2371.43 rows=32000 width=14)
                     ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=147781.27..155038.76 rows=1 width=27)
   ->  GroupAggregate  (cost=147781.27..198583.71 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=147781.27..198079.66 rows=28799 width=27)
               ->  Gather Merge  (cost=147780.85..151230.04 rows=28807 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=146780.79..146798.79 rows=7202 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..146319.35 rows=7202 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..1.63 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 2
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=147781.27..155038.76 rows=1 width=27)
   ->  GroupAggregate  (cost=147781.27..198583.71 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=147781.27..198079.66 rows=28799 width=27)
               ->  Gather Merge  (cost=147780.85..151230.04 rows=28807 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=146780.79..146798.79 rows=7202 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..146319.35 rows=7202 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..1.63 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 3
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=147781.27..155038.76 rows=1 width=27)
   ->  GroupAggregate  (cost=147781.27..198583.71 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=147781.27..198079.66 rows=28799 width=27)
               ->  Gather Merge  (cost=147780.85..151230.04 rows=28807 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=146780.79..146798.79 rows=7202 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..146319.35 rows=7202 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..1.63 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64586.97..64586.97 rows=1 width=16)
   ->  Sort  (cost=64586.97..64587.47 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64583.97..64585.97 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60833.97..62333.97 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53485.49 rows=1469697 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1469697 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64586.97..64586.97 rows=1 width=16)
   ->  Sort  (cost=64586.97..64587.47 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64583.97..64585.97 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60833.97..62333.97 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53485.49 rows=1469697 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1469697 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64586.97..64586.97 rows=1 width=16)
   ->  Sort  (cost=64586.97..64587.47 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64583.97..64585.97 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60833.97..62333.97 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53485.49 rows=1469697 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1469697 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=74236.39..74236.41 rows=1 width=32)
   ->  Finalize Aggregate  (cost=74236.39..74236.41 rows=1 width=32)
         ->  Gather  (cost=74235.94..74236.35 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=73235.94..73235.95 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7203.43..72900.88 rows=19146 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1229.44..66876.62 rows=19146 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1210.29 rows=76586 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=74236.39..74236.41 rows=1 width=32)
   ->  Finalize Aggregate  (cost=74236.39..74236.41 rows=1 width=32)
         ->  Gather  (cost=74235.94..74236.35 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=73235.94..73235.95 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7203.43..72900.88 rows=19146 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1229.44..66876.62 rows=19146 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1210.29 rows=76586 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=74236.39..74236.41 rows=1 width=32)
   ->  Finalize Aggregate  (cost=74236.39..74236.41 rows=1 width=32)
         ->  Gather  (cost=74235.94..74236.35 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=73235.94..73235.95 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7203.43..72900.88 rows=19146 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1229.44..66876.62 rows=19146 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1210.29 rows=76586 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=241476.52..241588.12 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122088.81..122088.82 rows=1 width=32)
           ->  HashAggregate  (cost=121839.23..121964.02 rows=9983 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3626.18..119578.01 rows=226122 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3569.65 rows=226122 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=119387.70..124967.64 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=119387.42..124842.52 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Gather Merge  (cost=119387.42..124168.66 rows=39932 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=118387.36..118412.32 rows=9983 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=117599.44..117724.23 rows=9983 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=3626.18..117034.14 rows=56530 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3569.65 rows=226122 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.49 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=241476.52..241588.12 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122088.81..122088.82 rows=1 width=32)
           ->  HashAggregate  (cost=121839.23..121964.02 rows=9983 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3626.18..119578.01 rows=226122 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3569.65 rows=226122 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=119387.70..124967.64 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=119387.42..124842.52 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Gather Merge  (cost=119387.42..124168.66 rows=39932 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=118387.36..118412.32 rows=9983 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=117599.44..117724.23 rows=9983 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=3626.18..117034.14 rows=56530 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3569.65 rows=226122 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.49 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=241476.52..241588.12 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=122088.81..122088.82 rows=1 width=32)
           ->  HashAggregate  (cost=121839.23..121964.02 rows=9983 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3626.18..119578.01 rows=226122 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3569.65 rows=226122 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=119387.70..124967.64 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=119387.42..124842.52 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Gather Merge  (cost=119387.42..124168.66 rows=39932 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=118387.36..118412.32 rows=9983 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=117599.44..117724.23 rows=9983 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=3626.18..117034.14 rows=56530 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3569.65 rows=226122 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.49 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=26613.86..26613.86 rows=1 width=44)
   ->  Sort  (cost=26613.86..26653.64 rows=15912 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=18756.38..26534.30 rows=15912 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=18756.38..25787.92 rows=58726 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=17756.32..17793.03 rows=14682 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size
                           ->  Parallel Hash Join  (cost=6683.70..16740.20 rows=14682 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12235 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12235 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=26613.86..26613.86 rows=1 width=44)
   ->  Sort  (cost=26613.86..26653.64 rows=15912 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=18756.38..26534.30 rows=15912 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=18756.38..25787.92 rows=58726 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=17756.32..17793.03 rows=14682 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size
                           ->  Parallel Hash Join  (cost=6683.70..16740.20 rows=14682 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12235 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12235 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=26613.86..26613.86 rows=1 width=44)
   ->  Sort  (cost=26613.86..26653.64 rows=15912 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=18756.38..26534.30 rows=15912 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=18756.38..25787.92 rows=58726 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=17756.32..17793.03 rows=14682 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size
                           ->  Parallel Hash Join  (cost=6683.70..16740.20 rows=14682 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12235 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12235 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=314749.60..314749.61 rows=1 width=32)
   ->  Aggregate  (cost=314749.60..314749.61 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..314744.52 rows=2029 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..314318.15 rows=203 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=208 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..302951.22 rows=195037 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..270017.35 rows=6001662 width=9)
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..1.98 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 17 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=314749.60..314749.61 rows=1 width=32)
   ->  Aggregate  (cost=314749.60..314749.61 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..314744.52 rows=2029 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..314318.15 rows=203 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=208 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..302951.22 rows=195037 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..270017.35 rows=6001662 width=9)
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..1.98 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 17 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=314749.60..314749.61 rows=1 width=32)
   ->  Aggregate  (cost=314749.60..314749.61 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..314744.52 rows=2029 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..314318.15 rows=203 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=208 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..302951.22 rows=195037 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..270017.35 rows=6001662 width=9)
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..1.98 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 18 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=803644.78..803645.03 rows=100 width=71)
   ->  Sort  (cost=803644.78..808646.17 rows=2000555 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=667012.06..727185.01 rows=2000555 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 32
               ->  Hash Join  (cost=338907.79..559247.79 rows=2000555 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Hash Join  (cost=331935.79..547024.19 rows=2000555 width=25)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..172576.62 rows=6001662 width=9)
                           ->  Hash  (cost=325684.05..325684.05 rows=500139 width=24)
                                 ->  Hash Join  (cost=280615.54..325684.05 rows=500139 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                       ->  Hash  (cost=274363.80..274363.80 rows=500139 width=4)
                                             ->  GroupAggregate  (cost=0.43..269362.41 rows=500139 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..216847.86 rows=6001662 width=9)
                     ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                           ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 18 run 2
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=803644.78..803645.03 rows=100 width=71)
   ->  Sort  (cost=803644.78..808646.17 rows=2000555 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=667012.06..727185.01 rows=2000555 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 32
               ->  Hash Join  (cost=338907.79..559247.79 rows=2000555 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Hash Join  (cost=331935.79..547024.19 rows=2000555 width=25)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..172576.62 rows=6001662 width=9)
                           ->  Hash  (cost=325684.05..325684.05 rows=500139 width=24)
                                 ->  Hash Join  (cost=280615.54..325684.05 rows=500139 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                       ->  Hash  (cost=274363.80..274363.80 rows=500139 width=4)
                                             ->  GroupAggregate  (cost=0.43..269362.41 rows=500139 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..216847.86 rows=6001662 width=9)
                     ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                           ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 18 run 3
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=803644.78..803645.03 rows=100 width=71)
   ->  Sort  (cost=803644.78..808646.17 rows=2000555 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=667012.06..727185.01 rows=2000555 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 32
               ->  Hash Join  (cost=338907.79..559247.79 rows=2000555 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Hash Join  (cost=331935.79..547024.19 rows=2000555 width=25)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..172576.62 rows=6001662 width=9)
                           ->  Hash  (cost=325684.05..325684.05 rows=500139 width=24)
                                 ->  Hash Join  (cost=280615.54..325684.05 rows=500139 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                       ->  Hash  (cost=274363.80..274363.80 rows=500139 width=4)
                                             ->  GroupAggregate  (cost=0.43..269362.41 rows=500139 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..216847.86 rows=6001662 width=9)
                     ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                           ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=18436.30..18436.31 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18436.30..18436.31 rows=1 width=32)
         ->  Gather  (cost=18436.07..18436.28 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17436.07..17436.08 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17435.71 rows=48 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=204 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..48.00 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=18436.30..18436.31 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18436.30..18436.31 rows=1 width=32)
         ->  Gather  (cost=18436.07..18436.28 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17436.07..17436.08 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17435.71 rows=48 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=204 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..48.00 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

 Limit  (cost=18436.30..18436.31 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18436.30..18436.31 rows=1 width=32)
         ->  Gather  (cost=18436.07..18436.28 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17436.07..17436.08 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17435.71 rows=48 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=204 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..48.00 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=211072.23..211072.23 rows=1 width=51)
   ->  Sort  (cost=211072.23..211072.23 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=185751.30..211072.22 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=185751.30..210616.91 rows=1 width=8)
                     ->  Nested Loop  (cost=185751.30..210616.90 rows=1 width=8)
                           ->  Hash Join  (cost=185750.87..208064.92 rows=4898 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=179382.96..195574.42 rows=484955 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 8
                                       ->  Bitmap Heap Scan on lineitem  (cost=14639.86..140896.59 rows=913115 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14411.58 rows=913115 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6342.67..6342.67 rows=2020 width=4)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(29 rows)

query 20 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=211072.23..211072.23 rows=1 width=51)
   ->  Sort  (cost=211072.23..211072.23 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=185751.30..211072.22 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=185751.30..210616.91 rows=1 width=8)
                     ->  Nested Loop  (cost=185751.30..210616.90 rows=1 width=8)
                           ->  Hash Join  (cost=185750.87..208064.92 rows=4898 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=179382.96..195574.42 rows=484955 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 8
                                       ->  Bitmap Heap Scan on lineitem  (cost=14639.86..140896.59 rows=913115 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14411.58 rows=913115 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6342.67..6342.67 rows=2020 width=4)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(29 rows)

query 20 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=211072.23..211072.23 rows=1 width=51)
   ->  Sort  (cost=211072.23..211072.23 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=185751.30..211072.22 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=185751.30..210616.91 rows=1 width=8)
                     ->  Nested Loop  (cost=185751.30..210616.90 rows=1 width=8)
                           ->  Hash Join  (cost=185750.87..208064.92 rows=4898 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=179382.96..195574.42 rows=484955 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 8
                                       ->  Bitmap Heap Scan on lineitem  (cost=14639.86..140896.59 rows=913115 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14411.58 rows=913115 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6342.67..6342.67 rows=2020 width=4)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(29 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146563.17..146563.17 rows=1 width=34)
   ->  Sort  (cost=146563.17..146563.17 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=146563.14..146563.16 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=146563.14..146563.14 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1235.37..146563.13 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1234.94..146562.66 rows=1 width=34)
                                 ->  Gather  (cost=1234.51..146562.04 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=234.51..145561.94 rows=1 width=34)
                                             ->  Hash Join  (cost=234.08..133624.85 rows=20006 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131315.19 rows=500138 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=229.08..229.08 rows=400 width=30)
                                                         ->  Nested Loop  (cost=4.88..229.08 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.61 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.60 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(33 rows)

query 21 run 2
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146563.17..146563.17 rows=1 width=34)
   ->  Sort  (cost=146563.17..146563.17 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=146563.14..146563.16 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=146563.14..146563.14 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1235.37..146563.13 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1234.94..146562.66 rows=1 width=34)
                                 ->  Gather  (cost=1234.51..146562.04 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=234.51..145561.94 rows=1 width=34)
                                             ->  Hash Join  (cost=234.08..133624.85 rows=20006 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131315.19 rows=500138 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=229.08..229.08 rows=400 width=30)
                                                         ->  Nested Loop  (cost=4.88..229.08 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.61 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.60 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(33 rows)

query 21 run 3
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146563.17..146563.17 rows=1 width=34)
   ->  Sort  (cost=146563.17..146563.17 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=146563.14..146563.16 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=146563.14..146563.14 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1235.37..146563.13 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1234.94..146562.66 rows=1 width=34)
                                 ->  Gather  (cost=1234.51..146562.04 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=234.51..145561.94 rows=1 width=34)
                                             ->  Hash Join  (cost=234.08..133624.85 rows=20006 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131315.19 rows=500138 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=229.08..229.08 rows=400 width=30)
                                                         ->  Nested Loop  (cost=4.88..229.08 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.61 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.60 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(33 rows)

query 22 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.58..12517.18 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.83..6242.84 rows=1 width=32)
           ->  Gather  (cost=6242.60..6242.81 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.60..5242.61 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1991 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7458.37 rows=739 width=72)
         Group Key: "substring"((customer.c_phone)::text, 1, 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7439.89 rows=739 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     Params Evaluated: $1
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.68 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

query 22 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.58..12517.18 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.83..6242.84 rows=1 width=32)
           ->  Gather  (cost=6242.60..6242.81 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.60..5242.61 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1991 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7458.37 rows=739 width=72)
         Group Key: "substring"((customer.c_phone)::text, 1, 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7439.89 rows=739 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     Params Evaluated: $1
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.68 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

query 22 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.58..12517.18 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.83..6242.84 rows=1 width=32)
           ->  Gather  (cost=6242.60..6242.81 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.60..5242.61 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1991 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7458.37 rows=739 width=72)
         Group Key: "substring"((customer.c_phone)::text, 1, 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7439.89 rows=739 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     Params Evaluated: $1
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.68 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

