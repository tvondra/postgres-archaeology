query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=4246601.58..4246601.58 rows=1 width=236)
   ->  Sort  (cost=4246601.58..4246601.59 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=4246601.38..4246601.54 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874921.90 rows=59291987 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 2
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=4246601.58..4246601.58 rows=1 width=236)
   ->  Sort  (cost=4246601.58..4246601.59 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=4246601.38..4246601.54 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874921.90 rows=59291987 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 3
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=4246601.58..4246601.58 rows=1 width=236)
   ->  Sort  (cost=4246601.58..4246601.59 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=4246601.38..4246601.54 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874921.90 rows=59291987 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=838701.46..838701.46 rows=1 width=192)
   ->  Sort  (cost=838701.46..838701.46 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=365888.07..838701.45 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89212.71 rows=6671 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=365887.31..373888.63 rows=1600264 width=172)
                     ->  Sort  (cost=365887.31..369887.97 rows=1600264 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..113075.83 rows=1600264 width=172)
                                 ->  Nested Loop  (cost=0.29..1278.36 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.15 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.59..69.60 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..69.58 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.28 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.66 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(37 rows)

query 2 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=838701.46..838701.46 rows=1 width=192)
   ->  Sort  (cost=838701.46..838701.46 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=365888.07..838701.45 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89212.71 rows=6671 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=365887.31..373888.63 rows=1600264 width=172)
                     ->  Sort  (cost=365887.31..369887.97 rows=1600264 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..113075.83 rows=1600264 width=172)
                                 ->  Nested Loop  (cost=0.29..1278.36 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.15 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.59..69.60 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..69.58 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.28 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.66 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(37 rows)

query 2 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=838701.46..838701.46 rows=1 width=192)
   ->  Sort  (cost=838701.46..838701.46 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=365888.07..838701.45 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89212.71 rows=6671 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=365887.31..373888.63 rows=1600264 width=172)
                     ->  Sort  (cost=365887.31..369887.97 rows=1600264 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..113075.83 rows=1600264 width=172)
                                 ->  Nested Loop  (cost=0.29..1278.36 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.15 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.59..69.60 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..69.58 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.28 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.66 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(37 rows)

query 3 run 1
SET
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3419938.04..3419938.06 rows=10 width=44)
   ->  Sort  (cost=3419938.04..3427628.93 rows=3076358 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3261168.31..3353459.05 rows=3076358 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=3261168.31..3268859.20 rows=3076358 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=538289.62..2889089.29 rows=3076358 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1874921.90 rows=32418983 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=513545.01..513545.01 rows=1423489 width=12)
                                 ->  Hash Join  (cost=143629.68..513545.01 rows=1423489 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=85214.94..436274.08 rows=7183291 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..83419.12 rows=7183291 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54698.76..54698.76 rows=297278 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54698.76 rows=297278 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 3 run 2
SET
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3419938.04..3419938.06 rows=10 width=44)
   ->  Sort  (cost=3419938.04..3427628.93 rows=3076358 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3261168.31..3353459.05 rows=3076358 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=3261168.31..3268859.20 rows=3076358 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=538289.62..2889089.29 rows=3076358 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1874921.90 rows=32418983 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=513545.01..513545.01 rows=1423489 width=12)
                                 ->  Hash Join  (cost=143629.68..513545.01 rows=1423489 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=85214.94..436274.08 rows=7183291 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..83419.12 rows=7183291 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54698.76..54698.76 rows=297278 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54698.76 rows=297278 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 3 run 3
SET
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3419938.04..3419938.06 rows=10 width=44)
   ->  Sort  (cost=3419938.04..3427628.93 rows=3076358 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3261168.31..3353459.05 rows=3076358 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=3261168.31..3268859.20 rows=3076358 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=538289.62..2889089.29 rows=3076358 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1874921.90 rows=32418983 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=513545.01..513545.01 rows=1423489 width=12)
                                 ->  Hash Join  (cost=143629.68..513545.01 rows=1423489 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=85214.94..436274.08 rows=7183291 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..83419.12 rows=7183291 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54698.76..54698.76 rows=297278 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54698.76 rows=297278 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 4 run 1
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1639229.49..1639229.49 rows=1 width=24)
   ->  Sort  (cost=1639229.49..1639229.50 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=1639229.42..1639229.47 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=7632.80..1636573.63 rows=531158 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=7632.23..276870.42 rows=531346 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7499.40 rows=531346 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 4 run 2
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1639229.49..1639229.49 rows=1 width=24)
   ->  Sort  (cost=1639229.49..1639229.50 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=1639229.42..1639229.47 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=7632.80..1636573.63 rows=531158 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=7632.23..276870.42 rows=531346 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7499.40 rows=531346 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 4 run 3
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1639229.49..1639229.49 rows=1 width=24)
   ->  Sort  (cost=1639229.49..1639229.50 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=1639229.42..1639229.47 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=7632.80..1636573.63 rows=531158 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=7632.23..276870.42 rows=531346 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7499.40 rows=531346 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1649392.77..1649392.78 rows=1 width=58)
   ->  Sort  (cost=1649392.77..1649392.84 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1648498.70..1649392.65 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1648498.70..1648677.43 rows=71491 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=100152.37..1642734.57 rows=71491 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=95431.37..1628629.44 rows=1787450 width=50)
                                 ->  Hash Join  (cost=95430.81..403077.17 rows=447020 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=32103.73..326898.26 rows=2235102 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..31544.96 rows=2235102 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59576.73..59576.73 rows=300028 width=38)
                                             ->  Hash Join  (cost=2.51..59576.73 rows=300028 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 5 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1649392.77..1649392.78 rows=1 width=58)
   ->  Sort  (cost=1649392.77..1649392.84 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1648498.70..1649392.65 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1648498.70..1648677.43 rows=71491 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=100152.37..1642734.57 rows=71491 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=95431.37..1628629.44 rows=1787450 width=50)
                                 ->  Hash Join  (cost=95430.81..403077.17 rows=447020 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=32103.73..326898.26 rows=2235102 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..31544.96 rows=2235102 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59576.73..59576.73 rows=300028 width=38)
                                             ->  Hash Join  (cost=2.51..59576.73 rows=300028 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 5 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1649392.77..1649392.78 rows=1 width=58)
   ->  Sort  (cost=1649392.77..1649392.84 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1648498.70..1649392.65 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1648498.70..1648677.43 rows=71491 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=100152.37..1642734.57 rows=71491 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=95431.37..1628629.44 rows=1787450 width=50)
                                 ->  Hash Join  (cost=95430.81..403077.17 rows=447020 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=32103.73..326898.26 rows=2235102 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..31544.96 rows=2235102 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59576.73..59576.73 rows=300028 width=38)
                                             ->  Hash Join  (cost=2.51..59576.73 rows=300028 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                       QUERY PLAN                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1450758.89..1450758.90 rows=1 width=32)
   ->  Aggregate  (cost=1450758.89..1450758.90 rows=1 width=32)
         ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..1444951.02 rows=1161575 width=12)
               Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(4 rows)

query 6 run 2
SET
SET
SET
                                                                                                       QUERY PLAN                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1450758.89..1450758.90 rows=1 width=32)
   ->  Aggregate  (cost=1450758.89..1450758.90 rows=1 width=32)
         ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..1444951.02 rows=1161575 width=12)
               Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(4 rows)

query 6 run 3
SET
SET
SET
                                                                                                       QUERY PLAN                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1450758.89..1450758.90 rows=1 width=32)
   ->  Aggregate  (cost=1450758.89..1450758.90 rows=1 width=32)
         ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..1444951.02 rows=1161575 width=12)
               Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(4 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2717770.73..2717770.86 rows=1 width=92)
   ->  GroupAggregate  (cost=2717770.73..2719006.51 rows=10044 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=2717770.73..2717922.16 rows=60572 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=563420.37..2712959.39 rows=60572 width=72)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111288.63 rows=1455500 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024877.68 rows=18193747 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536586.10..536586.10 rows=1200070 width=30)
                           ->  Hash Join  (cost=57055.38..536586.10 rows=1200070 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411276.76 rows=15000876 width=8)
                                 ->  Hash  (cost=55555.25..55555.25 rows=120011 width=30)
                                       ->  Hash Join  (cost=1.40..55555.25 rows=120011 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 7 run 2
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2717770.73..2717770.86 rows=1 width=92)
   ->  GroupAggregate  (cost=2717770.73..2719006.51 rows=10044 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=2717770.73..2717922.16 rows=60572 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=563420.37..2712959.39 rows=60572 width=72)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111288.63 rows=1455500 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024877.68 rows=18193747 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536586.10..536586.10 rows=1200070 width=30)
                           ->  Hash Join  (cost=57055.38..536586.10 rows=1200070 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411276.76 rows=15000876 width=8)
                                 ->  Hash  (cost=55555.25..55555.25 rows=120011 width=30)
                                       ->  Hash Join  (cost=1.40..55555.25 rows=120011 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 7 run 3
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2717770.73..2717770.86 rows=1 width=92)
   ->  GroupAggregate  (cost=2717770.73..2719006.51 rows=10044 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=2717770.73..2717922.16 rows=60572 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=563420.37..2712959.39 rows=60572 width=72)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111288.63 rows=1455500 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024877.68 rows=18193747 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536586.10..536586.10 rows=1200070 width=30)
                           ->  Hash Join  (cost=57055.38..536586.10 rows=1200070 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411276.76 rows=15000876 width=8)
                                 ->  Hash  (cost=55555.25..55555.25 rows=120011 width=30)
                                       ->  Hash Join  (cost=1.40..55555.25 rows=120011 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 8 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1094110.45..1094110.69 rows=1 width=40)
   ->  GroupAggregate  (cost=1094110.45..1094690.16 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=1094110.45..1094168.84 rows=23359 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Nested Loop  (cost=735275.46..1092415.55 rows=23359 width=46)
                     Join Filter: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=735275.46..1083861.13 rows=23359 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=730804.46..1079328.81 rows=23359 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=667477.38..1015330.15 rows=116797 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=65431.46..395032.90 rows=4555563 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..64292.56 rows=4555563 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=597238.46..597238.46 rows=384597 width=20)
                                             ->  Nested Loop  (cost=0.56..597238.46 rows=384597 width=20)
                                                   ->  Seq Scan on part  (cost=0.00..65981.18 rows=13302 width=4)
                                                         Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..39.65 rows=29 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59576.73..59576.73 rows=300028 width=4)
                                       ->  Hash Join  (cost=2.51..59576.73 rows=300028 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(38 rows)

query 8 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1094110.45..1094110.69 rows=1 width=40)
   ->  GroupAggregate  (cost=1094110.45..1094690.16 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=1094110.45..1094168.84 rows=23359 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Nested Loop  (cost=735275.46..1092415.55 rows=23359 width=46)
                     Join Filter: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=735275.46..1083861.13 rows=23359 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=730804.46..1079328.81 rows=23359 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=667477.38..1015330.15 rows=116797 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=65431.46..395032.90 rows=4555563 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..64292.56 rows=4555563 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=597238.46..597238.46 rows=384597 width=20)
                                             ->  Nested Loop  (cost=0.56..597238.46 rows=384597 width=20)
                                                   ->  Seq Scan on part  (cost=0.00..65981.18 rows=13302 width=4)
                                                         Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..39.65 rows=29 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59576.73..59576.73 rows=300028 width=4)
                                       ->  Hash Join  (cost=2.51..59576.73 rows=300028 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(38 rows)

query 8 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1094110.45..1094110.69 rows=1 width=40)
   ->  GroupAggregate  (cost=1094110.45..1094690.16 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=1094110.45..1094168.84 rows=23359 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Nested Loop  (cost=735275.46..1092415.55 rows=23359 width=46)
                     Join Filter: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=735275.46..1083861.13 rows=23359 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=730804.46..1079328.81 rows=23359 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=667477.38..1015330.15 rows=116797 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=65431.46..395032.90 rows=4555563 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..64292.56 rows=4555563 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=597238.46..597238.46 rows=384597 width=20)
                                             ->  Nested Loop  (cost=0.56..597238.46 rows=384597 width=20)
                                                   ->  Seq Scan on part  (cost=0.00..65981.18 rows=13302 width=4)
                                                         Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..39.65 rows=29 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59576.73..59576.73 rows=300028 width=4)
                                       ->  Hash Join  (cost=2.51..59576.73 rows=300028 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(38 rows)

query 9 run 1
SET
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=924496.60..924496.64 rows=1 width=66)
   ->  GroupAggregate  (cost=924496.60..924499.15 rows=68 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=924496.60..924496.77 rows=68 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Nested Loop  (cost=1.73..924494.53 rows=68 width=57)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=1.73..924468.42 rows=68 width=31)
                           ->  Nested Loop  (cost=1.29..924298.60 rows=68 width=31)
                                 ->  Nested Loop  (cost=1.00..924140.49 rows=68 width=35)
                                       ->  Nested Loop  (cost=0.43..265011.40 rows=242462 width=18)
                                             ->  Seq Scan on part  (cost=0.00..65981.18 rows=60606 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.09 rows=19 width=14)
                                                   Index Cond: (ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 9 run 2
SET
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=924496.60..924496.64 rows=1 width=66)
   ->  GroupAggregate  (cost=924496.60..924499.15 rows=68 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=924496.60..924496.77 rows=68 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Nested Loop  (cost=1.73..924494.53 rows=68 width=57)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=1.73..924468.42 rows=68 width=31)
                           ->  Nested Loop  (cost=1.29..924298.60 rows=68 width=31)
                                 ->  Nested Loop  (cost=1.00..924140.49 rows=68 width=35)
                                       ->  Nested Loop  (cost=0.43..265011.40 rows=242462 width=18)
                                             ->  Seq Scan on part  (cost=0.00..65981.18 rows=60606 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.09 rows=19 width=14)
                                                   Index Cond: (ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 9 run 3
SET
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=924496.60..924496.64 rows=1 width=66)
   ->  GroupAggregate  (cost=924496.60..924499.15 rows=68 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=924496.60..924496.77 rows=68 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Nested Loop  (cost=1.73..924494.53 rows=68 width=57)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=1.73..924468.42 rows=68 width=31)
                           ->  Nested Loop  (cost=1.29..924298.60 rows=68 width=31)
                                 ->  Nested Loop  (cost=1.00..924140.49 rows=68 width=35)
                                       ->  Nested Loop  (cost=0.43..265011.40 rows=242462 width=18)
                                             ->  Seq Scan on part  (cost=0.00..65981.18 rows=60606 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.09 rows=19 width=14)
                                                   Index Cond: (ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2153712.30..2153712.35 rows=20 width=202)
   ->  Sort  (cost=2153712.30..2155134.14 rows=568736 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2122938.20..2138578.44 rows=568736 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Sort  (cost=2122938.20..2124360.04 rows=568736 width=182)
                     Sort Key: customer.c_custkey, nation.n_name
                     ->  Hash Join  (cost=285290.89..2036082.18 rows=568736 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=285289.33..2034334.60 rows=568736 width=160)
                                 ->  Hash Join  (cost=285288.76..379478.27 rows=573757 width=152)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=148)
                                       ->  Hash  (cost=278116.80..278116.80 rows=573757 width=8)
                                             ->  Bitmap Heap Scan on orders  (cost=8242.44..278116.80 rows=573757 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8099.01 rows=573757 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 2
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2153712.30..2153712.35 rows=20 width=202)
   ->  Sort  (cost=2153712.30..2155134.14 rows=568736 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2122938.20..2138578.44 rows=568736 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Sort  (cost=2122938.20..2124360.04 rows=568736 width=182)
                     Sort Key: customer.c_custkey, nation.n_name
                     ->  Hash Join  (cost=285290.89..2036082.18 rows=568736 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=285289.33..2034334.60 rows=568736 width=160)
                                 ->  Hash Join  (cost=285288.76..379478.27 rows=573757 width=152)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=148)
                                       ->  Hash  (cost=278116.80..278116.80 rows=573757 width=8)
                                             ->  Bitmap Heap Scan on orders  (cost=8242.44..278116.80 rows=573757 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8099.01 rows=573757 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 3
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2153712.30..2153712.35 rows=20 width=202)
   ->  Sort  (cost=2153712.30..2155134.14 rows=568736 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2122938.20..2138578.44 rows=568736 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Sort  (cost=2122938.20..2124360.04 rows=568736 width=182)
                     Sort Key: customer.c_custkey, nation.n_name
                     ->  Hash Join  (cost=285290.89..2036082.18 rows=568736 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=285289.33..2034334.60 rows=568736 width=160)
                                 ->  Hash Join  (cost=285288.76..379478.27 rows=573757 width=152)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=148)
                                       ->  Hash  (cost=278116.80..278116.80 rows=573757 width=8)
                                             ->  Bitmap Heap Scan on orders  (cost=8242.44..278116.80 rows=573757 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8099.01 rows=573757 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93467.29..93467.30 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=27033.35..27033.37 rows=1 width=32)
           ->  Nested Loop  (cost=49.72..24632.95 rows=320053 width=10)
                 ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=49.29..2232.15 rows=4000 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.79 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=66433.93..66700.64 rows=106684 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53898.52..65900.51 rows=106684 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53898.52..54698.65 rows=320053 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24632.95 rows=320053 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(30 rows)

query 11 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93467.29..93467.30 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=27033.35..27033.37 rows=1 width=32)
           ->  Nested Loop  (cost=49.72..24632.95 rows=320053 width=10)
                 ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=49.29..2232.15 rows=4000 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.79 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=66433.93..66700.64 rows=106684 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53898.52..65900.51 rows=106684 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53898.52..54698.65 rows=320053 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24632.95 rows=320053 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(30 rows)

query 11 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93467.29..93467.30 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=27033.35..27033.37 rows=1 width=32)
           ->  Nested Loop  (cost=49.72..24632.95 rows=320053 width=10)
                 ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=49.29..2232.15 rows=4000 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.79 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=66433.93..66700.64 rows=106684 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53898.52..65900.51 rows=106684 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53898.52..54698.65 rows=320053 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24632.95 rows=320053 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(30 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3031058.40..3031879.72 rows=1 width=27)
   ->  GroupAggregate  (cost=3031058.40..3036807.61 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=3031058.40..3031777.04 rows=287457 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Hash Join  (cost=2478338.23..3004996.13 rows=287457 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411276.76 rows=15000876 width=20)
                     ->  Hash  (cost=2474745.02..2474745.02 rows=287457 width=15)
                           ->  Seq Scan on lineitem  (cost=0.00..2474745.02 rows=287457 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 2
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3031058.40..3031879.72 rows=1 width=27)
   ->  GroupAggregate  (cost=3031058.40..3036807.61 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=3031058.40..3031777.04 rows=287457 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Hash Join  (cost=2478338.23..3004996.13 rows=287457 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411276.76 rows=15000876 width=20)
                     ->  Hash  (cost=2474745.02..2474745.02 rows=287457 width=15)
                           ->  Seq Scan on lineitem  (cost=0.00..2474745.02 rows=287457 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 3
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3031058.40..3031879.72 rows=1 width=27)
   ->  GroupAggregate  (cost=3031058.40..3036807.61 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=3031058.40..3031777.04 rows=287457 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Hash Join  (cost=2478338.23..3004996.13 rows=287457 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411276.76 rows=15000876 width=20)
                     ->  Hash  (cost=2474745.02..2474745.02 rows=287457 width=15)
                           ->  Seq Scan on lineitem  (cost=0.00..2474745.02 rows=287457 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 13 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1037911.01..1037911.01 rows=1 width=16)
   ->  Sort  (cost=1037911.01..1037911.51 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1037908.01..1037910.01 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=18.78..1015405.89 rows=1500141 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=18.78..928430.58 rows=14394780 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28676.54 rows=1500141 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716094.59 rows=14394780 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 2
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1037911.01..1037911.01 rows=1 width=16)
   ->  Sort  (cost=1037911.01..1037911.51 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1037908.01..1037910.01 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=18.78..1015405.89 rows=1500141 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=18.78..928430.58 rows=14394780 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28676.54 rows=1500141 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716094.59 rows=14394780 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 3
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1037911.01..1037911.01 rows=1 width=16)
   ->  Sort  (cost=1037911.01..1037911.51 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1037908.01..1037910.01 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=18.78..1015405.89 rows=1500141 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=18.78..928430.58 rows=14394780 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28676.54 rows=1500141 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716094.59 rows=14394780 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1030705.54..1030705.56 rows=1 width=32)
   ->  Aggregate  (cost=1030705.54..1030705.56 rows=1 width=32)
         ->  Hash Join  (cost=99653.88..1017593.12 rows=749281 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..894635.59 rows=777224 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60981.14..60981.14 rows=2000014 width=25)
                     ->  Seq Scan on part  (cost=0.00..60981.14 rows=2000014 width=25)
(8 rows)

query 14 run 2
SET
SET
SET
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1030705.54..1030705.56 rows=1 width=32)
   ->  Aggregate  (cost=1030705.54..1030705.56 rows=1 width=32)
         ->  Hash Join  (cost=99653.88..1017593.12 rows=749281 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..894635.59 rows=777224 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60981.14..60981.14 rows=2000014 width=25)
                     ->  Seq Scan on part  (cost=0.00..60981.14 rows=2000014 width=25)
(8 rows)

query 14 run 3
SET
SET
SET
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1030705.54..1030705.56 rows=1 width=32)
   ->  Aggregate  (cost=1030705.54..1030705.56 rows=1 width=32)
         ->  Hash Join  (cost=99653.88..1017593.12 rows=749281 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Scan using idx_lineitem_shipdate on lineitem  (cost=0.56..894635.59 rows=777224 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60981.14..60981.14 rows=2000014 width=25)
                     ->  Seq Scan on part  (cost=0.00..60981.14 rows=2000014 width=25)
(8 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4018469.68..4018569.79 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1886369.64..1886369.65 rows=1 width=32)
           ->  HashAggregate  (cost=1883901.09..1885135.37 rows=98742 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=37268.80..1860646.71 rows=2325438 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36687.45 rows=2325438 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=2132100.02..2181553.56 rows=494 width=103)
         ->  GroupAggregate  (cost=2132099.73..2180336.48 rows=494 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Sort  (cost=2132099.73..2137913.33 rows=2325438 width=16)
                     Sort Key: lineitem.l_suppkey
                     ->  Bitmap Heap Scan on lineitem  (cost=37268.80..1860646.71 rows=2325438 width=16)
                           Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36687.45 rows=2325438 width=0)
                                 Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(21 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4018469.68..4018569.79 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1886369.64..1886369.65 rows=1 width=32)
           ->  HashAggregate  (cost=1883901.09..1885135.37 rows=98742 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=37268.80..1860646.71 rows=2325438 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36687.45 rows=2325438 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=2132100.02..2181553.56 rows=494 width=103)
         ->  GroupAggregate  (cost=2132099.73..2180336.48 rows=494 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Sort  (cost=2132099.73..2137913.33 rows=2325438 width=16)
                     Sort Key: lineitem.l_suppkey
                     ->  Bitmap Heap Scan on lineitem  (cost=37268.80..1860646.71 rows=2325438 width=16)
                           Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36687.45 rows=2325438 width=0)
                                 Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(21 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4018469.68..4018569.79 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1886369.64..1886369.65 rows=1 width=32)
           ->  HashAggregate  (cost=1883901.09..1885135.37 rows=98742 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=37268.80..1860646.71 rows=2325438 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36687.45 rows=2325438 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=2132100.02..2181553.56 rows=494 width=103)
         ->  GroupAggregate  (cost=2132099.73..2180336.48 rows=494 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Sort  (cost=2132099.73..2137913.33 rows=2325438 width=16)
                     Sort Key: lineitem.l_suppkey
                     ->  Bitmap Heap Scan on lineitem  (cost=37268.80..1860646.71 rows=2325438 width=16)
                           Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36687.45 rows=2325438 width=0)
                                 Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(21 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=358614.62..358614.62 rows=1 width=44)
   ->  Sort  (cost=358614.62..358998.74 rows=153647 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=348895.59..357846.38 rows=153647 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=348895.59..350378.45 rows=593146 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98161.88..281592.24 rows=593146 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3473.96..176402.56 rows=4000660 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=1010 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90981.35..90981.35 rows=296526 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90981.35 rows=296526 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 2
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=358614.62..358614.62 rows=1 width=44)
   ->  Sort  (cost=358614.62..358998.74 rows=153647 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=348895.59..357846.38 rows=153647 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=348895.59..350378.45 rows=593146 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98161.88..281592.24 rows=593146 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3473.96..176402.56 rows=4000660 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=1010 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90981.35..90981.35 rows=296526 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90981.35 rows=296526 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 3
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=358614.62..358614.62 rows=1 width=44)
   ->  Sort  (cost=358614.62..358998.74 rows=153647 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=348895.59..357846.38 rows=153647 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=348895.59..350378.45 rows=593146 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98161.88..281592.24 rows=593146 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3473.96..176402.56 rows=4000660 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=1010 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90981.35..90981.35 rows=296526 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90981.35 rows=296526 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10826771.82..10826771.83 rows=1 width=32)
   ->  Aggregate  (cost=10826771.82..10826771.83 rows=1 width=32)
         ->  Merge Join  (cost=10133078.89..10826718.51 rows=21324 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  GroupAggregate  (cost=10133077.89..10614064.23 rows=2074600 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=10133077.89..10283033.67 rows=59982312 width=9)
                           Sort Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..1724966.12 rows=59982312 width=9)
               ->  Materialize  (cost=0.99..185756.46 rows=61671 width=21)
                     ->  Nested Loop  (cost=0.99..185602.28 rows=61671 width=21)
                           ->  Index Scan using part_pkey on part  (cost=0.43..89212.71 rows=2133 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..44.90 rows=29 width=17)
                                 Index Cond: (l_partkey = part.p_partkey)
(16 rows)

query 17 run 2
SET
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10826771.82..10826771.83 rows=1 width=32)
   ->  Aggregate  (cost=10826771.82..10826771.83 rows=1 width=32)
         ->  Merge Join  (cost=10133078.89..10826718.51 rows=21324 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  GroupAggregate  (cost=10133077.89..10614064.23 rows=2074600 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=10133077.89..10283033.67 rows=59982312 width=9)
                           Sort Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..1724966.12 rows=59982312 width=9)
               ->  Materialize  (cost=0.99..185756.46 rows=61671 width=21)
                     ->  Nested Loop  (cost=0.99..185602.28 rows=61671 width=21)
                           ->  Index Scan using part_pkey on part  (cost=0.43..89212.71 rows=2133 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..44.90 rows=29 width=17)
                                 Index Cond: (l_partkey = part.p_partkey)
(16 rows)

query 17 run 3
SET
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10826771.82..10826771.83 rows=1 width=32)
   ->  Aggregate  (cost=10826771.82..10826771.83 rows=1 width=32)
         ->  Merge Join  (cost=10133078.89..10826718.51 rows=21324 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  GroupAggregate  (cost=10133077.89..10614064.23 rows=2074600 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=10133077.89..10283033.67 rows=59982312 width=9)
                           Sort Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..1724966.12 rows=59982312 width=9)
               ->  Materialize  (cost=0.99..185756.46 rows=61671 width=21)
                     ->  Nested Loop  (cost=0.99..185602.28 rows=61671 width=21)
                           ->  Index Scan using part_pkey on part  (cost=0.43..89212.71 rows=2133 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..44.90 rows=29 width=17)
                                 Index Cond: (l_partkey = part.p_partkey)
(16 rows)

query 18 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10573545.59..10573545.84 rows=100 width=71)
   ->  Sort  (cost=10573545.59..10623513.20 rows=19987042 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=9359946.77..9809655.22 rows=19987042 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=9359946.77..9409914.38 rows=19987042 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=78584.35..6541008.93 rows=19987042 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=94.17..6128000.63 rows=19987042 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Join  (cost=1.00..3494391.57 rows=4998526 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..547978.58 rows=15000876 width=20)
                                       ->  GroupAggregate  (cost=0.56..2796443.97 rows=4998526 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271598.75 rows=59982312 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2271598.75 rows=59982312 width=9)
                           ->  Hash  (cost=50948.41..50948.41 rows=1500141 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=23)
(21 rows)

query 18 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10573545.59..10573545.84 rows=100 width=71)
   ->  Sort  (cost=10573545.59..10623513.20 rows=19987042 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=9359946.77..9809655.22 rows=19987042 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=9359946.77..9409914.38 rows=19987042 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=78584.35..6541008.93 rows=19987042 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=94.17..6128000.63 rows=19987042 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Join  (cost=1.00..3494391.57 rows=4998526 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..547978.58 rows=15000876 width=20)
                                       ->  GroupAggregate  (cost=0.56..2796443.97 rows=4998526 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271598.75 rows=59982312 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2271598.75 rows=59982312 width=9)
                           ->  Hash  (cost=50948.41..50948.41 rows=1500141 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=23)
(21 rows)

query 18 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10573545.59..10573545.84 rows=100 width=71)
   ->  Sort  (cost=10573545.59..10623513.20 rows=19987042 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=9359946.77..9809655.22 rows=19987042 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=9359946.77..9409914.38 rows=19987042 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=78584.35..6541008.93 rows=19987042 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Merge Join  (cost=94.17..6128000.63 rows=19987042 width=25)
                                 Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                 ->  Merge Join  (cost=1.00..3494391.57 rows=4998526 width=24)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..547978.58 rows=15000876 width=20)
                                       ->  GroupAggregate  (cost=0.56..2796443.97 rows=4998526 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271598.75 rows=59982312 width=9)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2271598.75 rows=59982312 width=9)
                           ->  Hash  (cost=50948.41..50948.41 rows=1500141 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..50948.41 rows=1500141 width=23)
(21 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=346028.18..346028.19 rows=1 width=32)
   ->  Aggregate  (cost=346028.18..346028.19 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..346020.04 rows=1085 width=12)
               ->  Seq Scan on part  (cost=0.00..125981.60 rows=4848 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..45.38 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 2
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            

 Limit  (cost=346028.18..346028.19 rows=1 width=32)
   ->  Aggregate  (cost=346028.18..346028.19 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..346020.04 rows=1085 width=12)
               ->  Seq Scan on part  (cost=0.00..125981.60 rows=4848 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..45.38 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=346028.18..346028.19 rows=1 width=32)
   ->  Aggregate  (cost=346028.18..346028.19 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..346020.04 rows=1085 width=12)
               ->  Seq Scan on part  (cost=0.00..125981.60 rows=4848 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..45.38 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3501338.84..3501338.85 rows=1 width=51)
   ->  Sort  (cost=3501338.84..3501338.85 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=3160216.04..3501338.83 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=3160216.04..3496686.53 rows=3 width=8)
                     ->  Nested Loop  (cost=3160216.04..3496686.51 rows=3 width=8)
                           ->  Merge Join  (cost=3160215.61..3470731.92 rows=49128 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  GroupAggregate  (cost=3160215.18..3325181.40 rows=4863685 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Sort  (cost=3160215.18..3183217.92 rows=9201095 width=13)
                                             Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                             ->  Bitmap Heap Scan on lineitem  (cost=147458.29..1994865.31 rows=9201095 width=13)
                                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..145158.02 rows=9201095 width=0)
                                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Index Scan using part_pkey on part  (cost=0.43..84212.67 rows=20202 width=4)
                                       Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3501338.84..3501338.85 rows=1 width=51)
   ->  Sort  (cost=3501338.84..3501338.85 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=3160216.04..3501338.83 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=3160216.04..3496686.53 rows=3 width=8)
                     ->  Nested Loop  (cost=3160216.04..3496686.51 rows=3 width=8)
                           ->  Merge Join  (cost=3160215.61..3470731.92 rows=49128 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  GroupAggregate  (cost=3160215.18..3325181.40 rows=4863685 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Sort  (cost=3160215.18..3183217.92 rows=9201095 width=13)
                                             Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                             ->  Bitmap Heap Scan on lineitem  (cost=147458.29..1994865.31 rows=9201095 width=13)
                                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..145158.02 rows=9201095 width=0)
                                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Index Scan using part_pkey on part  (cost=0.43..84212.67 rows=20202 width=4)
                                       Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3501338.84..3501338.85 rows=1 width=51)
   ->  Sort  (cost=3501338.84..3501338.85 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=3160216.04..3501338.83 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=3160216.04..3496686.53 rows=3 width=8)
                     ->  Nested Loop  (cost=3160216.04..3496686.51 rows=3 width=8)
                           ->  Merge Join  (cost=3160215.61..3470731.92 rows=49128 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  GroupAggregate  (cost=3160215.18..3325181.40 rows=4863685 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Sort  (cost=3160215.18..3183217.92 rows=9201095 width=13)
                                             Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                             ->  Bitmap Heap Scan on lineitem  (cost=147458.29..1994865.31 rows=9201095 width=13)
                                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..145158.02 rows=9201095 width=0)
                                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Index Scan using part_pkey on part  (cost=0.43..84212.67 rows=20202 width=4)
                                       Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3627706.95..3627706.95 rows=1 width=34)
   ->  Sort  (cost=3627706.95..3627706.95 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=3627706.92..3627706.94 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=3627706.92..3627706.92 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=1976468.07..3627706.91 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop Anti Join  (cost=1976467.50..3627703.66 rows=1 width=38)
                                 ->  Hash Join  (cost=1976466.94..2519170.94 rows=386446 width=38)
                                       Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..448778.95 rows=7248423 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                                       ->  Hash  (cost=1960220.89..1960220.89 rows=799764 width=34)
                                             ->  Hash Join  (cost=2323.46..1960220.89 rows=799764 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Seq Scan on lineitem l1  (cost=0.00..1874921.90 rows=19994104 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3627706.95..3627706.95 rows=1 width=34)
   ->  Sort  (cost=3627706.95..3627706.95 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=3627706.92..3627706.94 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=3627706.92..3627706.92 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=1976468.07..3627706.91 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop Anti Join  (cost=1976467.50..3627703.66 rows=1 width=38)
                                 ->  Hash Join  (cost=1976466.94..2519170.94 rows=386446 width=38)
                                       Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..448778.95 rows=7248423 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                                       ->  Hash  (cost=1960220.89..1960220.89 rows=799764 width=34)
                                             ->  Hash Join  (cost=2323.46..1960220.89 rows=799764 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Seq Scan on lineitem l1  (cost=0.00..1874921.90 rows=19994104 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3627706.95..3627706.95 rows=1 width=34)
   ->  Sort  (cost=3627706.95..3627706.95 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=3627706.92..3627706.94 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=3627706.92..3627706.92 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=1976468.07..3627706.91 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop Anti Join  (cost=1976467.50..3627703.66 rows=1 width=38)
                                 ->  Hash Join  (cost=1976466.94..2519170.94 rows=386446 width=38)
                                       Hash Cond: (orders.o_orderkey = l1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..448778.95 rows=7248423 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                                       ->  Hash  (cost=1960220.89..1960220.89 rows=799764 width=34)
                                             ->  Hash Join  (cost=2323.46..1960220.89 rows=799764 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Seq Scan on lineitem l1  (cost=0.00..1874921.90 rows=19994104 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 22 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161407.29..161407.32 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75444.95..75444.96 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75325.70 rows=47698 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=85962.33..86170.84 rows=7582 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=85962.33..85981.29 rows=7582 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..85473.73 rows=7582 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75325.70 rows=17502 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.99 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 2
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161407.29..161407.32 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75444.95..75444.96 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75325.70 rows=47698 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=85962.33..86170.84 rows=7582 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=85962.33..85981.29 rows=7582 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..85473.73 rows=7582 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75325.70 rows=17502 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.99 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 3
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161407.29..161407.32 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75444.95..75444.96 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75325.70 rows=47698 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=85962.33..86170.84 rows=7582 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=85962.33..85981.29 rows=7582 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..85473.73 rows=7582 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75325.70 rows=17502 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.99 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

