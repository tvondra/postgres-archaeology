query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=424786.21..424786.22 rows=1 width=236)
   ->  Sort  (cost=424786.21..424786.23 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=424786.02..424786.18 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187574.54 rows=5930287 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 2
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=424786.21..424786.22 rows=1 width=236)
   ->  Sort  (cost=424786.21..424786.23 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=424786.02..424786.18 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187574.54 rows=5930287 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 3
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=424786.21..424786.22 rows=1 width=236)
   ->  Sort  (cost=424786.21..424786.23 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=424786.02..424786.18 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187574.54 rows=5930287 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35867.47..35867.47 rows=1 width=192)
   ->  Sort  (cost=35867.47..35867.47 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=17147.96..35867.46 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Seq Scan on part  (cost=0.00..7099.00 rows=834 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=10840.96..10840.96 rows=160000 width=172)
                     ->  Nested Loop  (cost=0.71..10840.96 rows=160000 width=172)
                           ->  Nested Loop  (cost=0.29..129.20 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..21.32 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(33 rows)

query 2 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35867.47..35867.47 rows=1 width=192)
   ->  Sort  (cost=35867.47..35867.47 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=17147.96..35867.46 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Seq Scan on part  (cost=0.00..7099.00 rows=834 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=10840.96..10840.96 rows=160000 width=172)
                     ->  Nested Loop  (cost=0.71..10840.96 rows=160000 width=172)
                           ->  Nested Loop  (cost=0.29..129.20 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..21.32 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(33 rows)

query 2 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35867.47..35867.47 rows=1 width=192)
   ->  Sort  (cost=35867.47..35867.47 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=17147.96..35867.46 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Seq Scan on part  (cost=0.00..7099.00 rows=834 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=10840.96..10840.96 rows=160000 width=172)
                     ->  Nested Loop  (cost=0.71..10840.96 rows=160000 width=172)
                           ->  Nested Loop  (cost=0.29..129.20 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..21.32 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(33 rows)

query 3 run 1
SET
SET
SET
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=196102.74..196102.76 rows=10 width=44)
   ->  Sort  (cost=196102.74..196900.15 rows=318964 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=181485.13..189210.04 rows=318964 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 4
               ->  Nested Loop  (cost=12463.50..164714.60 rows=318964 width=24)
                     ->  Hash Join  (cost=12463.07..49608.21 rows=146830 width=12)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Bitmap Heap Scan on orders  (cost=6613.01..41846.56 rows=728204 width=16)
                                 Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6430.96 rows=728204 width=0)
                                       Index Cond: (o_orderdate < '1995-03-07'::date)
                           ->  Hash  (cost=5472.00..5472.00 rows=30245 width=4)
                                 ->  Seq Scan on customer  (cost=0.00..5472.00 rows=30245 width=4)
                                       Filter: (c_mktsegment = 'BUILDING'::bpchar)
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.76 rows=2 width=16)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_shipdate > '1995-03-07'::date)
(19 rows)

query 3 run 2
SET
SET
SET
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=196102.74..196102.76 rows=10 width=44)
   ->  Sort  (cost=196102.74..196900.15 rows=318964 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=181485.13..189210.04 rows=318964 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 4
               ->  Nested Loop  (cost=12463.50..164714.60 rows=318964 width=24)
                     ->  Hash Join  (cost=12463.07..49608.21 rows=146830 width=12)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Bitmap Heap Scan on orders  (cost=6613.01..41846.56 rows=728204 width=16)
                                 Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6430.96 rows=728204 width=0)
                                       Index Cond: (o_orderdate < '1995-03-07'::date)
                           ->  Hash  (cost=5472.00..5472.00 rows=30245 width=4)
                                 ->  Seq Scan on customer  (cost=0.00..5472.00 rows=30245 width=4)
                                       Filter: (c_mktsegment = 'BUILDING'::bpchar)
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.76 rows=2 width=16)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_shipdate > '1995-03-07'::date)
(19 rows)

query 3 run 3
SET
SET
SET
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=196102.74..196102.76 rows=10 width=44)
   ->  Sort  (cost=196102.74..196900.15 rows=318964 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=181485.13..189210.04 rows=318964 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 4
               ->  Nested Loop  (cost=12463.50..164714.60 rows=318964 width=24)
                     ->  Hash Join  (cost=12463.07..49608.21 rows=146830 width=12)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Bitmap Heap Scan on orders  (cost=6613.01..41846.56 rows=728204 width=16)
                                 Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6430.96 rows=728204 width=0)
                                       Index Cond: (o_orderdate < '1995-03-07'::date)
                           ->  Hash  (cost=5472.00..5472.00 rows=30245 width=4)
                                 ->  Seq Scan on customer  (cost=0.00..5472.00 rows=30245 width=4)
                                       Filter: (c_mktsegment = 'BUILDING'::bpchar)
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.76 rows=2 width=16)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_shipdate > '1995-03-07'::date)
(19 rows)

query 4 run 1
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=127589.71..127589.71 rows=1 width=24)
   ->  Sort  (cost=127589.71..127589.72 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=127589.63..127589.68 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=660.88..127304.99 rows=56929 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=660.45..27645.38 rows=56929 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..646.22 rows=56929 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.96 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 4 run 2
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=127589.71..127589.71 rows=1 width=24)
   ->  Sort  (cost=127589.71..127589.72 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=127589.63..127589.68 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=660.88..127304.99 rows=56929 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=660.45..27645.38 rows=56929 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..646.22 rows=56929 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.96 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 4 run 3
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=127589.71..127589.71 rows=1 width=24)
   ->  Sort  (cost=127589.71..127589.72 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=127589.63..127589.68 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=660.88..127304.99 rows=56929 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=660.45..27645.38 rows=56929 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..646.22 rows=56929 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.96 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=98755.21..98755.21 rows=1 width=58)
   ->  Sort  (cost=98755.21..98755.27 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=98663.66..98755.08 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=98663.66..98681.88 rows=7289 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=474.15..98196.02 rows=7289 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=1.15..96766.55 rows=182182 width=50)
                                 ->  Nested Loop  (cost=0.72..35438.31 rows=45545 width=38)
                                       ->  Nested Loop  (cost=0.29..1936.41 rows=30000 width=38)
                                             ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                                   Join Filter: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                             ->  Index Scan using idx_customer_nationkey on customer  (cost=0.29..326.76 rows=6000 width=8)
                                                   Index Cond: (c_nationkey = nation.n_nationkey)
                                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=3 width=8)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                             Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.31 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(26 rows)

query 5 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=98755.21..98755.21 rows=1 width=58)
   ->  Sort  (cost=98755.21..98755.27 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=98663.66..98755.08 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=98663.66..98681.88 rows=7289 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=474.15..98196.02 rows=7289 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=1.15..96766.55 rows=182182 width=50)
                                 ->  Nested Loop  (cost=0.72..35438.31 rows=45545 width=38)
                                       ->  Nested Loop  (cost=0.29..1936.41 rows=30000 width=38)
                                             ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                                   Join Filter: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                             ->  Index Scan using idx_customer_nationkey on customer  (cost=0.29..326.76 rows=6000 width=8)
                                                   Index Cond: (c_nationkey = nation.n_nationkey)
                                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=3 width=8)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                             Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.31 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(26 rows)

query 5 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=98755.21..98755.21 rows=1 width=58)
   ->  Sort  (cost=98755.21..98755.27 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=98663.66..98755.08 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=98663.66..98681.88 rows=7289 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=474.15..98196.02 rows=7289 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=1.15..96766.55 rows=182182 width=50)
                                 ->  Nested Loop  (cost=0.72..35438.31 rows=45545 width=38)
                                       ->  Nested Loop  (cost=0.29..1936.41 rows=30000 width=38)
                                             ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                                   Join Filter: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                             ->  Index Scan using idx_customer_nationkey on customer  (cost=0.29..326.76 rows=6000 width=8)
                                                   Index Cond: (c_nationkey = nation.n_nationkey)
                                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=3 width=8)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                             Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.31 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(26 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=106393.70..106393.71 rows=1 width=32)
   ->  Aggregate  (cost=106393.70..106393.71 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=20743.54..105823.40 rows=114059 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..20715.02 rows=114059 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 2
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=106393.70..106393.71 rows=1 width=32)
   ->  Aggregate  (cost=106393.70..106393.71 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=20743.54..105823.40 rows=114059 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..20715.02 rows=114059 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 3
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=106393.70..106393.71 rows=1 width=32)
   ->  Aggregate  (cost=106393.70..106393.71 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=20743.54..105823.40 rows=114059 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..20715.02 rows=114059 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=98590.47..98590.51 rows=1 width=92)
   ->  GroupAggregate  (cost=98590.47..98800.51 rows=6001 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=98590.47..98605.48 rows=6001 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=352.43..98213.88 rows=6001 width=72)
                     Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Nested Loop  (cost=56.66..97116.62 rows=144203 width=46)
                           ->  Nested Loop  (cost=56.22..18568.46 rows=120000 width=30)
                                 ->  Nested Loop  (cost=55.80..4507.70 rows=12000 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                             Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Bitmap Heap Scan on customer  (cost=55.80..2193.16 rows=6000 width=8)
                                             Recheck Cond: (c_nationkey = n2.n_nationkey)
                                             ->  Bitmap Index Scan on idx_customer_nationkey  (cost=0.00..54.30 rows=6000 width=0)
                                                   Index Cond: (c_nationkey = n2.n_nationkey)
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.00 rows=17 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.64 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Hash  (cost=285.77..285.77 rows=800 width=30)
                           ->  Nested Loop  (cost=4.88..285.77 rows=800 width=30)
                                 ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                       Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                 ->  Bitmap Heap Scan on supplier  (cost=4.88..138.20 rows=400 width=8)
                                       Recheck Cond: (s_nationkey = n1.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                             Index Cond: (s_nationkey = n1.n_nationkey)
(30 rows)

query 7 run 2
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=98590.47..98590.51 rows=1 width=92)
   ->  GroupAggregate  (cost=98590.47..98800.51 rows=6001 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=98590.47..98605.48 rows=6001 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=352.43..98213.88 rows=6001 width=72)
                     Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Nested Loop  (cost=56.66..97116.62 rows=144203 width=46)
                           ->  Nested Loop  (cost=56.22..18568.46 rows=120000 width=30)
                                 ->  Nested Loop  (cost=55.80..4507.70 rows=12000 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                             Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Bitmap Heap Scan on customer  (cost=55.80..2193.16 rows=6000 width=8)
                                             Recheck Cond: (c_nationkey = n2.n_nationkey)
                                             ->  Bitmap Index Scan on idx_customer_nationkey  (cost=0.00..54.30 rows=6000 width=0)
                                                   Index Cond: (c_nationkey = n2.n_nationkey)
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.00 rows=17 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.64 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Hash  (cost=285.77..285.77 rows=800 width=30)
                           ->  Nested Loop  (cost=4.88..285.77 rows=800 width=30)
                                 ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                       Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                 ->  Bitmap Heap Scan on supplier  (cost=4.88..138.20 rows=400 width=8)
                                       Recheck Cond: (s_nationkey = n1.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                             Index Cond: (s_nationkey = n1.n_nationkey)
(30 rows)

query 7 run 3
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=98590.47..98590.51 rows=1 width=92)
   ->  GroupAggregate  (cost=98590.47..98800.51 rows=6001 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=98590.47..98605.48 rows=6001 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=352.43..98213.88 rows=6001 width=72)
                     Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Nested Loop  (cost=56.66..97116.62 rows=144203 width=46)
                           ->  Nested Loop  (cost=56.22..18568.46 rows=120000 width=30)
                                 ->  Nested Loop  (cost=55.80..4507.70 rows=12000 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                             Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Bitmap Heap Scan on customer  (cost=55.80..2193.16 rows=6000 width=8)
                                             Recheck Cond: (c_nationkey = n2.n_nationkey)
                                             ->  Bitmap Index Scan on idx_customer_nationkey  (cost=0.00..54.30 rows=6000 width=0)
                                                   Index Cond: (c_nationkey = n2.n_nationkey)
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.00 rows=17 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.64 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Hash  (cost=285.77..285.77 rows=800 width=30)
                           ->  Nested Loop  (cost=4.88..285.77 rows=800 width=30)
                                 ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                       Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                 ->  Bitmap Heap Scan on supplier  (cost=4.88..138.20 rows=400 width=8)
                                       Recheck Cond: (s_nationkey = n1.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                             Index Cond: (s_nationkey = n1.n_nationkey)
(30 rows)

query 8 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=83630.36..83630.40 rows=1 width=40)
   ->  GroupAggregate  (cost=83630.36..83736.51 rows=2359 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=83630.36..83636.25 rows=2359 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Nested Loop  (cost=2312.69..83498.21 rows=2359 width=46)
                     ->  Nested Loop  (cost=2312.55..83121.19 rows=2359 width=20)
                           ->  Hash Join  (cost=2312.27..82407.44 rows=2359 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=0.86..80028.21 rows=11796 width=24)
                                       ->  Nested Loop  (cost=0.43..61946.34 rows=39518 width=20)
                                             ->  Seq Scan on part  (cost=0.00..6599.00 rows=1317 width=4)
                                                   Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..41.72 rows=31 width=24)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..0.46 rows=1 width=12)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                             Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=1936.41..1936.41 rows=30000 width=4)
                                       ->  Nested Loop  (cost=0.29..1936.41 rows=30000 width=4)
                                             ->  Nested Loop  (cost=0.00..2.62 rows=5 width=4)
                                                   Join Filter: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                             ->  Index Scan using idx_customer_nationkey on customer  (cost=0.29..326.76 rows=6000 width=8)
                                                   Index Cond: (c_nationkey = n1.n_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                 Index Cond: (s_suppkey = lineitem.l_suppkey)
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(31 rows)

query 8 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=83630.36..83630.40 rows=1 width=40)
   ->  GroupAggregate  (cost=83630.36..83736.51 rows=2359 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=83630.36..83636.25 rows=2359 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Nested Loop  (cost=2312.69..83498.21 rows=2359 width=46)
                     ->  Nested Loop  (cost=2312.55..83121.19 rows=2359 width=20)
                           ->  Hash Join  (cost=2312.27..82407.44 rows=2359 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=0.86..80028.21 rows=11796 width=24)
                                       ->  Nested Loop  (cost=0.43..61946.34 rows=39518 width=20)
                                             ->  Seq Scan on part  (cost=0.00..6599.00 rows=1317 width=4)
                                                   Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..41.72 rows=31 width=24)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..0.46 rows=1 width=12)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                             Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=1936.41..1936.41 rows=30000 width=4)
                                       ->  Nested Loop  (cost=0.29..1936.41 rows=30000 width=4)
                                             ->  Nested Loop  (cost=0.00..2.62 rows=5 width=4)
                                                   Join Filter: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                             ->  Index Scan using idx_customer_nationkey on customer  (cost=0.29..326.76 rows=6000 width=8)
                                                   Index Cond: (c_nationkey = n1.n_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                 Index Cond: (s_suppkey = lineitem.l_suppkey)
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(31 rows)

query 8 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=83630.36..83630.40 rows=1 width=40)
   ->  GroupAggregate  (cost=83630.36..83736.51 rows=2359 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=83630.36..83636.25 rows=2359 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Nested Loop  (cost=2312.69..83498.21 rows=2359 width=46)
                     ->  Nested Loop  (cost=2312.55..83121.19 rows=2359 width=20)
                           ->  Hash Join  (cost=2312.27..82407.44 rows=2359 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=0.86..80028.21 rows=11796 width=24)
                                       ->  Nested Loop  (cost=0.43..61946.34 rows=39518 width=20)
                                             ->  Seq Scan on part  (cost=0.00..6599.00 rows=1317 width=4)
                                                   Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..41.72 rows=31 width=24)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..0.46 rows=1 width=12)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                             Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=1936.41..1936.41 rows=30000 width=4)
                                       ->  Nested Loop  (cost=0.29..1936.41 rows=30000 width=4)
                                             ->  Nested Loop  (cost=0.00..2.62 rows=5 width=4)
                                                   Join Filter: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                             ->  Index Scan using idx_customer_nationkey on customer  (cost=0.29..326.76 rows=6000 width=8)
                                                   Index Cond: (c_nationkey = n1.n_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                 Index Cond: (s_suppkey = lineitem.l_suppkey)
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(31 rows)

query 9 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=36154.36..36154.40 rows=1 width=66)
   ->  GroupAggregate  (cost=36154.36..36157.10 rows=73 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=36154.36..36154.54 rows=73 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Nested Loop  (cost=1.57..36152.10 rows=73 width=57)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=1.57..36124.08 rows=73 width=31)
                           ->  Nested Loop  (cost=1.14..36091.05 rows=73 width=31)
                                 ->  Nested Loop  (cost=0.86..36068.66 rows=74 width=35)
                                       ->  Nested Loop  (cost=0.42..19401.13 rows=24244 width=18)
                                             ->  Seq Scan on part  (cost=0.00..6599.00 rows=6061 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..2.07 rows=4 width=14)
                                                   Index Cond: (ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.68 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 9 run 2
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=36154.36..36154.40 rows=1 width=66)
   ->  GroupAggregate  (cost=36154.36..36157.10 rows=73 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=36154.36..36154.54 rows=73 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Nested Loop  (cost=1.57..36152.10 rows=73 width=57)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=1.57..36124.08 rows=73 width=31)
                           ->  Nested Loop  (cost=1.14..36091.05 rows=73 width=31)
                                 ->  Nested Loop  (cost=0.86..36068.66 rows=74 width=35)
                                       ->  Nested Loop  (cost=0.42..19401.13 rows=24244 width=18)
                                             ->  Seq Scan on part  (cost=0.00..6599.00 rows=6061 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..2.07 rows=4 width=14)
                                                   Index Cond: (ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.68 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 9 run 3
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=36154.36..36154.40 rows=1 width=66)
   ->  GroupAggregate  (cost=36154.36..36157.10 rows=73 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=36154.36..36154.54 rows=73 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Nested Loop  (cost=1.57..36152.10 rows=73 width=57)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=1.57..36124.08 rows=73 width=31)
                           ->  Nested Loop  (cost=1.14..36091.05 rows=73 width=31)
                                 ->  Nested Loop  (cost=0.86..36068.66 rows=74 width=35)
                                       ->  Nested Loop  (cost=0.42..19401.13 rows=24244 width=18)
                                             ->  Seq Scan on part  (cost=0.00..6599.00 rows=6061 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..2.07 rows=4 width=14)
                                                   Index Cond: (ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.68 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=149884.87..149884.92 rows=20 width=202)
   ->  Sort  (cost=149884.87..150024.22 rows=55737 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=147705.02..148401.73 rows=55737 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Hash Join  (cost=7633.81..147008.31 rows=55737 width=182)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=7632.25..146835.64 rows=55737 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Nested Loop  (cost=660.25..139717.33 rows=55737 width=16)
                                 ->  Bitmap Heap Scan on orders  (cost=659.81..27643.82 rows=56867 width=8)
                                       Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..645.60 rows=56867 width=0)
                                             Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.96 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(21 rows)

query 10 run 2
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=149884.87..149884.92 rows=20 width=202)
   ->  Sort  (cost=149884.87..150024.22 rows=55737 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=147705.02..148401.73 rows=55737 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Hash Join  (cost=7633.81..147008.31 rows=55737 width=182)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=7632.25..146835.64 rows=55737 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Nested Loop  (cost=660.25..139717.33 rows=55737 width=16)
                                 ->  Bitmap Heap Scan on orders  (cost=659.81..27643.82 rows=56867 width=8)
                                       Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..645.60 rows=56867 width=0)
                                             Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.96 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(21 rows)

query 10 run 3
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=149884.87..149884.92 rows=20 width=202)
   ->  Sort  (cost=149884.87..150024.22 rows=55737 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=147705.02..148401.73 rows=55737 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Hash Join  (cost=7633.81..147008.31 rows=55737 width=182)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=7632.25..146835.64 rows=55737 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Nested Loop  (cost=660.25..139717.33 rows=55737 width=16)
                                 ->  Bitmap Heap Scan on orders  (cost=659.81..27643.82 rows=56867 width=8)
                                       Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..645.60 rows=56867 width=0)
                                             Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.96 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(21 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6156.21..6156.21 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2611.43..2611.44 rows=1 width=32)
           ->  Nested Loop  (cost=5.31..2371.43 rows=32000 width=10)
                 ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=4.88..223.76 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.56 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3544.76..3571.43 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=2931.43..3491.43 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=5.31..2371.43 rows=32000 width=14)
                     ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 2
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6156.21..6156.21 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2611.43..2611.44 rows=1 width=32)
           ->  Nested Loop  (cost=5.31..2371.43 rows=32000 width=10)
                 ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=4.88..223.76 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.56 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3544.76..3571.43 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=2931.43..3491.43 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=5.31..2371.43 rows=32000 width=14)
                     ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 3
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6156.21..6156.21 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2611.43..2611.44 rows=1 width=32)
           ->  Nested Loop  (cost=5.31..2371.43 rows=32000 width=10)
                 ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=4.88..223.76 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.56 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3544.76..3571.43 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=2931.43..3491.43 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=5.31..2371.43 rows=32000 width=14)
                     ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=296538.87..296621.09 rows=1 width=27)
   ->  GroupAggregate  (cost=296538.87..297114.44 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=296538.87..296610.80 rows=28775 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Nested Loop  (cost=0.43..294407.71 rows=28775 width=27)
                     ->  Seq Scan on lineitem  (cost=0.00..247586.17 rows=28781 width=15)
                           Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..1.63 rows=1 width=20)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(10 rows)

query 12 run 2
SET
SET
SET
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=296538.87..296621.09 rows=1 width=27)
   ->  GroupAggregate  (cost=296538.87..297114.44 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=296538.87..296610.80 rows=28775 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Nested Loop  (cost=0.43..294407.71 rows=28775 width=27)
                     ->  Seq Scan on lineitem  (cost=0.00..247586.17 rows=28781 width=15)
                           Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..1.63 rows=1 width=20)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(10 rows)

query 12 run 3
SET
SET
SET
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=296538.87..296621.09 rows=1 width=27)
   ->  GroupAggregate  (cost=296538.87..297114.44 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=296538.87..296610.80 rows=28775 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Nested Loop  (cost=0.43..294407.71 rows=28775 width=27)
                     ->  Seq Scan on lineitem  (cost=0.00..247586.17 rows=28781 width=15)
                           Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..1.63 rows=1 width=20)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(10 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64702.50..64702.50 rows=1 width=16)
   ->  Sort  (cost=64702.50..64703.00 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64699.50..64701.50 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60949.50..62449.50 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53525.26 rows=1484848 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484848 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64702.50..64702.50 rows=1 width=16)
   ->  Sort  (cost=64702.50..64703.00 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64699.50..64701.50 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60949.50..62449.50 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53525.26 rows=1484848 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484848 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64702.50..64702.50 rows=1 width=16)
   ->  Sort  (cost=64702.50..64703.00 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64699.50..64701.50 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60949.50..62449.50 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53525.26 rows=1484848 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484848 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=78207.00..78207.02 rows=1 width=32)
   ->  Aggregate  (cost=78207.00..78207.02 rows=1 width=32)
         ->  Hash Join  (cost=9837.18..76856.94 rows=77146 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1238.18..68055.43 rows=77146 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1218.89 rows=77146 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 14 run 2
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=78207.00..78207.02 rows=1 width=32)
   ->  Aggregate  (cost=78207.00..78207.02 rows=1 width=32)
         ->  Hash Join  (cost=9837.18..76856.94 rows=77146 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1238.18..68055.43 rows=77146 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1218.89 rows=77146 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 14 run 3
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=78207.00..78207.02 rows=1 width=32)
   ->  Aggregate  (cost=78207.00..78207.02 rows=1 width=32)
         ->  Hash Join  (cost=9837.18..76856.94 rows=77146 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1238.18..68055.43 rows=77146 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1218.89 rows=77146 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=242607.42..242616.31 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=120520.51..120520.52 rows=1 width=32)
           ->  HashAggregate  (cost=120271.13..120395.82 rows=9975 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3504.92..118085.78 rows=218535 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3450.28 rows=218535 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=122086.90..122531.15 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=122086.62..122086.74 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=121910.15..122085.21 rows=50 width=36)
                     ->  HashAggregate  (cost=121910.15..122084.71 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3504.92..118085.78 rows=218535 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3450.28 rows=218535 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=242607.42..242616.31 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=120520.51..120520.52 rows=1 width=32)
           ->  HashAggregate  (cost=120271.13..120395.82 rows=9975 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3504.92..118085.78 rows=218535 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3450.28 rows=218535 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=122086.90..122531.15 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=122086.62..122086.74 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=121910.15..122085.21 rows=50 width=36)
                     ->  HashAggregate  (cost=121910.15..122084.71 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3504.92..118085.78 rows=218535 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3450.28 rows=218535 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=242607.42..242616.31 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=120520.51..120520.52 rows=1 width=32)
           ->  HashAggregate  (cost=120271.13..120395.82 rows=9975 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3504.92..118085.78 rows=218535 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3450.28 rows=218535 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=122086.90..122531.15 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=122086.62..122086.74 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=121910.15..122085.21 rows=50 width=36)
                     ->  HashAggregate  (cost=121910.15..122084.71 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3504.92..118085.78 rows=218535 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3450.28 rows=218535 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=33833.99..33833.99 rows=1 width=44)
   ->  Sort  (cost=33833.99..33873.91 rows=15969 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=32854.40..33754.14 rows=15969 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=32854.40..33002.41 rows=59204 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9817.45..28161.47 rows=59204 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17642.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29602 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29602 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 2
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=33833.99..33833.99 rows=1 width=44)
   ->  Sort  (cost=33833.99..33873.91 rows=15969 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=32854.40..33754.14 rows=15969 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=32854.40..33002.41 rows=59204 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9817.45..28161.47 rows=59204 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17642.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29602 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29602 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 3
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=33833.99..33833.99 rows=1 width=44)
   ->  Sort  (cost=33833.99..33873.91 rows=15969 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=32854.40..33754.14 rows=15969 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=32854.40..33002.41 rows=59204 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9817.45..28161.47 rows=59204 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17642.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29602 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29602 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=314720.41..314720.42 rows=1 width=32)
   ->  Aggregate  (cost=314720.41..314720.42 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..314715.45 rows=1985 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..314297.08 rows=199 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=204 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..302935.45 rows=194617 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..270010.38 rows=6001163 width=9)
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..1.98 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 17 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=314720.41..314720.42 rows=1 width=32)
   ->  Aggregate  (cost=314720.41..314720.42 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..314715.45 rows=1985 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..314297.08 rows=199 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=204 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..302935.45 rows=194617 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..270010.38 rows=6001163 width=9)
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..1.98 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 17 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=314720.41..314720.42 rows=1 width=32)
   ->  Aggregate  (cost=314720.41..314720.42 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..314715.45 rows=1985 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..314297.08 rows=199 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=204 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..302935.45 rows=194617 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..270010.38 rows=6001163 width=9)
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..1.98 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 18 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=803602.08..803602.33 rows=100 width=71)
   ->  Sort  (cost=803602.08..808603.05 rows=2000388 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=666980.77..727148.69 rows=2000388 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 32
               ->  Hash Join  (cost=338894.46..559225.50 rows=2000388 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Hash Join  (cost=331922.46..547002.33 rows=2000388 width=25)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..172571.63 rows=6001163 width=9)
                           ->  Hash  (cost=325671.25..325671.25 rows=500097 width=24)
                                 ->  Hash Join  (cost=280602.74..325671.25 rows=500097 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                       ->  Hash  (cost=274351.53..274351.53 rows=500097 width=4)
                                             ->  GroupAggregate  (cost=0.43..269350.56 rows=500097 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..216840.38 rows=6001163 width=9)
                     ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                           ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 18 run 2
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=803602.08..803602.33 rows=100 width=71)
   ->  Sort  (cost=803602.08..808603.05 rows=2000388 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=666980.77..727148.69 rows=2000388 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 32
               ->  Hash Join  (cost=338894.46..559225.50 rows=2000388 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Hash Join  (cost=331922.46..547002.33 rows=2000388 width=25)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..172571.63 rows=6001163 width=9)
                           ->  Hash  (cost=325671.25..325671.25 rows=500097 width=24)
                                 ->  Hash Join  (cost=280602.74..325671.25 rows=500097 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                       ->  Hash  (cost=274351.53..274351.53 rows=500097 width=4)
                                             ->  GroupAggregate  (cost=0.43..269350.56 rows=500097 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..216840.38 rows=6001163 width=9)
                     ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                           ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 18 run 3
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=803602.08..803602.33 rows=100 width=71)
   ->  Sort  (cost=803602.08..808603.05 rows=2000388 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=666980.77..727148.69 rows=2000388 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 32
               ->  Hash Join  (cost=338894.46..559225.50 rows=2000388 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Hash Join  (cost=331922.46..547002.33 rows=2000388 width=25)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..172571.63 rows=6001163 width=9)
                           ->  Hash  (cost=325671.25..325671.25 rows=500097 width=24)
                                 ->  Hash Join  (cost=280602.74..325671.25 rows=500097 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                       ->  Hash  (cost=274351.53..274351.53 rows=500097 width=4)
                                             ->  GroupAggregate  (cost=0.43..269350.56 rows=500097 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..216840.38 rows=6001163 width=9)
                     ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                           ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 19 run 1
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            

 Limit  (cost=35312.82..35312.83 rows=1 width=32)
   ->  Aggregate  (cost=35312.82..35312.83 rows=1 width=32)
         ->  Nested Loop  (cost=0.43..35312.00 rows=109 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=472 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..48.11 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=35312.82..35312.83 rows=1 width=32)
   ->  Aggregate  (cost=35312.82..35312.83 rows=1 width=32)
         ->  Nested Loop  (cost=0.43..35312.00 rows=109 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=472 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..48.11 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=35312.82..35312.83 rows=1 width=32)
   ->  Aggregate  (cost=35312.82..35312.83 rows=1 width=32)
         ->  Nested Loop  (cost=0.43..35312.00 rows=109 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=472 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..48.11 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=210910.77..210910.77 rows=1 width=51)
   ->  Sort  (cost=210910.77..210910.77 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=185669.87..210910.76 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=185669.87..210455.45 rows=1 width=8)
                     ->  Nested Loop  (cost=185669.87..210455.44 rows=1 width=8)
                           ->  Hash Join  (cost=185669.45..207908.52 rows=4887 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=179045.20..195175.28 rows=483879 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 8
                                       ->  Bitmap Heap Scan on lineitem  (cost=14566.87..140754.10 rows=908482 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14339.75 rows=908482 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6599.00..6599.00 rows=2020 width=4)
                                       ->  Seq Scan on part  (cost=0.00..6599.00 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=210910.77..210910.77 rows=1 width=51)
   ->  Sort  (cost=210910.77..210910.77 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=185669.87..210910.76 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=185669.87..210455.45 rows=1 width=8)
                     ->  Nested Loop  (cost=185669.87..210455.44 rows=1 width=8)
                           ->  Hash Join  (cost=185669.45..207908.52 rows=4887 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=179045.20..195175.28 rows=483879 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 8
                                       ->  Bitmap Heap Scan on lineitem  (cost=14566.87..140754.10 rows=908482 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14339.75 rows=908482 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6599.00..6599.00 rows=2020 width=4)
                                       ->  Seq Scan on part  (cost=0.00..6599.00 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=210910.77..210910.77 rows=1 width=51)
   ->  Sort  (cost=210910.77..210910.77 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=185669.87..210910.76 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=185669.87..210455.45 rows=1 width=8)
                     ->  Nested Loop  (cost=185669.87..210455.44 rows=1 width=8)
                           ->  Hash Join  (cost=185669.45..207908.52 rows=4887 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=179045.20..195175.28 rows=483879 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 8
                                       ->  Bitmap Heap Scan on lineitem  (cost=14566.87..140754.10 rows=908482 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14339.75 rows=908482 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6599.00..6599.00 rows=2020 width=4)
                                       ->  Seq Scan on part  (cost=0.00..6599.00 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 21 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=243855.40..243855.40 rows=1 width=34)
   ->  Sort  (cost=243855.40..243855.40 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=243855.37..243855.39 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=243855.37..243855.37 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=235.37..243855.36 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=234.94..243854.89 rows=1 width=34)
                                 ->  Nested Loop Anti Join  (cost=234.51..243854.27 rows=1 width=34)
                                       ->  Hash Join  (cost=234.08..196110.23 rows=80016 width=34)
                                             Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                             ->  Seq Scan on lineitem l1  (cost=0.00..187574.54 rows=2000388 width=8)
                                                   Filter: (l_receiptdate > l_commitdate)
                                             ->  Hash  (cost=229.08..229.08 rows=400 width=30)
                                                   ->  Nested Loop  (cost=4.88..229.08 rows=400 width=30)
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                               Filter: (n_name = 'PERU'::bpchar)
                                                         ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=34)
                                                               Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                                                     Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.61 rows=1 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.60 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(31 rows)

query 21 run 2
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=243855.40..243855.40 rows=1 width=34)
   ->  Sort  (cost=243855.40..243855.40 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=243855.37..243855.39 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=243855.37..243855.37 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=235.37..243855.36 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=234.94..243854.89 rows=1 width=34)
                                 ->  Nested Loop Anti Join  (cost=234.51..243854.27 rows=1 width=34)
                                       ->  Hash Join  (cost=234.08..196110.23 rows=80016 width=34)
                                             Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                             ->  Seq Scan on lineitem l1  (cost=0.00..187574.54 rows=2000388 width=8)
                                                   Filter: (l_receiptdate > l_commitdate)
                                             ->  Hash  (cost=229.08..229.08 rows=400 width=30)
                                                   ->  Nested Loop  (cost=4.88..229.08 rows=400 width=30)
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                               Filter: (n_name = 'PERU'::bpchar)
                                                         ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=34)
                                                               Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                                                     Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.61 rows=1 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.60 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(31 rows)

query 21 run 3
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=243855.40..243855.40 rows=1 width=34)
   ->  Sort  (cost=243855.40..243855.40 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=243855.37..243855.39 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=243855.37..243855.37 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=235.37..243855.36 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=234.94..243854.89 rows=1 width=34)
                                 ->  Nested Loop Anti Join  (cost=234.51..243854.27 rows=1 width=34)
                                       ->  Hash Join  (cost=234.08..196110.23 rows=80016 width=34)
                                             Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                             ->  Seq Scan on lineitem l1  (cost=0.00..187574.54 rows=2000388 width=8)
                                                   Filter: (l_receiptdate > l_commitdate)
                                             ->  Hash  (cost=229.08..229.08 rows=400 width=30)
                                                   ->  Nested Loop  (cost=4.88..229.08 rows=400 width=30)
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                               Filter: (n_name = 'PERU'::bpchar)
                                                         ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=34)
                                                               Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                                                     Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.61 rows=1 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.60 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(31 rows)

query 22 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16081.42..16081.45 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7546.43..7546.44 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4772 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8534.98..8555.05 rows=730 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8534.98..8536.80 rows=730 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8500.26 rows=730 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.68 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 2
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16081.42..16081.45 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7546.43..7546.44 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4772 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8534.98..8555.05 rows=730 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8534.98..8536.80 rows=730 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8500.26 rows=730 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.68 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 3
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16081.42..16081.45 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7546.43..7546.44 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4772 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8534.98..8555.05 rows=730 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8534.98..8536.80 rows=730 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8500.26 rows=730 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.68 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

