query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1905903.68..1905904.36 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1905903.68..1905907.74 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1905903.68..1905906.55 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1904903.62..1904903.64 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1904903.38..1904903.55 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312598.50 rows=14807622 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1905903.68..1905904.36 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1905903.68..1905907.74 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1905903.68..1905906.55 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1904903.62..1904903.64 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1904903.38..1904903.55 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312598.50 rows=14807622 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1905903.68..1905904.36 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1905903.68..1905907.74 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1905903.68..1905906.55 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1904903.62..1904903.64 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1904903.38..1904903.55 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312598.50 rows=14807622 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=888128.71..888128.72 rows=1 width=192)
   ->  Sort  (cost=888128.71..888128.72 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=362825.42..888128.70 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68727.33 rows=8520 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.45 rows=2130 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=361824.13..369719.07 rows=1578987 width=172)
                     ->  Sort  (cost=361824.13..365771.60 rows=1578987 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..112525.44 rows=1578987 width=172)
                                 ->  Nested Loop  (cost=0.29..1278.53 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.18 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.77 rows=79 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 2 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=888128.71..888128.72 rows=1 width=192)
   ->  Sort  (cost=888128.71..888128.72 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=362825.42..888128.70 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68727.33 rows=8520 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.45 rows=2130 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=361824.13..369719.07 rows=1578987 width=172)
                     ->  Sort  (cost=361824.13..365771.60 rows=1578987 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..112525.44 rows=1578987 width=172)
                                 ->  Nested Loop  (cost=0.29..1278.53 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.18 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.77 rows=79 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 2 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=888128.71..888128.72 rows=1 width=192)
   ->  Sort  (cost=888128.71..888128.72 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=362825.42..888128.70 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68727.33 rows=8520 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.45 rows=2130 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=361824.13..369719.07 rows=1578987 width=172)
                     ->  Sort  (cost=361824.13..365771.60 rows=1578987 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..112525.44 rows=1578987 width=172)
                                 ->  Nested Loop  (cost=0.29..1278.53 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.18 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.77 rows=79 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 3 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1934195.12..1934195.14 rows=10 width=44)
   ->  Sort  (cost=1934195.12..1941892.71 rows=3079035 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1400846.75..1867658.28 rows=3079035 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1400846.75..1790682.39 rows=3079036 width=44)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1399846.69..1422939.46 rows=769759 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1399846.69..1401771.09 rows=769759 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=41567.79..1314437.42 rows=769759 width=24)
                                       ->  Parallel Hash Join  (cost=41567.22..354418.16 rows=356692 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308147.40 rows=1791817 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.16..40634.16 rows=74645 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.16 rows=74645 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(22 rows)

query 3 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1934195.12..1934195.14 rows=10 width=44)
   ->  Sort  (cost=1934195.12..1941892.71 rows=3079035 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1400846.75..1867658.28 rows=3079035 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1400846.75..1790682.39 rows=3079036 width=44)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1399846.69..1422939.46 rows=769759 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1399846.69..1401771.09 rows=769759 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=41567.79..1314437.42 rows=769759 width=24)
                                       ->  Parallel Hash Join  (cost=41567.22..354418.16 rows=356692 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308147.40 rows=1791817 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.16..40634.16 rows=74645 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.16 rows=74645 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(22 rows)

query 3 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1934195.12..1934195.14 rows=10 width=44)
   ->  Sort  (cost=1934195.12..1941892.71 rows=3079035 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1400846.75..1867658.28 rows=3079035 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1400846.75..1790682.39 rows=3079036 width=44)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1399846.69..1422939.46 rows=769759 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1399846.69..1401771.09 rows=769759 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=41567.79..1314437.42 rows=769759 width=24)
                                       ->  Parallel Hash Join  (cost=41567.22..354418.16 rows=356692 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308147.40 rows=1791817 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.16..40634.16 rows=74645 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.16 rows=74645 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(22 rows)

query 4 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=633226.04..633226.55 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=633226.04..633228.59 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Gather Merge  (cost=633226.04..633228.44 rows=20 width=24)
               Workers Planned: 4
               ->  Sort  (cost=632225.99..632226.00 rows=5 width=24)
                     Sort Key: orders.o_orderpriority
                     ->  Partial HashAggregate  (cost=632225.88..632225.93 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=8124.98..631519.10 rows=141355 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=8124.42..271513.45 rows=141402 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7983.02 rows=565608 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 4 run 2
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=633226.04..633226.55 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=633226.04..633228.59 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Gather Merge  (cost=633226.04..633228.44 rows=20 width=24)
               Workers Planned: 4
               ->  Sort  (cost=632225.99..632226.00 rows=5 width=24)
                     Sort Key: orders.o_orderpriority
                     ->  Partial HashAggregate  (cost=632225.88..632225.93 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=8124.98..631519.10 rows=141355 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=8124.42..271513.45 rows=141402 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7983.02 rows=565608 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 4 run 3
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=633226.04..633226.55 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=633226.04..633228.59 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Gather Merge  (cost=633226.04..633228.44 rows=20 width=24)
               Workers Planned: 4
               ->  Sort  (cost=632225.99..632226.00 rows=5 width=24)
                     Sort Key: orders.o_orderpriority
                     ->  Partial HashAggregate  (cost=632225.88..632225.93 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=8124.98..631519.10 rows=141355 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=8124.42..271513.45 rows=141402 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7983.02 rows=565608 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=664026.67..664026.67 rows=1 width=58)
   ->  Sort  (cost=664026.67..664026.73 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=663795.41..664026.55 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=663795.41..664025.48 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=662795.35..663013.52 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=662795.35..662838.92 rows=17428 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=78794.63..661567.63 rows=17428 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=75103.04..655514.85 rows=449749 width=50)
                                             ->  Parallel Hash Join  (cost=75102.47..347196.13 rows=112474 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=32309.71..302013.30 rows=562372 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..31747.34 rows=2249490 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.34..41855.34 rows=74994 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.34 rows=74994 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=664026.67..664026.67 rows=1 width=58)
   ->  Sort  (cost=664026.67..664026.73 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=663795.41..664026.55 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=663795.41..664025.48 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=662795.35..663013.52 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=662795.35..662838.92 rows=17428 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=78794.63..661567.63 rows=17428 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=75103.04..655514.85 rows=449749 width=50)
                                             ->  Parallel Hash Join  (cost=75102.47..347196.13 rows=112474 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=32309.71..302013.30 rows=562372 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..31747.34 rows=2249490 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.34..41855.34 rows=74994 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.34 rows=74994 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=664026.67..664026.67 rows=1 width=58)
   ->  Sort  (cost=664026.67..664026.73 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=663795.41..664026.55 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=663795.41..664025.48 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=662795.35..663013.52 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=662795.35..662838.92 rows=17428 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=78794.63..661567.63 rows=17428 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=75103.04..655514.85 rows=449749 width=50)
                                             ->  Parallel Hash Join  (cost=75102.47..347196.13 rows=112474 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=32309.71..302013.30 rows=562372 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..31747.34 rows=2249490 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.34..41855.34 rows=74994 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.34 rows=74994 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1275967.18..1275967.19 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1275967.18..1275967.19 rows=1 width=32)
         ->  Gather  (cost=1275966.75..1275967.16 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1274966.75..1274966.76 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=209893.94..1273497.09 rows=293931 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..209600.01 rows=1175724 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1275967.18..1275967.19 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1275967.18..1275967.19 rows=1 width=32)
         ->  Gather  (cost=1275966.75..1275967.16 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1274966.75..1274966.76 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=209893.94..1273497.09 rows=293931 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..209600.01 rows=1175724 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1275967.18..1275967.19 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1275967.18..1275967.19 rows=1 width=32)
         ->  Gather  (cost=1275966.75..1275967.16 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1274966.75..1274966.76 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=209893.94..1273497.09 rows=293931 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..209600.01 rows=1175724 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1166815.09..1166815.67 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1166815.09..1172710.11 rows=10040 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=1166815.09..1172032.41 rows=40160 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1165815.03..1166248.91 rows=10040 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=1165815.03..1165851.91 rows=14753 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Parallel Hash Join  (cost=44274.89..1164793.48 rows=14753 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41224.84..1159963.75 rows=365934 width=46)
                                       ->  Parallel Hash Join  (cost=41224.27..354809.68 rows=300028 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298771.52 rows=3750352 width=8)
                                             ->  Parallel Hash  (cost=40849.30..40849.30 rows=29998 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.30 rows=29998 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 7 run 2
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1166815.09..1166815.67 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1166815.09..1172710.11 rows=10040 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=1166815.09..1172032.41 rows=40160 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1165815.03..1166248.91 rows=10040 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=1165815.03..1165851.91 rows=14753 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Parallel Hash Join  (cost=44274.89..1164793.48 rows=14753 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41224.84..1159963.75 rows=365934 width=46)
                                       ->  Parallel Hash Join  (cost=41224.27..354809.68 rows=300028 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298771.52 rows=3750352 width=8)
                                             ->  Parallel Hash  (cost=40849.30..40849.30 rows=29998 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.30 rows=29998 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 7 run 3
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1166815.09..1166815.67 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1166815.09..1172710.11 rows=10040 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=1166815.09..1172032.41 rows=40160 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1165815.03..1166248.91 rows=10040 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=1165815.03..1165851.91 rows=14753 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Parallel Hash Join  (cost=44274.89..1164793.48 rows=14753 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41224.84..1159963.75 rows=365934 width=46)
                                       ->  Parallel Hash Join  (cost=41224.27..354809.68 rows=300028 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298771.52 rows=3750352 width=8)
                                             ->  Parallel Hash  (cost=40849.30..40849.30 rows=29998 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.30 rows=29998 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 8 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467470.03..467470.66 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=467470.03..468972.61 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=467470.03..468798.18 rows=9624 width=72)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=466469.97..466651.81 rows=2406 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=466469.97..466484.83 rows=5943 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=424701.44..466097.44 rows=5943 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Hash Join  (cost=424699.88..466047.91 rows=5943 width=20)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Parallel Hash Join  (cost=424697.37..465874.54 rows=29715 width=24)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=8)
                                             ->  Parallel Hash  (cost=424325.94..424325.94 rows=29715 width=24)
                                                   ->  Nested Loop  (cost=3545.54..424325.94 rows=29715 width=24)
                                                         ->  Parallel Hash Join  (cost=3545.10..191180.68 rows=96576 width=20)
                                                               Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                               ->  Nested Loop  (cost=0.56..187374.45 rows=99689 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47231.01 rows=3324 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..41.85 rows=31 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                               ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                         ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                               Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                             ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 8 run 2
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467470.03..467470.66 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=467470.03..468972.61 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=467470.03..468798.18 rows=9624 width=72)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=466469.97..466651.81 rows=2406 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=466469.97..466484.83 rows=5943 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=424701.44..466097.44 rows=5943 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Hash Join  (cost=424699.88..466047.91 rows=5943 width=20)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Parallel Hash Join  (cost=424697.37..465874.54 rows=29715 width=24)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=8)
                                             ->  Parallel Hash  (cost=424325.94..424325.94 rows=29715 width=24)
                                                   ->  Nested Loop  (cost=3545.54..424325.94 rows=29715 width=24)
                                                         ->  Parallel Hash Join  (cost=3545.10..191180.68 rows=96576 width=20)
                                                               Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                               ->  Nested Loop  (cost=0.56..187374.45 rows=99689 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47231.01 rows=3324 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..41.85 rows=31 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                               ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                         ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                               Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                             ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 8 run 3
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467470.03..467470.66 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=467470.03..468972.61 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=467470.03..468798.18 rows=9624 width=72)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=466469.97..466651.81 rows=2406 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=466469.97..466484.83 rows=5943 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=424701.44..466097.44 rows=5943 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Hash Join  (cost=424699.88..466047.91 rows=5943 width=20)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Parallel Hash Join  (cost=424697.37..465874.54 rows=29715 width=24)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=8)
                                             ->  Parallel Hash  (cost=424325.94..424325.94 rows=29715 width=24)
                                                   ->  Nested Loop  (cost=3545.54..424325.94 rows=29715 width=24)
                                                         ->  Parallel Hash Join  (cost=3545.10..191180.68 rows=96576 width=20)
                                                               Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                               ->  Nested Loop  (cost=0.56..187374.45 rows=99689 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47231.01 rows=3324 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..41.85 rows=31 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                               ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                         ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                               Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                             ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 9 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=471962.99..471963.15 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=471962.99..471985.47 rows=145 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=471962.99..471981.49 rows=144 width=66)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=470962.93..470964.28 rows=36 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=470962.93..470963.02 rows=36 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3547.53..470962.00 rows=36 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=3545.97..470960.15 rows=36 width=31)
                                       ->  Nested Loop  (cost=3545.53..470870.25 rows=36 width=31)
                                             Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                             ->  Parallel Hash Join  (cost=3544.97..145386.22 rows=119620 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.43..141523.42 rows=121240 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..47231.01 rows=30303 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..2.93 rows=18 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 9 run 2
SET
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=471962.99..471963.15 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=471962.99..471985.47 rows=145 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=471962.99..471981.49 rows=144 width=66)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=470962.93..470964.28 rows=36 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=470962.93..470963.02 rows=36 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3547.53..470962.00 rows=36 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=3545.97..470960.15 rows=36 width=31)
                                       ->  Nested Loop  (cost=3545.53..470870.25 rows=36 width=31)
                                             Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                             ->  Parallel Hash Join  (cost=3544.97..145386.22 rows=119620 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.43..141523.42 rows=121240 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..47231.01 rows=30303 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..2.93 rows=18 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 9 run 3
SET
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=471962.99..471963.15 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=471962.99..471985.47 rows=145 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=471962.99..471981.49 rows=144 width=66)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=470962.93..470964.28 rows=36 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=470962.93..470963.02 rows=36 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3547.53..470962.00 rows=36 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=3545.97..470960.15 rows=36 width=31)
                                       ->  Nested Loop  (cost=3545.53..470870.25 rows=36 width=31)
                                             Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                             ->  Parallel Hash Join  (cost=3544.97..145386.22 rows=119620 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.43..141523.42 rows=121240 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..47231.01 rows=30303 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..2.93 rows=18 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 10 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=863857.16..863857.21 rows=20 width=201)
   ->  Sort  (cost=863857.16..865345.89 rows=595495 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=759589.25..848011.25 rows=595495 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=759589.25..834612.60 rows=595496 width=201)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=758589.19..762683.23 rows=148874 width=201)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=758589.19..758961.38 rows=148874 width=181)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=702459.89..745798.14 rows=148874 width=181)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=702458.32..745339.53 rows=148874 width=159)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=147)
                                             ->  Parallel Hash  (cost=700597.40..700597.40 rows=148874 width=16)
                                                   ->  Nested Loop  (cost=8562.60..700597.40 rows=148874 width=16)
                                                         ->  Parallel Bitmap Heap Scan on orders  (cost=8562.04..272065.07 rows=149002 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                               ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8413.03 rows=596010 width=0)
                                                                     Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=16)
                                                               Index Cond: (l_orderkey = orders.o_orderkey)
                                                               Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 10 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=863857.16..863857.21 rows=20 width=201)
   ->  Sort  (cost=863857.16..865345.89 rows=595495 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=759589.25..848011.25 rows=595495 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=759589.25..834612.60 rows=595496 width=201)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=758589.19..762683.23 rows=148874 width=201)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=758589.19..758961.38 rows=148874 width=181)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=702459.89..745798.14 rows=148874 width=181)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=702458.32..745339.53 rows=148874 width=159)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=147)
                                             ->  Parallel Hash  (cost=700597.40..700597.40 rows=148874 width=16)
                                                   ->  Nested Loop  (cost=8562.60..700597.40 rows=148874 width=16)
                                                         ->  Parallel Bitmap Heap Scan on orders  (cost=8562.04..272065.07 rows=149002 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                               ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8413.03 rows=596010 width=0)
                                                                     Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=16)
                                                               Index Cond: (l_orderkey = orders.o_orderkey)
                                                               Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 10 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=863857.16..863857.21 rows=20 width=201)
   ->  Sort  (cost=863857.16..865345.89 rows=595495 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=759589.25..848011.25 rows=595495 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=759589.25..834612.60 rows=595496 width=201)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=758589.19..762683.23 rows=148874 width=201)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=758589.19..758961.38 rows=148874 width=181)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=702459.89..745798.14 rows=148874 width=181)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=702458.32..745339.53 rows=148874 width=159)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=147)
                                             ->  Parallel Hash  (cost=700597.40..700597.40 rows=148874 width=16)
                                                   ->  Nested Loop  (cost=8562.60..700597.40 rows=148874 width=16)
                                                         ->  Parallel Bitmap Heap Scan on orders  (cost=8562.04..272065.07 rows=149002 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                               ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8413.03 rows=596010 width=0)
                                                                     Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=16)
                                                               Index Cond: (l_orderkey = orders.o_orderkey)
                                                               Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 11 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=84210.17..84210.17 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=18472.69..18472.70 rows=1 width=32)
           ->  Gather  (cost=18472.57..18472.68 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17472.57..17472.58 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..16079.35 rows=185763 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.77 rows=79 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=65737.46..66000.63 rows=105266 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53368.74..65211.13 rows=105266 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53368.74..54158.24 rows=315797 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24522.84 rows=315797 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.77 rows=79 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(32 rows)

query 11 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=84210.17..84210.17 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=18472.69..18472.70 rows=1 width=32)
           ->  Gather  (cost=18472.57..18472.68 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17472.57..17472.58 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..16079.35 rows=185763 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.77 rows=79 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=65737.46..66000.63 rows=105266 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53368.74..65211.13 rows=105266 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53368.74..54158.24 rows=315797 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24522.84 rows=315797 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.77 rows=79 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(32 rows)

query 11 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=84210.17..84210.17 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=18472.69..18472.70 rows=1 width=32)
           ->  Gather  (cost=18472.57..18472.68 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17472.57..17472.58 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..16079.35 rows=185763 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.77 rows=79 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=65737.46..66000.63 rows=105266 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53368.74..65211.13 rows=105266 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53368.74..54158.24 rows=315797 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24522.84 rows=315797 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.77 rows=79 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(32 rows)

query 12 run 1
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1652182.94..1652394.10 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1652182.94..1653661.03 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=1652182.94..1653660.75 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1651182.88..1652657.35 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=1651182.88..1651367.18 rows=73720 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..1645222.71 rows=73720 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1462562.90 rows=73720 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 12 run 2
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1652182.94..1652394.10 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1652182.94..1653661.03 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=1652182.94..1653660.75 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1651182.88..1652657.35 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=1651182.88..1651367.18 rows=73720 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..1645222.71 rows=73720 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1462562.90 rows=73720 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 12 run 3
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1652182.94..1652394.10 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1652182.94..1653661.03 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=1652182.94..1653660.75 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1651182.88..1652657.35 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=1651182.88..1651367.18 rows=73720 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..1645222.71 rows=73720 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1462562.90 rows=73720 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 13 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1045875.47..1045875.48 rows=1 width=16)
   ->  Sort  (cost=1045875.47..1045875.97 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1045872.47..1045874.47 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=16.99..1023374.09 rows=1499892 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=16.99..934125.78 rows=14849879 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28672.81 rows=1499892 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716121.45 rows=14849879 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 2
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1045875.47..1045875.48 rows=1 width=16)
   ->  Sort  (cost=1045875.47..1045875.97 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1045872.47..1045874.47 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=16.99..1023374.09 rows=1499892 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=16.99..934125.78 rows=14849879 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28672.81 rows=1499892 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716121.45 rows=14849879 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 3
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1045875.47..1045875.48 rows=1 width=16)
   ->  Sort  (cost=1045875.47..1045875.97 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1045872.47..1045874.47 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=16.99..1023374.09 rows=1499892 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=16.99..934125.78 rows=14849879 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28672.81 rows=1499892 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716121.45 rows=14849879 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=856961.71..856961.73 rows=1 width=32)
   ->  Finalize Aggregate  (cost=856961.71..856961.73 rows=1 width=32)
         ->  Gather  (cost=856961.26..856961.67 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=855961.26..855961.27 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=64777.48..852536.64 rows=195692 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=12546.46..799791.93 rows=195692 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12350.77 rows=782770 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.01..45981.01 rows=500001 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.01 rows=500001 width=25)
(13 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=856961.71..856961.73 rows=1 width=32)
   ->  Finalize Aggregate  (cost=856961.71..856961.73 rows=1 width=32)
         ->  Gather  (cost=856961.26..856961.67 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=855961.26..855961.27 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=64777.48..852536.64 rows=195692 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=12546.46..799791.93 rows=195692 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12350.77 rows=782770 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.01..45981.01 rows=500001 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.01 rows=500001 width=25)
(13 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=856961.71..856961.73 rows=1 width=32)
   ->  Finalize Aggregate  (cost=856961.71..856961.73 rows=1 width=32)
         ->  Gather  (cost=856961.26..856961.67 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=855961.26..855961.27 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=64777.48..852536.64 rows=195692 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=12546.46..799791.93 rows=195692 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12350.77 rows=782770 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.01..45981.01 rows=500001 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.01 rows=500001 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2744245.25..2744357.00 rows=1 width=103)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1391307.63..1391307.64 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1388727.05..1390017.34 rows=103223 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1343050.87..1385630.36 rows=412892 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1342050.87..1343341.16 rows=103223 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=36654.69..1336332.91 rows=571796 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36082.90 rows=2287183 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352937.62..1410602.47 rows=516 width=103)
         ->  Finalize GroupAggregate  (cost=1352937.32..1409342.35 rows=516 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1352937.32..1402374.80 rows=412892 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351937.27..1352195.32 rows=103223 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1342050.87..1343341.16 rows=103223 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=36654.69..1336332.91 rows=571796 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36082.90 rows=2287183 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.43 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2744245.25..2744357.00 rows=1 width=103)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1391307.63..1391307.64 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1388727.05..1390017.34 rows=103223 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1343050.87..1385630.36 rows=412892 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1342050.87..1343341.16 rows=103223 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=36654.69..1336332.91 rows=571796 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36082.90 rows=2287183 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352937.62..1410602.47 rows=516 width=103)
         ->  Finalize GroupAggregate  (cost=1352937.32..1409342.35 rows=516 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1352937.32..1402374.80 rows=412892 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351937.27..1352195.32 rows=103223 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1342050.87..1343341.16 rows=103223 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=36654.69..1336332.91 rows=571796 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36082.90 rows=2287183 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.43 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2744245.25..2744357.00 rows=1 width=103)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1391307.63..1391307.64 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1388727.05..1390017.34 rows=103223 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1343050.87..1385630.36 rows=412892 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1342050.87..1343341.16 rows=103223 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=36654.69..1336332.91 rows=571796 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36082.90 rows=2287183 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352937.62..1410602.47 rows=516 width=103)
         ->  Finalize GroupAggregate  (cost=1352937.32..1409342.35 rows=516 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1352937.32..1402374.80 rows=412892 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351937.27..1352195.32 rows=103223 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1342050.87..1343341.16 rows=103223 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=36654.69..1336332.91 rows=571796 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36082.90 rows=2287183 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.43 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=298553.52..298553.52 rows=1 width=44)
   ->  Sort  (cost=298553.52..298940.70 rows=154873 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=288668.57..297779.15 rows=154873 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=288668.57..290180.94 rows=604948 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=58897.49..219938.30 rows=604948 width=40)
                           Workers Planned: 4
                           ->  Parallel Hash Join  (cost=57897.49..158443.50 rows=151237 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101391.86 rows=1000229 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.02..53481.02 rows=75601 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.02 rows=75601 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=298553.52..298553.52 rows=1 width=44)
   ->  Sort  (cost=298553.52..298940.70 rows=154873 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=288668.57..297779.15 rows=154873 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=288668.57..290180.94 rows=604948 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=58897.49..219938.30 rows=604948 width=40)
                           Workers Planned: 4
                           ->  Parallel Hash Join  (cost=57897.49..158443.50 rows=151237 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101391.86 rows=1000229 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.02..53481.02 rows=75601 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.02 rows=75601 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=298553.52..298553.52 rows=1 width=44)
   ->  Sort  (cost=298553.52..298940.70 rows=154873 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=288668.57..297779.15 rows=154873 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=288668.57..290180.94 rows=604948 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=58897.49..219938.30 rows=604948 width=40)
                           Workers Planned: 4
                           ->  Parallel Hash Join  (cost=57897.49..158443.50 rows=151237 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101391.86 rows=1000229 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.02..53481.02 rows=75601 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.02 rows=75601 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4489885.78..4489885.80 rows=1 width=32)
   ->  Aggregate  (cost=4489885.78..4489885.80 rows=1 width=32)
         ->  Merge Join  (cost=3229299.19..4489836.01 rows=19910 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=3228298.14..4364702.75 rows=1917695 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=3228298.14..4278406.48 rows=7670780 width=36)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=3227298.09..3363742.57 rows=1917695 width=36)
                                 Group Key: lineitem_1.l_partkey
                                 ->  Sort  (cost=3227298.09..3264789.19 rows=14996440 width=9)
                                       Sort Key: lineitem_1.l_partkey
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275107.40 rows=14996440 width=9)
               ->  Materialize  (cost=1001.05..100259.69 rows=62295 width=21)
                     ->  Gather Merge  (cost=1001.05..100103.95 rows=62295 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.99..91683.96 rows=15574 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.45 rows=519 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..47.80 rows=31 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(22 rows)

query 17 run 2
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4489885.78..4489885.80 rows=1 width=32)
   ->  Aggregate  (cost=4489885.78..4489885.80 rows=1 width=32)
         ->  Merge Join  (cost=3229299.19..4489836.01 rows=19910 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=3228298.14..4364702.75 rows=1917695 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=3228298.14..4278406.48 rows=7670780 width=36)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=3227298.09..3363742.57 rows=1917695 width=36)
                                 Group Key: lineitem_1.l_partkey
                                 ->  Sort  (cost=3227298.09..3264789.19 rows=14996440 width=9)
                                       Sort Key: lineitem_1.l_partkey
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275107.40 rows=14996440 width=9)
               ->  Materialize  (cost=1001.05..100259.69 rows=62295 width=21)
                     ->  Gather Merge  (cost=1001.05..100103.95 rows=62295 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.99..91683.96 rows=15574 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.45 rows=519 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..47.80 rows=31 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(22 rows)

query 17 run 3
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4489885.78..4489885.80 rows=1 width=32)
   ->  Aggregate  (cost=4489885.78..4489885.80 rows=1 width=32)
         ->  Merge Join  (cost=3229299.19..4489836.01 rows=19910 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=3228298.14..4364702.75 rows=1917695 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=3228298.14..4278406.48 rows=7670780 width=36)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=3227298.09..3363742.57 rows=1917695 width=36)
                                 Group Key: lineitem_1.l_partkey
                                 ->  Sort  (cost=3227298.09..3264789.19 rows=14996440 width=9)
                                       Sort Key: lineitem_1.l_partkey
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275107.40 rows=14996440 width=9)
               ->  Materialize  (cost=1001.05..100259.69 rows=62295 width=21)
                     ->  Gather Merge  (cost=1001.05..100103.95 rows=62295 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.99..91683.96 rows=15574 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.45 rows=519 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..47.80 rows=31 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(22 rows)

query 18 run 1
SET
SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=9254693.63..9254693.88 rows=100 width=71)
   ->  Sort  (cost=9254693.63..9304665.20 rows=19988630 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=5547723.54..8490742.56 rows=19988630 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=5547723.54..8040998.37 rows=19988632 width=71)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=5546723.48..5659159.54 rows=4997158 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=5546723.48..5559216.38 rows=4997158 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Parallel Hash Join  (cost=3390629.59..4891900.53 rows=4997158 width=44)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1275107.40 rows=14996440 width=9)
                                       ->  Parallel Hash  (cost=3364024.31..3364024.31 rows=1249703 width=43)
                                             ->  Parallel Hash Join  (cost=44384.89..3364024.31 rows=1249703 width=43)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Merge Join  (cost=1.00..3316359.93 rows=1249703 width=24)
                                                         Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                         ->  Parallel Index Scan using orders_pkey on orders  (cost=0.43..435476.00 rows=3750352 width=20)
                                                         ->  GroupAggregate  (cost=0.56..2796525.86 rows=4998813 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                               ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271650.46 rows=59985760 width=9)
                                                   ->  Parallel Hash  (cost=39696.73..39696.73 rows=374973 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=23)
(26 rows)

query 18 run 2
SET
SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=9254693.63..9254693.88 rows=100 width=71)
   ->  Sort  (cost=9254693.63..9304665.20 rows=19988630 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=5547723.54..8490742.56 rows=19988630 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=5547723.54..8040998.37 rows=19988632 width=71)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=5546723.48..5659159.54 rows=4997158 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=5546723.48..5559216.38 rows=4997158 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Parallel Hash Join  (cost=3390629.59..4891900.53 rows=4997158 width=44)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1275107.40 rows=14996440 width=9)
                                       ->  Parallel Hash  (cost=3364024.31..3364024.31 rows=1249703 width=43)
                                             ->  Parallel Hash Join  (cost=44384.89..3364024.31 rows=1249703 width=43)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Merge Join  (cost=1.00..3316359.93 rows=1249703 width=24)
                                                         Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                         ->  Parallel Index Scan using orders_pkey on orders  (cost=0.43..435476.00 rows=3750352 width=20)
                                                         ->  GroupAggregate  (cost=0.56..2796525.86 rows=4998813 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                               ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271650.46 rows=59985760 width=9)
                                                   ->  Parallel Hash  (cost=39696.73..39696.73 rows=374973 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=23)
(26 rows)

query 18 run 3
SET
SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=9254693.63..9254693.88 rows=100 width=71)
   ->  Sort  (cost=9254693.63..9304665.20 rows=19988630 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=5547723.54..8490742.56 rows=19988630 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=5547723.54..8040998.37 rows=19988632 width=71)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=5546723.48..5659159.54 rows=4997158 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=5546723.48..5559216.38 rows=4997158 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Parallel Hash Join  (cost=3390629.59..4891900.53 rows=4997158 width=44)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1275107.40 rows=14996440 width=9)
                                       ->  Parallel Hash  (cost=3364024.31..3364024.31 rows=1249703 width=43)
                                             ->  Parallel Hash Join  (cost=44384.89..3364024.31 rows=1249703 width=43)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Merge Join  (cost=1.00..3316359.93 rows=1249703 width=24)
                                                         Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                         ->  Parallel Index Scan using orders_pkey on orders  (cost=0.43..435476.00 rows=3750352 width=20)
                                                         ->  GroupAggregate  (cost=0.56..2796525.86 rows=4998813 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                               ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271650.46 rows=59985760 width=9)
                                                   ->  Parallel Hash  (cost=39696.73..39696.73 rows=374973 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.73 rows=374973 width=23)
(26 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=122924.34..122924.35 rows=1 width=32)
   ->  Finalize Aggregate  (cost=122924.34..122924.35 rows=1 width=32)
         ->  Gather  (cost=122923.90..122924.31 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=121923.90..121923.91 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..121921.70 rows=293 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.03 rows=1240 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..48.13 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=122924.34..122924.35 rows=1 width=32)
   ->  Finalize Aggregate  (cost=122924.34..122924.35 rows=1 width=32)
         ->  Gather  (cost=122923.90..122924.31 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=121923.90..121923.91 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..121921.70 rows=293 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.03 rows=1240 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..48.13 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=122924.34..122924.35 rows=1 width=32)
   ->  Finalize Aggregate  (cost=122924.34..122924.35 rows=1 width=32)
         ->  Gather  (cost=122923.90..122924.31 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=121923.90..121923.91 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..121921.70 rows=293 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.03 rows=1240 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..48.13 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3116429.42..3116429.42 rows=1 width=51)
   ->  Sort  (cost=3116429.42..3116429.42 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=1619436.22..3116429.41 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=1619436.22..3111597.11 rows=6 width=8)
                     ->  Nested Loop  (cost=1619436.22..3111597.08 rows=6 width=8)
                           ->  Merge Join  (cost=1619435.79..3059753.80 rows=98115 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  Finalize GroupAggregate  (cost=1618435.30..2926688.02 rows=4856688 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Gather Merge  (cost=1618435.30..2762146.18 rows=9169152 width=40)
                                             Workers Planned: 4
                                             ->  Partial GroupAggregate  (cost=1617435.24..1669011.72 rows=2292288 width=40)
                                                   Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                                   ->  Sort  (cost=1617435.24..1623165.96 rows=2292288 width=13)
                                                         Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..1350089.60 rows=2292288 width=13)
                                                               Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Gather Merge  (cost=1000.49..71275.02 rows=40404 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Index Scan using part_pkey on part  (cost=0.43..65462.45 rows=10101 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(31 rows)

query 20 run 2
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3116429.42..3116429.42 rows=1 width=51)
   ->  Sort  (cost=3116429.42..3116429.42 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=1619436.22..3116429.41 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=1619436.22..3111597.11 rows=6 width=8)
                     ->  Nested Loop  (cost=1619436.22..3111597.08 rows=6 width=8)
                           ->  Merge Join  (cost=1619435.79..3059753.80 rows=98115 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  Finalize GroupAggregate  (cost=1618435.30..2926688.02 rows=4856688 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Gather Merge  (cost=1618435.30..2762146.18 rows=9169152 width=40)
                                             Workers Planned: 4
                                             ->  Partial GroupAggregate  (cost=1617435.24..1669011.72 rows=2292288 width=40)
                                                   Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                                   ->  Sort  (cost=1617435.24..1623165.96 rows=2292288 width=13)
                                                         Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..1350089.60 rows=2292288 width=13)
                                                               Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Gather Merge  (cost=1000.49..71275.02 rows=40404 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Index Scan using part_pkey on part  (cost=0.43..65462.45 rows=10101 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(31 rows)

query 20 run 3
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3116429.42..3116429.42 rows=1 width=51)
   ->  Sort  (cost=3116429.42..3116429.42 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=1619436.22..3116429.41 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=1619436.22..3111597.11 rows=6 width=8)
                     ->  Nested Loop  (cost=1619436.22..3111597.08 rows=6 width=8)
                           ->  Merge Join  (cost=1619435.79..3059753.80 rows=98115 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  Finalize GroupAggregate  (cost=1618435.30..2926688.02 rows=4856688 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Gather Merge  (cost=1618435.30..2762146.18 rows=9169152 width=40)
                                             Workers Planned: 4
                                             ->  Partial GroupAggregate  (cost=1617435.24..1669011.72 rows=2292288 width=40)
                                                   Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                                   ->  Sort  (cost=1617435.24..1623165.96 rows=2292288 width=13)
                                                         Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..1350089.60 rows=2292288 width=13)
                                                               Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Gather Merge  (cost=1000.49..71275.02 rows=40404 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Index Scan using part_pkey on part  (cost=0.43..65462.45 rows=10101 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(31 rows)

query 21 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1892171.07..1892171.07 rows=1 width=34)
   ->  Sort  (cost=1892171.07..1892171.07 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1892171.04..1892171.06 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1892171.04..1892171.04 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1892171.03 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1892167.78 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1892164.76 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1891164.66 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335504.10 rows=193709 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312598.50 rows=4998813 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1892171.07..1892171.07 rows=1 width=34)
   ->  Sort  (cost=1892171.07..1892171.07 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1892171.04..1892171.06 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1892171.04..1892171.04 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1892171.03 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1892167.78 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1892164.76 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1891164.66 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335504.10 rows=193709 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312598.50 rows=4998813 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1892171.07..1892171.07 rows=1 width=34)
   ->  Sort  (cost=1892171.07..1892171.07 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1892171.04..1892171.06 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1892171.04..1892171.04 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1892171.03 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1892167.78 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1892164.76 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1891164.66 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335504.10 rows=193709 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312598.50 rows=4998813 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 22 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=96260.72..96260.87 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46820.31..46820.32 rows=1 width=32)
           ->  Gather  (cost=46819.88..46820.29 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45819.88..45819.89 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.04 rows=11933 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Finalize GroupAggregate  (cost=49440.40..50573.13 rows=7381 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Gather Merge  (cost=49440.40..50370.17 rows=7380 width=72)
               Workers Planned: 4
               Params Evaluated: $1
               ->  Partial GroupAggregate  (cost=48440.34..48491.08 rows=1845 width=72)
                     Group Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Sort  (cost=48440.34..48444.95 rows=1845 width=38)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Nested Loop Anti Join  (cost=0.43..48340.26 rows=1845 width=38)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..45790.04 rows=4375 width=26)
                                       Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                                 ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.97 rows=17 width=4)
                                       Index Cond: (o_custkey = customer.c_custkey)
(22 rows)

query 22 run 2
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=96260.72..96260.87 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46820.31..46820.32 rows=1 width=32)
           ->  Gather  (cost=46819.88..46820.29 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45819.88..45819.89 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.04 rows=11933 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Finalize GroupAggregate  (cost=49440.40..50573.13 rows=7381 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Gather Merge  (cost=49440.40..50370.17 rows=7380 width=72)
               Workers Planned: 4
               Params Evaluated: $1
               ->  Partial GroupAggregate  (cost=48440.34..48491.08 rows=1845 width=72)
                     Group Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Sort  (cost=48440.34..48444.95 rows=1845 width=38)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Nested Loop Anti Join  (cost=0.43..48340.26 rows=1845 width=38)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..45790.04 rows=4375 width=26)
                                       Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                                 ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.97 rows=17 width=4)
                                       Index Cond: (o_custkey = customer.c_custkey)
(22 rows)

query 22 run 3
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=96260.72..96260.87 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46820.31..46820.32 rows=1 width=32)
           ->  Gather  (cost=46819.88..46820.29 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45819.88..45819.89 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.04 rows=11933 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Finalize GroupAggregate  (cost=49440.40..50573.13 rows=7381 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Gather Merge  (cost=49440.40..50370.17 rows=7380 width=72)
               Workers Planned: 4
               Params Evaluated: $1
               ->  Partial GroupAggregate  (cost=48440.34..48491.08 rows=1845 width=72)
                     Group Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Sort  (cost=48440.34..48444.95 rows=1845 width=38)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Nested Loop Anti Join  (cost=0.43..48340.26 rows=1845 width=38)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..45790.04 rows=4375 width=26)
                                       Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                                 ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.97 rows=17 width=4)
                                       Index Cond: (o_custkey = customer.c_custkey)
(22 rows)

