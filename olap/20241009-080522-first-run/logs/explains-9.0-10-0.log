query 1 run 1
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3418323.90..3418323.90 rows=1 width=33)
   ->  Sort  (cost=3418323.90..3418323.91 rows=6 width=33)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3418323.60..3418323.87 rows=6 width=33)
               ->  Seq Scan on lineitem  (cost=0.00..1935051.50 rows=59330884 width=33)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(6 rows)

query 1 run 2
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3418323.90..3418323.90 rows=1 width=33)
   ->  Sort  (cost=3418323.90..3418323.91 rows=6 width=33)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3418323.60..3418323.87 rows=6 width=33)
               ->  Seq Scan on lineitem  (cost=0.00..1935051.50 rows=59330884 width=33)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(6 rows)

query 1 run 3
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3418323.90..3418323.90 rows=1 width=33)
   ->  Sort  (cost=3418323.90..3418323.91 rows=6 width=33)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3418323.60..3418323.87 rows=6 width=33)
               ->  Seq Scan on lineitem  (cost=0.00..1935051.50 rows=59330884 width=33)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(6 rows)

query 2 run 1
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1117250.23..1117250.23 rows=1 width=194)
   ->  Sort  (cost=1117250.23..1117250.23 rows=1 width=194)
         Sort Key: public.supplier.s_acctbal, public.nation.n_name, public.supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=561044.01..1117250.22 rows=1 width=194)
               Merge Cond: (part.p_partkey = public.partsupp.ps_partkey)
               Join Filter: (public.partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.00..89789.65 rows=8176 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=561043.73..569043.66 rows=1599986 width=176)
                     ->  Sort  (cost=561043.73..565043.70 rows=1599986 width=176)
                           Sort Key: public.partsupp.ps_partkey
                           ->  Hash Join  (cost=4073.53..308276.40 rows=1599986 width=176)
                                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..258203.28 rows=7999928 width=16)
                                 ->  Hash  (cost=3823.53..3823.53 rows=20000 width=168)
                                       ->  Hash Join  (cost=2.53..3823.53 rows=20000 width=168)
                                             Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=146)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (public.nation.n_regionkey = public.region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=69.45..69.46 rows=1 width=8)
                       ->  Nested Loop  (cost=1.56..69.43 rows=4 width=8)
                             Join Filter: (public.nation.n_regionkey = public.region.r_regionkey)
                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=1.56..68.13 rows=19 width=12)
                                   Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                   ->  Nested Loop  (cost=0.00..66.31 rows=19 width=12)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.91 rows=19 width=12)
                                               Index Cond: ($0 = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.27 rows=1 width=8)
                                               Index Cond: (public.supplier.s_suppkey = public.partsupp.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
(40 rows)

query 2 run 2
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1117250.23..1117250.23 rows=1 width=194)
   ->  Sort  (cost=1117250.23..1117250.23 rows=1 width=194)
         Sort Key: public.supplier.s_acctbal, public.nation.n_name, public.supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=561044.01..1117250.22 rows=1 width=194)
               Merge Cond: (part.p_partkey = public.partsupp.ps_partkey)
               Join Filter: (public.partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.00..89789.65 rows=8176 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=561043.73..569043.66 rows=1599986 width=176)
                     ->  Sort  (cost=561043.73..565043.70 rows=1599986 width=176)
                           Sort Key: public.partsupp.ps_partkey
                           ->  Hash Join  (cost=4073.53..308276.40 rows=1599986 width=176)
                                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..258203.28 rows=7999928 width=16)
                                 ->  Hash  (cost=3823.53..3823.53 rows=20000 width=168)
                                       ->  Hash Join  (cost=2.53..3823.53 rows=20000 width=168)
                                             Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=146)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (public.nation.n_regionkey = public.region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=69.45..69.46 rows=1 width=8)
                       ->  Nested Loop  (cost=1.56..69.43 rows=4 width=8)
                             Join Filter: (public.nation.n_regionkey = public.region.r_regionkey)
                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=1.56..68.13 rows=19 width=12)
                                   Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                   ->  Nested Loop  (cost=0.00..66.31 rows=19 width=12)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.91 rows=19 width=12)
                                               Index Cond: ($0 = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.27 rows=1 width=8)
                                               Index Cond: (public.supplier.s_suppkey = public.partsupp.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
(40 rows)

query 2 run 3
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1117250.23..1117250.23 rows=1 width=194)
   ->  Sort  (cost=1117250.23..1117250.23 rows=1 width=194)
         Sort Key: public.supplier.s_acctbal, public.nation.n_name, public.supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=561044.01..1117250.22 rows=1 width=194)
               Merge Cond: (part.p_partkey = public.partsupp.ps_partkey)
               Join Filter: (public.partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.00..89789.65 rows=8176 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=561043.73..569043.66 rows=1599986 width=176)
                     ->  Sort  (cost=561043.73..565043.70 rows=1599986 width=176)
                           Sort Key: public.partsupp.ps_partkey
                           ->  Hash Join  (cost=4073.53..308276.40 rows=1599986 width=176)
                                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..258203.28 rows=7999928 width=16)
                                 ->  Hash  (cost=3823.53..3823.53 rows=20000 width=168)
                                       ->  Hash Join  (cost=2.53..3823.53 rows=20000 width=168)
                                             Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=146)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (public.nation.n_regionkey = public.region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=69.45..69.46 rows=1 width=8)
                       ->  Nested Loop  (cost=1.56..69.43 rows=4 width=8)
                             Join Filter: (public.nation.n_regionkey = public.region.r_regionkey)
                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=1.56..68.13 rows=19 width=12)
                                   Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                   ->  Nested Loop  (cost=0.00..66.31 rows=19 width=12)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.91 rows=19 width=12)
                                               Index Cond: ($0 = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.27 rows=1 width=8)
                                               Index Cond: (public.supplier.s_suppkey = public.partsupp.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=8)
(40 rows)

query 3 run 1
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3663136.78..3663136.80 rows=10 width=28)
   ->  Sort  (cost=3663136.78..3670935.33 rows=3119423 width=28)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         ->  GroupAggregate  (cost=3502144.48..3595727.17 rows=3119423 width=28)
               ->  Sort  (cost=3502144.48..3509943.04 rows=3119423 width=28)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=642597.53..3117689.04 rows=3119423 width=28)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1935051.50 rows=32439676 width=20)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=617524.64..617524.64 rows=1442391 width=12)
                                 ->  Hash Join  (cost=144718.84..617524.64 rows=1442391 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=85915.87..444718.48 rows=7242129 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..84105.33 rows=7242129 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=55068.50..55068.50 rows=298758 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..55068.50 rows=298758 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 2
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3663136.78..3663136.80 rows=10 width=28)
   ->  Sort  (cost=3663136.78..3670935.33 rows=3119423 width=28)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         ->  GroupAggregate  (cost=3502144.48..3595727.17 rows=3119423 width=28)
               ->  Sort  (cost=3502144.48..3509943.04 rows=3119423 width=28)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=642597.53..3117689.04 rows=3119423 width=28)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1935051.50 rows=32439676 width=20)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=617524.64..617524.64 rows=1442391 width=12)
                                 ->  Hash Join  (cost=144718.84..617524.64 rows=1442391 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=85915.87..444718.48 rows=7242129 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..84105.33 rows=7242129 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=55068.50..55068.50 rows=298758 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..55068.50 rows=298758 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 3
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3663136.78..3663136.80 rows=10 width=28)
   ->  Sort  (cost=3663136.78..3670935.33 rows=3119423 width=28)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         ->  GroupAggregate  (cost=3502144.48..3595727.17 rows=3119423 width=28)
               ->  Sort  (cost=3502144.48..3509943.04 rows=3119423 width=28)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=642597.53..3117689.04 rows=3119423 width=28)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1935051.50 rows=32439676 width=20)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=617524.64..617524.64 rows=1442391 width=12)
                                 ->  Hash Join  (cost=144718.84..617524.64 rows=1442391 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=85915.87..444718.48 rows=7242129 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..84105.33 rows=7242129 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=55068.50..55068.50 rows=298758 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..55068.50 rows=298758 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 4 run 1
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2998329.19..2998329.19 rows=1 width=16)
   ->  Sort  (cost=2998329.19..2998329.19 rows=1 width=16)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=2998329.17..2998329.18 rows=1 width=16)
               ->  Nested Loop Semi Join  (cost=7861.98..2995593.37 rows=547159 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=7861.98..284347.16 rows=547279 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7725.16 rows=547279 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..5.77 rows=1 width=4)
                           Index Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           Filter: (lineitem.l_commitdate < lineitem.l_receiptdate)
(12 rows)

query 4 run 2
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2998329.19..2998329.19 rows=1 width=16)
   ->  Sort  (cost=2998329.19..2998329.19 rows=1 width=16)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=2998329.17..2998329.18 rows=1 width=16)
               ->  Nested Loop Semi Join  (cost=7861.98..2995593.37 rows=547159 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=7861.98..284347.16 rows=547279 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7725.16 rows=547279 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..5.77 rows=1 width=4)
                           Index Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           Filter: (lineitem.l_commitdate < lineitem.l_receiptdate)
(12 rows)

query 4 run 3
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2998329.19..2998329.19 rows=1 width=16)
   ->  Sort  (cost=2998329.19..2998329.19 rows=1 width=16)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=2998329.17..2998329.18 rows=1 width=16)
               ->  Nested Loop Semi Join  (cost=7861.98..2995593.37 rows=547159 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=7861.98..284347.16 rows=547279 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7725.16 rows=547279 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..5.77 rows=1 width=4)
                           Index Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           Filter: (lineitem.l_commitdate < lineitem.l_receiptdate)
(12 rows)

query 5 run 1
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3007447.39..3007447.39 rows=1 width=42)
   ->  Sort  (cost=3007447.39..3007447.45 rows=25 width=42)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  HashAggregate  (cost=3007446.83..3007447.27 rows=25 width=42)
               ->  Hash Join  (cost=460422.53..3007080.94 rows=73177 width=42)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Merge Join  (cost=455676.53..2964904.63 rows=1834927 width=54)
                           Merge Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2331739.82 rows=59986040 width=24)
                           ->  Sort  (cost=455676.28..456823.36 rows=458832 width=38)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=96648.78..412528.62 rows=458832 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=32952.52..335640.93 rows=2294161 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..32378.98 rows=2294161 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59946.16..59946.16 rows=300008 width=38)
                                             ->  Hash Join  (cost=2.53..59946.16 rows=300008 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=8)
                                                   ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=3246.00..3246.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=8)
(30 rows)

query 5 run 2
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3007447.39..3007447.39 rows=1 width=42)
   ->  Sort  (cost=3007447.39..3007447.45 rows=25 width=42)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  HashAggregate  (cost=3007446.83..3007447.27 rows=25 width=42)
               ->  Hash Join  (cost=460422.53..3007080.94 rows=73177 width=42)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Merge Join  (cost=455676.53..2964904.63 rows=1834927 width=54)
                           Merge Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2331739.82 rows=59986040 width=24)
                           ->  Sort  (cost=455676.28..456823.36 rows=458832 width=38)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=96648.78..412528.62 rows=458832 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=32952.52..335640.93 rows=2294161 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..32378.98 rows=2294161 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59946.16..59946.16 rows=300008 width=38)
                                             ->  Hash Join  (cost=2.53..59946.16 rows=300008 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=8)
                                                   ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=3246.00..3246.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=8)
(30 rows)

query 5 run 3
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3007447.39..3007447.39 rows=1 width=42)
   ->  Sort  (cost=3007447.39..3007447.45 rows=25 width=42)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  HashAggregate  (cost=3007446.83..3007447.27 rows=25 width=42)
               ->  Hash Join  (cost=460422.53..3007080.94 rows=73177 width=42)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Merge Join  (cost=455676.53..2964904.63 rows=1834927 width=54)
                           Merge Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2331739.82 rows=59986040 width=24)
                           ->  Sort  (cost=455676.28..456823.36 rows=458832 width=38)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=96648.78..412528.62 rows=458832 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=32952.52..335640.93 rows=2294161 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..32378.98 rows=2294161 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59946.16..59946.16 rows=300008 width=38)
                                             ->  Hash Join  (cost=2.53..59946.16 rows=300008 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=8)
                                                   ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Hash  (cost=3246.00..3246.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=8)
(30 rows)

query 6 run 1
SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1113019.88..1113019.89 rows=1 width=16)
   ->  Aggregate  (cost=1113019.88..1113019.89 rows=1 width=16)
         ->  Bitmap Heap Scan on lineitem  (cost=224809.74..1110080.98 rows=1175560 width=16)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..224515.85 rows=1175560 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(6 rows)

query 6 run 2
SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1113019.88..1113019.89 rows=1 width=16)
   ->  Aggregate  (cost=1113019.88..1113019.89 rows=1 width=16)
         ->  Bitmap Heap Scan on lineitem  (cost=224809.74..1110080.98 rows=1175560 width=16)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..224515.85 rows=1175560 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(6 rows)

query 6 run 3
SET
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1113019.88..1113019.89 rows=1 width=16)
   ->  Aggregate  (cost=1113019.88..1113019.89 rows=1 width=16)
         ->  Bitmap Heap Scan on lineitem  (cost=224809.74..1110080.98 rows=1175560 width=16)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..224515.85 rows=1175560 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < 25::numeric))
(6 rows)

query 7 run 1
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2737012.77..2737012.77 rows=1 width=72)
   ->  Sort  (cost=2737012.77..2737158.45 rows=58271 width=72)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2735410.32..2736721.42 rows=58271 width=72)
               ->  Hash Join  (cost=899338.79..2734827.61 rows=58271 width=72)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (n1.n_nationkey = supplier.s_nationkey))
                     ->  Hash Join  (cost=894592.79..2699983.02 rows=1461226 width=80)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=320551.57..1779976.76 rows=18279946 width=28)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..315981.58 rows=18279946 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=546172.43..546172.43 rows=1199023 width=60)
                                 ->  Hash Join  (cost=59659.07..546172.43 rows=1199023 width=60)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..418273.93 rows=14999793 width=8)
                                       ->  Hash  (cost=58160.23..58160.23 rows=119907 width=60)
                                             ->  Hash Join  (cost=16.65..58160.23 rows=119907 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=8)
                                                   ->  Hash  (cost=16.62..16.62 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..16.62 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=30)
                                                               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
                     ->  Hash  (cost=3246.00..3246.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=8)
(28 rows)

query 7 run 2
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2737012.77..2737012.77 rows=1 width=72)
   ->  Sort  (cost=2737012.77..2737158.45 rows=58271 width=72)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2735410.32..2736721.42 rows=58271 width=72)
               ->  Hash Join  (cost=899338.79..2734827.61 rows=58271 width=72)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (n1.n_nationkey = supplier.s_nationkey))
                     ->  Hash Join  (cost=894592.79..2699983.02 rows=1461226 width=80)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=320551.57..1779976.76 rows=18279946 width=28)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..315981.58 rows=18279946 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=546172.43..546172.43 rows=1199023 width=60)
                                 ->  Hash Join  (cost=59659.07..546172.43 rows=1199023 width=60)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..418273.93 rows=14999793 width=8)
                                       ->  Hash  (cost=58160.23..58160.23 rows=119907 width=60)
                                             ->  Hash Join  (cost=16.65..58160.23 rows=119907 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=8)
                                                   ->  Hash  (cost=16.62..16.62 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..16.62 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=30)
                                                               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
                     ->  Hash  (cost=3246.00..3246.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=8)
(28 rows)

query 7 run 3
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2737012.77..2737012.77 rows=1 width=72)
   ->  Sort  (cost=2737012.77..2737158.45 rows=58271 width=72)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2735410.32..2736721.42 rows=58271 width=72)
               ->  Hash Join  (cost=899338.79..2734827.61 rows=58271 width=72)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (n1.n_nationkey = supplier.s_nationkey))
                     ->  Hash Join  (cost=894592.79..2699983.02 rows=1461226 width=80)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=320551.57..1779976.76 rows=18279946 width=28)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..315981.58 rows=18279946 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=546172.43..546172.43 rows=1199023 width=60)
                                 ->  Hash Join  (cost=59659.07..546172.43 rows=1199023 width=60)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..418273.93 rows=14999793 width=8)
                                       ->  Hash  (cost=58160.23..58160.23 rows=119907 width=60)
                                             ->  Hash Join  (cost=16.65..58160.23 rows=119907 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=8)
                                                   ->  Hash  (cost=16.62..16.62 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..16.62 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=30)
                                                               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
                     ->  Hash  (cost=3246.00..3246.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=8)
(28 rows)

query 8 run 1
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1291870.68..1291870.68 rows=1 width=46)
   ->  Sort  (cost=1291870.68..1291872.51 rows=731 width=46)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1291841.44..1291867.02 rows=731 width=46)
               ->  Hash Join  (cost=511434.69..1291659.75 rows=24225 width=46)
                     Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=511433.13..1291203.97 rows=24225 width=24)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=506937.13..1286222.75 rows=24298 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.00..769294.00 rows=399904 width=24)
                                       ->  Seq Scan on part  (cost=0.00..66558.57 rows=13333 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..52.31 rows=32 width=28)
                                             Index Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  Hash  (cost=491983.66..491983.66 rows=911397 width=8)
                                       ->  Hash Join  (cost=129150.22..491983.66 rows=911397 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=65453.96..402084.74 rows=4556985 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..64314.72 rows=4556985 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59946.16..59946.16 rows=300008 width=4)
                                                   ->  Hash Join  (cost=2.53..59946.16 rows=300008 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=8)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3246.00..3246.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(37 rows)

query 8 run 2
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1291870.68..1291870.68 rows=1 width=46)
   ->  Sort  (cost=1291870.68..1291872.51 rows=731 width=46)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1291841.44..1291867.02 rows=731 width=46)
               ->  Hash Join  (cost=511434.69..1291659.75 rows=24225 width=46)
                     Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=511433.13..1291203.97 rows=24225 width=24)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=506937.13..1286222.75 rows=24298 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.00..769294.00 rows=399904 width=24)
                                       ->  Seq Scan on part  (cost=0.00..66558.57 rows=13333 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..52.31 rows=32 width=28)
                                             Index Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  Hash  (cost=491983.66..491983.66 rows=911397 width=8)
                                       ->  Hash Join  (cost=129150.22..491983.66 rows=911397 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=65453.96..402084.74 rows=4556985 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..64314.72 rows=4556985 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59946.16..59946.16 rows=300008 width=4)
                                                   ->  Hash Join  (cost=2.53..59946.16 rows=300008 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=8)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3246.00..3246.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(37 rows)

query 8 run 3
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1291870.68..1291870.68 rows=1 width=46)
   ->  Sort  (cost=1291870.68..1291872.51 rows=731 width=46)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1291841.44..1291867.02 rows=731 width=46)
               ->  Hash Join  (cost=511434.69..1291659.75 rows=24225 width=46)
                     Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=511433.13..1291203.97 rows=24225 width=24)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=506937.13..1286222.75 rows=24298 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.00..769294.00 rows=399904 width=24)
                                       ->  Seq Scan on part  (cost=0.00..66558.57 rows=13333 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..52.31 rows=32 width=28)
                                             Index Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  Hash  (cost=491983.66..491983.66 rows=911397 width=8)
                                       ->  Hash Join  (cost=129150.22..491983.66 rows=911397 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=65453.96..402084.74 rows=4556985 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..64314.72 rows=4556985 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59946.16..59946.16 rows=300008 width=4)
                                                   ->  Hash Join  (cost=2.53..59946.16 rows=300008 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=8)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3246.00..3246.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3246.00 rows=100000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(37 rows)

query 9 run 1
SET
SET
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1158819.62..1158819.62 rows=1 width=61)
   ->  Sort  (cost=1158819.62..1158819.74 rows=51 width=61)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1158817.96..1158819.36 rows=51 width=61)
               ->  Nested Loop  (cost=0.00..1158817.58 rows=51 width=61)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=0.00..1158796.88 rows=51 width=39)
                           ->  Nested Loop  (cost=0.00..1158599.60 rows=51 width=39)
                                 ->  Nested Loop  (cost=0.00..1158433.64 rows=51 width=43)
                                       ->  Nested Loop  (cost=0.00..233037.84 rows=161613 width=20)
                                             ->  Seq Scan on part  (cost=0.00..66558.57 rows=40403 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.88 rows=19 width=16)
                                                   Index Cond: (partsupp.ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..5.71 rows=1 width=35)
                                             Index Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.24 rows=1 width=8)
                                       Index Cond: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..3.86 rows=1 width=8)
                                 Index Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 9 run 2
SET
SET
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1158819.62..1158819.62 rows=1 width=61)
   ->  Sort  (cost=1158819.62..1158819.74 rows=51 width=61)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1158817.96..1158819.36 rows=51 width=61)
               ->  Nested Loop  (cost=0.00..1158817.58 rows=51 width=61)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=0.00..1158796.88 rows=51 width=39)
                           ->  Nested Loop  (cost=0.00..1158599.60 rows=51 width=39)
                                 ->  Nested Loop  (cost=0.00..1158433.64 rows=51 width=43)
                                       ->  Nested Loop  (cost=0.00..233037.84 rows=161613 width=20)
                                             ->  Seq Scan on part  (cost=0.00..66558.57 rows=40403 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.88 rows=19 width=16)
                                                   Index Cond: (partsupp.ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..5.71 rows=1 width=35)
                                             Index Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.24 rows=1 width=8)
                                       Index Cond: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..3.86 rows=1 width=8)
                                 Index Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 9 run 3
SET
SET
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1158819.62..1158819.62 rows=1 width=61)
   ->  Sort  (cost=1158819.62..1158819.74 rows=51 width=61)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1158817.96..1158819.36 rows=51 width=61)
               ->  Nested Loop  (cost=0.00..1158817.58 rows=51 width=61)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=0.00..1158796.88 rows=51 width=39)
                           ->  Nested Loop  (cost=0.00..1158599.60 rows=51 width=39)
                                 ->  Nested Loop  (cost=0.00..1158433.64 rows=51 width=43)
                                       ->  Nested Loop  (cost=0.00..233037.84 rows=161613 width=20)
                                             ->  Seq Scan on part  (cost=0.00..66558.57 rows=40403 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.88 rows=19 width=16)
                                                   Index Cond: (partsupp.ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..5.71 rows=1 width=35)
                                             Index Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.00..3.24 rows=1 width=8)
                                       Index Cond: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.00..3.86 rows=1 width=8)
                                 Index Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 10 run 1
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2727716.77..2727716.82 rows=20 width=187)
   ->  Sort  (cost=2727716.77..2729167.59 rows=580326 width=187)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  GroupAggregate  (cost=2689061.47..2712274.51 rows=580326 width=187)
               ->  Sort  (cost=2689061.47..2690512.28 rows=580326 width=187)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=394782.02..2599075.89 rows=580326 width=187)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=394780.46..2591094.85 rows=580326 width=165)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=292483.56..2440337.65 rows=580326 width=20)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..1935051.50 rows=15054497 width=20)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=285255.85..285255.85 rows=578217 width=8)
                                             ->  Bitmap Heap Scan on orders  (cost=8306.59..285255.85 rows=578217 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8162.04 rows=578217 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Hash  (cost=51318.40..51318.40 rows=1500040 width=149)
                                       ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=149)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 2
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2727716.77..2727716.82 rows=20 width=187)
   ->  Sort  (cost=2727716.77..2729167.59 rows=580326 width=187)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  GroupAggregate  (cost=2689061.47..2712274.51 rows=580326 width=187)
               ->  Sort  (cost=2689061.47..2690512.28 rows=580326 width=187)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=394782.02..2599075.89 rows=580326 width=187)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=394780.46..2591094.85 rows=580326 width=165)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=292483.56..2440337.65 rows=580326 width=20)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..1935051.50 rows=15054497 width=20)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=285255.85..285255.85 rows=578217 width=8)
                                             ->  Bitmap Heap Scan on orders  (cost=8306.59..285255.85 rows=578217 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8162.04 rows=578217 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Hash  (cost=51318.40..51318.40 rows=1500040 width=149)
                                       ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=149)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 3
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2727716.77..2727716.82 rows=20 width=187)
   ->  Sort  (cost=2727716.77..2729167.59 rows=580326 width=187)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         ->  GroupAggregate  (cost=2689061.47..2712274.51 rows=580326 width=187)
               ->  Sort  (cost=2689061.47..2690512.28 rows=580326 width=187)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=394782.02..2599075.89 rows=580326 width=187)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=394780.46..2591094.85 rows=580326 width=165)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=292483.56..2440337.65 rows=580326 width=20)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..1935051.50 rows=15054497 width=20)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=285255.85..285255.85 rows=578217 width=8)
                                             ->  Bitmap Heap Scan on orders  (cost=8306.59..285255.85 rows=578217 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8162.04 rows=578217 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Hash  (cost=51318.40..51318.40 rows=1500040 width=149)
                                       ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=149)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=691140.63..691140.64 rows=1 width=16)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=324540.35..324540.36 rows=1 width=12)
           ->  Hash Join  (cost=2337.64..323740.35 rows=319997 width=12)
                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..258203.28 rows=7999928 width=16)
                 ->  Hash  (cost=2287.64..2287.64 rows=4000 width=4)
                       ->  Nested Loop  (cost=49.25..2287.64 rows=4000 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier  (cost=49.25..2236.33 rows=4000 width=8)
                                   Recheck Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                         Index Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
   ->  Sort  (cost=366600.27..367400.26 rows=319997 width=16)
         Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
         ->  GroupAggregate  (cost=353000.40..365000.28 rows=319997 width=16)
               Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $0)
               ->  Sort  (cost=353000.40..353800.39 rows=319997 width=16)
                     Sort Key: public.partsupp.ps_partkey
                     ->  Hash Join  (cost=2337.64..323740.35 rows=319997 width=16)
                           Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..258203.28 rows=7999928 width=20)
                           ->  Hash  (cost=2287.64..2287.64 rows=4000 width=4)
                                 ->  Nested Loop  (cost=49.25..2287.64 rows=4000 width=4)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Bitmap Heap Scan on supplier  (cost=49.25..2236.33 rows=4000 width=8)
                                             Recheck Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                   Index Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
(31 rows)

query 11 run 2
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=691140.63..691140.64 rows=1 width=16)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=324540.35..324540.36 rows=1 width=12)
           ->  Hash Join  (cost=2337.64..323740.35 rows=319997 width=12)
                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..258203.28 rows=7999928 width=16)
                 ->  Hash  (cost=2287.64..2287.64 rows=4000 width=4)
                       ->  Nested Loop  (cost=49.25..2287.64 rows=4000 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier  (cost=49.25..2236.33 rows=4000 width=8)
                                   Recheck Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                         Index Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
   ->  Sort  (cost=366600.27..367400.26 rows=319997 width=16)
         Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
         ->  GroupAggregate  (cost=353000.40..365000.28 rows=319997 width=16)
               Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $0)
               ->  Sort  (cost=353000.40..353800.39 rows=319997 width=16)
                     Sort Key: public.partsupp.ps_partkey
                     ->  Hash Join  (cost=2337.64..323740.35 rows=319997 width=16)
                           Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..258203.28 rows=7999928 width=20)
                           ->  Hash  (cost=2287.64..2287.64 rows=4000 width=4)
                                 ->  Nested Loop  (cost=49.25..2287.64 rows=4000 width=4)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Bitmap Heap Scan on supplier  (cost=49.25..2236.33 rows=4000 width=8)
                                             Recheck Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                   Index Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
(31 rows)

query 11 run 3
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=691140.63..691140.64 rows=1 width=16)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=324540.35..324540.36 rows=1 width=12)
           ->  Hash Join  (cost=2337.64..323740.35 rows=319997 width=12)
                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..258203.28 rows=7999928 width=16)
                 ->  Hash  (cost=2287.64..2287.64 rows=4000 width=4)
                       ->  Nested Loop  (cost=49.25..2287.64 rows=4000 width=4)
                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier  (cost=49.25..2236.33 rows=4000 width=8)
                                   Recheck Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                         Index Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
   ->  Sort  (cost=366600.27..367400.26 rows=319997 width=16)
         Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
         ->  GroupAggregate  (cost=353000.40..365000.28 rows=319997 width=16)
               Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $0)
               ->  Sort  (cost=353000.40..353800.39 rows=319997 width=16)
                     Sort Key: public.partsupp.ps_partkey
                     ->  Hash Join  (cost=2337.64..323740.35 rows=319997 width=16)
                           Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                           ->  Seq Scan on partsupp  (cost=0.00..258203.28 rows=7999928 width=20)
                           ->  Hash  (cost=2287.64..2287.64 rows=4000 width=4)
                                 ->  Nested Loop  (cost=49.25..2287.64 rows=4000 width=4)
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                       ->  Bitmap Heap Scan on supplier  (cost=49.25..2236.33 rows=4000 width=8)
                                             Recheck Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                   Index Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
(31 rows)

query 12 run 1
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3157604.12..3157604.13 rows=1 width=27)
   ->  Sort  (cost=3157604.12..3157604.13 rows=1 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=3157604.09..3157604.11 rows=1 width=27)
               ->  Merge Join  (cost=2559139.59..3155591.07 rows=268402 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..554970.76 rows=14999793 width=20)
                     ->  Sort  (cost=2559113.76..2559784.76 rows=268402 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..2534911.90 rows=268402 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 2
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3157604.12..3157604.13 rows=1 width=27)
   ->  Sort  (cost=3157604.12..3157604.13 rows=1 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=3157604.09..3157604.11 rows=1 width=27)
               ->  Merge Join  (cost=2559139.59..3155591.07 rows=268402 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..554970.76 rows=14999793 width=20)
                     ->  Sort  (cost=2559113.76..2559784.76 rows=268402 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..2534911.90 rows=268402 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 3
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3157604.12..3157604.13 rows=1 width=27)
   ->  Sort  (cost=3157604.12..3157604.13 rows=1 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=3157604.09..3157604.11 rows=1 width=27)
               ->  Merge Join  (cost=2559139.59..3155591.07 rows=268402 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.00..554970.76 rows=14999793 width=20)
                     ->  Sort  (cost=2559113.76..2559784.76 rows=268402 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..2534911.90 rows=268402 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 13 run 1
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2822723.55..2822723.56 rows=1 width=8)
   ->  Sort  (cost=2822723.55..2822724.05 rows=200 width=8)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         ->  HashAggregate  (cost=2822720.05..2822722.55 rows=200 width=8)
               ->  GroupAggregate  (cost=2375266.13..2800219.45 rows=1500040 width=8)
                     ->  Merge Left Join  (cost=2375266.13..2706477.48 rows=14998294 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Scan using customer_pkey on customer  (cost=0.00..64993.41 rows=1500040 width=4)
                           ->  Materialize  (cost=2375265.20..2450256.67 rows=14998294 width=8)
                                 ->  Sort  (cost=2375265.20..2412760.94 rows=14998294 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..455773.41 rows=14998294 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 13 run 2
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2822723.55..2822723.56 rows=1 width=8)
   ->  Sort  (cost=2822723.55..2822724.05 rows=200 width=8)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         ->  HashAggregate  (cost=2822720.05..2822722.55 rows=200 width=8)
               ->  GroupAggregate  (cost=2375266.13..2800219.45 rows=1500040 width=8)
                     ->  Merge Left Join  (cost=2375266.13..2706477.48 rows=14998294 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Scan using customer_pkey on customer  (cost=0.00..64993.41 rows=1500040 width=4)
                           ->  Materialize  (cost=2375265.20..2450256.67 rows=14998294 width=8)
                                 ->  Sort  (cost=2375265.20..2412760.94 rows=14998294 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..455773.41 rows=14998294 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 13 run 3
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2822723.55..2822723.56 rows=1 width=8)
   ->  Sort  (cost=2822723.55..2822724.05 rows=200 width=8)
         Sort Key: (count(*)), (count(orders.o_orderkey))
         ->  HashAggregate  (cost=2822720.05..2822722.55 rows=200 width=8)
               ->  GroupAggregate  (cost=2375266.13..2800219.45 rows=1500040 width=8)
                     ->  Merge Left Join  (cost=2375266.13..2706477.48 rows=14998294 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Scan using customer_pkey on customer  (cost=0.00..64993.41 rows=1500040 width=4)
                           ->  Materialize  (cost=2375265.20..2450256.67 rows=14998294 width=8)
                                 ->  Sort  (cost=2375265.20..2412760.94 rows=14998294 width=8)
                                       Sort Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..455773.41 rows=14998294 width=8)
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(13 rows)

query 14 run 1
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=845628.83..845628.86 rows=1 width=37)
   ->  Aggregate  (cost=845628.83..845628.86 rows=1 width=37)
         ->  Hash Join  (cost=113967.43..841713.43 rows=783080 width=37)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=13737.19..701013.89 rows=783080 width=20)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..13541.42 rows=783080 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=61558.66..61558.66 rows=1999966 width=25)
                     ->  Seq Scan on part  (cost=0.00..61558.66 rows=1999966 width=25)
(10 rows)

query 14 run 2
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=845628.83..845628.86 rows=1 width=37)
   ->  Aggregate  (cost=845628.83..845628.86 rows=1 width=37)
         ->  Hash Join  (cost=113967.43..841713.43 rows=783080 width=37)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=13737.19..701013.89 rows=783080 width=20)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..13541.42 rows=783080 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=61558.66..61558.66 rows=1999966 width=25)
                     ->  Seq Scan on part  (cost=0.00..61558.66 rows=1999966 width=25)
(10 rows)

query 14 run 3
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=845628.83..845628.86 rows=1 width=37)
   ->  Aggregate  (cost=845628.83..845628.86 rows=1 width=37)
         ->  Hash Join  (cost=113967.43..841713.43 rows=783080 width=37)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=13737.19..701013.89 rows=783080 width=20)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..13541.42 rows=783080 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=61558.66..61558.66 rows=1999966 width=25)
                     ->  Seq Scan on part  (cost=0.00..61558.66 rows=1999966 width=25)
(10 rows)

query 15 run 1
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2470164.07..2470165.28 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1232221.31..1232221.32 rows=1 width=32)
           ->  HashAggregate  (cost=1232111.39..1232175.51 rows=3664 width=20)
                 ->  Bitmap Heap Scan on lineitem  (cost=38422.08..1221157.26 rows=2190825 width=20)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..37874.37 rows=2190825 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1237942.74..1242408.46 rows=3664 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..4160.75 rows=100000 width=71)
         ->  Sort  (cost=1237942.74..1237951.90 rows=3664 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1237588.45..1237725.85 rows=3664 width=36)
                     ->  HashAggregate  (cost=1237588.45..1237689.21 rows=3664 width=20)
                           Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=38422.08..1221157.26 rows=2190825 width=20)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..37874.37 rows=2190825 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(20 rows)

DROP VIEW
query 15 run 2
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2470164.07..2470165.28 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1232221.31..1232221.32 rows=1 width=32)
           ->  HashAggregate  (cost=1232111.39..1232175.51 rows=3664 width=20)
                 ->  Bitmap Heap Scan on lineitem  (cost=38422.08..1221157.26 rows=2190825 width=20)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..37874.37 rows=2190825 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1237942.74..1242408.46 rows=3664 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..4160.75 rows=100000 width=71)
         ->  Sort  (cost=1237942.74..1237951.90 rows=3664 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1237588.45..1237725.85 rows=3664 width=36)
                     ->  HashAggregate  (cost=1237588.45..1237689.21 rows=3664 width=20)
                           Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=38422.08..1221157.26 rows=2190825 width=20)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..37874.37 rows=2190825 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(20 rows)

DROP VIEW
query 15 run 3
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2470164.07..2470165.28 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1232221.31..1232221.32 rows=1 width=32)
           ->  HashAggregate  (cost=1232111.39..1232175.51 rows=3664 width=20)
                 ->  Bitmap Heap Scan on lineitem  (cost=38422.08..1221157.26 rows=2190825 width=20)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..37874.37 rows=2190825 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1237942.74..1242408.46 rows=3664 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.00..4160.75 rows=100000 width=71)
         ->  Sort  (cost=1237942.74..1237951.90 rows=3664 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1237588.45..1237725.85 rows=3664 width=36)
                     ->  HashAggregate  (cost=1237588.45..1237689.21 rows=3664 width=20)
                           Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=38422.08..1221157.26 rows=2190825 width=20)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..37874.37 rows=2190825 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(20 rows)

DROP VIEW
query 16 run 1
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=500998.29..500998.29 rows=1 width=40)
   ->  Sort  (cost=500998.29..501062.25 rows=25585 width=40)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=493728.18..500870.37 rows=25585 width=40)
               ->  Sort  (cost=493728.18..495092.65 rows=545790 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98465.34..432125.89 rows=545790 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Seq Scan on partsupp  (cost=3496.03..281699.12 rows=3999964 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3496.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=91558.15..91558.15 rows=272893 width=40)
                                 ->  Seq Scan on part  (cost=0.00..91558.15 rows=272893 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(16 rows)

query 16 run 2
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=500998.29..500998.29 rows=1 width=40)
   ->  Sort  (cost=500998.29..501062.25 rows=25585 width=40)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=493728.18..500870.37 rows=25585 width=40)
               ->  Sort  (cost=493728.18..495092.65 rows=545790 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98465.34..432125.89 rows=545790 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Seq Scan on partsupp  (cost=3496.03..281699.12 rows=3999964 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3496.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=91558.15..91558.15 rows=272893 width=40)
                                 ->  Seq Scan on part  (cost=0.00..91558.15 rows=272893 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(16 rows)

query 16 run 3
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=500998.29..500998.29 rows=1 width=40)
   ->  Sort  (cost=500998.29..501062.25 rows=25585 width=40)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)), part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=493728.18..500870.37 rows=25585 width=40)
               ->  Sort  (cost=493728.18..495092.65 rows=545790 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98465.34..432125.89 rows=545790 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Seq Scan on partsupp  (cost=3496.03..281699.12 rows=3999964 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3496.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=91558.15..91558.15 rows=272893 width=40)
                                 ->  Seq Scan on part  (cost=0.00..91558.15 rows=272893 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(16 rows)

query 17 run 1
SET
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=10874097.96..10874097.98 rows=1 width=10)
   ->  Aggregate  (cost=10874097.96..10874097.98 rows=1 width=10)
         ->  Nested Loop  (cost=10265425.06..10874047.28 rows=20274 width=10)
               Join Filter: (public.lineitem.l_quantity < ((0.2 * avg(public.lineitem.l_quantity))))
               ->  Merge Join  (cost=10265425.06..10767081.89 rows=2028 width=40)
                     Merge Cond: (public.lineitem.l_partkey = part.p_partkey)
                     ->  GroupAggregate  (cost=10193747.19..10671859.11 rows=1881108 width=11)
                           ->  Sort  (cost=10193747.19..10343712.29 rows=59986040 width=11)
                                 Sort Key: public.lineitem.l_partkey
                                 ->  Seq Scan on lineitem  (cost=0.00..1785086.40 rows=59986040 width=11)
                     ->  Sort  (cost=71677.87..71683.26 rows=2156 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..71558.49 rows=2156 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..52.26 rows=32 width=21)
                     Index Cond: (public.lineitem.l_partkey = part.p_partkey)
(16 rows)

query 17 run 2
SET
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=10874097.96..10874097.98 rows=1 width=10)
   ->  Aggregate  (cost=10874097.96..10874097.98 rows=1 width=10)
         ->  Nested Loop  (cost=10265425.06..10874047.28 rows=20274 width=10)
               Join Filter: (public.lineitem.l_quantity < ((0.2 * avg(public.lineitem.l_quantity))))
               ->  Merge Join  (cost=10265425.06..10767081.89 rows=2028 width=40)
                     Merge Cond: (public.lineitem.l_partkey = part.p_partkey)
                     ->  GroupAggregate  (cost=10193747.19..10671859.11 rows=1881108 width=11)
                           ->  Sort  (cost=10193747.19..10343712.29 rows=59986040 width=11)
                                 Sort Key: public.lineitem.l_partkey
                                 ->  Seq Scan on lineitem  (cost=0.00..1785086.40 rows=59986040 width=11)
                     ->  Sort  (cost=71677.87..71683.26 rows=2156 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..71558.49 rows=2156 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..52.26 rows=32 width=21)
                     Index Cond: (public.lineitem.l_partkey = part.p_partkey)
(16 rows)

query 17 run 3
SET
SET
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=10874097.96..10874097.98 rows=1 width=10)
   ->  Aggregate  (cost=10874097.96..10874097.98 rows=1 width=10)
         ->  Nested Loop  (cost=10265425.06..10874047.28 rows=20274 width=10)
               Join Filter: (public.lineitem.l_quantity < ((0.2 * avg(public.lineitem.l_quantity))))
               ->  Merge Join  (cost=10265425.06..10767081.89 rows=2028 width=40)
                     Merge Cond: (public.lineitem.l_partkey = part.p_partkey)
                     ->  GroupAggregate  (cost=10193747.19..10671859.11 rows=1881108 width=11)
                           ->  Sort  (cost=10193747.19..10343712.29 rows=59986040 width=11)
                                 Sort Key: public.lineitem.l_partkey
                                 ->  Seq Scan on lineitem  (cost=0.00..1785086.40 rows=59986040 width=11)
                     ->  Sort  (cost=71677.87..71683.26 rows=2156 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..71558.49 rows=2156 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.00..52.26 rows=32 width=21)
                     Index Cond: (public.lineitem.l_partkey = part.p_partkey)
(16 rows)

query 18 run 1
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12039810.25..12039813.25 rows=100 width=48)
   ->  GroupAggregate  (cost=12039810.25..12939600.85 rows=29993020 width=48)
         ->  Sort  (cost=12039810.25..12114792.80 rows=29993020 width=48)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               ->  Hash Join  (cost=79026.45..7721833.83 rows=29993020 width=48)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=167.55..6624262.53 rows=29993020 width=29)
                           Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=0.00..3824000.66 rows=7499896 width=26)
                                 Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.00..554970.76 rows=14999793 width=22)
                                 ->  Materialize  (cost=0.00..3044074.04 rows=14996510 width=4)
                                       ->  GroupAggregate  (cost=0.00..2856617.67 rows=14996510 width=11)
                                             Filter: (sum(public.lineitem.l_quantity) > 313::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2331739.82 rows=59986040 width=11)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2331739.82 rows=59986040 width=11)
                     ->  Hash  (cost=51318.40..51318.40 rows=1500040 width=23)
                           ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=23)
(18 rows)

query 18 run 2
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12039810.25..12039813.25 rows=100 width=48)
   ->  GroupAggregate  (cost=12039810.25..12939600.85 rows=29993020 width=48)
         ->  Sort  (cost=12039810.25..12114792.80 rows=29993020 width=48)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               ->  Hash Join  (cost=79026.45..7721833.83 rows=29993020 width=48)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=167.55..6624262.53 rows=29993020 width=29)
                           Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=0.00..3824000.66 rows=7499896 width=26)
                                 Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.00..554970.76 rows=14999793 width=22)
                                 ->  Materialize  (cost=0.00..3044074.04 rows=14996510 width=4)
                                       ->  GroupAggregate  (cost=0.00..2856617.67 rows=14996510 width=11)
                                             Filter: (sum(public.lineitem.l_quantity) > 313::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2331739.82 rows=59986040 width=11)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2331739.82 rows=59986040 width=11)
                     ->  Hash  (cost=51318.40..51318.40 rows=1500040 width=23)
                           ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=23)
(18 rows)

query 18 run 3
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12039810.25..12039813.25 rows=100 width=48)
   ->  GroupAggregate  (cost=12039810.25..12939600.85 rows=29993020 width=48)
         ->  Sort  (cost=12039810.25..12114792.80 rows=29993020 width=48)
               Sort Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               ->  Hash Join  (cost=79026.45..7721833.83 rows=29993020 width=48)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=167.55..6624262.53 rows=29993020 width=29)
                           Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=0.00..3824000.66 rows=7499896 width=26)
                                 Merge Cond: (orders.o_orderkey = public.lineitem.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.00..554970.76 rows=14999793 width=22)
                                 ->  Materialize  (cost=0.00..3044074.04 rows=14996510 width=4)
                                       ->  GroupAggregate  (cost=0.00..2856617.67 rows=14996510 width=11)
                                             Filter: (sum(public.lineitem.l_quantity) > 313::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2331739.82 rows=59986040 width=11)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.00..2331739.82 rows=59986040 width=11)
                     ->  Hash  (cost=51318.40..51318.40 rows=1500040 width=23)
                           ->  Seq Scan on customer  (cost=0.00..51318.40 rows=1500040 width=23)
(18 rows)

query 19 run 1
SET
SET


 Limit  (cost=3196850.09..3196850.11 rows=1 width=16)
   ->  Aggregate  (cost=3196850.09..3196850.11 rows=1 width=16)
         ->  Hash Join  (cost=105230.15..3196847.32 rows=1107 width=16)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               Join Filter: (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..2984807.20 rows=1147407 width=27)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))))
               ->  Hash  (cost=66558.57..66558.57 rows=1999966 width=30)
                     ->  Seq Scan on part  (cost=0.00..66558.57 rows=1999966 width=30)
                           Filter: (p_size >= 1)
(10 rows)

query 19 run 2
SET
SET


 Limit  (cost=3196850.09..3196850.11 rows=1 width=16)
   ->  Aggregate  (cost=3196850.09..3196850.11 rows=1 width=16)
         ->  Hash Join  (cost=105230.15..3196847.32 rows=1107 width=16)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               Join Filter: (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..2984807.20 rows=1147407 width=27)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))))
               ->  Hash  (cost=66558.57..66558.57 rows=1999966 width=30)
                     ->  Seq Scan on part  (cost=0.00..66558.57 rows=1999966 width=30)
                           Filter: (p_size >= 1)
(10 rows)

query 19 run 3
SET
SET


 Limit  (cost=3196850.09..3196850.11 rows=1 width=16)
   ->  Aggregate  (cost=3196850.09..3196850.11 rows=1 width=16)
         ->  Hash Join  (cost=105230.15..3196847.32 rows=1107 width=16)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               Join Filter: (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
               ->  Seq Scan on lineitem  (cost=0.00..2984807.20 rows=1147407 width=27)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 10::numeric) AND (l_quantity <= 20::numeric)) OR ((l_quantity >= 20::numeric) AND (l_quantity <= 30::numeric))))
               ->  Hash  (cost=66558.57..66558.57 rows=1999966 width=30)
                     ->  Seq Scan on part  (cost=0.00..66558.57 rows=1999966 width=30)
                           Filter: (p_size >= 1)
(10 rows)

query 20 run 1
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2900617.86..2900617.86 rows=1 width=51)
   ->  Sort  (cost=2900617.86..2900617.86 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2778457.21..2900617.85 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.25..2287.64 rows=4000 width=55)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.25..2236.33 rows=4000 width=59)
                           Recheck Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                 Index Cond: (supplier.s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2778407.95..2896650.27 rows=28 width=8)
                     ->  Merge Join  (cost=2778407.95..2896650.13 rows=28 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2596178.30..2698272.45 rows=887776 width=15)
                                 ->  Sort  (cost=2596178.30..2618372.67 rows=8877751 width=15)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=155680.07..1474072.33 rows=8877751 width=15)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..153460.63 rows=8877751 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=182229.65..183173.41 rows=377503 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=66609.08..147261.31 rows=377503 width=16)
                                       ->  HashAggregate  (cost=66609.08..66811.10 rows=20202 width=4)
                                             ->  Seq Scan on part  (cost=0.00..66558.57 rows=20202 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.74 rows=19 width=12)
                                             Index Cond: (partsupp.ps_partkey = part.p_partkey)
(31 rows)

query 20 run 2
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2900617.86..2900617.86 rows=1 width=51)
   ->  Sort  (cost=2900617.86..2900617.86 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2778457.21..2900617.85 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.25..2287.64 rows=4000 width=55)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.25..2236.33 rows=4000 width=59)
                           Recheck Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                 Index Cond: (supplier.s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2778407.95..2896650.27 rows=28 width=8)
                     ->  Merge Join  (cost=2778407.95..2896650.13 rows=28 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2596178.30..2698272.45 rows=887776 width=15)
                                 ->  Sort  (cost=2596178.30..2618372.67 rows=8877751 width=15)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=155680.07..1474072.33 rows=8877751 width=15)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..153460.63 rows=8877751 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=182229.65..183173.41 rows=377503 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=66609.08..147261.31 rows=377503 width=16)
                                       ->  HashAggregate  (cost=66609.08..66811.10 rows=20202 width=4)
                                             ->  Seq Scan on part  (cost=0.00..66558.57 rows=20202 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.74 rows=19 width=12)
                                             Index Cond: (partsupp.ps_partkey = part.p_partkey)
(31 rows)

query 20 run 3
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2900617.86..2900617.86 rows=1 width=51)
   ->  Sort  (cost=2900617.86..2900617.86 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2778457.21..2900617.85 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.25..2287.64 rows=4000 width=55)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.25..2236.33 rows=4000 width=59)
                           Recheck Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                 Index Cond: (supplier.s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2778407.95..2896650.27 rows=28 width=8)
                     ->  Merge Join  (cost=2778407.95..2896650.13 rows=28 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2596178.30..2698272.45 rows=887776 width=15)
                                 ->  Sort  (cost=2596178.30..2618372.67 rows=8877751 width=15)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=155680.07..1474072.33 rows=8877751 width=15)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..153460.63 rows=8877751 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=182229.65..183173.41 rows=377503 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=66609.08..147261.31 rows=377503 width=16)
                                       ->  HashAggregate  (cost=66609.08..66811.10 rows=20202 width=4)
                                             ->  Seq Scan on part  (cost=0.00..66558.57 rows=20202 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.00..3.74 rows=19 width=12)
                                             Index Cond: (partsupp.ps_partkey = part.p_partkey)
(31 rows)

query 21 run 1
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4918474.26..4918474.27 rows=1 width=26)
   ->  Sort  (cost=4918474.26..4918474.27 rows=1 width=26)
         Sort Key: (count(*)), supplier.s_name
         ->  HashAggregate  (cost=4918474.24..4918474.25 rows=1 width=26)
               ->  Nested Loop Anti Join  (cost=578096.54..4918474.23 rows=1 width=26)
                     Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                     ->  Nested Loop Semi Join  (cost=578096.54..4918462.65 rows=1 width=34)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Hash Join  (cost=578096.54..2649990.73 rows=388777 width=38)
                                 Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Hash Join  (cost=2337.64..2020345.51 rows=797382 width=34)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on lineitem l1  (cost=0.00..1935051.50 rows=19995347 width=8)
                                             Filter: (l_receiptdate > l_commitdate)
                                       ->  Hash  (cost=2287.64..2287.64 rows=4000 width=30)
                                             ->  Nested Loop  (cost=49.25..2287.64 rows=4000 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                         Filter: (n_name = 'PERU'::bpchar)
                                                   ->  Bitmap Heap Scan on supplier  (cost=49.25..2236.33 rows=4000 width=34)
                                                         Recheck Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                         ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                               Index Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Hash  (cost=455773.41..455773.41 rows=7313399 width=4)
                                       ->  Seq Scan on orders  (cost=0.00..455773.41 rows=7313399 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..5.77 rows=4 width=8)
                                 Index Cond: (l2.l_orderkey = orders.o_orderkey)
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.00..5.78 rows=1 width=8)
                           Index Cond: (l3.l_orderkey = l1.l_orderkey)
                           Filter: (l3.l_receiptdate > l3.l_commitdate)
(30 rows)

query 21 run 2
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4918474.26..4918474.27 rows=1 width=26)
   ->  Sort  (cost=4918474.26..4918474.27 rows=1 width=26)
         Sort Key: (count(*)), supplier.s_name
         ->  HashAggregate  (cost=4918474.24..4918474.25 rows=1 width=26)
               ->  Nested Loop Anti Join  (cost=578096.54..4918474.23 rows=1 width=26)
                     Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                     ->  Nested Loop Semi Join  (cost=578096.54..4918462.65 rows=1 width=34)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Hash Join  (cost=578096.54..2649990.73 rows=388777 width=38)
                                 Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Hash Join  (cost=2337.64..2020345.51 rows=797382 width=34)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on lineitem l1  (cost=0.00..1935051.50 rows=19995347 width=8)
                                             Filter: (l_receiptdate > l_commitdate)
                                       ->  Hash  (cost=2287.64..2287.64 rows=4000 width=30)
                                             ->  Nested Loop  (cost=49.25..2287.64 rows=4000 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                         Filter: (n_name = 'PERU'::bpchar)
                                                   ->  Bitmap Heap Scan on supplier  (cost=49.25..2236.33 rows=4000 width=34)
                                                         Recheck Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                         ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                               Index Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Hash  (cost=455773.41..455773.41 rows=7313399 width=4)
                                       ->  Seq Scan on orders  (cost=0.00..455773.41 rows=7313399 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..5.77 rows=4 width=8)
                                 Index Cond: (l2.l_orderkey = orders.o_orderkey)
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.00..5.78 rows=1 width=8)
                           Index Cond: (l3.l_orderkey = l1.l_orderkey)
                           Filter: (l3.l_receiptdate > l3.l_commitdate)
(30 rows)

query 21 run 3
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4918474.26..4918474.27 rows=1 width=26)
   ->  Sort  (cost=4918474.26..4918474.27 rows=1 width=26)
         Sort Key: (count(*)), supplier.s_name
         ->  HashAggregate  (cost=4918474.24..4918474.25 rows=1 width=26)
               ->  Nested Loop Anti Join  (cost=578096.54..4918474.23 rows=1 width=26)
                     Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                     ->  Nested Loop Semi Join  (cost=578096.54..4918462.65 rows=1 width=34)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Hash Join  (cost=578096.54..2649990.73 rows=388777 width=38)
                                 Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Hash Join  (cost=2337.64..2020345.51 rows=797382 width=34)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on lineitem l1  (cost=0.00..1935051.50 rows=19995347 width=8)
                                             Filter: (l_receiptdate > l_commitdate)
                                       ->  Hash  (cost=2287.64..2287.64 rows=4000 width=30)
                                             ->  Nested Loop  (cost=49.25..2287.64 rows=4000 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                         Filter: (n_name = 'PERU'::bpchar)
                                                   ->  Bitmap Heap Scan on supplier  (cost=49.25..2236.33 rows=4000 width=34)
                                                         Recheck Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                         ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.25 rows=4000 width=0)
                                                               Index Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Hash  (cost=455773.41..455773.41 rows=7313399 width=4)
                                       ->  Seq Scan on orders  (cost=0.00..455773.41 rows=7313399 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.00..5.77 rows=4 width=8)
                                 Index Cond: (l2.l_orderkey = orders.o_orderkey)
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.00..5.78 rows=1 width=8)
                           Index Cond: (l3.l_orderkey = l1.l_orderkey)
                           Filter: (l3.l_receiptdate > l3.l_commitdate)
(30 rows)

query 22 run 1
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=194535.71..194535.71 rows=1 width=24)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75811.39..75811.40 rows=1 width=8)
           ->  Seq Scan on customer  (cost=0.00..75694.05 rows=46935 width=8)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Sort  (cost=118724.31..118741.51 rows=6882 width=24)
         Sort Key: ("substring"((public.customer.c_phone)::text, 1, 2))
         ->  HashAggregate  (cost=118552.26..118689.90 rows=6882 width=24)
               ->  Nested Loop Anti Join  (cost=0.00..118500.64 rows=6882 width=24)
                     ->  Seq Scan on customer  (cost=0.00..75694.05 rows=17240 width=28)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..26.92 rows=17 width=4)
                           Index Cond: (orders.o_custkey = public.customer.c_custkey)
(13 rows)

query 22 run 2
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=194535.71..194535.71 rows=1 width=24)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75811.39..75811.40 rows=1 width=8)
           ->  Seq Scan on customer  (cost=0.00..75694.05 rows=46935 width=8)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Sort  (cost=118724.31..118741.51 rows=6882 width=24)
         Sort Key: ("substring"((public.customer.c_phone)::text, 1, 2))
         ->  HashAggregate  (cost=118552.26..118689.90 rows=6882 width=24)
               ->  Nested Loop Anti Join  (cost=0.00..118500.64 rows=6882 width=24)
                     ->  Seq Scan on customer  (cost=0.00..75694.05 rows=17240 width=28)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..26.92 rows=17 width=4)
                           Index Cond: (orders.o_custkey = public.customer.c_custkey)
(13 rows)

query 22 run 3
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=194535.71..194535.71 rows=1 width=24)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75811.39..75811.40 rows=1 width=8)
           ->  Seq Scan on customer  (cost=0.00..75694.05 rows=46935 width=8)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Sort  (cost=118724.31..118741.51 rows=6882 width=24)
         Sort Key: ("substring"((public.customer.c_phone)::text, 1, 2))
         ->  HashAggregate  (cost=118552.26..118689.90 rows=6882 width=24)
               ->  Nested Loop Anti Join  (cost=0.00..118500.64 rows=6882 width=24)
                     ->  Seq Scan on customer  (cost=0.00..75694.05 rows=17240 width=28)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..26.92 rows=17 width=4)
                           Index Cond: (orders.o_custkey = public.customer.c_custkey)
(13 rows)

