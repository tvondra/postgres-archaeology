query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1906098.61..1906099.29 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1906098.61..1906102.67 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1906098.61..1906101.48 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1905098.55..1905098.57 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1905098.31..1905098.48 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312596.75 rows=14812539 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1906098.61..1906099.29 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1906098.61..1906102.67 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1906098.61..1906101.48 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1905098.55..1905098.57 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1905098.31..1905098.48 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312596.75 rows=14812539 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1906098.61..1906099.29 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1906098.61..1906102.67 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1906098.61..1906101.48 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1905098.55..1905098.57 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1905098.31..1905098.48 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312596.75 rows=14812539 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=845974.74..845974.75 rows=1 width=192)
   ->  Sort  (cost=845974.74..845974.75 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=362777.75..845974.73 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68575.08 rows=7247 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66711.83 rows=1812 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=361776.85..369776.69 rows=1599968 width=172)
                     ->  Sort  (cost=361776.85..365776.77 rows=1599968 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..109013.75 rows=1599968 width=172)
                                 ->  Nested Loop  (cost=0.29..1239.25 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..207.33 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.58 rows=81 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.59..69.60 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..69.58 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.28 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.66 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 2 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=845974.74..845974.75 rows=1 width=192)
   ->  Sort  (cost=845974.74..845974.75 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=362777.75..845974.73 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68575.08 rows=7247 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66711.83 rows=1812 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=361776.85..369776.69 rows=1599968 width=172)
                     ->  Sort  (cost=361776.85..365776.77 rows=1599968 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..109013.75 rows=1599968 width=172)
                                 ->  Nested Loop  (cost=0.29..1239.25 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..207.33 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.58 rows=81 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.59..69.60 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..69.58 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.28 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.66 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 2 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=845974.74..845974.75 rows=1 width=192)
   ->  Sort  (cost=845974.74..845974.75 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=362777.75..845974.73 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68575.08 rows=7247 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66711.83 rows=1812 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=361776.85..369776.69 rows=1599968 width=172)
                     ->  Sort  (cost=361776.85..365776.77 rows=1599968 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..109013.75 rows=1599968 width=172)
                                 ->  Nested Loop  (cost=0.29..1239.25 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..207.33 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.58 rows=81 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.59..69.60 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..69.58 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.28 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.66 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1947997.22..1947997.24 rows=10 width=44)
   ->  Sort  (cost=1947997.22..1955921.03 rows=3169524 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1412841.22..1879504.94 rows=3169524 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1412841.22..1792343.03 rows=3169524 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1411841.16..1413822.11 rows=792381 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41582.70..1323757.57 rows=792381 width=24)
                                 ->  Parallel Hash Join  (cost=41582.13..354490.34 rows=366223 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308153.03 rows=1811491 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.48..40634.48 rows=75812 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.48 rows=75812 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 3 run 2
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1947997.22..1947997.24 rows=10 width=44)
   ->  Sort  (cost=1947997.22..1955921.03 rows=3169524 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1412841.22..1879504.94 rows=3169524 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1412841.22..1792343.03 rows=3169524 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1411841.16..1413822.11 rows=792381 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41582.70..1323757.57 rows=792381 width=24)
                                 ->  Parallel Hash Join  (cost=41582.13..354490.34 rows=366223 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308153.03 rows=1811491 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.48..40634.48 rows=75812 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.48 rows=75812 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 3 run 3
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1947997.22..1947997.24 rows=10 width=44)
   ->  Sort  (cost=1947997.22..1955921.03 rows=3169524 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1412841.22..1879504.94 rows=3169524 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1412841.22..1792343.03 rows=3169524 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1411841.16..1413822.11 rows=792381 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41582.70..1323757.57 rows=792381 width=24)
                                 ->  Parallel Hash Join  (cost=41582.13..354490.34 rows=366223 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308153.03 rows=1811491 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.48..40634.48 rows=75812 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.48 rows=75812 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283483.23..588040.22 rows=1 width=24)
   ->  GroupAggregate  (cost=283483.23..1806268.16 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283483.23..1803379.85 rows=577653 width=16)
               ->  Gather Merge  (cost=283482.66..352679.59 rows=577919 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282482.61..282843.81 rows=144480 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6665.10..270100.30 rows=144480 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6520.63 rows=577919 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.82 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283483.23..588040.22 rows=1 width=24)
   ->  GroupAggregate  (cost=283483.23..1806268.16 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283483.23..1803379.85 rows=577653 width=16)
               ->  Gather Merge  (cost=283482.66..352679.59 rows=577919 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282482.61..282843.81 rows=144480 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6665.10..270100.30 rows=144480 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6520.63 rows=577919 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.82 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283483.23..588040.22 rows=1 width=24)
   ->  GroupAggregate  (cost=283483.23..1806268.16 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283483.23..1803379.85 rows=577653 width=16)
               ->  Gather Merge  (cost=283482.66..352679.59 rows=577919 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282482.61..282843.81 rows=144480 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6665.10..270100.30 rows=144480 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6520.63 rows=577919 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.82 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=653126.32..653126.32 rows=1 width=58)
   ->  Sort  (cost=653126.32..653126.38 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=652887.93..653126.20 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=652887.93..653125.13 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=651887.88..652113.16 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=651887.88..651932.87 rows=17998 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=72444.65..650615.82 rows=17998 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=68753.05..644561.75 rows=449994 width=50)
                                             ->  Parallel Hash Join  (cost=68752.49..340853.46 rows=112550 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=25959.25..295668.52 rows=562752 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25396.50 rows=2251006 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.74..41855.74 rows=75000 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.74 rows=75000 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.66 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=653126.32..653126.32 rows=1 width=58)
   ->  Sort  (cost=653126.32..653126.38 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=652887.93..653126.20 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=652887.93..653125.13 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=651887.88..652113.16 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=651887.88..651932.87 rows=17998 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=72444.65..650615.82 rows=17998 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=68753.05..644561.75 rows=449994 width=50)
                                             ->  Parallel Hash Join  (cost=68752.49..340853.46 rows=112550 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=25959.25..295668.52 rows=562752 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25396.50 rows=2251006 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.74..41855.74 rows=75000 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.74 rows=75000 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.66 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=653126.32..653126.32 rows=1 width=58)
   ->  Sort  (cost=653126.32..653126.38 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=652887.93..653126.20 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=652887.93..653125.13 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=651887.88..652113.16 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=651887.88..651932.87 rows=17998 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=72444.65..650615.82 rows=17998 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=68753.05..644561.75 rows=449994 width=50)
                                             ->  Parallel Hash Join  (cost=68752.49..340853.46 rows=112550 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=25959.25..295668.52 rows=562752 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25396.50 rows=2251006 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.74..41855.74 rows=75000 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.74 rows=75000 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.66 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1301361.31..1301361.32 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1301361.31..1301361.32 rows=1 width=32)
         ->  Gather  (cost=1301360.88..1301361.29 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1300360.88..1300360.89 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=214873.16..1298832.64 rows=305646 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..214567.52 rows=1222584 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1301361.31..1301361.32 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1301361.31..1301361.32 rows=1 width=32)
         ->  Gather  (cost=1301360.88..1301361.29 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1300360.88..1300360.89 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=214873.16..1298832.64 rows=305646 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..214567.52 rows=1222584 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1301361.31..1301361.32 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1301361.31..1301361.32 rows=1 width=32)
         ->  Gather  (cost=1301360.88..1301361.29 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1300360.88..1300360.89 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=214873.16..1298832.64 rows=305646 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..214567.52 rows=1222584 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1153511.44..1153512.03 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1153511.44..1159415.56 rows=10040 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=1153511.44..1158737.86 rows=40160 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1152511.38..1152954.36 rows=10040 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=1152511.38..1152549.57 rows=15273 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Parallel Hash Join  (cost=44275.25..1151450.01 rows=15273 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41225.20..1146601.90 rows=367006 width=46)
                                       ->  Parallel Hash Join  (cost=41224.63..354816.33 rows=300064 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298776.03 rows=3750802 width=8)
                                             ->  Parallel Hash  (cost=40849.63..40849.63 rows=30000 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.63 rows=30000 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 7 run 2
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1153511.44..1153512.03 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1153511.44..1159415.56 rows=10040 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=1153511.44..1158737.86 rows=40160 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1152511.38..1152954.36 rows=10040 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=1152511.38..1152549.57 rows=15273 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Parallel Hash Join  (cost=44275.25..1151450.01 rows=15273 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41225.20..1146601.90 rows=367006 width=46)
                                       ->  Parallel Hash Join  (cost=41224.63..354816.33 rows=300064 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298776.03 rows=3750802 width=8)
                                             ->  Parallel Hash  (cost=40849.63..40849.63 rows=30000 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.63 rows=30000 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 7 run 3
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1153511.44..1153512.03 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1153511.44..1159415.56 rows=10040 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=1153511.44..1158737.86 rows=40160 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1152511.38..1152954.36 rows=10040 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=1152511.38..1152549.57 rows=15273 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Parallel Hash Join  (cost=44275.25..1151450.01 rows=15273 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41225.20..1146601.90 rows=367006 width=46)
                                       ->  Parallel Hash Join  (cost=41224.63..354816.33 rows=300064 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298776.03 rows=3750802 width=8)
                                             ->  Parallel Hash  (cost=40849.63..40849.63 rows=30000 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.63 rows=30000 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 8 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=386209.07..390862.49 rows=1 width=40)
   ->  GroupAggregate  (cost=386209.07..11582339.53 rows=2406 width=40)
         Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  Nested Loop  (cost=386209.07..11581805.48 rows=23996 width=46)
               Join Filter: (supplier.s_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=386209.07..11573017.99 rows=23996 width=20)
                     ->  Nested Loop  (cost=386208.77..11519385.95 rows=23996 width=20)
                           ->  Nested Loop  (cost=386208.35..2928822.91 rows=3612126 width=24)
                                 ->  Gather Merge  (cost=386207.78..494381.80 rows=903448 width=8)
                                       Workers Planned: 4
                                       ->  Sort  (cost=385207.72..385772.38 rows=225862 width=8)
                                             Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                             ->  Parallel Hash Join  (cost=42793.24..365122.85 rows=225862 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..317530.04 rows=1129310 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=41855.74..41855.74 rows=75000 width=4)
                                                         ->  Hash Join  (cost=2.51..41855.74 rows=75000 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.65 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using part_pkey on part  (cost=0.43..2.38 rows=1 width=4)
                                 Index Cond: (p_partkey = lineitem.l_partkey)
                                 Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.24 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(36 rows)

query 8 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=386209.07..390862.49 rows=1 width=40)
   ->  GroupAggregate  (cost=386209.07..11582339.53 rows=2406 width=40)
         Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  Nested Loop  (cost=386209.07..11581805.48 rows=23996 width=46)
               Join Filter: (supplier.s_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=386209.07..11573017.99 rows=23996 width=20)
                     ->  Nested Loop  (cost=386208.77..11519385.95 rows=23996 width=20)
                           ->  Nested Loop  (cost=386208.35..2928822.91 rows=3612126 width=24)
                                 ->  Gather Merge  (cost=386207.78..494381.80 rows=903448 width=8)
                                       Workers Planned: 4
                                       ->  Sort  (cost=385207.72..385772.38 rows=225862 width=8)
                                             Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                             ->  Parallel Hash Join  (cost=42793.24..365122.85 rows=225862 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..317530.04 rows=1129310 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=41855.74..41855.74 rows=75000 width=4)
                                                         ->  Hash Join  (cost=2.51..41855.74 rows=75000 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.65 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using part_pkey on part  (cost=0.43..2.38 rows=1 width=4)
                                 Index Cond: (p_partkey = lineitem.l_partkey)
                                 Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.24 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(36 rows)

query 8 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=386209.07..390862.49 rows=1 width=40)
   ->  GroupAggregate  (cost=386209.07..11582339.53 rows=2406 width=40)
         Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  Nested Loop  (cost=386209.07..11581805.48 rows=23996 width=46)
               Join Filter: (supplier.s_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=386209.07..11573017.99 rows=23996 width=20)
                     ->  Nested Loop  (cost=386208.77..11519385.95 rows=23996 width=20)
                           ->  Nested Loop  (cost=386208.35..2928822.91 rows=3612126 width=24)
                                 ->  Gather Merge  (cost=386207.78..494381.80 rows=903448 width=8)
                                       Workers Planned: 4
                                       ->  Sort  (cost=385207.72..385772.38 rows=225862 width=8)
                                             Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                                             ->  Parallel Hash Join  (cost=42793.24..365122.85 rows=225862 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..317530.04 rows=1129310 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=41855.74..41855.74 rows=75000 width=4)
                                                         ->  Hash Join  (cost=2.51..41855.74 rows=75000 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.65 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using part_pkey on part  (cost=0.43..2.38 rows=1 width=4)
                                 Index Cond: (p_partkey = lineitem.l_partkey)
                                 Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.24 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(36 rows)

query 9 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=20764.81..25613.75 rows=1 width=66)
   ->  GroupAggregate  (cost=20764.81..287456.67 rows=55 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Incremental Sort  (cost=20764.81..287454.75 rows=55 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=9652.78..287452.78 rows=55 width=57)
                     Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                     ->  Gather Merge  (cost=8651.47..20048.53 rows=100000 width=30)
                           Workers Planned: 1
                           ->  Sort  (cost=7651.46..7798.52 rows=58824 width=30)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=1.56..2991.39 rows=58824 width=30)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                     ->  Materialize  (cost=1001.31..184904.11 rows=55 width=35)
                           ->  Gather  (cost=1001.31..184903.84 rows=55 width=35)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=1.31..183898.34 rows=14 width=35)
                                       ->  Nested Loop  (cost=0.87..183863.38 rows=14 width=35)
                                             ->  Nested Loop  (cost=0.43..80983.59 rows=40404 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47230.79 rows=10101 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.15 rows=19 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..2.54 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(31 rows)

query 9 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=20764.81..25613.75 rows=1 width=66)
   ->  GroupAggregate  (cost=20764.81..287456.67 rows=55 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Incremental Sort  (cost=20764.81..287454.75 rows=55 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=9652.78..287452.78 rows=55 width=57)
                     Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                     ->  Gather Merge  (cost=8651.47..20048.53 rows=100000 width=30)
                           Workers Planned: 1
                           ->  Sort  (cost=7651.46..7798.52 rows=58824 width=30)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=1.56..2991.39 rows=58824 width=30)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                     ->  Materialize  (cost=1001.31..184904.11 rows=55 width=35)
                           ->  Gather  (cost=1001.31..184903.84 rows=55 width=35)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=1.31..183898.34 rows=14 width=35)
                                       ->  Nested Loop  (cost=0.87..183863.38 rows=14 width=35)
                                             ->  Nested Loop  (cost=0.43..80983.59 rows=40404 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47230.79 rows=10101 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.15 rows=19 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..2.54 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(31 rows)

query 9 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=20764.81..25613.75 rows=1 width=66)
   ->  GroupAggregate  (cost=20764.81..287456.67 rows=55 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Incremental Sort  (cost=20764.81..287454.75 rows=55 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=9652.78..287452.78 rows=55 width=57)
                     Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                     ->  Gather Merge  (cost=8651.47..20048.53 rows=100000 width=30)
                           Workers Planned: 1
                           ->  Sort  (cost=7651.46..7798.52 rows=58824 width=30)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=1.56..2991.39 rows=58824 width=30)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                     ->  Materialize  (cost=1001.31..184904.11 rows=55 width=35)
                           ->  Gather  (cost=1001.31..184903.84 rows=55 width=35)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=1.31..183898.34 rows=14 width=35)
                                       ->  Nested Loop  (cost=0.87..183863.38 rows=14 width=35)
                                             ->  Nested Loop  (cost=0.43..80983.59 rows=40404 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47230.79 rows=10101 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.15 rows=19 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..2.54 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(31 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=853353.54..853353.59 rows=20 width=202)
   ->  Sort  (cost=853353.54..854827.94 rows=589761 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=752301.37..837660.21 rows=589761 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=752301.37..822916.19 rows=589761 width=182)
                     Workers Planned: 4
                     ->  Sort  (cost=751301.31..751669.91 rows=147440 width=182)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=694844.28..738643.76 rows=147440 width=182)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=694842.72..738189.55 rows=147440 width=160)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=148)
                                       ->  Parallel Hash  (cost=692999.72..692999.72 rows=147440 width=16)
                                             ->  Nested Loop  (cost=6865.21..692999.72 rows=147440 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6864.64..270364.61 rows=148798 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6715.85 rows=595191 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.83 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 10 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=853353.54..853353.59 rows=20 width=202)
   ->  Sort  (cost=853353.54..854827.94 rows=589761 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=752301.37..837660.21 rows=589761 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=752301.37..822916.19 rows=589761 width=182)
                     Workers Planned: 4
                     ->  Sort  (cost=751301.31..751669.91 rows=147440 width=182)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=694844.28..738643.76 rows=147440 width=182)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=694842.72..738189.55 rows=147440 width=160)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=148)
                                       ->  Parallel Hash  (cost=692999.72..692999.72 rows=147440 width=16)
                                             ->  Nested Loop  (cost=6865.21..692999.72 rows=147440 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6864.64..270364.61 rows=148798 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6715.85 rows=595191 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.83 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 10 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=853353.54..853353.59 rows=20 width=202)
   ->  Sort  (cost=853353.54..854827.94 rows=589761 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=752301.37..837660.21 rows=589761 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=752301.37..822916.19 rows=589761 width=182)
                     Workers Planned: 4
                     ->  Sort  (cost=751301.31..751669.91 rows=147440 width=182)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=694844.28..738643.76 rows=147440 width=182)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=694842.72..738189.55 rows=147440 width=160)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.99 rows=374999 width=148)
                                       ->  Parallel Hash  (cost=692999.72..692999.72 rows=147440 width=16)
                                             ->  Nested Loop  (cost=6865.21..692999.72 rows=147440 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6864.64..270364.61 rows=148798 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6715.85 rows=595191 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.83 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 11 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=67844.40..67844.40 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=18082.68..18082.69 rows=1 width=32)
           ->  Gather  (cost=18082.56..18082.67 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17082.56..17082.57 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..15670.82 rows=188232 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.58 rows=81 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=49761.71..50028.37 rows=106665 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=40503.55..49228.38 rows=106665 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               Planned Partitions: 8
               ->  Nested Loop  (cost=37.72..23816.36 rows=319994 width=14)
                     ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.58 rows=81 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(31 rows)

query 11 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=67844.40..67844.40 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=18082.68..18082.69 rows=1 width=32)
           ->  Gather  (cost=18082.56..18082.67 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17082.56..17082.57 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..15670.82 rows=188232 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.58 rows=81 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=49761.71..50028.37 rows=106665 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=40503.55..49228.38 rows=106665 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               Planned Partitions: 8
               ->  Nested Loop  (cost=37.72..23816.36 rows=319994 width=14)
                     ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.58 rows=81 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(31 rows)

query 11 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=67844.40..67844.40 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=18082.68..18082.69 rows=1 width=32)
           ->  Gather  (cost=18082.56..18082.67 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17082.56..17082.57 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..15670.82 rows=188232 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.58 rows=81 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=49761.71..50028.37 rows=106665 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=40503.55..49228.38 rows=106665 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               Planned Partitions: 8
               ->  Nested Loop  (cost=37.72..23816.36 rows=319994 width=14)
                     ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.58 rows=81 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(31 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469370.33..1577103.59 rows=1 width=27)
   ->  GroupAggregate  (cost=1469370.33..2223503.15 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469370.33..2218462.09 rows=288057 width=27)
               ->  Gather Merge  (cost=1469369.89..1503860.29 rows=288057 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468369.84..1468549.87 rows=72014 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462559.75 rows=72014 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 2
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469370.33..1577103.59 rows=1 width=27)
   ->  GroupAggregate  (cost=1469370.33..2223503.15 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469370.33..2218462.09 rows=288057 width=27)
               ->  Gather Merge  (cost=1469369.89..1503860.29 rows=288057 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468369.84..1468549.87 rows=72014 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462559.75 rows=72014 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 3
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469370.33..1577103.59 rows=1 width=27)
   ->  GroupAggregate  (cost=1469370.33..2223503.15 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469370.33..2218462.09 rows=288057 width=27)
               ->  Gather Merge  (cost=1469369.89..1503860.29 rows=288057 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468369.84..1468549.87 rows=72014 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462559.75 rows=72014 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1004714.75..1004714.76 rows=1 width=16)
   ->  Sort  (cost=1004714.75..1004715.25 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1004711.75..1004713.75 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=0.86..982211.83 rows=1499995 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=0.86..893711.30 rows=14700115 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.35 rows=1499995 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..677535.53 rows=14700115 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 2
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1004714.75..1004714.76 rows=1 width=16)
   ->  Sort  (cost=1004714.75..1004715.25 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1004711.75..1004713.75 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=0.86..982211.83 rows=1499995 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=0.86..893711.30 rows=14700115 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.35 rows=1499995 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..677535.53 rows=14700115 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 3
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1004714.75..1004714.76 rows=1 width=16)
   ->  Sort  (cost=1004714.75..1004715.25 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1004711.75..1004713.75 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=0.86..982211.83 rows=1499995 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=0.86..893711.30 rows=14700115 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.35 rows=1499995 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..677535.53 rows=14700115 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=891950.18..891950.19 rows=1 width=32)
   ->  Finalize Aggregate  (cost=891950.18..891950.19 rows=1 width=32)
         ->  Gather  (cost=891949.72..891950.13 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=890949.72..890949.73 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65677.39..887281.04 rows=209639 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=13446.77..834500.12 rows=209639 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..13237.14 rows=838557 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.83..45980.83 rows=499983 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.83 rows=499983 width=25)
(13 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=891950.18..891950.19 rows=1 width=32)
   ->  Finalize Aggregate  (cost=891950.18..891950.19 rows=1 width=32)
         ->  Gather  (cost=891949.72..891950.13 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=890949.72..890949.73 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65677.39..887281.04 rows=209639 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=13446.77..834500.12 rows=209639 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..13237.14 rows=838557 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.83..45980.83 rows=499983 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.83 rows=499983 width=25)
(13 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=891950.18..891950.19 rows=1 width=32)
   ->  Finalize Aggregate  (cost=891950.18..891950.19 rows=1 width=32)
         ->  Gather  (cost=891949.72..891950.13 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=890949.72..890949.73 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65677.39..887281.04 rows=209639 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=13446.77..834500.12 rows=209639 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..13237.14 rows=838557 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.83..45980.83 rows=499983 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.83 rows=499983 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2741781.40..2741893.18 rows=1 width=103)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1389346.58..1389346.59 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1386865.98..1388106.28 rows=99224 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1342959.36..1383889.26 rows=396896 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1341959.36..1343199.66 rows=99224 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=36583.71..1336255.42 rows=570394 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36013.32 rows=2281575 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352434.81..1407876.56 rows=496 width=103)
         ->  Finalize GroupAggregate  (cost=1352434.52..1406654.34 rows=496 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1352434.52..1399956.72 rows=396896 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351434.46..1351682.52 rows=99224 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1341959.36..1343199.66 rows=99224 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=36583.71..1336255.42 rows=570394 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36013.32 rows=2281575 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2741781.40..2741893.18 rows=1 width=103)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1389346.58..1389346.59 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1386865.98..1388106.28 rows=99224 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1342959.36..1383889.26 rows=396896 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1341959.36..1343199.66 rows=99224 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=36583.71..1336255.42 rows=570394 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36013.32 rows=2281575 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352434.81..1407876.56 rows=496 width=103)
         ->  Finalize GroupAggregate  (cost=1352434.52..1406654.34 rows=496 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1352434.52..1399956.72 rows=396896 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351434.46..1351682.52 rows=99224 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1341959.36..1343199.66 rows=99224 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=36583.71..1336255.42 rows=570394 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36013.32 rows=2281575 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2741781.40..2741893.18 rows=1 width=103)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1389346.58..1389346.59 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1386865.98..1388106.28 rows=99224 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1342959.36..1383889.26 rows=396896 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1341959.36..1343199.66 rows=99224 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=36583.71..1336255.42 rows=570394 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36013.32 rows=2281575 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352434.81..1407876.56 rows=496 width=103)
         ->  Finalize GroupAggregate  (cost=1352434.52..1406654.34 rows=496 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1352434.52..1399956.72 rows=396896 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351434.46..1351682.52 rows=99224 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1341959.36..1343199.66 rows=99224 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=36583.71..1336255.42 rows=570394 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36013.32 rows=2281575 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=252168.04..252168.05 rows=1 width=44)
   ->  Sort  (cost=252168.04..252553.48 rows=154173 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172266.48..251397.18 rows=154173 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172266.48..243874.86 rows=598059 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171266.42..171640.21 rows=149515 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size
                           ->  Parallel Hash Join  (cost=57886.48..158415.66 rows=149515 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101375.67 rows=999980 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.57..53480.57 rows=74756 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.57 rows=74756 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=252168.04..252168.05 rows=1 width=44)
   ->  Sort  (cost=252168.04..252553.48 rows=154173 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172266.48..251397.18 rows=154173 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172266.48..243874.86 rows=598059 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171266.42..171640.21 rows=149515 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size
                           ->  Parallel Hash Join  (cost=57886.48..158415.66 rows=149515 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101375.67 rows=999980 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.57..53480.57 rows=74756 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.57 rows=74756 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=252168.04..252168.05 rows=1 width=44)
   ->  Sort  (cost=252168.04..252553.48 rows=154173 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172266.48..251397.18 rows=154173 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172266.48..243874.86 rows=598059 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171266.42..171640.21 rows=149515 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size
                           ->  Parallel Hash Join  (cost=57886.48..158415.66 rows=149515 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101375.67 rows=999980 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.57..53480.57 rows=74756 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.57 rows=74756 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3305800.39..3305800.40 rows=1 width=32)
   ->  Aggregate  (cost=3305800.39..3305800.40 rows=1 width=32)
         ->  Merge Join  (cost=2255337.92..3305757.58 rows=17123 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2254337.00..3182744.60 rows=1771978 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2254337.00..3103005.59 rows=7087912 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2253336.94..2257766.89 rows=1771978 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869685.86..2038283.83 rows=1771978 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 32
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275106.00 rows=14996300 width=9)
               ->  Materialize  (cost=1000.93..100076.18 rows=57978 width=21)
                     ->  Gather Merge  (cost=1000.93..99931.23 rows=57978 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..92025.44 rows=14494 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66711.83 rows=483 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.07 rows=34 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 17 run 2
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3305800.39..3305800.40 rows=1 width=32)
   ->  Aggregate  (cost=3305800.39..3305800.40 rows=1 width=32)
         ->  Merge Join  (cost=2255337.92..3305757.58 rows=17123 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2254337.00..3182744.60 rows=1771978 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2254337.00..3103005.59 rows=7087912 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2253336.94..2257766.89 rows=1771978 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869685.86..2038283.83 rows=1771978 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 32
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275106.00 rows=14996300 width=9)
               ->  Materialize  (cost=1000.93..100076.18 rows=57978 width=21)
                     ->  Gather Merge  (cost=1000.93..99931.23 rows=57978 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..92025.44 rows=14494 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66711.83 rows=483 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.07 rows=34 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 17 run 3
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3305800.39..3305800.40 rows=1 width=32)
   ->  Aggregate  (cost=3305800.39..3305800.40 rows=1 width=32)
         ->  Merge Join  (cost=2255337.92..3305757.58 rows=17123 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2254337.00..3182744.60 rows=1771978 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2254337.00..3103005.59 rows=7087912 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2253336.94..2257766.89 rows=1771978 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869685.86..2038283.83 rows=1771978 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 32
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275106.00 rows=14996300 width=9)
               ->  Materialize  (cost=1000.93..100076.18 rows=57978 width=21)
                     ->  Gather Merge  (cost=1000.93..99931.23 rows=57978 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..92025.44 rows=14494 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66711.83 rows=483 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.07 rows=34 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 18 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8774513.69..8774513.94 rows=100 width=71)
   ->  Sort  (cost=8774513.69..8824478.34 rows=19985859 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7409531.37..8010668.53 rows=19985859 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 256
               ->  Hash Join  (cost=78614.59..6332949.35 rows=19985859 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=127.70..5919963.44 rows=19985859 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3390322.43 rows=4998767 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..548013.59 rows=15003210 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692328.56 rows=4998767 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167458.06 rows=59985200 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167458.06 rows=59985200 width=9)
                     ->  Hash  (cost=50946.95..50946.95 rows=1499995 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50946.95 rows=1499995 width=23)
(20 rows)

query 18 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8774513.69..8774513.94 rows=100 width=71)
   ->  Sort  (cost=8774513.69..8824478.34 rows=19985859 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7409531.37..8010668.53 rows=19985859 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 256
               ->  Hash Join  (cost=78614.59..6332949.35 rows=19985859 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=127.70..5919963.44 rows=19985859 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3390322.43 rows=4998767 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..548013.59 rows=15003210 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692328.56 rows=4998767 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167458.06 rows=59985200 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167458.06 rows=59985200 width=9)
                     ->  Hash  (cost=50946.95..50946.95 rows=1499995 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50946.95 rows=1499995 width=23)
(20 rows)

query 18 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8774513.69..8774513.94 rows=100 width=71)
   ->  Sort  (cost=8774513.69..8824478.34 rows=19985859 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7409531.37..8010668.53 rows=19985859 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 256
               ->  Hash Join  (cost=78614.59..6332949.35 rows=19985859 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=127.70..5919963.44 rows=19985859 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3390322.43 rows=4998767 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..548013.59 rows=15003210 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692328.56 rows=4998767 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167458.06 rows=59985200 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167458.06 rows=59985200 width=9)
                     ->  Hash  (cost=50946.95..50946.95 rows=1499995 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50946.95 rows=1499995 width=23)
(20 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=128388.32..128388.33 rows=1 width=32)
   ->  Finalize Aggregate  (cost=128388.32..128388.33 rows=1 width=32)
         ->  Gather  (cost=128387.88..128388.29 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=127387.88..127387.89 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..127385.74 rows=285 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.28 rows=1250 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.11 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

 Limit  (cost=128388.32..128388.33 rows=1 width=32)
   ->  Finalize Aggregate  (cost=128388.32..128388.33 rows=1 width=32)
         ->  Gather  (cost=128387.88..128388.29 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=127387.88..127387.89 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..127385.74 rows=285 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.28 rows=1250 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.11 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=128388.32..128388.33 rows=1 width=32)
   ->  Finalize Aggregate  (cost=128388.32..128388.33 rows=1 width=32)
         ->  Gather  (cost=128387.88..128388.29 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=127387.88..127387.89 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..127385.74 rows=285 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.28 rows=1250 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.11 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2433930.42..2683778.12 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2433930.42..2683778.12 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2429807.49..2679019.31 rows=3 width=8)
               ->  Nested Loop  (cost=2429807.49..2679019.30 rows=3 width=8)
                     ->  Hash Join  (cost=2429807.06..2653124.11 rows=49001 width=44)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  HashAggregate  (cost=2379303.66..2541374.81 rows=4851158 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 64
                                 ->  Bitmap Heap Scan on lineitem  (cost=146625.32..1993868.50 rows=9144708 width=13)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..144339.15 rows=9144708 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=50250.89..50250.89 rows=20201 width=4)
                                 ->  Gather  (cost=1000.00..50250.89 rows=20201 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..47230.79 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                     ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                           Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                           Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(32 rows)

query 20 run 2
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2433930.42..2683778.12 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2433930.42..2683778.12 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2429807.49..2679019.31 rows=3 width=8)
               ->  Nested Loop  (cost=2429807.49..2679019.30 rows=3 width=8)
                     ->  Hash Join  (cost=2429807.06..2653124.11 rows=49001 width=44)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  HashAggregate  (cost=2379303.66..2541374.81 rows=4851158 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 64
                                 ->  Bitmap Heap Scan on lineitem  (cost=146625.32..1993868.50 rows=9144708 width=13)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..144339.15 rows=9144708 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=50250.89..50250.89 rows=20201 width=4)
                                 ->  Gather  (cost=1000.00..50250.89 rows=20201 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..47230.79 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                     ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                           Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                           Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(32 rows)

query 20 run 3
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2433930.42..2683778.12 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2433930.42..2683778.12 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2429807.49..2679019.31 rows=3 width=8)
               ->  Nested Loop  (cost=2429807.49..2679019.30 rows=3 width=8)
                     ->  Hash Join  (cost=2429807.06..2653124.11 rows=49001 width=44)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  HashAggregate  (cost=2379303.66..2541374.81 rows=4851158 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 64
                                 ->  Bitmap Heap Scan on lineitem  (cost=146625.32..1993868.50 rows=9144708 width=13)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..144339.15 rows=9144708 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=50250.89..50250.89 rows=20201 width=4)
                                 ->  Gather  (cost=1000.00..50250.89 rows=20201 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..47230.79 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                     ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                           Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                           Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(32 rows)

query 21 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1908789.96..1908789.97 rows=1 width=34)
   ->  Sort  (cost=1908789.96..1908789.97 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1908789.93..1908789.95 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1908789.93..1908789.94 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1908789.92 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1908786.69 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1908783.66 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1907783.56 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335538.90 rows=199951 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312596.75 rows=4998767 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.23 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1908789.96..1908789.97 rows=1 width=34)
   ->  Sort  (cost=1908789.96..1908789.97 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1908789.93..1908789.95 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1908789.93..1908789.94 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1908789.92 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1908786.69 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1908783.66 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1907783.56 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335538.90 rows=199951 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312596.75 rows=4998767 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.23 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1908789.96..1908789.97 rows=1 width=34)
   ->  Sort  (cost=1908789.96..1908789.97 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1908789.93..1908789.95 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1908789.93..1908789.94 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1908789.92 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1908786.69 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1908783.66 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1907783.56 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335538.90 rows=199951 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312596.75 rows=4998767 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.23 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 22 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93876.78..93878.27 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46820.98..46820.99 rows=1 width=32)
           ->  Gather  (cost=46820.55..46820.96 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.55..45820.56 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.72 rows=11932 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.79..58983.32 rows=8024 width=72)
         Group Key: "substring"((customer.c_phone)::text, 1, 2)
         ->  Nested Loop Anti Join  (cost=47055.79..58782.72 rows=8024 width=38)
               ->  Gather Merge  (cost=47055.35..49150.71 rows=17500 width=26)
                     Workers Planned: 4
                     Params Evaluated: $1
                     ->  Sort  (cost=46055.30..46066.23 rows=4375 width=26)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.72 rows=4375 width=26)
                                 Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.71 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

query 22 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93876.78..93878.27 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46820.98..46820.99 rows=1 width=32)
           ->  Gather  (cost=46820.55..46820.96 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.55..45820.56 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.72 rows=11932 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.79..58983.32 rows=8024 width=72)
         Group Key: "substring"((customer.c_phone)::text, 1, 2)
         ->  Nested Loop Anti Join  (cost=47055.79..58782.72 rows=8024 width=38)
               ->  Gather Merge  (cost=47055.35..49150.71 rows=17500 width=26)
                     Workers Planned: 4
                     Params Evaluated: $1
                     ->  Sort  (cost=46055.30..46066.23 rows=4375 width=26)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.72 rows=4375 width=26)
                                 Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.71 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

query 22 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93876.78..93878.27 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46820.98..46820.99 rows=1 width=32)
           ->  Gather  (cost=46820.55..46820.96 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.55..45820.56 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.72 rows=11932 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.79..58983.32 rows=8024 width=72)
         Group Key: "substring"((customer.c_phone)::text, 1, 2)
         ->  Nested Loop Anti Join  (cost=47055.79..58782.72 rows=8024 width=38)
               ->  Gather Merge  (cost=47055.35..49150.71 rows=17500 width=26)
                     Workers Planned: 4
                     Params Evaluated: $1
                     ->  Sort  (cost=46055.30..46066.23 rows=4375 width=26)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.72 rows=4375 width=26)
                                 Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.71 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

