query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832741.83..1832742.47 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832741.83..1832745.65 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832741.83..1832744.70 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831741.77..1831741.79 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831741.56..1831741.70 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312593.35 rows=14832806 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832741.83..1832742.47 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832741.83..1832745.65 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832741.83..1832744.70 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831741.77..1831741.79 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831741.56..1831741.70 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312593.35 rows=14832806 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832741.83..1832742.47 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832741.83..1832745.65 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832741.83..1832744.70 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831741.77..1831741.79 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831741.56..1831741.70 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312593.35 rows=14832806 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=864894.65..864894.65 rows=1 width=193)
   ->  Sort  (cost=864894.65..864894.65 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=359868.52..864894.64 rows=1 width=193)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68726.11 rows=8508 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.66 rows=2127 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=358868.04..366813.13 rows=1589019 width=173)
                     ->  Sort  (cost=358868.04..362840.59 rows=1589019 width=173)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..107912.68 rows=1589019 width=173)
                                 ->  Nested Loop  (cost=0.29..1239.11 rows=20000 width=167)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..207.30 rows=4000 width=145)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.54 rows=79 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=62.90..62.91 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..62.89 rows=3 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..61.62 rows=17 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..60.00 rows=17 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.73 rows=17 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 2 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=864894.65..864894.65 rows=1 width=193)
   ->  Sort  (cost=864894.65..864894.65 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=359868.52..864894.64 rows=1 width=193)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68726.11 rows=8508 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.66 rows=2127 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=358868.04..366813.13 rows=1589019 width=173)
                     ->  Sort  (cost=358868.04..362840.59 rows=1589019 width=173)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..107912.68 rows=1589019 width=173)
                                 ->  Nested Loop  (cost=0.29..1239.11 rows=20000 width=167)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..207.30 rows=4000 width=145)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.54 rows=79 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=62.90..62.91 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..62.89 rows=3 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..61.62 rows=17 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..60.00 rows=17 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.73 rows=17 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 2 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=864894.65..864894.65 rows=1 width=193)
   ->  Sort  (cost=864894.65..864894.65 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=359868.52..864894.64 rows=1 width=193)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68726.11 rows=8508 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.66 rows=2127 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=358868.04..366813.13 rows=1589019 width=173)
                     ->  Sort  (cost=358868.04..362840.59 rows=1589019 width=173)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..107912.68 rows=1589019 width=173)
                                 ->  Nested Loop  (cost=0.29..1239.11 rows=20000 width=167)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..207.30 rows=4000 width=145)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.54 rows=79 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=62.90..62.91 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..62.89 rows=3 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..61.62 rows=17 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..60.00 rows=17 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.73 rows=17 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1961948.21..1961948.24 rows=10 width=44)
   ->  Sort  (cost=1961948.21..1969966.28 rows=3207227 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1420426.28..1892641.19 rows=3207227 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1420426.28..1804442.45 rows=3207227 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1419426.22..1421430.74 rows=801807 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41581.17..1330224.68 rows=801807 width=24)
                                 ->  Parallel Hash Join  (cost=41580.61..354516.55 rows=368676 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308144.16 rows=1825435 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.00..40634.00 rows=75729 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.00 rows=75729 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 3 run 2
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1961948.21..1961948.24 rows=10 width=44)
   ->  Sort  (cost=1961948.21..1969966.28 rows=3207227 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1420426.28..1892641.19 rows=3207227 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1420426.28..1804442.45 rows=3207227 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1419426.22..1421430.74 rows=801807 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41581.17..1330224.68 rows=801807 width=24)
                                 ->  Parallel Hash Join  (cost=41580.61..354516.55 rows=368676 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308144.16 rows=1825435 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.00..40634.00 rows=75729 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.00 rows=75729 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 3 run 3
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1961948.21..1961948.24 rows=10 width=44)
   ->  Sort  (cost=1961948.21..1969966.28 rows=3207227 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1420426.28..1892641.19 rows=3207227 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1420426.28..1804442.45 rows=3207227 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1419426.22..1421430.74 rows=801807 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41581.17..1330224.68 rows=801807 width=24)
                                 ->  Parallel Hash Join  (cost=41580.61..354516.55 rows=368676 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308144.16 rows=1825435 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.00..40634.00 rows=75729 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.00 rows=75729 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283106.70..582900.69 rows=1 width=24)
   ->  GroupAggregate  (cost=283106.70..1782076.64 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283106.70..1779236.79 rows=567960 width=16)
               ->  Gather Merge  (cost=283106.13..351130.26 rows=568124 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282106.07..282461.15 rows=142031 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6552.71..269951.17 rows=142031 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6410.68 rows=568124 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.83 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283106.70..582900.69 rows=1 width=24)
   ->  GroupAggregate  (cost=283106.70..1782076.64 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283106.70..1779236.79 rows=567960 width=16)
               ->  Gather Merge  (cost=283106.13..351130.26 rows=568124 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282106.07..282461.15 rows=142031 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6552.71..269951.17 rows=142031 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6410.68 rows=568124 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.83 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283106.70..582900.69 rows=1 width=24)
   ->  GroupAggregate  (cost=283106.70..1782076.64 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283106.70..1779236.79 rows=567960 width=16)
               ->  Gather Merge  (cost=283106.13..351130.26 rows=568124 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282106.07..282461.15 rows=142031 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6552.71..269951.17 rows=142031 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6410.68 rows=568124 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.83 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=659787.41..659787.41 rows=1 width=58)
   ->  Sort  (cost=659787.41..659787.47 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=659544.48..659787.29 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=659544.48..659786.22 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=658544.42..658774.25 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=658544.42..658590.32 rows=18362 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=72956.98..657243.98 rows=18362 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69265.38..651142.96 rows=458938 width=50)
                                             ->  Parallel Hash Join  (cost=69264.82..341579.20 rows=114768 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=26472.29..296347.86 rows=573838 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25898.46 rows=2295352 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.13..41855.13 rows=74992 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.13 rows=74992 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.60 rows=374960 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.66 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=659787.41..659787.41 rows=1 width=58)
   ->  Sort  (cost=659787.41..659787.47 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=659544.48..659787.29 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=659544.48..659786.22 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=658544.42..658774.25 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=658544.42..658590.32 rows=18362 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=72956.98..657243.98 rows=18362 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69265.38..651142.96 rows=458938 width=50)
                                             ->  Parallel Hash Join  (cost=69264.82..341579.20 rows=114768 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=26472.29..296347.86 rows=573838 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25898.46 rows=2295352 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.13..41855.13 rows=74992 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.13 rows=74992 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.60 rows=374960 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.66 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=659787.41..659787.41 rows=1 width=58)
   ->  Sort  (cost=659787.41..659787.47 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=659544.48..659787.29 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=659544.48..659786.22 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=658544.42..658774.25 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=658544.42..658590.32 rows=18362 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=72956.98..657243.98 rows=18362 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69265.38..651142.96 rows=458938 width=50)
                                             ->  Parallel Hash Join  (cost=69264.82..341579.20 rows=114768 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=26472.29..296347.86 rows=573838 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25898.46 rows=2295352 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.13..41855.13 rows=74992 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.13 rows=74992 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.60 rows=374960 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.66 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1277233.05..1277233.06 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1277233.05..1277233.06 rows=1 width=32)
         ->  Gather  (cost=1277232.62..1277233.03 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1276232.62..1276232.63 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=211877.86..1274764.96 rows=293531 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..211584.33 rows=1174124 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1277233.05..1277233.06 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1277233.05..1277233.06 rows=1 width=32)
         ->  Gather  (cost=1277232.62..1277233.03 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1276232.62..1276232.63 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=211877.86..1274764.96 rows=293531 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..211584.33 rows=1174124 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1277233.05..1277233.06 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1277233.05..1277233.06 rows=1 width=32)
         ->  Gather  (cost=1277232.62..1277233.03 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1276232.62..1276232.63 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=211877.86..1274764.96 rows=293531 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..211584.33 rows=1174124 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1153294.19..1153294.77 rows=1 width=116)
   ->  Finalize GroupAggregate  (cost=1153294.19..1159130.58 rows=10012 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Gather Merge  (cost=1153294.19..1158479.80 rows=40048 width=116)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1152294.13..1152709.64 rows=10012 width=116)
                     Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Sort  (cost=1152294.13..1152332.03 rows=15162 width=96)
                           Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                           ->  Parallel Hash Join  (cost=44274.70..1151241.27 rows=15162 width=96)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41224.65..1146444.21 rows=364319 width=46)
                                       ->  Parallel Hash Join  (cost=41224.08..354805.88 rows=300008 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298768.93 rows=3750093 width=8)
                                             ->  Parallel Hash  (cost=40849.12..40849.12 rows=29997 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.12 rows=29997 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.60 rows=374960 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 7 run 2
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1153294.19..1153294.77 rows=1 width=116)
   ->  Finalize GroupAggregate  (cost=1153294.19..1159130.58 rows=10012 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Gather Merge  (cost=1153294.19..1158479.80 rows=40048 width=116)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1152294.13..1152709.64 rows=10012 width=116)
                     Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Sort  (cost=1152294.13..1152332.03 rows=15162 width=96)
                           Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                           ->  Parallel Hash Join  (cost=44274.70..1151241.27 rows=15162 width=96)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41224.65..1146444.21 rows=364319 width=46)
                                       ->  Parallel Hash Join  (cost=41224.08..354805.88 rows=300008 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298768.93 rows=3750093 width=8)
                                             ->  Parallel Hash  (cost=40849.12..40849.12 rows=29997 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.12 rows=29997 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.60 rows=374960 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 7 run 3
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1153294.19..1153294.77 rows=1 width=116)
   ->  Finalize GroupAggregate  (cost=1153294.19..1159130.58 rows=10012 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Gather Merge  (cost=1153294.19..1158479.80 rows=40048 width=116)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1152294.13..1152709.64 rows=10012 width=116)
                     Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Sort  (cost=1152294.13..1152332.03 rows=15162 width=96)
                           Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                           ->  Parallel Hash Join  (cost=44274.70..1151241.27 rows=15162 width=96)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41224.65..1146444.21 rows=364319 width=46)
                                       ->  Parallel Hash Join  (cost=41224.08..354805.88 rows=300008 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298768.93 rows=3750093 width=8)
                                             ->  Parallel Hash  (cost=40849.12..40849.12 rows=29997 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.12 rows=29997 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.60 rows=374960 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 8 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=386427.62..391121.87 rows=1 width=64)
   ->  GroupAggregate  (cost=386427.62..11680786.92 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=386427.62..11680255.20 rows=24180 width=70)
               Join Filter: (supplier.s_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=386427.62..11671460.67 rows=24180 width=20)
                     ->  Nested Loop  (cost=386427.33..11617417.37 rows=24180 width=20)
                           ->  Nested Loop  (cost=386426.90..2950873.90 rows=3644074 width=24)
                                 ->  Gather Merge  (cost=386426.33..495538.36 rows=911282 width=8)
                                       Workers Planned: 4
                                       ->  Sort  (cost=385426.28..385995.83 rows=227820 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Parallel Hash Join  (cost=42792.53..365153.10 rows=227820 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..317519.39 rows=1139103 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=41855.13..41855.13 rows=74992 width=4)
                                                         ->  Hash Join  (cost=2.51..41855.13 rows=74992 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.60 rows=374960 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.65 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using part_pkey on part  (cost=0.43..2.38 rows=1 width=4)
                                 Index Cond: (p_partkey = lineitem.l_partkey)
                                 Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.24 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(36 rows)

query 8 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=386427.62..391121.87 rows=1 width=64)
   ->  GroupAggregate  (cost=386427.62..11680786.92 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=386427.62..11680255.20 rows=24180 width=70)
               Join Filter: (supplier.s_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=386427.62..11671460.67 rows=24180 width=20)
                     ->  Nested Loop  (cost=386427.33..11617417.37 rows=24180 width=20)
                           ->  Nested Loop  (cost=386426.90..2950873.90 rows=3644074 width=24)
                                 ->  Gather Merge  (cost=386426.33..495538.36 rows=911282 width=8)
                                       Workers Planned: 4
                                       ->  Sort  (cost=385426.28..385995.83 rows=227820 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Parallel Hash Join  (cost=42792.53..365153.10 rows=227820 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..317519.39 rows=1139103 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=41855.13..41855.13 rows=74992 width=4)
                                                         ->  Hash Join  (cost=2.51..41855.13 rows=74992 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.60 rows=374960 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.65 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using part_pkey on part  (cost=0.43..2.38 rows=1 width=4)
                                 Index Cond: (p_partkey = lineitem.l_partkey)
                                 Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.24 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(36 rows)

query 8 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=386427.62..391121.87 rows=1 width=64)
   ->  GroupAggregate  (cost=386427.62..11680786.92 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=386427.62..11680255.20 rows=24180 width=70)
               Join Filter: (supplier.s_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=386427.62..11671460.67 rows=24180 width=20)
                     ->  Nested Loop  (cost=386427.33..11617417.37 rows=24180 width=20)
                           ->  Nested Loop  (cost=386426.90..2950873.90 rows=3644074 width=24)
                                 ->  Gather Merge  (cost=386426.33..495538.36 rows=911282 width=8)
                                       Workers Planned: 4
                                       ->  Sort  (cost=385426.28..385995.83 rows=227820 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Parallel Hash Join  (cost=42792.53..365153.10 rows=227820 width=8)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..317519.39 rows=1139103 width=12)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Parallel Hash  (cost=41855.13..41855.13 rows=74992 width=4)
                                                         ->  Hash Join  (cost=2.51..41855.13 rows=74992 width=4)
                                                               Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.60 rows=374960 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                           Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.65 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Index Scan using part_pkey on part  (cost=0.43..2.38 rows=1 width=4)
                                 Index Cond: (p_partkey = lineitem.l_partkey)
                                 Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.24 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(36 rows)

query 9 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=33580.28..37802.84 rows=1 width=90)
   ->  GroupAggregate  (cost=33580.28..607847.26 rows=136 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=33580.28..607842.84 rows=136 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=9652.78..607837.38 rows=136 width=81)
                     Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                     ->  Gather Merge  (cost=8651.47..20048.53 rows=100000 width=30)
                           Workers Planned: 1
                           ->  Sort  (cost=7651.46..7798.52 rows=58824 width=30)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=1.56..2991.39 rows=58824 width=30)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                     ->  Materialize  (cost=1001.31..383788.85 rows=136 width=35)
                           ->  Gather  (cost=1001.31..383788.17 rows=136 width=35)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=1.31..382774.57 rows=34 width=35)
                                       ->  Nested Loop  (cost=0.87..382689.66 rows=34 width=35)
                                             ->  Nested Loop  (cost=0.43..125556.08 rows=100984 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47231.08 rows=25253 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..2.93 rows=17 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..2.54 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(31 rows)

query 9 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=33580.28..37802.84 rows=1 width=90)
   ->  GroupAggregate  (cost=33580.28..607847.26 rows=136 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=33580.28..607842.84 rows=136 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=9652.78..607837.38 rows=136 width=81)
                     Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                     ->  Gather Merge  (cost=8651.47..20048.53 rows=100000 width=30)
                           Workers Planned: 1
                           ->  Sort  (cost=7651.46..7798.52 rows=58824 width=30)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=1.56..2991.39 rows=58824 width=30)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                     ->  Materialize  (cost=1001.31..383788.85 rows=136 width=35)
                           ->  Gather  (cost=1001.31..383788.17 rows=136 width=35)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=1.31..382774.57 rows=34 width=35)
                                       ->  Nested Loop  (cost=0.87..382689.66 rows=34 width=35)
                                             ->  Nested Loop  (cost=0.43..125556.08 rows=100984 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47231.08 rows=25253 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..2.93 rows=17 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..2.54 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(31 rows)

query 9 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=33580.28..37802.84 rows=1 width=90)
   ->  GroupAggregate  (cost=33580.28..607847.26 rows=136 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=33580.28..607842.84 rows=136 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=9652.78..607837.38 rows=136 width=81)
                     Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                     ->  Gather Merge  (cost=8651.47..20048.53 rows=100000 width=30)
                           Workers Planned: 1
                           ->  Sort  (cost=7651.46..7798.52 rows=58824 width=30)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=1.56..2991.39 rows=58824 width=30)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                     ->  Materialize  (cost=1001.31..383788.85 rows=136 width=35)
                           ->  Gather  (cost=1001.31..383788.17 rows=136 width=35)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=1.31..382774.57 rows=34 width=35)
                                       ->  Nested Loop  (cost=0.87..382689.66 rows=34 width=35)
                                             ->  Nested Loop  (cost=0.43..125556.08 rows=100984 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47231.08 rows=25253 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..2.93 rows=17 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..2.54 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(31 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=842204.81..842204.86 rows=20 width=201)
   ->  Sort  (cost=842204.81..843647.69 rows=577154 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=743312.77..826846.95 rows=577154 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=743312.77..812418.10 rows=577154 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=742312.71..742673.43 rows=144288 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=686635.76..729948.25 rows=144288 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=686634.20..729503.72 rows=144288 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.60 rows=374960 width=147)
                                       ->  Parallel Hash  (cost=684830.60..684830.60 rows=144288 width=16)
                                             ->  Nested Loop  (cost=6725.21..684830.60 rows=144288 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6724.64..270178.88 rows=145749 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6578.90 rows=582996 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.83 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 10 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=842204.81..842204.86 rows=20 width=201)
   ->  Sort  (cost=842204.81..843647.69 rows=577154 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=743312.77..826846.95 rows=577154 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=743312.77..812418.10 rows=577154 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=742312.71..742673.43 rows=144288 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=686635.76..729948.25 rows=144288 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=686634.20..729503.72 rows=144288 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.60 rows=374960 width=147)
                                       ->  Parallel Hash  (cost=684830.60..684830.60 rows=144288 width=16)
                                             ->  Nested Loop  (cost=6725.21..684830.60 rows=144288 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6724.64..270178.88 rows=145749 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6578.90 rows=582996 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.83 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 10 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=842204.81..842204.86 rows=20 width=201)
   ->  Sort  (cost=842204.81..843647.69 rows=577154 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=743312.77..826846.95 rows=577154 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=743312.77..812418.10 rows=577154 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=742312.71..742673.43 rows=144288 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=686635.76..729948.25 rows=144288 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=686634.20..729503.72 rows=144288 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.60 rows=374960 width=147)
                                       ->  Parallel Hash  (cost=684830.60..684830.60 rows=144288 width=16)
                                             ->  Nested Loop  (cost=6725.21..684830.60 rows=144288 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6724.64..270178.88 rows=145749 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6578.90 rows=582996 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.83 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 11 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64129.42..64129.43 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=17943.50..17943.51 rows=1 width=32)
           ->  Gather  (cost=17943.38..17943.49 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=16943.38..16943.39 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..15541.30 rows=186944 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.54 rows=79 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=46185.91..46450.75 rows=105935 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=37785.62..45656.24 rows=105935 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               Planned Partitions: 4
               ->  Nested Loop  (cost=37.72..23596.17 rows=317804 width=14)
                     ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.54 rows=79 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(31 rows)

query 11 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64129.42..64129.43 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=17943.50..17943.51 rows=1 width=32)
           ->  Gather  (cost=17943.38..17943.49 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=16943.38..16943.39 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..15541.30 rows=186944 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.54 rows=79 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=46185.91..46450.75 rows=105935 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=37785.62..45656.24 rows=105935 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               Planned Partitions: 4
               ->  Nested Loop  (cost=37.72..23596.17 rows=317804 width=14)
                     ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.54 rows=79 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(31 rows)

query 11 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64129.42..64129.43 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=17943.50..17943.51 rows=1 width=32)
           ->  Gather  (cost=17943.38..17943.49 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=16943.38..16943.39 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..15541.30 rows=186944 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.54 rows=79 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=46185.91..46450.75 rows=105935 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=37785.62..45656.24 rows=105935 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               Planned Partitions: 4
               ->  Nested Loop  (cost=37.72..23596.17 rows=317804 width=14)
                     ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.54 rows=79 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(31 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469309.56..1576157.32 rows=1 width=27)
   ->  GroupAggregate  (cost=1469309.56..2217243.86 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469309.56..2212246.38 rows=285566 width=27)
               ->  Gather Merge  (cost=1469309.12..1503501.27 rows=285566 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468309.07..1468487.55 rows=71392 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462553.63 rows=71392 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 2
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469309.56..1576157.32 rows=1 width=27)
   ->  GroupAggregate  (cost=1469309.56..2217243.86 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469309.56..2212246.38 rows=285566 width=27)
               ->  Gather Merge  (cost=1469309.12..1503501.27 rows=285566 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468309.07..1468487.55 rows=71392 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462553.63 rows=71392 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 3
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469309.56..1576157.32 rows=1 width=27)
   ->  GroupAggregate  (cost=1469309.56..2217243.86 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469309.56..2212246.38 rows=285566 width=27)
               ->  Gather Merge  (cost=1469309.12..1503501.27 rows=285566 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468309.07..1468487.55 rows=71392 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462553.63 rows=71392 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1009895.49..1009895.50 rows=1 width=16)
   ->  Sort  (cost=1009895.49..1009895.99 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1009892.49..1009894.49 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=29.42..987394.91 rows=1499839 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=29.42..897402.16 rows=14998871 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28672.01 rows=1499839 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..677494.67 rows=14998871 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 2
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1009895.49..1009895.50 rows=1 width=16)
   ->  Sort  (cost=1009895.49..1009895.99 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1009892.49..1009894.49 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=29.42..987394.91 rows=1499839 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=29.42..897402.16 rows=14998871 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28672.01 rows=1499839 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..677494.67 rows=14998871 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 3
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1009895.49..1009895.50 rows=1 width=16)
   ->  Sort  (cost=1009895.49..1009895.99 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1009892.49..1009894.49 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=29.42..987394.91 rows=1499839 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=29.42..897402.16 rows=14998871 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28672.01 rows=1499839 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..677494.67 rows=14998871 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=894159.42..894159.44 rows=1 width=32)
   ->  Finalize Aggregate  (cost=894159.42..894159.44 rows=1 width=32)
         ->  Gather  (cost=894158.97..894159.38 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=893158.97..893158.98 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65736.28..889474.34 rows=210550 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=13505.13..836690.49 rows=210550 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..13294.58 rows=842201 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.07..45981.07 rows=500007 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.07 rows=500007 width=25)
(13 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=894159.42..894159.44 rows=1 width=32)
   ->  Finalize Aggregate  (cost=894159.42..894159.44 rows=1 width=32)
         ->  Gather  (cost=894158.97..894159.38 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=893158.97..893158.98 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65736.28..889474.34 rows=210550 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=13505.13..836690.49 rows=210550 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..13294.58 rows=842201 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.07..45981.07 rows=500007 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.07 rows=500007 width=25)
(13 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=894159.42..894159.44 rows=1 width=32)
   ->  Finalize Aggregate  (cost=894159.42..894159.44 rows=1 width=32)
         ->  Gather  (cost=894158.97..894159.38 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=893158.97..893158.98 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65736.28..889474.34 rows=210550 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=13505.13..836690.49 rows=210550 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..13294.58 rows=842201 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.07..45981.07 rows=500007 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.07 rows=500007 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2743415.07..2743522.31 rows=1 width=104)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1390229.99..1390230.00 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1387740.26..1388985.13 rows=99589 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1343672.13..1384752.59 rows=398356 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1342672.13..1343916.99 rows=99589 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=37175.08..1336875.91 rows=579622 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36595.46 rows=2318489 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1353185.07..1406587.66 rows=498 width=104)
         ->  Finalize GroupAggregate  (cost=1353184.78..1405363.30 rows=498 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1353184.78..1400881.79 rows=398356 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1352184.72..1352433.70 rows=99589 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1342672.13..1343916.99 rows=99589 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=37175.08..1336875.91 rows=579622 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36595.46 rows=2318489 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=72)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2743415.07..2743522.31 rows=1 width=104)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1390229.99..1390230.00 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1387740.26..1388985.13 rows=99589 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1343672.13..1384752.59 rows=398356 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1342672.13..1343916.99 rows=99589 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=37175.08..1336875.91 rows=579622 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36595.46 rows=2318489 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1353185.07..1406587.66 rows=498 width=104)
         ->  Finalize GroupAggregate  (cost=1353184.78..1405363.30 rows=498 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1353184.78..1400881.79 rows=398356 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1352184.72..1352433.70 rows=99589 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1342672.13..1343916.99 rows=99589 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=37175.08..1336875.91 rows=579622 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36595.46 rows=2318489 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=72)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2743415.07..2743522.31 rows=1 width=104)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1390229.99..1390230.00 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1387740.26..1388985.13 rows=99589 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1343672.13..1384752.59 rows=398356 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1342672.13..1343916.99 rows=99589 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=37175.08..1336875.91 rows=579622 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36595.46 rows=2318489 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1353185.07..1406587.66 rows=498 width=104)
         ->  Finalize GroupAggregate  (cost=1353184.78..1405363.30 rows=498 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1353184.78..1400881.79 rows=398356 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1352184.72..1352433.70 rows=99589 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1342672.13..1343916.99 rows=99589 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=37175.08..1336875.91 rows=579622 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36595.46 rows=2318489 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=72)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=251726.17..251726.17 rows=1 width=44)
   ->  Sort  (cost=251726.17..252110.93 rows=153903 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172183.74..250956.65 rows=153903 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172183.74..243464.40 rows=595322 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171183.68..171555.76 rows=148830 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size
                           ->  Parallel Hash Join  (cost=57883.06..158396.73 rows=148830 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101360.77 rows=999751 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.17..53481.17 rows=74435 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.17 rows=74435 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=251726.17..251726.17 rows=1 width=44)
   ->  Sort  (cost=251726.17..252110.93 rows=153903 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172183.74..250956.65 rows=153903 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172183.74..243464.40 rows=595322 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171183.68..171555.76 rows=148830 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size
                           ->  Parallel Hash Join  (cost=57883.06..158396.73 rows=148830 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101360.77 rows=999751 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.17..53481.17 rows=74435 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.17 rows=74435 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=251726.17..251726.17 rows=1 width=44)
   ->  Sort  (cost=251726.17..252110.93 rows=153903 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172183.74..250956.65 rows=153903 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172183.74..243464.40 rows=595322 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171183.68..171555.76 rows=148830 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size
                           ->  Parallel Hash Join  (cost=57883.06..158396.73 rows=148830 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101360.77 rows=999751 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.17..53481.17 rows=74435 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.17 rows=74435 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3301414.20..3301414.21 rows=1 width=32)
   ->  Aggregate  (cost=3301414.20..3301414.21 rows=1 width=32)
         ->  Merge Join  (cost=2254316.07..3301371.01 rows=17273 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2253315.14..3177990.21 rows=1764854 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2253315.14..3098571.78 rows=7059416 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2252315.08..2256727.22 rows=1764854 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869672.36..2038178.62 rows=1764854 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 32
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275103.28 rows=14996028 width=9)
               ->  Materialize  (cost=1000.93..100525.58 rows=58724 width=21)
                     ->  Gather Merge  (cost=1000.93..100378.77 rows=58724 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..92384.12 rows=14681 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.66 rows=490 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.05 rows=34 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 17 run 2
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3301414.20..3301414.21 rows=1 width=32)
   ->  Aggregate  (cost=3301414.20..3301414.21 rows=1 width=32)
         ->  Merge Join  (cost=2254316.07..3301371.01 rows=17273 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2253315.14..3177990.21 rows=1764854 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2253315.14..3098571.78 rows=7059416 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2252315.08..2256727.22 rows=1764854 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869672.36..2038178.62 rows=1764854 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 32
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275103.28 rows=14996028 width=9)
               ->  Materialize  (cost=1000.93..100525.58 rows=58724 width=21)
                     ->  Gather Merge  (cost=1000.93..100378.77 rows=58724 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..92384.12 rows=14681 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.66 rows=490 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.05 rows=34 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 17 run 3
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3301414.20..3301414.21 rows=1 width=32)
   ->  Aggregate  (cost=3301414.20..3301414.21 rows=1 width=32)
         ->  Merge Join  (cost=2254316.07..3301371.01 rows=17273 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2253315.14..3177990.21 rows=1764854 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2253315.14..3098571.78 rows=7059416 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2252315.08..2256727.22 rows=1764854 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869672.36..2038178.62 rows=1764854 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 32
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275103.28 rows=14996028 width=9)
               ->  Materialize  (cost=1000.93..100525.58 rows=58724 width=21)
                     ->  Gather Merge  (cost=1000.93..100378.77 rows=58724 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..92384.12 rows=14681 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.66 rows=490 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.05 rows=34 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 18 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8774570.80..8774571.05 rows=100 width=71)
   ->  Sort  (cost=8774570.80..8824543.09 rows=19988915 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7409379.76..8010608.85 rows=19988915 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 256
               ->  Hash Join  (cost=78513.23..6332633.13 rows=19988915 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=30.85..5919604.71 rows=19988915 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3390244.86 rows=4998676 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547971.00 rows=15000371 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692302.72 rows=4998676 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167441.75 rows=59984112 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167441.75 rows=59984112 width=9)
                     ->  Hash  (cost=50945.39..50945.39 rows=1499839 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50945.39 rows=1499839 width=23)
(20 rows)

query 18 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8774570.80..8774571.05 rows=100 width=71)
   ->  Sort  (cost=8774570.80..8824543.09 rows=19988915 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7409379.76..8010608.85 rows=19988915 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 256
               ->  Hash Join  (cost=78513.23..6332633.13 rows=19988915 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=30.85..5919604.71 rows=19988915 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3390244.86 rows=4998676 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547971.00 rows=15000371 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692302.72 rows=4998676 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167441.75 rows=59984112 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167441.75 rows=59984112 width=9)
                     ->  Hash  (cost=50945.39..50945.39 rows=1499839 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50945.39 rows=1499839 width=23)
(20 rows)

query 18 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8774570.80..8774571.05 rows=100 width=71)
   ->  Sort  (cost=8774570.80..8824543.09 rows=19988915 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=7409379.76..8010608.85 rows=19988915 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 256
               ->  Hash Join  (cost=78513.23..6332633.13 rows=19988915 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=30.85..5919604.71 rows=19988915 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Join  (cost=1.00..3390244.86 rows=4998676 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547971.00 rows=15000371 width=20)
                                 ->  GroupAggregate  (cost=0.56..2692302.72 rows=4998676 width=4)
                                       Group Key: lineitem_1.l_orderkey
                                       Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167441.75 rows=59984112 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167441.75 rows=59984112 width=9)
                     ->  Hash  (cost=50945.39..50945.39 rows=1499839 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50945.39 rows=1499839 width=23)
(20 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=128195.65..128195.66 rows=1 width=32)
   ->  Finalize Aggregate  (cost=128195.65..128195.66 rows=1 width=32)
         ->  Gather  (cost=128195.22..128195.63 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=127195.22..127195.23 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..127193.03 rows=292 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.29 rows=1246 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.13 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=128195.65..128195.66 rows=1 width=32)
   ->  Finalize Aggregate  (cost=128195.65..128195.66 rows=1 width=32)
         ->  Gather  (cost=128195.22..128195.63 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=127195.22..127195.23 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..127193.03 rows=292 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.29 rows=1246 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.13 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=128195.65..128195.66 rows=1 width=32)
   ->  Finalize Aggregate  (cost=128195.65..128195.66 rows=1 width=32)
         ->  Gather  (cost=128195.22..128195.63 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=127195.22..127195.23 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..127193.03 rows=292 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.29 rows=1246 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..52.13 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2442400.71..2720140.89 rows=1 width=52)
   ->  Nested Loop Semi Join  (cost=2442400.71..2720140.89 rows=1 width=52)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=56)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=56)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=56)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=60)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2438277.78..2715202.09 rows=6 width=8)
               ->  Nested Loop  (cost=2438277.78..2715202.06 rows=6 width=8)
                     ->  Hash Join  (cost=2438277.35..2663198.37 rows=98458 width=44)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  HashAggregate  (cost=2385500.70..2548892.15 rows=4873628 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 64
                                 ->  Bitmap Heap Scan on lineitem  (cost=148239.33..1995821.87 rows=9245392 width=13)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..145927.98 rows=9245392 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=52271.58..52271.58 rows=40405 width=4)
                                 ->  Gather  (cost=1000.00..52271.58 rows=40405 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..47231.08 rows=10101 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                     ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                           Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                           Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(32 rows)

query 20 run 2
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2442400.71..2720140.89 rows=1 width=52)
   ->  Nested Loop Semi Join  (cost=2442400.71..2720140.89 rows=1 width=52)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=56)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=56)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=56)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=60)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2438277.78..2715202.09 rows=6 width=8)
               ->  Nested Loop  (cost=2438277.78..2715202.06 rows=6 width=8)
                     ->  Hash Join  (cost=2438277.35..2663198.37 rows=98458 width=44)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  HashAggregate  (cost=2385500.70..2548892.15 rows=4873628 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 64
                                 ->  Bitmap Heap Scan on lineitem  (cost=148239.33..1995821.87 rows=9245392 width=13)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..145927.98 rows=9245392 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=52271.58..52271.58 rows=40405 width=4)
                                 ->  Gather  (cost=1000.00..52271.58 rows=40405 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..47231.08 rows=10101 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                     ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                           Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                           Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(32 rows)

query 20 run 3
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2442400.71..2720140.89 rows=1 width=52)
   ->  Nested Loop Semi Join  (cost=2442400.71..2720140.89 rows=1 width=52)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=56)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=56)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=56)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=60)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2438277.78..2715202.09 rows=6 width=8)
               ->  Nested Loop  (cost=2438277.78..2715202.06 rows=6 width=8)
                     ->  Hash Join  (cost=2438277.35..2663198.37 rows=98458 width=44)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  HashAggregate  (cost=2385500.70..2548892.15 rows=4873628 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 64
                                 ->  Bitmap Heap Scan on lineitem  (cost=148239.33..1995821.87 rows=9245392 width=13)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..145927.98 rows=9245392 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=52271.58..52271.58 rows=40405 width=4)
                                 ->  Gather  (cost=1000.00..52271.58 rows=40405 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..47231.08 rows=10101 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                     ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                           Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                           Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(32 rows)

query 21 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1908774.75..1908774.76 rows=1 width=34)
   ->  Sort  (cost=1908774.75..1908774.76 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1908774.72..1908774.74 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1908774.72..1908774.73 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1908774.71 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1908771.48 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1908768.45 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1907768.35 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335535.14 rows=199947 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312593.35 rows=4998676 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.23 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1908774.75..1908774.76 rows=1 width=34)
   ->  Sort  (cost=1908774.75..1908774.76 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1908774.72..1908774.74 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1908774.72..1908774.73 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1908774.71 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1908771.48 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1908768.45 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1907768.35 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335535.14 rows=199947 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312593.35 rows=4998676 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.23 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1908774.75..1908774.76 rows=1 width=34)
   ->  Sort  (cost=1908774.75..1908774.76 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1908774.72..1908774.74 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1908774.72..1908774.73 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1908774.71 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1908771.48 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1908768.45 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1907768.35 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335535.14 rows=199947 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312593.35 rows=4998676 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.23 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 22 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93874.61..93876.21 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46819.90..46819.91 rows=1 width=32)
           ->  Gather  (cost=46819.47..46819.88 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45819.47..45819.48 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45789.69 rows=11908 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47054.70..59084.24 rows=7500 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47054.70..58896.74 rows=7500 width=38)
               ->  Gather Merge  (cost=47054.26..49149.38 rows=17498 width=26)
                     Workers Planned: 4
                     Params Evaluated: $1
                     ->  Sort  (cost=46054.21..46065.14 rows=4374 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45789.69 rows=4374 width=26)
                                 Filter: ((c_acctbal > $1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.71 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

query 22 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93874.61..93876.21 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46819.90..46819.91 rows=1 width=32)
           ->  Gather  (cost=46819.47..46819.88 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45819.47..45819.48 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45789.69 rows=11908 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47054.70..59084.24 rows=7500 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47054.70..58896.74 rows=7500 width=38)
               ->  Gather Merge  (cost=47054.26..49149.38 rows=17498 width=26)
                     Workers Planned: 4
                     Params Evaluated: $1
                     ->  Sort  (cost=46054.21..46065.14 rows=4374 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45789.69 rows=4374 width=26)
                                 Filter: ((c_acctbal > $1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.71 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

query 22 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93874.61..93876.21 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46819.90..46819.91 rows=1 width=32)
           ->  Gather  (cost=46819.47..46819.88 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45819.47..45819.48 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45789.69 rows=11908 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47054.70..59084.24 rows=7500 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47054.70..58896.74 rows=7500 width=38)
               ->  Gather Merge  (cost=47054.26..49149.38 rows=17498 width=26)
                     Workers Planned: 4
                     Params Evaluated: $1
                     ->  Sort  (cost=46054.21..46065.14 rows=4374 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45789.69 rows=4374 width=26)
                                 Filter: ((c_acctbal > $1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.71 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

