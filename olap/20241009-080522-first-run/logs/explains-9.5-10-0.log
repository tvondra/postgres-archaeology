query 1 run 1
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=4247140.12..4247140.13 rows=1 width=25)
   ->  Sort  (cost=4247140.12..4247140.14 rows=6 width=25)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=4247139.93..4247140.09 rows=6 width=25)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874958.45 rows=59304537 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 2
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=4247140.12..4247140.13 rows=1 width=25)
   ->  Sort  (cost=4247140.12..4247140.14 rows=6 width=25)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=4247139.93..4247140.09 rows=6 width=25)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874958.45 rows=59304537 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 3
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=4247140.12..4247140.13 rows=1 width=25)
   ->  Sort  (cost=4247140.12..4247140.14 rows=6 width=25)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=4247139.93..4247140.09 rows=6 width=25)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874958.45 rows=59304537 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=887110.23..887110.23 rows=1 width=193)
   ->  Sort  (cost=887110.23..887110.23 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=365805.80..887110.22 rows=1 width=193)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89212.21 rows=7502 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=365804.87..373803.73 rows=1599771 width=173)
                     ->  Sort  (cost=365804.87..369804.30 rows=1599771 width=173)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..113074.75 rows=1599771 width=173)
                                 ->  Nested Loop  (cost=0.29..1278.55 rows=20000 width=167)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.19 rows=4000 width=145)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.98..69.99 rows=1 width=6)
                       ->  Nested Loop  (cost=2.29..69.97 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.67 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.84 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(37 rows)

query 2 run 2
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=887110.23..887110.23 rows=1 width=193)
   ->  Sort  (cost=887110.23..887110.23 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=365805.80..887110.22 rows=1 width=193)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89212.21 rows=7502 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=365804.87..373803.73 rows=1599771 width=173)
                     ->  Sort  (cost=365804.87..369804.30 rows=1599771 width=173)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..113074.75 rows=1599771 width=173)
                                 ->  Nested Loop  (cost=0.29..1278.55 rows=20000 width=167)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.19 rows=4000 width=145)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.98..69.99 rows=1 width=6)
                       ->  Nested Loop  (cost=2.29..69.97 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.67 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.84 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(37 rows)

query 2 run 3
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=887110.23..887110.23 rows=1 width=193)
   ->  Sort  (cost=887110.23..887110.23 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=365805.80..887110.22 rows=1 width=193)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using part_pkey on part  (cost=0.43..89212.21 rows=7502 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=365804.87..373803.73 rows=1599771 width=173)
                     ->  Sort  (cost=365804.87..369804.30 rows=1599771 width=173)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..113074.75 rows=1599771 width=173)
                                 ->  Nested Loop  (cost=0.29..1278.55 rows=20000 width=167)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..215.19 rows=4000 width=145)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.98..69.99 rows=1 width=6)
                       ->  Nested Loop  (cost=2.29..69.97 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.67 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.84 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(37 rows)

query 3 run 1
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3460600.81..3460600.83 rows=10 width=24)
   ->  Sort  (cost=3460600.81..3468499.84 rows=3159612 width=24)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3297534.37..3392322.73 rows=3159612 width=24)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=3297534.37..3305433.40 rows=3159612 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=563177.77..2914776.96 rows=3159612 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1874958.45 rows=32399633 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=537752.37..537752.37 rows=1462672 width=12)
                                 ->  Hash Join  (cost=144308.45..537752.37 rows=1462672 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=85819.36..437509.82 rows=7233797 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..84010.91 rows=7233797 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54697.70..54697.70 rows=303311 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54697.70 rows=303311 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 3 run 2
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3460600.81..3460600.83 rows=10 width=24)
   ->  Sort  (cost=3460600.81..3468499.84 rows=3159612 width=24)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3297534.37..3392322.73 rows=3159612 width=24)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=3297534.37..3305433.40 rows=3159612 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=563177.77..2914776.96 rows=3159612 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1874958.45 rows=32399633 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=537752.37..537752.37 rows=1462672 width=12)
                                 ->  Hash Join  (cost=144308.45..537752.37 rows=1462672 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=85819.36..437509.82 rows=7233797 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..84010.91 rows=7233797 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54697.70..54697.70 rows=303311 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54697.70 rows=303311 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 3 run 3
SET
SET
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3460600.81..3460600.83 rows=10 width=24)
   ->  Sort  (cost=3460600.81..3468499.84 rows=3159612 width=24)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3297534.37..3392322.73 rows=3159612 width=24)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=3297534.37..3305433.40 rows=3159612 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Hash Join  (cost=563177.77..2914776.96 rows=3159612 width=24)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1874958.45 rows=32399633 width=16)
                                 Filter: (l_shipdate > '1995-03-07'::date)
                           ->  Hash  (cost=537752.37..537752.37 rows=1462672 width=12)
                                 ->  Hash Join  (cost=144308.45..537752.37 rows=1462672 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=85819.36..437509.82 rows=7233797 width=16)
                                             Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..84010.91 rows=7233797 width=0)
                                                   Index Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Hash  (cost=54697.70..54697.70 rows=303311 width=4)
                                             ->  Seq Scan on customer  (cost=0.00..54697.70 rows=303311 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 4 run 1
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1679748.02..1679748.02 rows=1 width=16)
   ->  Sort  (cost=1679748.02..1679748.02 rows=1 width=16)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=1679748.00..1679748.01 rows=1 width=16)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=7878.04..1677006.46 rows=548307 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=7877.47..277371.38 rows=548394 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7740.38 rows=548394 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 4 run 2
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1679748.02..1679748.02 rows=1 width=16)
   ->  Sort  (cost=1679748.02..1679748.02 rows=1 width=16)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=1679748.00..1679748.01 rows=1 width=16)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=7878.04..1677006.46 rows=548307 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=7877.47..277371.38 rows=548394 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7740.38 rows=548394 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 4 run 3
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1679748.02..1679748.02 rows=1 width=16)
   ->  Sort  (cost=1679748.02..1679748.02 rows=1 width=16)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=1679748.00..1679748.01 rows=1 width=16)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=7878.04..1677006.46 rows=548307 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=7877.47..277371.38 rows=548394 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7740.38 rows=548394 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 5 run 1
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1682435.28..1682435.28 rows=1 width=38)
   ->  Sort  (cost=1682435.28..1682435.34 rows=25 width=38)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=1682434.84..1682435.15 rows=25 width=38)
               Group Key: nation.n_name
               ->  Hash Join  (cost=101002.09..1681708.46 rows=72638 width=38)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Nested Loop  (cost=96281.09..1662497.49 rows=1835146 width=50)
                           ->  Hash Join  (cost=96280.53..405155.19 rows=458859 width=38)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=32954.98..328637.43 rows=2294297 width=8)
                                       Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..32381.41 rows=2294297 width=0)
                                             Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Hash  (cost=59575.41..59575.41 rows=300011 width=38)
                                       ->  Hash Join  (cost=2.53..59575.41 rows=300011 width=38)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                     ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(29 rows)

query 5 run 2
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1682435.28..1682435.28 rows=1 width=38)
   ->  Sort  (cost=1682435.28..1682435.34 rows=25 width=38)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=1682434.84..1682435.15 rows=25 width=38)
               Group Key: nation.n_name
               ->  Hash Join  (cost=101002.09..1681708.46 rows=72638 width=38)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Nested Loop  (cost=96281.09..1662497.49 rows=1835146 width=50)
                           ->  Hash Join  (cost=96280.53..405155.19 rows=458859 width=38)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=32954.98..328637.43 rows=2294297 width=8)
                                       Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..32381.41 rows=2294297 width=0)
                                             Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Hash  (cost=59575.41..59575.41 rows=300011 width=38)
                                       ->  Hash Join  (cost=2.53..59575.41 rows=300011 width=38)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                     ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(29 rows)

query 5 run 3
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1682435.28..1682435.28 rows=1 width=38)
   ->  Sort  (cost=1682435.28..1682435.34 rows=25 width=38)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=1682434.84..1682435.15 rows=25 width=38)
               Group Key: nation.n_name
               ->  Hash Join  (cost=101002.09..1681708.46 rows=72638 width=38)
                     Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                     ->  Nested Loop  (cost=96281.09..1662497.49 rows=1835146 width=50)
                           ->  Hash Join  (cost=96280.53..405155.19 rows=458859 width=38)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=32954.98..328637.43 rows=2294297 width=8)
                                       Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..32381.41 rows=2294297 width=0)
                                             Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Hash  (cost=59575.41..59575.41 rows=300011 width=38)
                                       ->  Hash Join  (cost=2.53..59575.41 rows=300011 width=38)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                     ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(29 rows)

query 6 run 1
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1109790.71..1109790.72 rows=1 width=12)
   ->  Aggregate  (cost=1109790.71..1109790.72 rows=1 width=12)
         ->  Bitmap Heap Scan on lineitem  (cost=219589.42..1103669.41 rows=1224259 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..219283.36 rows=1224259 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 2
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1109790.71..1109790.72 rows=1 width=12)
   ->  Aggregate  (cost=1109790.71..1109790.72 rows=1 width=12)
         ->  Bitmap Heap Scan on lineitem  (cost=219589.42..1103669.41 rows=1224259 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..219283.36 rows=1224259 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 3
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1109790.71..1109790.72 rows=1 width=12)
   ->  Aggregate  (cost=1109790.71..1109790.72 rows=1 width=12)
         ->  Bitmap Heap Scan on lineitem  (cost=219589.42..1103669.41 rows=1224259 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..219283.36 rows=1224259 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2380310.34..2380310.35 rows=1 width=68)
   ->  Sort  (cost=2380310.34..2380317.94 rows=3039 width=68)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2380241.97..2380295.15 rows=3039 width=68)
               Group Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
               ->  Hash Join  (cost=857246.11..2379343.27 rows=59913 width=68)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=295271.28..1775855.68 rows=1439662 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=291493.88..1689472.70 rows=18189055 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..286946.62 rows=18189055 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3677.40..3677.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3677.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=538773.15..538773.15 rows=1199895 width=30)
                           ->  Hash Join  (cost=59274.26..538773.15 rows=1199895 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411254.90 rows=14998690 width=8)
                                 ->  Hash  (cost=57774.21..57774.21 rows=120004 width=30)
                                       ->  Hash Join  (cost=1.40..57774.21 rows=120004 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(32 rows)

query 7 run 2
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2380310.34..2380310.35 rows=1 width=68)
   ->  Sort  (cost=2380310.34..2380317.94 rows=3039 width=68)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2380241.97..2380295.15 rows=3039 width=68)
               Group Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
               ->  Hash Join  (cost=857246.11..2379343.27 rows=59913 width=68)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=295271.28..1775855.68 rows=1439662 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=291493.88..1689472.70 rows=18189055 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..286946.62 rows=18189055 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3677.40..3677.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3677.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=538773.15..538773.15 rows=1199895 width=30)
                           ->  Hash Join  (cost=59274.26..538773.15 rows=1199895 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411254.90 rows=14998690 width=8)
                                 ->  Hash  (cost=57774.21..57774.21 rows=120004 width=30)
                                       ->  Hash Join  (cost=1.40..57774.21 rows=120004 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(32 rows)

query 7 run 3
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2380310.34..2380310.35 rows=1 width=68)
   ->  Sort  (cost=2380310.34..2380317.94 rows=3039 width=68)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  HashAggregate  (cost=2380241.97..2380295.15 rows=3039 width=68)
               Group Key: n1.n_name, n2.n_name, date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone)
               ->  Hash Join  (cost=857246.11..2379343.27 rows=59913 width=68)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=295271.28..1775855.68 rows=1439662 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=291493.88..1689472.70 rows=18189055 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..286946.62 rows=18189055 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3677.40..3677.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3677.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=538773.15..538773.15 rows=1199895 width=30)
                           ->  Hash Join  (cost=59274.26..538773.15 rows=1199895 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411254.90 rows=14998690 width=8)
                                 ->  Hash  (cost=57774.21..57774.21 rows=120004 width=30)
                                       ->  Hash Join  (cost=1.40..57774.21 rows=120004 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(32 rows)

query 8 run 1
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1137534.25..1137534.25 rows=1 width=42)
   ->  Sort  (cost=1137534.25..1137536.08 rows=733 width=42)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1137514.09..1137530.58 rows=733 width=42)
               Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=504404.13..1137032.23 rows=24093 width=42)
                     Join Filter: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=504404.13..1127875.58 rows=24093 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=499933.13..1123072.34 rows=24351 width=20)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.56..613140.67 rows=399894 width=20)
                                       ->  Seq Scan on part  (cost=0.00..65980.86 rows=13333 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..40.74 rows=30 width=24)
                                             Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=484947.80..484947.80 rows=913341 width=8)
                                       ->  Hash Join  (cost=128920.70..484947.80 rows=913341 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=65595.15..395363.71 rows=4566704 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..64453.47 rows=4566704 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59575.41..59575.41 rows=300011 width=4)
                                                   ->  Hash Join  (cost=2.53..59575.41 rows=300011 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(38 rows)

query 8 run 2
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1137534.25..1137534.25 rows=1 width=42)
   ->  Sort  (cost=1137534.25..1137536.08 rows=733 width=42)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1137514.09..1137530.58 rows=733 width=42)
               Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=504404.13..1137032.23 rows=24093 width=42)
                     Join Filter: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=504404.13..1127875.58 rows=24093 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=499933.13..1123072.34 rows=24351 width=20)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.56..613140.67 rows=399894 width=20)
                                       ->  Seq Scan on part  (cost=0.00..65980.86 rows=13333 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..40.74 rows=30 width=24)
                                             Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=484947.80..484947.80 rows=913341 width=8)
                                       ->  Hash Join  (cost=128920.70..484947.80 rows=913341 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=65595.15..395363.71 rows=4566704 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..64453.47 rows=4566704 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59575.41..59575.41 rows=300011 width=4)
                                                   ->  Hash Join  (cost=2.53..59575.41 rows=300011 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(38 rows)

query 8 run 3
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1137534.25..1137534.25 rows=1 width=42)
   ->  Sort  (cost=1137534.25..1137536.08 rows=733 width=42)
         Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  HashAggregate  (cost=1137514.09..1137530.58 rows=733 width=42)
               Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=504404.13..1137032.23 rows=24093 width=42)
                     Join Filter: (supplier.s_nationkey = n2.n_nationkey)
                     ->  Hash Join  (cost=504404.13..1127875.58 rows=24093 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=499933.13..1123072.34 rows=24351 width=20)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=0.56..613140.67 rows=399894 width=20)
                                       ->  Seq Scan on part  (cost=0.00..65980.86 rows=13333 width=4)
                                             Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..40.74 rows=30 width=24)
                                             Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=484947.80..484947.80 rows=913341 width=8)
                                       ->  Hash Join  (cost=128920.70..484947.80 rows=913341 width=8)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=65595.15..395363.71 rows=4566704 width=12)
                                                   Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..64453.47 rows=4566704 width=0)
                                                         Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Hash  (cost=59575.41..59575.41 rows=300011 width=4)
                                                   ->  Hash Join  (cost=2.53..59575.41 rows=300011 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=8)
                                                         ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(38 rows)

query 9 run 1
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1676169.64..1676169.65 rows=1 width=53)
   ->  Sort  (cost=1676169.64..1676170.00 rows=144 width=53)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
         ->  HashAggregate  (cost=1676166.40..1676168.92 rows=144 width=53)
               Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=67497.29..1676163.88 rows=144 width=53)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=67497.29..1676107.85 rows=144 width=31)
                           ->  Nested Loop  (cost=67496.86..1675746.79 rows=144 width=31)
                                 ->  Nested Loop  (cost=67496.57..1675410.54 rows=144 width=35)
                                       ->  Hash Join  (cost=67496.00..357550.03 rows=484777 width=18)
                                             Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                             ->  Seq Scan on partsupp  (cost=0.00..255210.55 rows=7998855 width=14)
                                             ->  Hash  (cost=65980.86..65980.86 rows=121211 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..65980.86 rows=121211 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 9 run 2
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1676169.64..1676169.65 rows=1 width=53)
   ->  Sort  (cost=1676169.64..1676170.00 rows=144 width=53)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
         ->  HashAggregate  (cost=1676166.40..1676168.92 rows=144 width=53)
               Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=67497.29..1676163.88 rows=144 width=53)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=67497.29..1676107.85 rows=144 width=31)
                           ->  Nested Loop  (cost=67496.86..1675746.79 rows=144 width=31)
                                 ->  Nested Loop  (cost=67496.57..1675410.54 rows=144 width=35)
                                       ->  Hash Join  (cost=67496.00..357550.03 rows=484777 width=18)
                                             Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                             ->  Seq Scan on partsupp  (cost=0.00..255210.55 rows=7998855 width=14)
                                             ->  Hash  (cost=65980.86..65980.86 rows=121211 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..65980.86 rows=121211 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 9 run 3
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1676169.64..1676169.65 rows=1 width=53)
   ->  Sort  (cost=1676169.64..1676170.00 rows=144 width=53)
         Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
         ->  HashAggregate  (cost=1676166.40..1676168.92 rows=144 width=53)
               Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
               ->  Nested Loop  (cost=67497.29..1676163.88 rows=144 width=53)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=67497.29..1676107.85 rows=144 width=31)
                           ->  Nested Loop  (cost=67496.86..1675746.79 rows=144 width=31)
                                 ->  Nested Loop  (cost=67496.57..1675410.54 rows=144 width=35)
                                       ->  Hash Join  (cost=67496.00..357550.03 rows=484777 width=18)
                                             Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                             ->  Seq Scan on partsupp  (cost=0.00..255210.55 rows=7998855 width=14)
                                             ->  Hash  (cost=65980.86..65980.86 rows=121211 width=4)
                                                   ->  Seq Scan on part  (cost=0.00..65980.86 rows=121211 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.33 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 10 run 1
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2198404.07..2198404.12 rows=20 width=181)
   ->  Sort  (cost=2198404.07..2199793.68 rows=555845 width=181)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2161379.44..2183613.24 rows=555845 width=181)
               Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
               ->  Sort  (cost=2161379.44..2162769.05 rows=555845 width=181)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=110111.76..2076583.31 rows=555845 width=181)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=110110.20..2068938.88 rows=555845 width=159)
                                 ->  Hash Join  (cost=110109.64..425145.76 rows=569604 width=151)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=8183.38..277995.44 rows=569604 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8040.98 rows=569604 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Hash  (cost=50947.56..50947.56 rows=1500056 width=147)
                                             ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=147)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 2
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2198404.07..2198404.12 rows=20 width=181)
   ->  Sort  (cost=2198404.07..2199793.68 rows=555845 width=181)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2161379.44..2183613.24 rows=555845 width=181)
               Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
               ->  Sort  (cost=2161379.44..2162769.05 rows=555845 width=181)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=110111.76..2076583.31 rows=555845 width=181)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=110110.20..2068938.88 rows=555845 width=159)
                                 ->  Hash Join  (cost=110109.64..425145.76 rows=569604 width=151)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=8183.38..277995.44 rows=569604 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8040.98 rows=569604 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Hash  (cost=50947.56..50947.56 rows=1500056 width=147)
                                             ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=147)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 3
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2198404.07..2198404.12 rows=20 width=181)
   ->  Sort  (cost=2198404.07..2199793.68 rows=555845 width=181)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=2161379.44..2183613.24 rows=555845 width=181)
               Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
               ->  Sort  (cost=2161379.44..2162769.05 rows=555845 width=181)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Hash Join  (cost=110111.76..2076583.31 rows=555845 width=181)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=110110.20..2068938.88 rows=555845 width=159)
                                 ->  Hash Join  (cost=110109.64..425145.76 rows=569604 width=151)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=8183.38..277995.44 rows=569604 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8040.98 rows=569604 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Hash  (cost=50947.56..50947.56 rows=1500056 width=147)
                                             ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=147)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.88 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=94518.91..94518.92 rows=1 width=14)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=27032.36..27032.37 rows=1 width=10)
           ->  Nested Loop  (cost=49.72..24632.70 rows=319954 width=10)
                 ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=49.29..2232.15 rows=4000 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.79 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=67486.55..68286.43 rows=319954 width=14)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53888.50..65886.78 rows=319954 width=14)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53888.50..54688.39 rows=319954 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24632.70 rows=319954 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(30 rows)

query 11 run 2
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=94518.91..94518.92 rows=1 width=14)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=27032.36..27032.37 rows=1 width=10)
           ->  Nested Loop  (cost=49.72..24632.70 rows=319954 width=10)
                 ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=49.29..2232.15 rows=4000 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.79 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=67486.55..68286.43 rows=319954 width=14)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53888.50..65886.78 rows=319954 width=14)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53888.50..54688.39 rows=319954 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24632.70 rows=319954 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(30 rows)

query 11 run 3
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=94518.91..94518.92 rows=1 width=14)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=27032.36..27032.37 rows=1 width=10)
           ->  Nested Loop  (cost=49.72..24632.70 rows=319954 width=10)
                 ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=49.29..2232.15 rows=4000 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.79 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=67486.55..68286.43 rows=319954 width=14)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53888.50..65886.78 rows=319954 width=14)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53888.50..54688.39 rows=319954 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.72..24632.70 rows=319954 width=14)
                           ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.79 rows=80 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(30 rows)

query 12 run 1
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3095023.47..3095023.47 rows=1 width=27)
   ->  Sort  (cost=3095023.47..3095023.47 rows=1 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=3095023.45..3095023.46 rows=1 width=27)
               Group Key: lineitem.l_shipmode
               ->  Merge Join  (cost=2500488.18..3090069.88 rows=283061 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..547945.79 rows=14998690 width=20)
                     ->  Sort  (cost=2500443.05..2501150.70 rows=283061 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..2474810.81 rows=283061 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(12 rows)

query 12 run 2
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3095023.47..3095023.47 rows=1 width=27)
   ->  Sort  (cost=3095023.47..3095023.47 rows=1 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=3095023.45..3095023.46 rows=1 width=27)
               Group Key: lineitem.l_shipmode
               ->  Merge Join  (cost=2500488.18..3090069.88 rows=283061 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..547945.79 rows=14998690 width=20)
                     ->  Sort  (cost=2500443.05..2501150.70 rows=283061 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..2474810.81 rows=283061 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(12 rows)

query 12 run 3
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3095023.47..3095023.47 rows=1 width=27)
   ->  Sort  (cost=3095023.47..3095023.47 rows=1 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=3095023.45..3095023.46 rows=1 width=27)
               Group Key: lineitem.l_shipmode
               ->  Merge Join  (cost=2500488.18..3090069.88 rows=283061 width=27)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..547945.79 rows=14998690 width=20)
                     ->  Sort  (cost=2500443.05..2501150.70 rows=283061 width=15)
                           Sort Key: lineitem.l_orderkey
                           ->  Seq Scan on lineitem  (cost=0.00..2474810.81 rows=283061 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(12 rows)

query 13 run 1
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1048447.58..1048447.58 rows=1 width=8)
   ->  Sort  (cost=1048447.58..1048448.08 rows=200 width=8)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1048444.58..1048446.58 rows=200 width=8)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=0.86..1025943.74 rows=1500056 width=8)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=0.86..935957.22 rows=14997191 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28675.27 rows=1500056 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716074.41 rows=14997191 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 2
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1048447.58..1048447.58 rows=1 width=8)
   ->  Sort  (cost=1048447.58..1048448.08 rows=200 width=8)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1048444.58..1048446.58 rows=200 width=8)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=0.86..1025943.74 rows=1500056 width=8)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=0.86..935957.22 rows=14997191 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28675.27 rows=1500056 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716074.41 rows=14997191 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 3
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1048447.58..1048447.58 rows=1 width=8)
   ->  Sort  (cost=1048447.58..1048448.08 rows=200 width=8)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1048444.58..1048446.58 rows=200 width=8)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=0.86..1025943.74 rows=1500056 width=8)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=0.86..935957.22 rows=14997191 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28675.27 rows=1500056 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716074.41 rows=14997191 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 14 run 1
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=790310.63..790310.65 rows=1 width=33)
   ->  Aggregate  (cost=790310.63..790310.65 rows=1 width=33)
         ->  Hash Join  (cost=111089.35..777823.26 rows=713564 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=11436.60..646825.04 rows=713564 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..11258.20 rows=713564 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.89..60980.89 rows=1999989 width=25)
                     ->  Seq Scan on part  (cost=0.00..60980.89 rows=1999989 width=25)
(10 rows)

query 14 run 2
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=790310.63..790310.65 rows=1 width=33)
   ->  Aggregate  (cost=790310.63..790310.65 rows=1 width=33)
         ->  Hash Join  (cost=111089.35..777823.26 rows=713564 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=11436.60..646825.04 rows=713564 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..11258.20 rows=713564 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.89..60980.89 rows=1999989 width=25)
                     ->  Seq Scan on part  (cost=0.00..60980.89 rows=1999989 width=25)
(10 rows)

query 14 run 3
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=790310.63..790310.65 rows=1 width=33)
   ->  Aggregate  (cost=790310.63..790310.65 rows=1 width=33)
         ->  Hash Join  (cost=111089.35..777823.26 rows=713564 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=11436.60..646825.04 rows=713564 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..11258.20 rows=713564 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=60980.89..60980.89 rows=1999989 width=25)
                     ->  Seq Scan on part  (cost=0.00..60980.89 rows=1999989 width=25)
(10 rows)

query 15 run 1
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2457506.64..2457507.78 rows=1 width=104)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1219973.31..1219973.32 rows=1 width=32)
           ->  HashAggregate  (cost=1219876.04..1219924.67 rows=3891 width=16)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=37006.46..1196785.41 rows=2309063 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36429.20 rows=2309063 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1237533.32..1241977.19 rows=3891 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=72)
         ->  Sort  (cost=1237533.03..1237542.76 rows=3891 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1237194.01..1237301.01 rows=3891 width=36)
                     ->  HashAggregate  (cost=1237194.01..1237262.10 rows=3891 width=16)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=37006.46..1196785.41 rows=2309063 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36429.20 rows=2309063 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 2
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2457506.64..2457507.78 rows=1 width=104)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1219973.31..1219973.32 rows=1 width=32)
           ->  HashAggregate  (cost=1219876.04..1219924.67 rows=3891 width=16)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=37006.46..1196785.41 rows=2309063 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36429.20 rows=2309063 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1237533.32..1241977.19 rows=3891 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=72)
         ->  Sort  (cost=1237533.03..1237542.76 rows=3891 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1237194.01..1237301.01 rows=3891 width=36)
                     ->  HashAggregate  (cost=1237194.01..1237262.10 rows=3891 width=16)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=37006.46..1196785.41 rows=2309063 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36429.20 rows=2309063 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 3
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2457506.64..2457507.78 rows=1 width=104)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1219973.31..1219973.32 rows=1 width=32)
           ->  HashAggregate  (cost=1219876.04..1219924.67 rows=3891 width=16)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=37006.46..1196785.41 rows=2309063 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36429.20 rows=2309063 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1237533.32..1241977.19 rows=3891 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4135.79 rows=100000 width=72)
         ->  Sort  (cost=1237533.03..1237542.76 rows=3891 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1237194.01..1237301.01 rows=3891 width=36)
                     ->  HashAggregate  (cost=1237194.01..1237262.10 rows=3891 width=16)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=37006.46..1196785.41 rows=2309063 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36429.20 rows=2309063 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=366811.26..366811.26 rows=1 width=40)
   ->  Sort  (cost=366811.26..366880.54 rows=27715 width=40)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=359006.14..366672.68 rows=27715 width=40)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=359006.14..360484.02 rows=591151 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98147.38..291942.21 rows=591151 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176356.92 rows=3999428 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90980.73..90980.73 rows=295616 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90980.73 rows=295616 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 2
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=366811.26..366811.26 rows=1 width=40)
   ->  Sort  (cost=366811.26..366880.54 rows=27715 width=40)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=359006.14..366672.68 rows=27715 width=40)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=359006.14..360484.02 rows=591151 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98147.38..291942.21 rows=591151 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176356.92 rows=3999428 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90980.73..90980.73 rows=295616 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90980.73 rows=295616 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 3
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=366811.26..366811.26 rows=1 width=40)
   ->  Sort  (cost=366811.26..366880.54 rows=27715 width=40)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=359006.14..366672.68 rows=27715 width=40)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=359006.14..360484.02 rows=591151 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=98147.38..291942.21 rows=591151 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..176356.92 rows=3999428 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90980.73..90980.73 rows=295616 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90980.73 rows=295616 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10820831.30..10820831.31 rows=1 width=8)
   ->  Aggregate  (cost=10820831.30..10820831.31 rows=1 width=8)
         ->  Merge Join  (cost=10133538.47..10820782.07 rows=19690 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  GroupAggregate  (cost=10133537.48..10613356.92 rows=1995345 width=9)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=10133537.48..10283500.57 rows=59985236 width=9)
                           Sort Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..1724995.36 rows=59985236 width=9)
               ->  Materialize  (cost=0.99..181596.96 rows=59206 width=21)
                     ->  Nested Loop  (cost=0.99..181448.95 rows=59206 width=21)
                           ->  Index Scan using part_pkey on part  (cost=0.43..89212.21 rows=1974 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..46.43 rows=30 width=17)
                                 Index Cond: (l_partkey = part.p_partkey)
(16 rows)

query 17 run 2
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10820831.30..10820831.31 rows=1 width=8)
   ->  Aggregate  (cost=10820831.30..10820831.31 rows=1 width=8)
         ->  Merge Join  (cost=10133538.47..10820782.07 rows=19690 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  GroupAggregate  (cost=10133537.48..10613356.92 rows=1995345 width=9)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=10133537.48..10283500.57 rows=59985236 width=9)
                           Sort Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..1724995.36 rows=59985236 width=9)
               ->  Materialize  (cost=0.99..181596.96 rows=59206 width=21)
                     ->  Nested Loop  (cost=0.99..181448.95 rows=59206 width=21)
                           ->  Index Scan using part_pkey on part  (cost=0.43..89212.21 rows=1974 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..46.43 rows=30 width=17)
                                 Index Cond: (l_partkey = part.p_partkey)
(16 rows)

query 17 run 3
SET
SET
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10820831.30..10820831.31 rows=1 width=8)
   ->  Aggregate  (cost=10820831.30..10820831.31 rows=1 width=8)
         ->  Merge Join  (cost=10133538.47..10820782.07 rows=19690 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  GroupAggregate  (cost=10133537.48..10613356.92 rows=1995345 width=9)
                     Group Key: lineitem_1.l_partkey
                     ->  Sort  (cost=10133537.48..10283500.57 rows=59985236 width=9)
                           Sort Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..1724995.36 rows=59985236 width=9)
               ->  Materialize  (cost=0.99..181596.96 rows=59206 width=21)
                     ->  Nested Loop  (cost=0.99..181448.95 rows=59206 width=21)
                           ->  Index Scan using part_pkey on part  (cost=0.43..89212.21 rows=1974 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..46.43 rows=30 width=17)
                                 Index Cond: (l_partkey = part.p_partkey)
(16 rows)

query 18 run 1
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=11761884.79..11761887.79 rows=100 width=44)
   ->  GroupAggregate  (cost=11761884.79..12661663.33 rows=29992618 width=44)
         Group Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
         ->  Sort  (cost=11761884.79..11836866.33 rows=29992618 width=44)
               Sort Key: orders.o_totalprice DESC, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               ->  Hash Join  (cost=78778.31..7443970.19 rows=29992618 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=290.05..6496746.66 rows=29992618 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=1.00..3756863.65 rows=7499345 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547945.79 rows=14998690 width=20)
                                 ->  Materialize  (cost=0.56..2983967.28 rows=14996309 width=4)
                                       ->  GroupAggregate  (cost=0.56..2796513.42 rows=14996309 width=9)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271642.60 rows=59985236 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2271642.60 rows=59985236 width=9)
                     ->  Hash  (cost=50947.56..50947.56 rows=1500056 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=23)
(20 rows)

query 18 run 2
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=11761884.79..11761887.79 rows=100 width=44)
   ->  GroupAggregate  (cost=11761884.79..12661663.33 rows=29992618 width=44)
         Group Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
         ->  Sort  (cost=11761884.79..11836866.33 rows=29992618 width=44)
               Sort Key: orders.o_totalprice DESC, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               ->  Hash Join  (cost=78778.31..7443970.19 rows=29992618 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=290.05..6496746.66 rows=29992618 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=1.00..3756863.65 rows=7499345 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547945.79 rows=14998690 width=20)
                                 ->  Materialize  (cost=0.56..2983967.28 rows=14996309 width=4)
                                       ->  GroupAggregate  (cost=0.56..2796513.42 rows=14996309 width=9)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271642.60 rows=59985236 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2271642.60 rows=59985236 width=9)
                     ->  Hash  (cost=50947.56..50947.56 rows=1500056 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=23)
(20 rows)

query 18 run 3
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=11761884.79..11761887.79 rows=100 width=44)
   ->  GroupAggregate  (cost=11761884.79..12661663.33 rows=29992618 width=44)
         Group Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
         ->  Sort  (cost=11761884.79..11836866.33 rows=29992618 width=44)
               Sort Key: orders.o_totalprice DESC, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               ->  Hash Join  (cost=78778.31..7443970.19 rows=29992618 width=44)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     ->  Merge Join  (cost=290.05..6496746.66 rows=29992618 width=25)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Merge Semi Join  (cost=1.00..3756863.65 rows=7499345 width=24)
                                 Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..547945.79 rows=14998690 width=20)
                                 ->  Materialize  (cost=0.56..2983967.28 rows=14996309 width=4)
                                       ->  GroupAggregate  (cost=0.56..2796513.42 rows=14996309 width=9)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271642.60 rows=59985236 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2271642.60 rows=59985236 width=9)
                     ->  Hash  (cost=50947.56..50947.56 rows=1500056 width=23)
                           ->  Seq Scan on customer  (cost=0.00..50947.56 rows=1500056 width=23)
(20 rows)

query 19 run 1
SET
SET


 Limit  (cost=356515.35..356515.36 rows=1 width=12)
   ->  Aggregate  (cost=356515.35..356515.36 rows=1 width=12)
         ->  Nested Loop  (cost=0.56..356506.48 rows=1182 width=12)
               ->  Seq Scan on part  (cost=0.00..125980.53 rows=4931 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..46.74 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 2
SET
SET


 Limit  (cost=356515.35..356515.36 rows=1 width=12)
   ->  Aggregate  (cost=356515.35..356515.36 rows=1 width=12)
         ->  Nested Loop  (cost=0.56..356506.48 rows=1182 width=12)
               ->  Seq Scan on part  (cost=0.00..125980.53 rows=4931 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..46.74 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 3
SET
SET


 Limit  (cost=356515.35..356515.36 rows=1 width=12)
   ->  Aggregate  (cost=356515.35..356515.36 rows=1 width=12)
         ->  Nested Loop  (cost=0.56..356506.48 rows=1182 width=12)
               ->  Seq Scan on part  (cost=0.00..125980.53 rows=4931 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..46.74 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2865602.80..2865602.81 rows=1 width=52)
   ->  Sort  (cost=2865602.80..2865607.80 rows=2000 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2739710.48..2865592.80 rows=2000 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=56)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=60)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2739661.18..2861639.42 rows=28 width=8)
                     ->  Merge Join  (cost=2739661.18..2861639.28 rows=28 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2570361.41..2675783.23 rows=916712 width=13)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=2570361.41..2593279.20 rows=9167114 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=146910.48..1409560.19 rows=9167114 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..144618.71 rows=9167114 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=169299.77..170234.93 rows=374063 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=0.43..134674.77 rows=374063 width=16)
                                       ->  Seq Scan on part  (cost=0.00..65980.86 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.21 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(31 rows)

query 20 run 2
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2865602.80..2865602.81 rows=1 width=52)
   ->  Sort  (cost=2865602.80..2865607.80 rows=2000 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2739710.48..2865592.80 rows=2000 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=56)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=60)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2739661.18..2861639.42 rows=28 width=8)
                     ->  Merge Join  (cost=2739661.18..2861639.28 rows=28 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2570361.41..2675783.23 rows=916712 width=13)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=2570361.41..2593279.20 rows=9167114 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=146910.48..1409560.19 rows=9167114 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..144618.71 rows=9167114 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=169299.77..170234.93 rows=374063 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=0.43..134674.77 rows=374063 width=16)
                                       ->  Seq Scan on part  (cost=0.00..65980.86 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.21 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(31 rows)

query 20 run 3
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2865602.80..2865602.81 rows=1 width=52)
   ->  Sort  (cost=2865602.80..2865607.80 rows=2000 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2739710.48..2865592.80 rows=2000 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=56)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=60)
                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                 Index Cond: (s_nationkey = nation.n_nationkey)
               ->  Materialize  (cost=2739661.18..2861639.42 rows=28 width=8)
                     ->  Merge Join  (cost=2739661.18..2861639.28 rows=28 width=8)
                           Merge Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  GroupAggregate  (cost=2570361.41..2675783.23 rows=916712 width=13)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 ->  Sort  (cost=2570361.41..2593279.20 rows=9167114 width=13)
                                       Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Bitmap Heap Scan on lineitem  (cost=146910.48..1409560.19 rows=9167114 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..144618.71 rows=9167114 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Sort  (cost=169299.77..170234.93 rows=374063 width=16)
                                 Sort Key: partsupp.ps_partkey, partsupp.ps_suppkey
                                 ->  Nested Loop  (cost=0.43..134674.77 rows=374063 width=16)
                                       ->  Seq Scan on part  (cost=0.00..65980.86 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..3.21 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(31 rows)

query 21 run 1
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3843688.51..3843688.52 rows=1 width=26)
   ->  Sort  (cost=3843688.51..3843688.52 rows=1 width=26)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  HashAggregate  (cost=3843688.49..3843688.50 rows=1 width=26)
               Group Key: supplier.s_name
               ->  Nested Loop Anti Join  (cost=570872.49..3843688.49 rows=1 width=26)
                     ->  Nested Loop Semi Join  (cost=570871.92..3843682.56 rows=1 width=34)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Hash Join  (cost=570871.36..2582367.93 rows=385233 width=38)
                                 Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Hash Join  (cost=2323.46..1960176.51 rows=791305 width=34)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on lineitem l1  (cost=0.00..1874958.45 rows=19995079 width=8)
                                             Filter: (l_receiptdate > l_commitdate)
                                       ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                             ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                         Filter: (n_name = 'PERU'::bpchar)
                                                   ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                         Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                         ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                               Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Hash  (cost=448751.62..448751.62 rows=7301862 width=4)
                                       ->  Seq Scan on orders  (cost=0.00..448751.62 rows=7301862 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(30 rows)

query 21 run 2
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3843688.51..3843688.52 rows=1 width=26)
   ->  Sort  (cost=3843688.51..3843688.52 rows=1 width=26)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  HashAggregate  (cost=3843688.49..3843688.50 rows=1 width=26)
               Group Key: supplier.s_name
               ->  Nested Loop Anti Join  (cost=570872.49..3843688.49 rows=1 width=26)
                     ->  Nested Loop Semi Join  (cost=570871.92..3843682.56 rows=1 width=34)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Hash Join  (cost=570871.36..2582367.93 rows=385233 width=38)
                                 Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Hash Join  (cost=2323.46..1960176.51 rows=791305 width=34)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on lineitem l1  (cost=0.00..1874958.45 rows=19995079 width=8)
                                             Filter: (l_receiptdate > l_commitdate)
                                       ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                             ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                         Filter: (n_name = 'PERU'::bpchar)
                                                   ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                         Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                         ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                               Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Hash  (cost=448751.62..448751.62 rows=7301862 width=4)
                                       ->  Seq Scan on orders  (cost=0.00..448751.62 rows=7301862 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(30 rows)

query 21 run 3
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3843688.51..3843688.52 rows=1 width=26)
   ->  Sort  (cost=3843688.51..3843688.52 rows=1 width=26)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  HashAggregate  (cost=3843688.49..3843688.50 rows=1 width=26)
               Group Key: supplier.s_name
               ->  Nested Loop Anti Join  (cost=570872.49..3843688.49 rows=1 width=26)
                     ->  Nested Loop Semi Join  (cost=570871.92..3843682.56 rows=1 width=34)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Hash Join  (cost=570871.36..2582367.93 rows=385233 width=38)
                                 Hash Cond: (l1.l_orderkey = orders.o_orderkey)
                                 ->  Hash Join  (cost=2323.46..1960176.51 rows=791305 width=34)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on lineitem l1  (cost=0.00..1874958.45 rows=19995079 width=8)
                                             Filter: (l_receiptdate > l_commitdate)
                                       ->  Hash  (cost=2273.46..2273.46 rows=4000 width=30)
                                             ->  Nested Loop  (cost=49.29..2273.46 rows=4000 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                         Filter: (n_name = 'PERU'::bpchar)
                                                   ->  Bitmap Heap Scan on supplier  (cost=49.29..2232.15 rows=4000 width=34)
                                                         Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                         ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.29 rows=4000 width=0)
                                                               Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Hash  (cost=448751.62..448751.62 rows=7301862 width=4)
                                       ->  Seq Scan on orders  (cost=0.00..448751.62 rows=7301862 width=4)
                                             Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                     ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
(30 rows)

query 22 run 1
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161218.14..161218.14 rows=1 width=22)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75442.79..75442.79 rows=1 width=6)
           ->  Seq Scan on customer customer_1  (cost=0.00..75323.47 rows=47725 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Sort  (cost=85775.34..85793.50 rows=7262 width=22)
         Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  HashAggregate  (cost=85611.95..85739.03 rows=7262 width=22)
               Group Key: "substring"((customer.c_phone)::text, 1, 2)
               ->  Nested Loop Anti Join  (cost=0.43..85557.48 rows=7262 width=22)
                     ->  Seq Scan on customer  (cost=0.00..75323.47 rows=17501 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.97 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 2
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161218.14..161218.14 rows=1 width=22)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75442.79..75442.79 rows=1 width=6)
           ->  Seq Scan on customer customer_1  (cost=0.00..75323.47 rows=47725 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Sort  (cost=85775.34..85793.50 rows=7262 width=22)
         Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  HashAggregate  (cost=85611.95..85739.03 rows=7262 width=22)
               Group Key: "substring"((customer.c_phone)::text, 1, 2)
               ->  Nested Loop Anti Join  (cost=0.43..85557.48 rows=7262 width=22)
                     ->  Seq Scan on customer  (cost=0.00..75323.47 rows=17501 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.97 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 3
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=161218.14..161218.14 rows=1 width=22)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75442.79..75442.79 rows=1 width=6)
           ->  Seq Scan on customer customer_1  (cost=0.00..75323.47 rows=47725 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Sort  (cost=85775.34..85793.50 rows=7262 width=22)
         Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  HashAggregate  (cost=85611.95..85739.03 rows=7262 width=22)
               Group Key: "substring"((customer.c_phone)::text, 1, 2)
               ->  Nested Loop Anti Join  (cost=0.43..85557.48 rows=7262 width=22)
                     ->  Seq Scan on customer  (cost=0.00..75323.47 rows=17501 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.97 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

