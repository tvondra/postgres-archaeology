query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1905939.90..1905940.58 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1905939.90..1905943.96 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1905939.90..1905942.77 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1904939.84..1904939.86 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1904939.60..1904939.76 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312611.40 rows=14808205 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1905939.90..1905940.58 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1905939.90..1905943.96 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1905939.90..1905942.77 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1904939.84..1904939.86 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1904939.60..1904939.76 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312611.40 rows=14808205 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1905939.90..1905940.58 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1905939.90..1905943.96 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1905939.90..1905942.77 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1904939.84..1904939.86 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1904939.60..1904939.76 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312611.40 rows=14808205 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=879158.95..879158.96 rows=1 width=192)
   ->  Sort  (cost=879158.95..879158.96 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=362853.02..879158.94 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68659.51 rows=7948 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.77 rows=1987 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=361852.53..369747.98 rows=1579090 width=172)
                     ->  Sort  (cost=361852.53..365800.25 rows=1579090 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.85..112535.74 rows=1579090 width=172)
                                 ->  Nested Loop  (cost=0.42..1279.18 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.42..215.31 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.77 rows=79 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.59..69.60 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..69.58 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.28 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.66 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 2 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=879158.95..879158.96 rows=1 width=192)
   ->  Sort  (cost=879158.95..879158.96 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=362853.02..879158.94 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68659.51 rows=7948 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.77 rows=1987 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=361852.53..369747.98 rows=1579090 width=172)
                     ->  Sort  (cost=361852.53..365800.25 rows=1579090 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.85..112535.74 rows=1579090 width=172)
                                 ->  Nested Loop  (cost=0.42..1279.18 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.42..215.31 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.77 rows=79 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.59..69.60 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..69.58 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.28 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.66 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 2 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=879158.95..879158.96 rows=1 width=192)
   ->  Sort  (cost=879158.95..879158.96 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=362853.02..879158.94 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68659.51 rows=7948 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.77 rows=1987 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=361852.53..369747.98 rows=1579090 width=172)
                     ->  Sort  (cost=361852.53..365800.25 rows=1579090 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.85..112535.74 rows=1579090 width=172)
                                 ->  Nested Loop  (cost=0.42..1279.18 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.42..215.31 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.77 rows=79 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=69.59..69.60 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..69.58 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..68.28 rows=19 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..66.66 rows=19 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.77 rows=19 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 3 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1959594.80..1959594.83 rows=10 width=44)
   ->  Sort  (cost=1959594.80..1967432.83 rows=3135213 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1416515.60..1891843.97 rows=3135213 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1416515.60..1813463.66 rows=3135212 width=44)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1415515.54..1439029.63 rows=783803 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1415515.54..1417475.05 rows=783803 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=41569.67..1328446.46 rows=783803 width=24)
                                       ->  Parallel Hash Join  (cost=41569.11..354478.25 rows=361892 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308144.22 rows=1815205 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.56..40634.56 rows=74764 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.56 rows=74764 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(22 rows)

query 3 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1959594.80..1959594.83 rows=10 width=44)
   ->  Sort  (cost=1959594.80..1967432.83 rows=3135213 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1416515.60..1891843.97 rows=3135213 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1416515.60..1813463.66 rows=3135212 width=44)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1415515.54..1439029.63 rows=783803 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1415515.54..1417475.05 rows=783803 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=41569.67..1328446.46 rows=783803 width=24)
                                       ->  Parallel Hash Join  (cost=41569.11..354478.25 rows=361892 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308144.22 rows=1815205 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.56..40634.56 rows=74764 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.56 rows=74764 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(22 rows)

query 3 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1959594.80..1959594.83 rows=10 width=44)
   ->  Sort  (cost=1959594.80..1967432.83 rows=3135213 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=1416515.60..1891843.97 rows=3135213 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1416515.60..1813463.66 rows=3135212 width=44)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=1415515.54..1439029.63 rows=783803 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=1415515.54..1417475.05 rows=783803 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=41569.67..1328446.46 rows=783803 width=24)
                                       ->  Parallel Hash Join  (cost=41569.11..354478.25 rows=361892 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308144.22 rows=1815205 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.56..40634.56 rows=74764 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.56 rows=74764 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(22 rows)

query 4 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=625591.03..625591.54 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=625591.03..625593.58 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Gather Merge  (cost=625591.03..625593.43 rows=20 width=24)
               Workers Planned: 4
               ->  Sort  (cost=624590.98..624590.99 rows=5 width=24)
                     Sort Key: orders.o_orderpriority
                     ->  Partial HashAggregate  (cost=624590.87..624590.92 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=7947.58..623899.77 rows=138219 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=7947.01..271288.70 rows=138246 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7808.77 rows=552983 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 4 run 2
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=625591.03..625591.54 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=625591.03..625593.58 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Gather Merge  (cost=625591.03..625593.43 rows=20 width=24)
               Workers Planned: 4
               ->  Sort  (cost=624590.98..624590.99 rows=5 width=24)
                     Sort Key: orders.o_orderpriority
                     ->  Partial HashAggregate  (cost=624590.87..624590.92 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=7947.58..623899.77 rows=138219 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=7947.01..271288.70 rows=138246 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7808.77 rows=552983 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 4 run 3
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=625591.03..625591.54 rows=1 width=24)
   ->  Finalize GroupAggregate  (cost=625591.03..625593.58 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Gather Merge  (cost=625591.03..625593.43 rows=20 width=24)
               Workers Planned: 4
               ->  Sort  (cost=624590.98..624590.99 rows=5 width=24)
                     Sort Key: orders.o_orderpriority
                     ->  Partial HashAggregate  (cost=624590.87..624590.92 rows=5 width=24)
                           Group Key: orders.o_orderpriority
                           ->  Nested Loop Semi Join  (cost=7947.58..623899.77 rows=138219 width=16)
                                 ->  Parallel Bitmap Heap Scan on orders  (cost=7947.01..271288.70 rows=138246 width=20)
                                       Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7808.77 rows=552983 width=0)
                                             Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=4)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_commitdate < l_receiptdate)
(17 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=668504.15..668504.15 rows=1 width=58)
   ->  Sort  (cost=668504.15..668504.21 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=668264.05..668504.02 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=668264.05..668502.96 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=667263.99..667490.99 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=667263.99..667309.33 rows=18135 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=79216.75..665981.26 rows=18135 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=75525.16..659898.35 rows=455488 width=50)
                                             ->  Parallel Hash Join  (cost=75524.59..347754.91 rows=113894 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=32731.25..302541.31 rows=569471 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..32161.78 rows=2277884 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.83..41855.83 rows=75001 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.83 rows=75001 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=668504.15..668504.15 rows=1 width=58)
   ->  Sort  (cost=668504.15..668504.21 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=668264.05..668504.02 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=668264.05..668502.96 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=667263.99..667490.99 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=667263.99..667309.33 rows=18135 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=79216.75..665981.26 rows=18135 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=75525.16..659898.35 rows=455488 width=50)
                                             ->  Parallel Hash Join  (cost=75524.59..347754.91 rows=113894 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=32731.25..302541.31 rows=569471 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..32161.78 rows=2277884 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.83..41855.83 rows=75001 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.83 rows=75001 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=668504.15..668504.15 rows=1 width=58)
   ->  Sort  (cost=668504.15..668504.21 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=668264.05..668504.02 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=668264.05..668502.96 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=667263.99..667490.99 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=667263.99..667309.33 rows=18135 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=79216.75..665981.26 rows=18135 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=75525.16..659898.35 rows=455488 width=50)
                                             ->  Parallel Hash Join  (cost=75524.59..347754.91 rows=113894 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=32731.25..302541.31 rows=569471 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..32161.78 rows=2277884 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.83..41855.83 rows=75001 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.83 rows=75001 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.70 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1292571.83..1292571.84 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1292571.83..1292571.84 rows=1 width=32)
         ->  Gather  (cost=1292571.40..1292571.81 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1291571.40..1291571.41 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=213867.84..1290065.84 rows=301111 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..213566.73 rows=1204445 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1292571.83..1292571.84 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1292571.83..1292571.84 rows=1 width=32)
         ->  Gather  (cost=1292571.40..1292571.81 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1291571.40..1291571.41 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=213867.84..1290065.84 rows=301111 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..213566.73 rows=1204445 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1292571.83..1292571.84 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1292571.83..1292571.84 rows=1 width=32)
         ->  Gather  (cost=1292571.40..1292571.81 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1291571.40..1291571.41 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=213867.84..1290065.84 rows=301111 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..213566.73 rows=1204445 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1166813.35..1166813.94 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1166813.35..1172706.95 rows=10028 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=1166813.35..1172030.06 rows=40112 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1165813.29..1166252.28 rows=10028 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=1165813.29..1165850.93 rows=15057 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Parallel Hash Join  (cost=44275.33..1164768.47 rows=15057 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41225.28..1159939.45 rows=363506 width=46)
                                       ->  Parallel Hash Join  (cost=41224.71..354806.56 rows=300008 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298768.97 rows=3750097 width=8)
                                             ->  Parallel Hash  (cost=40849.71..40849.71 rows=30000 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.71 rows=30000 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 7 run 2
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1166813.35..1166813.94 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1166813.35..1172706.95 rows=10028 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=1166813.35..1172030.06 rows=40112 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1165813.29..1166252.28 rows=10028 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=1165813.29..1165850.93 rows=15057 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Parallel Hash Join  (cost=44275.33..1164768.47 rows=15057 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41225.28..1159939.45 rows=363506 width=46)
                                       ->  Parallel Hash Join  (cost=41224.71..354806.56 rows=300008 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298768.97 rows=3750097 width=8)
                                             ->  Parallel Hash  (cost=40849.71..40849.71 rows=30000 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.71 rows=30000 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 7 run 3
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1166813.35..1166813.94 rows=1 width=92)
   ->  Finalize GroupAggregate  (cost=1166813.35..1172706.95 rows=10028 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Gather Merge  (cost=1166813.35..1172030.06 rows=40112 width=92)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1165813.29..1166252.28 rows=10028 width=92)
                     Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                     ->  Sort  (cost=1165813.29..1165850.93 rows=15057 width=72)
                           Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
                           ->  Parallel Hash Join  (cost=44275.33..1164768.47 rows=15057 width=72)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41225.28..1159939.45 rows=363506 width=46)
                                       ->  Parallel Hash Join  (cost=41224.71..354806.56 rows=300008 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298768.97 rows=3750097 width=8)
                                             ->  Parallel Hash  (cost=40849.71..40849.71 rows=30000 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.71 rows=30000 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.67 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 8 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=481274.25..481274.87 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=481274.25..482778.21 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=481274.25..482603.77 rows=9624 width=72)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=480274.19..480457.40 rows=2406 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=480274.19..480289.20 rows=6004 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=438497.99..479897.39 rows=6004 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Hash Join  (cost=438496.43..479847.38 rows=6004 width=20)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Parallel Hash Join  (cost=438493.92..479672.27 rows=30017 width=24)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=8)
                                             ->  Parallel Hash  (cost=438118.71..438118.71 rows=30017 width=24)
                                                   ->  Nested Loop  (cost=3545.54..438118.71 rows=30017 width=24)
                                                         ->  Parallel Hash Join  (cost=3545.10..198421.56 rows=99290 width=20)
                                                               Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                               ->  Nested Loop  (cost=0.56..194615.16 rows=99754 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47231.12 rows=3326 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..43.98 rows=33 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                               ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                         ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                               Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                             ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 8 run 2
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=481274.25..481274.87 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=481274.25..482778.21 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=481274.25..482603.77 rows=9624 width=72)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=480274.19..480457.40 rows=2406 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=480274.19..480289.20 rows=6004 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=438497.99..479897.39 rows=6004 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Hash Join  (cost=438496.43..479847.38 rows=6004 width=20)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Parallel Hash Join  (cost=438493.92..479672.27 rows=30017 width=24)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=8)
                                             ->  Parallel Hash  (cost=438118.71..438118.71 rows=30017 width=24)
                                                   ->  Nested Loop  (cost=3545.54..438118.71 rows=30017 width=24)
                                                         ->  Parallel Hash Join  (cost=3545.10..198421.56 rows=99290 width=20)
                                                               Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                               ->  Nested Loop  (cost=0.56..194615.16 rows=99754 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47231.12 rows=3326 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..43.98 rows=33 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                               ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                         ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                               Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                             ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 8 run 3
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=481274.25..481274.87 rows=1 width=40)
   ->  Finalize GroupAggregate  (cost=481274.25..482778.21 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=481274.25..482603.77 rows=9624 width=72)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=480274.19..480457.40 rows=2406 width=72)
                     Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=480274.19..480289.20 rows=6004 width=46)
                           Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                           ->  Hash Join  (cost=438497.99..479897.39 rows=6004 width=46)
                                 Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                                 ->  Hash Join  (cost=438496.43..479847.38 rows=6004 width=20)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Parallel Hash Join  (cost=438493.92..479672.27 rows=30017 width=24)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=8)
                                             ->  Parallel Hash  (cost=438118.71..438118.71 rows=30017 width=24)
                                                   ->  Nested Loop  (cost=3545.54..438118.71 rows=30017 width=24)
                                                         ->  Parallel Hash Join  (cost=3545.10..198421.56 rows=99290 width=20)
                                                               Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                               ->  Nested Loop  (cost=0.56..194615.16 rows=99754 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47231.12 rows=3326 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..43.98 rows=33 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                               ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                         ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                               Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                             ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(39 rows)

query 9 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=472844.97..472845.12 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=472844.97..472869.91 rows=159 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=472844.97..472865.52 rows=160 width=66)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=471844.91..471846.41 rows=40 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=471844.91..471845.01 rows=40 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3547.53..471843.84 rows=40 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=3545.97..471841.95 rows=40 width=31)
                                       ->  Nested Loop  (cost=3545.53..471742.06 rows=40 width=31)
                                             Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                             ->  Parallel Hash Join  (cost=3544.97..146223.03 rows=119628 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.43..142360.41 rows=121173 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..47231.12 rows=30304 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..2.95 rows=19 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 9 run 2
SET
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=472844.97..472845.12 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=472844.97..472869.91 rows=159 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=472844.97..472865.52 rows=160 width=66)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=471844.91..471846.41 rows=40 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=471844.91..471845.01 rows=40 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3547.53..471843.84 rows=40 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=3545.97..471841.95 rows=40 width=31)
                                       ->  Nested Loop  (cost=3545.53..471742.06 rows=40 width=31)
                                             Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                             ->  Parallel Hash Join  (cost=3544.97..146223.03 rows=119628 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.43..142360.41 rows=121173 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..47231.12 rows=30304 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..2.95 rows=19 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 9 run 3
SET
SET
SET
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=472844.97..472845.12 rows=1 width=66)
   ->  Finalize GroupAggregate  (cost=472844.97..472869.91 rows=159 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Gather Merge  (cost=472844.97..472865.52 rows=160 width=66)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=471844.91..471846.41 rows=40 width=66)
                     Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Sort  (cost=471844.91..471845.01 rows=40 width=57)
                           Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
                           ->  Hash Join  (cost=3547.53..471843.84 rows=40 width=57)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=3545.97..471841.95 rows=40 width=31)
                                       ->  Nested Loop  (cost=3545.53..471742.06 rows=40 width=31)
                                             Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                             ->  Parallel Hash Join  (cost=3544.97..146223.03 rows=119628 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.43..142360.41 rows=121173 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..47231.12 rows=30304 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..2.95 rows=19 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..2.71 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

query 10 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=856190.26..856190.31 rows=20 width=202)
   ->  Sort  (cost=856190.26..857652.87 rows=585043 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=753752.45..840622.48 rows=585043 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=753752.45..827459.00 rows=585044 width=202)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=752752.39..756774.57 rows=146261 width=202)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=752752.39..753118.04 rows=146261 width=182)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=696411.51..740204.52 rows=146261 width=182)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=696409.95..739753.94 rows=146261 width=160)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=148)
                                             ->  Parallel Hash  (cost=694581.69..694581.69 rows=146261 width=16)
                                                   ->  Nested Loop  (cost=8439.22..694581.69 rows=146261 width=16)
                                                         ->  Parallel Bitmap Heap Scan on orders  (cost=8438.65..271908.62 rows=146798 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                               ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8291.85 rows=587192 width=0)
                                                                     Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=16)
                                                               Index Cond: (l_orderkey = orders.o_orderkey)
                                                               Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 10 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=856190.26..856190.31 rows=20 width=202)
   ->  Sort  (cost=856190.26..857652.87 rows=585043 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=753752.45..840622.48 rows=585043 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=753752.45..827459.00 rows=585044 width=202)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=752752.39..756774.57 rows=146261 width=202)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=752752.39..753118.04 rows=146261 width=182)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=696411.51..740204.52 rows=146261 width=182)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=696409.95..739753.94 rows=146261 width=160)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=148)
                                             ->  Parallel Hash  (cost=694581.69..694581.69 rows=146261 width=16)
                                                   ->  Nested Loop  (cost=8439.22..694581.69 rows=146261 width=16)
                                                         ->  Parallel Bitmap Heap Scan on orders  (cost=8438.65..271908.62 rows=146798 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                               ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8291.85 rows=587192 width=0)
                                                                     Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=16)
                                                               Index Cond: (l_orderkey = orders.o_orderkey)
                                                               Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 10 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=856190.26..856190.31 rows=20 width=202)
   ->  Sort  (cost=856190.26..857652.87 rows=585043 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=753752.45..840622.48 rows=585043 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=753752.45..827459.00 rows=585044 width=202)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=752752.39..756774.57 rows=146261 width=202)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=752752.39..753118.04 rows=146261 width=182)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=696411.51..740204.52 rows=146261 width=182)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=696409.95..739753.94 rows=146261 width=160)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=148)
                                             ->  Parallel Hash  (cost=694581.69..694581.69 rows=146261 width=16)
                                                   ->  Nested Loop  (cost=8439.22..694581.69 rows=146261 width=16)
                                                         ->  Parallel Bitmap Heap Scan on orders  (cost=8438.65..271908.62 rows=146798 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                               ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..8291.85 rows=587192 width=0)
                                                                     Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.87 rows=1 width=16)
                                                               Index Cond: (l_orderkey = orders.o_orderkey)
                                                               Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 11 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=84216.34..84216.34 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=18473.92..18473.93 rows=1 width=32)
           ->  Gather  (cost=18473.80..18473.91 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17473.80..17473.81 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..16080.48 rows=185775 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.77 rows=79 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=65742.41..66005.59 rows=105273 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53372.87..65216.05 rows=105273 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53372.87..54162.42 rows=315818 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.85..24524.90 rows=315818 width=14)
                           ->  Nested Loop  (cost=49.42..2273.58 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.42..2232.27 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.42 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.77 rows=79 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(32 rows)

query 11 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=84216.34..84216.34 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=18473.92..18473.93 rows=1 width=32)
           ->  Gather  (cost=18473.80..18473.91 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17473.80..17473.81 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..16080.48 rows=185775 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.77 rows=79 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=65742.41..66005.59 rows=105273 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53372.87..65216.05 rows=105273 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53372.87..54162.42 rows=315818 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.85..24524.90 rows=315818 width=14)
                           ->  Nested Loop  (cost=49.42..2273.58 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.42..2232.27 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.42 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.77 rows=79 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(32 rows)

query 11 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=84216.34..84216.34 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=18473.92..18473.93 rows=1 width=32)
           ->  Gather  (cost=18473.80..18473.91 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17473.80..17473.81 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..16080.48 rows=185775 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.77 rows=79 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=65742.41..66005.59 rows=105273 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=53372.87..65216.05 rows=105273 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Sort  (cost=53372.87..54162.42 rows=315818 width=14)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=49.85..24524.90 rows=315818 width=14)
                           ->  Nested Loop  (cost=49.42..2273.58 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=49.42..2232.27 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..48.42 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.77 rows=79 width=18)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
(32 rows)

query 12 run 1
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1645592.50..1645795.91 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1645592.50..1647016.34 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=1645592.50..1647016.06 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1644592.44..1646012.67 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=1644592.44..1644769.96 rows=71008 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..1638870.72 rows=71008 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1462586.12 rows=71008 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 12 run 2
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1645592.50..1645795.91 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1645592.50..1647016.34 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=1645592.50..1647016.06 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1644592.44..1646012.67 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=1644592.44..1644769.96 rows=71008 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..1638870.72 rows=71008 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1462586.12 rows=71008 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 12 run 3
SET
SET
SET
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1645592.50..1645795.91 rows=1 width=27)
   ->  Finalize GroupAggregate  (cost=1645592.50..1647016.34 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Gather Merge  (cost=1645592.50..1647016.06 rows=28 width=27)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1644592.44..1646012.67 rows=7 width=27)
                     Group Key: lineitem.l_shipmode
                     ->  Sort  (cost=1644592.44..1644769.96 rows=71008 width=27)
                           Sort Key: lineitem.l_shipmode
                           ->  Nested Loop  (cost=0.43..1638870.72 rows=71008 width=27)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1462586.12 rows=71008 width=15)
                                       Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
(14 rows)

query 13 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1043316.70..1043316.70 rows=1 width=16)
   ->  Sort  (cost=1043316.70..1043317.20 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1043313.70..1043315.70 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=7.68..1020813.42 rows=1500019 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=7.68..932326.47 rows=14697351 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.71 rows=1500019 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716184.82 rows=14697351 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 2
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1043316.70..1043316.70 rows=1 width=16)
   ->  Sort  (cost=1043316.70..1043317.20 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1043313.70..1043315.70 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=7.68..1020813.42 rows=1500019 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=7.68..932326.47 rows=14697351 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.71 rows=1500019 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716184.82 rows=14697351 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 3
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1043316.70..1043316.70 rows=1 width=16)
   ->  Sort  (cost=1043316.70..1043317.20 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1043313.70..1043315.70 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=7.68..1020813.42 rows=1500019 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=7.68..932326.47 rows=14697351 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28674.71 rows=1500019 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..716184.82 rows=14697351 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=861199.92..861199.94 rows=1 width=32)
   ->  Finalize Aggregate  (cost=861199.92..861199.94 rows=1 width=32)
         ->  Gather  (cost=861199.47..861199.88 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=860199.47..860199.48 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=64888.38..856746.15 rows=197332 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=12657.16..803996.93 rows=197332 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12459.83 rows=789326 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.10..45981.10 rows=500010 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.10 rows=500010 width=25)
(13 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=861199.92..861199.94 rows=1 width=32)
   ->  Finalize Aggregate  (cost=861199.92..861199.94 rows=1 width=32)
         ->  Gather  (cost=861199.47..861199.88 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=860199.47..860199.48 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=64888.38..856746.15 rows=197332 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=12657.16..803996.93 rows=197332 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12459.83 rows=789326 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.10..45981.10 rows=500010 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.10 rows=500010 width=25)
(13 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=861199.92..861199.94 rows=1 width=32)
   ->  Finalize Aggregate  (cost=861199.92..861199.94 rows=1 width=32)
         ->  Gather  (cost=861199.47..861199.88 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=860199.47..860199.48 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=64888.38..856746.15 rows=197332 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=12657.16..803996.93 rows=197332 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12459.83 rows=789326 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.10..45981.10 rows=500010 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.10 rows=500010 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2744212.12..2744323.94 rows=1 width=103)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1390788.63..1390788.64 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1388276.96..1389532.79 rows=100467 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1343820.31..1385262.95 rows=401868 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1342820.31..1344076.15 rows=100467 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=37283.72..1337007.10 rows=581321 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36702.40 rows=2325283 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1353423.48..1409555.37 rows=502 width=103)
         ->  Finalize GroupAggregate  (cost=1353423.19..1408322.23 rows=502 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1353423.19..1401540.71 rows=401868 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1352423.13..1352674.29 rows=100467 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1342820.31..1344076.15 rows=100467 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=37283.72..1337007.10 rows=581321 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36702.40 rows=2325283 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2744212.12..2744323.94 rows=1 width=103)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1390788.63..1390788.64 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1388276.96..1389532.79 rows=100467 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1343820.31..1385262.95 rows=401868 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1342820.31..1344076.15 rows=100467 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=37283.72..1337007.10 rows=581321 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36702.40 rows=2325283 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1353423.48..1409555.37 rows=502 width=103)
         ->  Finalize GroupAggregate  (cost=1353423.19..1408322.23 rows=502 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1353423.19..1401540.71 rows=401868 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1352423.13..1352674.29 rows=100467 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1342820.31..1344076.15 rows=100467 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=37283.72..1337007.10 rows=581321 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36702.40 rows=2325283 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2744212.12..2744323.94 rows=1 width=103)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=1390788.63..1390788.64 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1388276.96..1389532.79 rows=100467 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1343820.31..1385262.95 rows=401868 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1342820.31..1344076.15 rows=100467 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=37283.72..1337007.10 rows=581321 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36702.40 rows=2325283 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1353423.48..1409555.37 rows=502 width=103)
         ->  Finalize GroupAggregate  (cost=1353423.19..1408322.23 rows=502 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $1)
               ->  Gather Merge  (cost=1353423.19..1401540.71 rows=401868 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1352423.13..1352674.29 rows=100467 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1342820.31..1344076.15 rows=100467 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=37283.72..1337007.10 rows=581321 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..36702.40 rows=2325283 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.45 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=298077.25..298077.25 rows=1 width=44)
   ->  Sort  (cost=298077.25..298464.04 rows=154717 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=288217.88..297303.66 rows=154717 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=288217.88..289725.60 rows=603089 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=58895.35..219713.27 rows=603089 width=40)
                           Workers Planned: 4
                           ->  Parallel Hash Join  (cost=57895.35..158404.37 rows=150772 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101356.31 rows=999682 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.24..53481.24 rows=75412 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.24 rows=75412 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=298077.25..298077.25 rows=1 width=44)
   ->  Sort  (cost=298077.25..298464.04 rows=154717 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=288217.88..297303.66 rows=154717 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=288217.88..289725.60 rows=603089 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=58895.35..219713.27 rows=603089 width=40)
                           Workers Planned: 4
                           ->  Parallel Hash Join  (cost=57895.35..158404.37 rows=150772 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101356.31 rows=999682 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.24..53481.24 rows=75412 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.24 rows=75412 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=298077.25..298077.25 rows=1 width=44)
   ->  Sort  (cost=298077.25..298464.04 rows=154717 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=288217.88..297303.66 rows=154717 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=288217.88..289725.60 rows=603089 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Gather  (cost=58895.35..219713.27 rows=603089 width=40)
                           Workers Planned: 4
                           ->  Parallel Hash Join  (cost=57895.35..158404.37 rows=150772 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101356.31 rows=999682 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.24..53481.24 rows=75412 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.24 rows=75412 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4425245.60..4425245.61 rows=1 width=32)
   ->  Aggregate  (cost=4425245.60..4425245.61 rows=1 width=32)
         ->  Merge Join  (cost=3229451.21..4425202.09 rows=17401 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=3228450.16..4302449.90 rows=1800804 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=3228450.16..4221413.72 rows=7203216 width=36)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=3227450.11..3362441.20 rows=1800804 width=36)
                                 Group Key: lineitem_1.l_partkey
                                 ->  Sort  (cost=3227450.11..3264943.79 rows=14997472 width=9)
                                       Sort Key: lineitem_1.l_partkey
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275117.72 rows=14997472 width=9)
               ->  Materialize  (cost=1001.05..99444.66 rows=57979 width=21)
                     ->  Gather Merge  (cost=1001.05..99299.71 rows=57979 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.99..91393.79 rows=14495 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.77 rows=483 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..50.77 rows=33 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(22 rows)

query 17 run 2
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4425245.60..4425245.61 rows=1 width=32)
   ->  Aggregate  (cost=4425245.60..4425245.61 rows=1 width=32)
         ->  Merge Join  (cost=3229451.21..4425202.09 rows=17401 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=3228450.16..4302449.90 rows=1800804 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=3228450.16..4221413.72 rows=7203216 width=36)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=3227450.11..3362441.20 rows=1800804 width=36)
                                 Group Key: lineitem_1.l_partkey
                                 ->  Sort  (cost=3227450.11..3264943.79 rows=14997472 width=9)
                                       Sort Key: lineitem_1.l_partkey
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275117.72 rows=14997472 width=9)
               ->  Materialize  (cost=1001.05..99444.66 rows=57979 width=21)
                     ->  Gather Merge  (cost=1001.05..99299.71 rows=57979 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.99..91393.79 rows=14495 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.77 rows=483 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..50.77 rows=33 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(22 rows)

query 17 run 3
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4425245.60..4425245.61 rows=1 width=32)
   ->  Aggregate  (cost=4425245.60..4425245.61 rows=1 width=32)
         ->  Merge Join  (cost=3229451.21..4425202.09 rows=17401 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=3228450.16..4302449.90 rows=1800804 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=3228450.16..4221413.72 rows=7203216 width=36)
                           Workers Planned: 4
                           ->  Partial GroupAggregate  (cost=3227450.11..3362441.20 rows=1800804 width=36)
                                 Group Key: lineitem_1.l_partkey
                                 ->  Sort  (cost=3227450.11..3264943.79 rows=14997472 width=9)
                                       Sort Key: lineitem_1.l_partkey
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275117.72 rows=14997472 width=9)
               ->  Materialize  (cost=1001.05..99444.66 rows=57979 width=21)
                     ->  Gather Merge  (cost=1001.05..99299.71 rows=57979 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.99..91393.79 rows=14495 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.77 rows=483 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..50.77 rows=33 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(22 rows)

query 18 run 1
SET
SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=9255982.65..9255982.90 rows=100 width=71)
   ->  Sort  (cost=9255982.65..9305964.50 rows=19992739 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=5548250.67..8491874.54 rows=19992739 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=5548250.67..8042037.90 rows=19992740 width=71)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=5547250.61..5659709.77 rows=4998185 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=5547250.61..5559746.07 rows=4998185 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Parallel Hash Join  (cost=3390987.03..4892285.73 rows=4998185 width=44)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1275117.72 rows=14997472 width=9)
                                       ->  Parallel Hash  (cost=3364379.67..3364379.67 rows=1249789 width=43)
                                             ->  Parallel Hash Join  (cost=44385.61..3364379.67 rows=1249789 width=43)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Merge Join  (cost=1.00..3316714.35 rows=1249789 width=24)
                                                         Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                         ->  Parallel Index Scan using orders_pkey on orders  (cost=0.43..435468.35 rows=3750097 width=20)
                                                         ->  GroupAggregate  (cost=0.56..2796883.41 rows=4999157 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                               ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271971.88 rows=59989888 width=9)
                                                   ->  Parallel Hash  (cost=39697.05..39697.05 rows=375005 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=23)
(26 rows)

query 18 run 2
SET
SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=9255982.65..9255982.90 rows=100 width=71)
   ->  Sort  (cost=9255982.65..9305964.50 rows=19992739 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=5548250.67..8491874.54 rows=19992739 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=5548250.67..8042037.90 rows=19992740 width=71)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=5547250.61..5659709.77 rows=4998185 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=5547250.61..5559746.07 rows=4998185 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Parallel Hash Join  (cost=3390987.03..4892285.73 rows=4998185 width=44)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1275117.72 rows=14997472 width=9)
                                       ->  Parallel Hash  (cost=3364379.67..3364379.67 rows=1249789 width=43)
                                             ->  Parallel Hash Join  (cost=44385.61..3364379.67 rows=1249789 width=43)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Merge Join  (cost=1.00..3316714.35 rows=1249789 width=24)
                                                         Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                         ->  Parallel Index Scan using orders_pkey on orders  (cost=0.43..435468.35 rows=3750097 width=20)
                                                         ->  GroupAggregate  (cost=0.56..2796883.41 rows=4999157 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                               ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271971.88 rows=59989888 width=9)
                                                   ->  Parallel Hash  (cost=39697.05..39697.05 rows=375005 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=23)
(26 rows)

query 18 run 3
SET
SET
SET
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=9255982.65..9255982.90 rows=100 width=71)
   ->  Sort  (cost=9255982.65..9305964.50 rows=19992739 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=5548250.67..8491874.54 rows=19992739 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Gather Merge  (cost=5548250.67..8042037.90 rows=19992740 width=71)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=5547250.61..5659709.77 rows=4998185 width=71)
                           Group Key: customer.c_custkey, orders.o_orderkey
                           ->  Sort  (cost=5547250.61..5559746.07 rows=4998185 width=44)
                                 Sort Key: customer.c_custkey, orders.o_orderkey
                                 ->  Parallel Hash Join  (cost=3390987.03..4892285.73 rows=4998185 width=44)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1275117.72 rows=14997472 width=9)
                                       ->  Parallel Hash  (cost=3364379.67..3364379.67 rows=1249789 width=43)
                                             ->  Parallel Hash Join  (cost=44385.61..3364379.67 rows=1249789 width=43)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Merge Join  (cost=1.00..3316714.35 rows=1249789 width=24)
                                                         Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                                         ->  Parallel Index Scan using orders_pkey on orders  (cost=0.43..435468.35 rows=3750097 width=20)
                                                         ->  GroupAggregate  (cost=0.56..2796883.41 rows=4999157 width=4)
                                                               Group Key: lineitem_1.l_orderkey
                                                               Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                               ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2271971.88 rows=59989888 width=9)
                                                   ->  Parallel Hash  (cost=39697.05..39697.05 rows=375005 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.05 rows=375005 width=23)
(26 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=123882.87..123882.88 rows=1 width=32)
   ->  Finalize Aggregate  (cost=123882.87..123882.88 rows=1 width=32)
         ->  Gather  (cost=123882.44..123882.85 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=122882.44..122882.45 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..122880.34 rows=280 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.41 rows=1188 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..51.04 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=123882.87..123882.88 rows=1 width=32)
   ->  Finalize Aggregate  (cost=123882.87..123882.88 rows=1 width=32)
         ->  Gather  (cost=123882.44..123882.85 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=122882.44..122882.45 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..122880.34 rows=280 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.41 rows=1188 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..51.04 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=123882.87..123882.88 rows=1 width=32)
   ->  Finalize Aggregate  (cost=123882.87..123882.88 rows=1 width=32)
         ->  Gather  (cost=123882.44..123882.85 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=122882.44..122882.45 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..122880.34 rows=280 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.41 rows=1188 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..51.04 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3074973.73..3074973.73 rows=1 width=51)
   ->  Sort  (cost=3074973.73..3074973.73 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=1617229.35..3074973.72 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=1617229.35..3070321.41 rows=3 width=8)
                     ->  Nested Loop  (cost=1617229.35..3070321.40 rows=3 width=8)
                           ->  Merge Join  (cost=1617228.92..3044476.27 rows=48894 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  Finalize GroupAggregate  (cost=1616228.44..2914559.88 rows=4840631 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Gather Merge  (cost=1616228.44..2750977.38 rows=9097304 width=40)
                                             Workers Planned: 4
                                             ->  Partial GroupAggregate  (cost=1615228.38..1666400.71 rows=2274326 width=40)
                                                   Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                                   ->  Sort  (cost=1615228.38..1620914.19 rows=2274326 width=13)
                                                         Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..1350105.08 rows=2274326 width=13)
                                                               Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Gather Merge  (cost=1000.49..68869.06 rows=20202 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Index Scan using part_pkey on part  (cost=0.43..65462.74 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(31 rows)

query 20 run 2
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3074973.73..3074973.73 rows=1 width=51)
   ->  Sort  (cost=3074973.73..3074973.73 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=1617229.35..3074973.72 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=1617229.35..3070321.41 rows=3 width=8)
                     ->  Nested Loop  (cost=1617229.35..3070321.40 rows=3 width=8)
                           ->  Merge Join  (cost=1617228.92..3044476.27 rows=48894 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  Finalize GroupAggregate  (cost=1616228.44..2914559.88 rows=4840631 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Gather Merge  (cost=1616228.44..2750977.38 rows=9097304 width=40)
                                             Workers Planned: 4
                                             ->  Partial GroupAggregate  (cost=1615228.38..1666400.71 rows=2274326 width=40)
                                                   Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                                   ->  Sort  (cost=1615228.38..1620914.19 rows=2274326 width=13)
                                                         Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..1350105.08 rows=2274326 width=13)
                                                               Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Gather Merge  (cost=1000.49..68869.06 rows=20202 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Index Scan using part_pkey on part  (cost=0.43..65462.74 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(31 rows)

query 20 run 3
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3074973.73..3074973.73 rows=1 width=51)
   ->  Sort  (cost=3074973.73..3074973.73 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=1617229.35..3074973.72 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=1617229.35..3070321.41 rows=3 width=8)
                     ->  Nested Loop  (cost=1617229.35..3070321.40 rows=3 width=8)
                           ->  Merge Join  (cost=1617228.92..3044476.27 rows=48894 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  Finalize GroupAggregate  (cost=1616228.44..2914559.88 rows=4840631 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Gather Merge  (cost=1616228.44..2750977.38 rows=9097304 width=40)
                                             Workers Planned: 4
                                             ->  Partial GroupAggregate  (cost=1615228.38..1666400.71 rows=2274326 width=40)
                                                   Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                                   ->  Sort  (cost=1615228.38..1620914.19 rows=2274326 width=13)
                                                         Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..1350105.08 rows=2274326 width=13)
                                                               Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Gather Merge  (cost=1000.49..68869.06 rows=20202 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Index Scan using part_pkey on part  (cost=0.43..65462.74 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(31 rows)

query 21 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1907504.64..1907504.65 rows=1 width=34)
   ->  Sort  (cost=1907504.64..1907504.65 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1907504.61..1907504.63 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1907504.61..1907504.62 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1907504.60 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1907501.36 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1907498.33 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1906498.23 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335549.63 rows=199037 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312611.40 rows=4999157 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1907504.64..1907504.65 rows=1 width=34)
   ->  Sort  (cost=1907504.64..1907504.65 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1907504.61..1907504.63 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1907504.61..1907504.62 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1907504.60 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1907501.36 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1907498.33 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1906498.23 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335549.63 rows=199037 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312611.40 rows=4999157 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1907504.64..1907504.65 rows=1 width=34)
   ->  Sort  (cost=1907504.64..1907504.65 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1907504.61..1907504.63 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1907504.61..1907504.62 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1907504.60 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1907501.36 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1907498.33 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1906498.23 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335549.63 rows=199037 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312611.40 rows=4999157 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.24 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 22 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=96214.86..96215.02 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46821.15..46821.16 rows=1 width=32)
           ->  Gather  (cost=46820.72..46821.13 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.72..45820.73 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.87 rows=11936 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Finalize GroupAggregate  (cost=49393.71..50670.08 rows=8316 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Gather Merge  (cost=49393.71..50441.39 rows=8316 width=72)
               Workers Planned: 4
               Params Evaluated: $1
               ->  Partial GroupAggregate  (cost=48393.65..48450.82 rows=2079 width=72)
                     Group Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Sort  (cost=48393.65..48398.84 rows=2079 width=38)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Nested Loop Anti Join  (cost=0.43..48279.08 rows=2079 width=38)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..45790.87 rows=4375 width=26)
                                       Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                                 ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.00 rows=19 width=4)
                                       Index Cond: (o_custkey = customer.c_custkey)
(22 rows)

query 22 run 2
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=96214.86..96215.02 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46821.15..46821.16 rows=1 width=32)
           ->  Gather  (cost=46820.72..46821.13 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.72..45820.73 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.87 rows=11936 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Finalize GroupAggregate  (cost=49393.71..50670.08 rows=8316 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Gather Merge  (cost=49393.71..50441.39 rows=8316 width=72)
               Workers Planned: 4
               Params Evaluated: $1
               ->  Partial GroupAggregate  (cost=48393.65..48450.82 rows=2079 width=72)
                     Group Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Sort  (cost=48393.65..48398.84 rows=2079 width=38)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Nested Loop Anti Join  (cost=0.43..48279.08 rows=2079 width=38)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..45790.87 rows=4375 width=26)
                                       Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                                 ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.00 rows=19 width=4)
                                       Index Cond: (o_custkey = customer.c_custkey)
(22 rows)

query 22 run 3
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=96214.86..96215.02 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=46821.15..46821.16 rows=1 width=32)
           ->  Gather  (cost=46820.72..46821.13 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.72..45820.73 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.87 rows=11936 width=6)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  Finalize GroupAggregate  (cost=49393.71..50670.08 rows=8316 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Gather Merge  (cost=49393.71..50441.39 rows=8316 width=72)
               Workers Planned: 4
               Params Evaluated: $1
               ->  Partial GroupAggregate  (cost=48393.65..48450.82 rows=2079 width=72)
                     Group Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Sort  (cost=48393.65..48398.84 rows=2079 width=38)
                           Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
                           ->  Nested Loop Anti Join  (cost=0.43..48279.08 rows=2079 width=38)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..45790.87 rows=4375 width=26)
                                       Filter: ((c_acctbal > $1) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                                 ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.00 rows=19 width=4)
                                       Index Cond: (o_custkey = customer.c_custkey)
(22 rows)

