query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=184194.04..184194.68 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=184194.04..184197.86 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=184194.04..184196.92 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=183193.99..183194.00 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=183193.77..183193.91 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131316.18 rows=1482217 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=184194.04..184194.68 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=184194.04..184197.86 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=184194.04..184196.92 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=183193.99..183194.00 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=183193.77..183193.91 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131316.18 rows=1482217 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=184194.04..184194.68 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=184194.04..184197.86 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=184194.04..184196.92 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=183193.99..183194.00 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=183193.77..183193.91 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131316.18 rows=1482217 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=27391.29..27391.29 rows=1 width=192)
   ->  Sort  (cost=27391.29..27391.29 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=14238.71..27391.28 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6432.60 rows=836 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=348 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=10840.87..10840.87 rows=159856 width=172)
                     ->  Nested Loop  (cost=0.71..10840.87 rows=159856 width=172)
                           ->  Nested Loop  (cost=0.29..129.20 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..21.32 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 2 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=27391.29..27391.29 rows=1 width=192)
   ->  Sort  (cost=27391.29..27391.29 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=14238.71..27391.28 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6432.60 rows=836 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=348 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=10840.87..10840.87 rows=159856 width=172)
                     ->  Nested Loop  (cost=0.71..10840.87 rows=159856 width=172)
                           ->  Nested Loop  (cost=0.29..129.20 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..21.32 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 2 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=27391.29..27391.29 rows=1 width=192)
   ->  Sort  (cost=27391.29..27391.29 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=14238.71..27391.28 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6432.60 rows=836 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=348 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=10840.87..10840.87 rows=159856 width=172)
                     ->  Nested Loop  (cost=0.71..10840.87 rows=159856 width=172)
                           ->  Nested Loop  (cost=0.29..129.20 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..21.32 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 3 run 1
SET
SET
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=145151.89..145151.92 rows=10 width=44)
   ->  Sort  (cost=145151.89..145945.43 rows=317416 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=92595.38..138292.65 rows=317416 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=92595.38..129563.71 rows=317416 width=24)
                     Workers Planned: 2
                     ->  Sort  (cost=91595.36..91926.00 rows=132257 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=0.86..80344.93 rows=132257 width=24)
                                 ->  Nested Loop  (cost=0.43..32647.57 rows=60574 width=12)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12650 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.15 rows=8 width=16)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.77 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(19 rows)

query 3 run 2
SET
SET
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=145151.89..145151.92 rows=10 width=44)
   ->  Sort  (cost=145151.89..145945.43 rows=317416 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=92595.38..138292.65 rows=317416 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=92595.38..129563.71 rows=317416 width=24)
                     Workers Planned: 2
                     ->  Sort  (cost=91595.36..91926.00 rows=132257 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=0.86..80344.93 rows=132257 width=24)
                                 ->  Nested Loop  (cost=0.43..32647.57 rows=60574 width=12)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12650 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.15 rows=8 width=16)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.77 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(19 rows)

query 3 run 3
SET
SET
SET
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=145151.89..145151.92 rows=10 width=44)
   ->  Sort  (cost=145151.89..145945.43 rows=317416 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=92595.38..138292.65 rows=317416 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=92595.38..129563.71 rows=317416 width=24)
                     Workers Planned: 2
                     ->  Sort  (cost=91595.36..91926.00 rows=132257 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=0.86..80344.93 rows=132257 width=24)
                                 ->  Nested Loop  (cost=0.43..32647.57 rows=60574 width=12)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12650 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.15 rows=8 width=16)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.77 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(19 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29412.08..51054.33 rows=1 width=24)
   ->  GroupAggregate  (cost=29412.08..137623.37 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29412.08..137333.39 rows=57987 width=16)
               ->  Gather Merge  (cost=29411.64..36271.88 rows=57987 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28411.60..28458.37 rows=18705 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=672.79..27084.38 rows=18705 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..658.30 rows=57987 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.95 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29412.08..51054.33 rows=1 width=24)
   ->  GroupAggregate  (cost=29412.08..137623.37 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29412.08..137333.39 rows=57987 width=16)
               ->  Gather Merge  (cost=29411.64..36271.88 rows=57987 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28411.60..28458.37 rows=18705 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=672.79..27084.38 rows=18705 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..658.30 rows=57987 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.95 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29412.08..51054.33 rows=1 width=24)
   ->  GroupAggregate  (cost=29412.08..137623.37 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29412.08..137333.39 rows=57987 width=16)
               ->  Gather Merge  (cost=29411.64..36271.88 rows=57987 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28411.60..28458.37 rows=18705 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=672.79..27084.38 rows=18705 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..658.30 rows=57987 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.95 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=46391.20..46391.20 rows=1 width=58)
   ->  Sort  (cost=46391.20..46391.26 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=46345.43..46391.07 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=46345.43..46390.31 rows=60 width=58)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=45345.41..45383.36 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=45345.41..45352.94 rows=3011 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=476.37..45171.43 rows=3011 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=3.37..44302.85 rows=75350 width=50)
                                             ->  Nested Loop  (cost=2.94..18824.26 rows=18838 width=38)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.11 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.31 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(32 rows)

query 5 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=46391.20..46391.20 rows=1 width=58)
   ->  Sort  (cost=46391.20..46391.26 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=46345.43..46391.07 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=46345.43..46390.31 rows=60 width=58)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=45345.41..45383.36 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=45345.41..45352.94 rows=3011 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=476.37..45171.43 rows=3011 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=3.37..44302.85 rows=75350 width=50)
                                             ->  Nested Loop  (cost=2.94..18824.26 rows=18838 width=38)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.11 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.31 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(32 rows)

query 5 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=46391.20..46391.20 rows=1 width=58)
   ->  Sort  (cost=46391.20..46391.26 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=46345.43..46391.07 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=46345.43..46390.31 rows=60 width=58)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=45345.41..45383.36 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=45345.41..45352.94 rows=3011 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=476.37..45171.43 rows=3011 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=3.37..44302.85 rows=75350 width=50)
                                             ->  Nested Loop  (cost=2.94..18824.26 rows=18838 width=38)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.11 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.31 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(32 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=108037.21..108037.22 rows=1 width=32)
   ->  Finalize Aggregate  (cost=108037.21..108037.22 rows=1 width=32)
         ->  Gather  (cost=108036.78..108037.19 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=107036.78..107036.79 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=21420.43..106886.73 rows=30010 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21390.42 rows=120041 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=108037.21..108037.22 rows=1 width=32)
   ->  Finalize Aggregate  (cost=108037.21..108037.22 rows=1 width=32)
         ->  Gather  (cost=108036.78..108037.19 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=107036.78..107036.79 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=21420.43..106886.73 rows=30010 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21390.42 rows=120041 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=108037.21..108037.22 rows=1 width=32)
   ->  Finalize Aggregate  (cost=108037.21..108037.22 rows=1 width=32)
         ->  Gather  (cost=108036.78..108037.19 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=107036.78..107036.79 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=21420.43..106886.73 rows=30010 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21390.42 rows=120041 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=42571.12..42589.10 rows=1 width=116)
   ->  GroupAggregate  (cost=42571.12..153051.26 rows=6146 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Incremental Sort  (cost=42571.12..152866.88 rows=6146 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               Presorted Key: n1.n_name, n2.n_name
               ->  Nested Loop  (cost=5831.50..152464.69 rows=6146 width=96)
                     Join Filter: (supplier.s_nationkey = n1.n_nationkey)
                     ->  Nested Loop  (cost=5831.22..103978.33 rows=153776 width=76)
                           ->  Nested Loop  (cost=5830.79..22256.83 rows=124848 width=60)
                                 ->  Gather Merge  (cost=5830.36..7284.44 rows=12485 width=60)
                                       Workers Planned: 2
                                       ->  Sort  (cost=4830.33..4843.34 rows=5202 width=60)
                                             Sort Key: n1.n_name, n2.n_name
                                             ->  Hash Join  (cost=2.87..4509.24 rows=5202 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.02 rows=18 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.64 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
(32 rows)

query 7 run 2
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=42571.12..42589.10 rows=1 width=116)
   ->  GroupAggregate  (cost=42571.12..153051.26 rows=6146 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Incremental Sort  (cost=42571.12..152866.88 rows=6146 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               Presorted Key: n1.n_name, n2.n_name
               ->  Nested Loop  (cost=5831.50..152464.69 rows=6146 width=96)
                     Join Filter: (supplier.s_nationkey = n1.n_nationkey)
                     ->  Nested Loop  (cost=5831.22..103978.33 rows=153776 width=76)
                           ->  Nested Loop  (cost=5830.79..22256.83 rows=124848 width=60)
                                 ->  Gather Merge  (cost=5830.36..7284.44 rows=12485 width=60)
                                       Workers Planned: 2
                                       ->  Sort  (cost=4830.33..4843.34 rows=5202 width=60)
                                             Sort Key: n1.n_name, n2.n_name
                                             ->  Hash Join  (cost=2.87..4509.24 rows=5202 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.02 rows=18 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.64 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
(32 rows)

query 7 run 3
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=42571.12..42589.10 rows=1 width=116)
   ->  GroupAggregate  (cost=42571.12..153051.26 rows=6146 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Incremental Sort  (cost=42571.12..152866.88 rows=6146 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               Presorted Key: n1.n_name, n2.n_name
               ->  Nested Loop  (cost=5831.50..152464.69 rows=6146 width=96)
                     Join Filter: (supplier.s_nationkey = n1.n_nationkey)
                     ->  Nested Loop  (cost=5831.22..103978.33 rows=153776 width=76)
                           ->  Nested Loop  (cost=5830.79..22256.83 rows=124848 width=60)
                                 ->  Gather Merge  (cost=5830.36..7284.44 rows=12485 width=60)
                                       Workers Planned: 2
                                       ->  Sort  (cost=4830.33..4843.34 rows=5202 width=60)
                                             Sort Key: n1.n_name, n2.n_name
                                             ->  Hash Join  (cost=2.87..4509.24 rows=5202 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.02 rows=18 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.64 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
(32 rows)

query 8 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22972.84..23053.80 rows=1 width=64)
   ->  GroupAggregate  (cost=22972.84..217776.91 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=22972.84..217680.33 rows=2423 width=70)
               ->  Nested Loop  (cost=22972.70..217299.15 rows=2423 width=20)
                     ->  Nested Loop  (cost=22972.41..216565.13 rows=2426 width=20)
                           ->  Nested Loop  (cost=22971.98..119815.48 rows=365565 width=24)
                                 ->  Gather Merge  (cost=22971.55..33615.54 rows=91391 width=8)
                                       Workers Planned: 2
                                       ->  Sort  (cost=21971.53..22066.73 rows=38080 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Nested Loop  (cost=2.94..19074.26 rows=38080 width=8)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.11 rows=5 width=12)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.90 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Memoize  (cost=0.43..0.45 rows=1 width=4)
                                 Cache Key: lineitem.l_partkey
                                 Cache Mode: logical
                                 ->  Index Scan using part_pkey on part  (cost=0.42..0.44 rows=1 width=4)
                                       Index Cond: (p_partkey = lineitem.l_partkey)
                                       Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
(37 rows)

query 8 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22972.84..23053.80 rows=1 width=64)
   ->  GroupAggregate  (cost=22972.84..217776.91 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=22972.84..217680.33 rows=2423 width=70)
               ->  Nested Loop  (cost=22972.70..217299.15 rows=2423 width=20)
                     ->  Nested Loop  (cost=22972.41..216565.13 rows=2426 width=20)
                           ->  Nested Loop  (cost=22971.98..119815.48 rows=365565 width=24)
                                 ->  Gather Merge  (cost=22971.55..33615.54 rows=91391 width=8)
                                       Workers Planned: 2
                                       ->  Sort  (cost=21971.53..22066.73 rows=38080 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Nested Loop  (cost=2.94..19074.26 rows=38080 width=8)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.11 rows=5 width=12)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.90 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Memoize  (cost=0.43..0.45 rows=1 width=4)
                                 Cache Key: lineitem.l_partkey
                                 Cache Mode: logical
                                 ->  Index Scan using part_pkey on part  (cost=0.42..0.44 rows=1 width=4)
                                       Index Cond: (p_partkey = lineitem.l_partkey)
                                       Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
(37 rows)

query 8 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22972.84..23053.80 rows=1 width=64)
   ->  GroupAggregate  (cost=22972.84..217776.91 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=22972.84..217680.33 rows=2423 width=70)
               ->  Nested Loop  (cost=22972.70..217299.15 rows=2423 width=20)
                     ->  Nested Loop  (cost=22972.41..216565.13 rows=2426 width=20)
                           ->  Nested Loop  (cost=22971.98..119815.48 rows=365565 width=24)
                                 ->  Gather Merge  (cost=22971.55..33615.54 rows=91391 width=8)
                                       Workers Planned: 2
                                       ->  Sort  (cost=21971.53..22066.73 rows=38080 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Nested Loop  (cost=2.94..19074.26 rows=38080 width=8)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.11 rows=5 width=12)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.90 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Memoize  (cost=0.43..0.45 rows=1 width=4)
                                 Cache Key: lineitem.l_partkey
                                 Cache Mode: logical
                                 ->  Index Scan using part_pkey on part  (cost=0.42..0.44 rows=1 width=4)
                                       Index Cond: (p_partkey = lineitem.l_partkey)
                                       Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
(37 rows)

query 9 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=15293.51..15549.13 rows=1 width=90)
   ->  GroupAggregate  (cost=15293.51..40344.09 rows=98 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=15293.51..40340.90 rows=98 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=14249.94..40338.21 rows=98 width=81)
                     ->  Nested Loop  (cost=14249.52..40293.62 rows=98 width=53)
                           Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Gather Merge  (cost=14249.08..18010.37 rows=32295 width=48)
                                 Workers Planned: 2
                                 ->  Sort  (cost=13249.06..13282.70 rows=13456 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=449.99..12326.25 rows=13456 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Hash Join  (cost=448.43..12283.38 rows=13456 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.42..11800.02 rows=13468 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=3367 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.94 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.68 rows=1 width=29)
                                 Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(30 rows)

query 9 run 2
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=15293.51..15549.13 rows=1 width=90)
   ->  GroupAggregate  (cost=15293.51..40344.09 rows=98 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=15293.51..40340.90 rows=98 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=14249.94..40338.21 rows=98 width=81)
                     ->  Nested Loop  (cost=14249.52..40293.62 rows=98 width=53)
                           Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Gather Merge  (cost=14249.08..18010.37 rows=32295 width=48)
                                 Workers Planned: 2
                                 ->  Sort  (cost=13249.06..13282.70 rows=13456 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=449.99..12326.25 rows=13456 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Hash Join  (cost=448.43..12283.38 rows=13456 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.42..11800.02 rows=13468 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=3367 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.94 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.68 rows=1 width=29)
                                 Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(30 rows)

query 9 run 3
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=15293.51..15549.13 rows=1 width=90)
   ->  GroupAggregate  (cost=15293.51..40344.09 rows=98 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=15293.51..40340.90 rows=98 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=14249.94..40338.21 rows=98 width=81)
                     ->  Nested Loop  (cost=14249.52..40293.62 rows=98 width=53)
                           Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Gather Merge  (cost=14249.08..18010.37 rows=32295 width=48)
                                 Workers Planned: 2
                                 ->  Sort  (cost=13249.06..13282.70 rows=13456 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=449.99..12326.25 rows=13456 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Hash Join  (cost=448.43..12283.38 rows=13456 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.42..11800.02 rows=13468 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=3367 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.94 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.68 rows=1 width=29)
                                 Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(30 rows)

query 10 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=77054.91..77054.96 rows=20 width=202)
   ->  Sort  (cost=77054.91..77190.98 rows=54425 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=74926.37..75606.68 rows=54425 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6652.80..74246.06 rows=54425 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5652.80..67803.56 rows=17556 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5651.23..67748.10 rows=17556 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=647.98..62698.77 rows=17556 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=647.55..27048.63 rows=18005 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..633.60 rows=55817 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.97 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=77054.91..77054.96 rows=20 width=202)
   ->  Sort  (cost=77054.91..77190.98 rows=54425 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=74926.37..75606.68 rows=54425 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6652.80..74246.06 rows=54425 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5652.80..67803.56 rows=17556 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5651.23..67748.10 rows=17556 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=647.98..62698.77 rows=17556 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=647.55..27048.63 rows=18005 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..633.60 rows=55817 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.97 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=77054.91..77054.96 rows=20 width=202)
   ->  Sort  (cost=77054.91..77190.98 rows=54425 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=74926.37..75606.68 rows=54425 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6652.80..74246.06 rows=54425 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5652.80..67803.56 rows=17556 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5651.23..67748.10 rows=17556 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=647.98..62698.77 rows=17556 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=647.55..27048.63 rows=18005 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..633.60 rows=55817 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.97 rows=1 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5835.18..5835.18 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=2611.19..2611.21 rows=1 width=32)
           ->  Nested Loop  (cost=5.31..2371.41 rows=31971 width=10)
                 ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=4.88..223.76 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.56 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3223.97..3250.61 rows=10657 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=2691.12..3170.68 rows=10657 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Nested Loop  (cost=5.31..2371.41 rows=31971 width=14)
                     ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 2
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5835.18..5835.18 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=2611.19..2611.21 rows=1 width=32)
           ->  Nested Loop  (cost=5.31..2371.41 rows=31971 width=10)
                 ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=4.88..223.76 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.56 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3223.97..3250.61 rows=10657 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=2691.12..3170.68 rows=10657 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Nested Loop  (cost=5.31..2371.41 rows=31971 width=14)
                     ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 3
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5835.18..5835.18 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=2611.19..2611.21 rows=1 width=32)
           ->  Nested Loop  (cost=5.31..2371.41 rows=31971 width=10)
                 ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=4.88..223.76 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.56 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3223.97..3250.61 rows=10657 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=2691.12..3170.68 rows=10657 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Nested Loop  (cost=5.31..2371.41 rows=31971 width=14)
                     ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=147770.94..154911.48 rows=1 width=27)
   ->  GroupAggregate  (cost=147770.94..197754.69 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=147770.94..197262.50 rows=28121 width=27)
               ->  Gather Merge  (cost=147770.51..151138.65 rows=28130 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=146770.46..146788.04 rows=7032 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..146321.12 rows=7032 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..1.64 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 2
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=147770.94..154911.48 rows=1 width=27)
   ->  GroupAggregate  (cost=147770.94..197754.69 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=147770.94..197262.50 rows=28121 width=27)
               ->  Gather Merge  (cost=147770.51..151138.65 rows=28130 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=146770.46..146788.04 rows=7032 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..146321.12 rows=7032 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..1.64 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 3
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=147770.94..154911.48 rows=1 width=27)
   ->  GroupAggregate  (cost=147770.94..197754.69 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=147770.94..197262.50 rows=28121 width=27)
               ->  Gather Merge  (cost=147770.51..151138.65 rows=28130 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=146770.46..146788.04 rows=7032 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..146321.12 rows=7032 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..1.64 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64702.50..64702.50 rows=1 width=16)
   ->  Sort  (cost=64702.50..64703.00 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64699.50..64701.50 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60949.50..62449.50 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53525.26 rows=1484848 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484848 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64702.50..64702.50 rows=1 width=16)
   ->  Sort  (cost=64702.50..64703.00 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64699.50..64701.50 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60949.50..62449.50 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53525.26 rows=1484848 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484848 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64702.50..64702.50 rows=1 width=16)
   ->  Sort  (cost=64702.50..64703.00 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64699.50..64701.50 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60949.50..62449.50 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53525.26 rows=1484848 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484848 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=73536.02..73536.04 rows=1 width=32)
   ->  Finalize Aggregate  (cost=73536.02..73536.04 rows=1 width=32)
         ->  Gather  (cost=73535.57..73535.98 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=72535.57..72535.58 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7183.25..72205.91 rows=18837 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1209.25..66182.47 rows=18837 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1190.41 rows=75348 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=73536.02..73536.04 rows=1 width=32)
   ->  Finalize Aggregate  (cost=73536.02..73536.04 rows=1 width=32)
         ->  Gather  (cost=73535.57..73535.98 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=72535.57..72535.58 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7183.25..72205.91 rows=18837 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1209.25..66182.47 rows=18837 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1190.41 rows=75348 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=73536.02..73536.04 rows=1 width=32)
   ->  Finalize Aggregate  (cost=73536.02..73536.04 rows=1 width=32)
         ->  Gather  (cost=73535.57..73535.98 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=72535.57..72535.58 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7183.25..72205.91 rows=18837 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1209.25..66182.47 rows=18837 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1190.41 rows=75348 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=240203.55..240310.93 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=121416.33..121416.34 rows=1 width=32)
           ->  HashAggregate  (cost=121166.11..121291.22 rows=10009 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3566.70..118942.43 rows=222368 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3511.11 rows=222368 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=118787.21..124156.15 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=118786.93..124031.03 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=118786.93..123580.62 rows=40036 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=117786.87..117811.89 rows=10009 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=116996.71..117121.82 rows=10009 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=3566.70..116440.79 rows=55592 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3511.11 rows=222368 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.49 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=240203.55..240310.93 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=121416.33..121416.34 rows=1 width=32)
           ->  HashAggregate  (cost=121166.11..121291.22 rows=10009 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3566.70..118942.43 rows=222368 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3511.11 rows=222368 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=118787.21..124156.15 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=118786.93..124031.03 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=118786.93..123580.62 rows=40036 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=117786.87..117811.89 rows=10009 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=116996.71..117121.82 rows=10009 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=3566.70..116440.79 rows=55592 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3511.11 rows=222368 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.49 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=240203.55..240310.93 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=121416.33..121416.34 rows=1 width=32)
           ->  HashAggregate  (cost=121166.11..121291.22 rows=10009 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3566.70..118942.43 rows=222368 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3511.11 rows=222368 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=118787.21..124156.15 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=118786.93..124031.03 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=118786.93..123580.62 rows=40036 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=117786.87..117811.89 rows=10009 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=116996.71..117121.82 rows=10009 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=3566.70..116440.79 rows=55592 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3511.11 rows=222368 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.49 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=26779.01..26779.01 rows=1 width=44)
   ->  Sort  (cost=26779.01..26819.11 rows=16040 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=18779.76..26698.81 rows=16040 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=18779.76..25940.37 rows=59804 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=17779.70..17817.07 rows=14951 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=6686.50..16743.00 rows=14951 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12459 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12459 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=26779.01..26779.01 rows=1 width=44)
   ->  Sort  (cost=26779.01..26819.11 rows=16040 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=18779.76..26698.81 rows=16040 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=18779.76..25940.37 rows=59804 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=17779.70..17817.07 rows=14951 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=6686.50..16743.00 rows=14951 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12459 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12459 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=26779.01..26779.01 rows=1 width=44)
   ->  Sort  (cost=26779.01..26819.11 rows=16040 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=18779.76..26698.81 rows=16040 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=18779.76..25940.37 rows=59804 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=17779.70..17817.07 rows=14951 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=6686.50..16743.00 rows=14951 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12459 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12459 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit  (cost=212883.59..212883.61 rows=1 width=32)
   ->  Aggregate  (cost=212883.59..212883.61 rows=1 width=32)
         ->  Nested Loop  (cost=208961.93..212878.55 rows=2016 width=8)
               Join Filter: (lineitem.l_partkey = part.p_partkey)
               ->  Hash Join  (cost=208961.49..212461.65 rows=202 width=40)
                     Hash Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=202589.66..205568.51 rows=198590 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..172579.77 rows=6001977 width=9)
                     ->  Hash  (cost=6369.30..6369.30 rows=203 width=4)
                           ->  Gather  (cost=1000.00..6369.30 rows=203 width=4)
                                 Workers Planned: 2
                                 ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=85 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..1.94 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(17 rows)

query 17 run 2
SET
SET
SET
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit  (cost=212883.59..212883.61 rows=1 width=32)
   ->  Aggregate  (cost=212883.59..212883.61 rows=1 width=32)
         ->  Nested Loop  (cost=208961.93..212878.55 rows=2016 width=8)
               Join Filter: (lineitem.l_partkey = part.p_partkey)
               ->  Hash Join  (cost=208961.49..212461.65 rows=202 width=40)
                     Hash Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=202589.66..205568.51 rows=198590 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..172579.77 rows=6001977 width=9)
                     ->  Hash  (cost=6369.30..6369.30 rows=203 width=4)
                           ->  Gather  (cost=1000.00..6369.30 rows=203 width=4)
                                 Workers Planned: 2
                                 ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=85 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..1.94 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(17 rows)

query 17 run 3
SET
SET
SET
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit  (cost=212883.59..212883.61 rows=1 width=32)
   ->  Aggregate  (cost=212883.59..212883.61 rows=1 width=32)
         ->  Nested Loop  (cost=208961.93..212878.55 rows=2016 width=8)
               Join Filter: (lineitem.l_partkey = part.p_partkey)
               ->  Hash Join  (cost=208961.49..212461.65 rows=202 width=40)
                     Hash Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=202589.66..205568.51 rows=198590 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..172579.77 rows=6001977 width=9)
                     ->  Hash  (cost=6369.30..6369.30 rows=203 width=4)
                           ->  Gather  (cost=1000.00..6369.30 rows=203 width=4)
                                 Workers Planned: 2
                                 ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=85 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..1.94 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(17 rows)

query 18 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=794731.08..794731.33 rows=100 width=71)
   ->  Sort  (cost=794731.08..799732.73 rows=2000660 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=658091.20..718267.30 rows=2000660 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 16
               ->  Hash Join  (cost=335227.49..550321.27 rows=2000660 width=44)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..172579.77 rows=6001977 width=9)
                     ->  Hash  (cost=328975.42..328975.42 rows=500165 width=43)
                           ->  Hash Join  (cost=282593.95..328975.42 rows=500165 width=43)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=275621.95..320690.46 rows=500165 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                       ->  Hash  (cost=269369.88..269369.88 rows=500165 width=4)
                                             ->  GroupAggregate  (cost=0.43..269369.88 rows=500165 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..216852.59 rows=6001977 width=9)
                                 ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                       ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 18 run 2
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=794731.08..794731.33 rows=100 width=71)
   ->  Sort  (cost=794731.08..799732.73 rows=2000660 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=658091.20..718267.30 rows=2000660 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 16
               ->  Hash Join  (cost=335227.49..550321.27 rows=2000660 width=44)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..172579.77 rows=6001977 width=9)
                     ->  Hash  (cost=328975.42..328975.42 rows=500165 width=43)
                           ->  Hash Join  (cost=282593.95..328975.42 rows=500165 width=43)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=275621.95..320690.46 rows=500165 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                       ->  Hash  (cost=269369.88..269369.88 rows=500165 width=4)
                                             ->  GroupAggregate  (cost=0.43..269369.88 rows=500165 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..216852.59 rows=6001977 width=9)
                                 ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                       ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 18 run 3
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=794731.08..794731.33 rows=100 width=71)
   ->  Sort  (cost=794731.08..799732.73 rows=2000660 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=658091.20..718267.30 rows=2000660 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 16
               ->  Hash Join  (cost=335227.49..550321.27 rows=2000660 width=44)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..172579.77 rows=6001977 width=9)
                     ->  Hash  (cost=328975.42..328975.42 rows=500165 width=43)
                           ->  Hash Join  (cost=282593.95..328975.42 rows=500165 width=43)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=275621.95..320690.46 rows=500165 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                       ->  Hash  (cost=269369.88..269369.88 rows=500165 width=4)
                                             ->  GroupAggregate  (cost=0.43..269369.88 rows=500165 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..216852.59 rows=6001977 width=9)
                                 ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                       ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=18107.01..18107.02 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18107.01..18107.02 rows=1 width=32)
         ->  Gather  (cost=18106.79..18107.00 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17106.79..17106.80 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17106.42 rows=48 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=203 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.62 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=18107.01..18107.02 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18107.01..18107.02 rows=1 width=32)
         ->  Gather  (cost=18106.79..18107.00 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17106.79..17106.80 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17106.42 rows=48 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=203 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.62 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=18107.01..18107.02 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18107.01..18107.02 rows=1 width=32)
         ->  Gather  (cost=18106.79..18107.00 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17106.79..17106.80 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17106.42 rows=48 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=203 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.62 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=206283.80..206283.80 rows=1 width=51)
   ->  Sort  (cost=206283.80..206283.80 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=185801.83..206283.79 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=185801.83..205828.48 rows=1 width=8)
                     ->  Nested Loop  (cost=185801.83..205828.47 rows=1 width=8)
                           ->  Hash Join  (cost=185801.41..203275.55 rows=4900 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=179433.49..195634.16 rows=485124 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=14651.36..140918.33 rows=913798 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14422.91 rows=913798 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6342.67..6342.67 rows=2020 width=4)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(29 rows)

query 20 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=206283.80..206283.80 rows=1 width=51)
   ->  Sort  (cost=206283.80..206283.80 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=185801.83..206283.79 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=185801.83..205828.48 rows=1 width=8)
                     ->  Nested Loop  (cost=185801.83..205828.47 rows=1 width=8)
                           ->  Hash Join  (cost=185801.41..203275.55 rows=4900 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=179433.49..195634.16 rows=485124 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=14651.36..140918.33 rows=913798 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14422.91 rows=913798 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6342.67..6342.67 rows=2020 width=4)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(29 rows)

query 20 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=206283.80..206283.80 rows=1 width=51)
   ->  Sort  (cost=206283.80..206283.80 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=185801.83..206283.79 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=185801.83..205828.48 rows=1 width=8)
                     ->  Nested Loop  (cost=185801.83..205828.47 rows=1 width=8)
                           ->  Hash Join  (cost=185801.41..203275.55 rows=4900 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=179433.49..195634.16 rows=485124 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=14651.36..140918.33 rows=913798 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14422.91 rows=913798 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6342.67..6342.67 rows=2020 width=4)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(29 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146553.26..146553.27 rows=1 width=34)
   ->  Sort  (cost=146553.26..146553.27 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=146553.23..146553.25 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=146553.23..146553.24 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1235.37..146553.22 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1234.94..146552.75 rows=1 width=34)
                                 ->  Gather  (cost=1234.51..146552.13 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=234.51..145552.03 rows=1 width=34)
                                             ->  Hash Join  (cost=234.08..133625.76 rows=19988 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131316.18 rows=500165 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=229.08..229.08 rows=400 width=30)
                                                         ->  Nested Loop  (cost=4.88..229.08 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.61 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.60 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(33 rows)

query 21 run 2
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146553.26..146553.27 rows=1 width=34)
   ->  Sort  (cost=146553.26..146553.27 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=146553.23..146553.25 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=146553.23..146553.24 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1235.37..146553.22 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1234.94..146552.75 rows=1 width=34)
                                 ->  Gather  (cost=1234.51..146552.13 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=234.51..145552.03 rows=1 width=34)
                                             ->  Hash Join  (cost=234.08..133625.76 rows=19988 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131316.18 rows=500165 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=229.08..229.08 rows=400 width=30)
                                                         ->  Nested Loop  (cost=4.88..229.08 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.61 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.60 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(33 rows)

query 21 run 3
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146553.26..146553.27 rows=1 width=34)
   ->  Sort  (cost=146553.26..146553.27 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=146553.23..146553.25 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=146553.23..146553.24 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1235.37..146553.22 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1234.94..146552.75 rows=1 width=34)
                                 ->  Gather  (cost=1234.51..146552.13 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=234.51..145552.03 rows=1 width=34)
                                             ->  Hash Join  (cost=234.08..133625.76 rows=19988 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131316.18 rows=500165 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=229.08..229.08 rows=400 width=30)
                                                         ->  Nested Loop  (cost=4.88..229.08 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.61 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.60 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(33 rows)

query 22 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.57..12517.13 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=6242.82..6242.83 rows=1 width=32)
           ->  Gather  (cost=6242.60..6242.81 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.60..5242.61 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1988 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7455.53 rows=756 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7436.63 rows=756 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.70 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 2
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.57..12517.13 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=6242.82..6242.83 rows=1 width=32)
           ->  Gather  (cost=6242.60..6242.81 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.60..5242.61 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1988 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7455.53 rows=756 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7436.63 rows=756 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.70 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 3
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.57..12517.13 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=6242.82..6242.83 rows=1 width=32)
           ->  Gather  (cost=6242.60..6242.81 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.60..5242.61 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1988 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7455.53 rows=756 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7436.63 rows=756 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.70 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

