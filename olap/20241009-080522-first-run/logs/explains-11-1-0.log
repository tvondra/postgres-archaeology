query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=424709.10..424709.10 rows=1 width=236)
   ->  Sort  (cost=424709.10..424709.11 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=424708.90..424709.07 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187568.06 rows=5928521 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 2
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=424709.10..424709.10 rows=1 width=236)
   ->  Sort  (cost=424709.10..424709.11 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=424708.90..424709.07 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187568.06 rows=5928521 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 3
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=424709.10..424709.10 rows=1 width=236)
   ->  Sort  (cost=424709.10..424709.11 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=424708.90..424709.07 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187568.06 rows=5928521 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=36909.69..36909.69 rows=1 width=192)
   ->  Sort  (cost=36909.69..36909.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=17602.18..36909.68 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Seq Scan on part  (cost=0.00..7099.00 rows=898 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=11303.30..11303.30 rows=159792 width=172)
                     ->  Nested Loop  (cost=0.71..11303.30 rows=159792 width=172)
                           ->  Nested Loop  (cost=0.29..134.30 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..22.34 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(33 rows)

query 2 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=36909.69..36909.69 rows=1 width=192)
   ->  Sort  (cost=36909.69..36909.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=17602.18..36909.68 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Seq Scan on part  (cost=0.00..7099.00 rows=898 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=11303.30..11303.30 rows=159792 width=172)
                     ->  Nested Loop  (cost=0.71..11303.30 rows=159792 width=172)
                           ->  Nested Loop  (cost=0.29..134.30 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..22.34 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(33 rows)

query 2 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=36909.69..36909.69 rows=1 width=192)
   ->  Sort  (cost=36909.69..36909.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=17602.18..36909.68 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Seq Scan on part  (cost=0.00..7099.00 rows=898 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=11303.30..11303.30 rows=159792 width=172)
                     ->  Nested Loop  (cost=0.71..11303.30 rows=159792 width=172)
                           ->  Nested Loop  (cost=0.29..134.30 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..22.34 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(33 rows)

query 3 run 1
SET
SET
SET
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit  (cost=213627.21..213627.23 rows=10 width=44)
   ->  Sort  (cost=213627.21..214411.46 rows=313702 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=197437.16..206848.22 rows=313702 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=197437.16..198221.41 rows=313702 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Nested Loop  (cost=5849.93..168797.68 rows=313702 width=24)
                           ->  Hash Join  (cost=5849.50..52621.11 rows=145002 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..44881.00 rows=720211 width=16)
                                       Filter: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=5472.00..5472.00 rows=30200 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..5472.00 rows=30200 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.78 rows=2 width=16)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_shipdate > '1995-03-07'::date)
(18 rows)

query 3 run 2
SET
SET
SET
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit  (cost=213627.21..213627.23 rows=10 width=44)
   ->  Sort  (cost=213627.21..214411.46 rows=313702 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=197437.16..206848.22 rows=313702 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=197437.16..198221.41 rows=313702 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Nested Loop  (cost=5849.93..168797.68 rows=313702 width=24)
                           ->  Hash Join  (cost=5849.50..52621.11 rows=145002 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..44881.00 rows=720211 width=16)
                                       Filter: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=5472.00..5472.00 rows=30200 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..5472.00 rows=30200 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.78 rows=2 width=16)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_shipdate > '1995-03-07'::date)
(18 rows)

query 3 run 3
SET
SET
SET
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit  (cost=213627.21..213627.23 rows=10 width=44)
   ->  Sort  (cost=213627.21..214411.46 rows=313702 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=197437.16..206848.22 rows=313702 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Sort  (cost=197437.16..198221.41 rows=313702 width=24)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     ->  Nested Loop  (cost=5849.93..168797.68 rows=313702 width=24)
                           ->  Hash Join  (cost=5849.50..52621.11 rows=145002 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..44881.00 rows=720211 width=16)
                                       Filter: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=5472.00..5472.00 rows=30200 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..5472.00 rows=30200 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.78 rows=2 width=16)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_shipdate > '1995-03-07'::date)
(18 rows)

query 4 run 1
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=140338.00..140338.01 rows=1 width=24)
   ->  Sort  (cost=140338.00..140338.02 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=140337.93..140337.98 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=858.03..140039.80 rows=59626 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=857.59..27882.98 rows=59626 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..842.69 rows=59626 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.11 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 4 run 2
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=140338.00..140338.01 rows=1 width=24)
   ->  Sort  (cost=140338.00..140338.02 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=140337.93..140337.98 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=858.03..140039.80 rows=59626 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=857.59..27882.98 rows=59626 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..842.69 rows=59626 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.11 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 4 run 3
SET
SET
SET
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=140338.00..140338.01 rows=1 width=24)
   ->  Sort  (cost=140338.00..140338.02 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=140337.93..140337.98 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Nested Loop Semi Join  (cost=858.03..140039.80 rows=59626 width=16)
                     ->  Bitmap Heap Scan on orders  (cost=857.59..27882.98 rows=59626 width=20)
                           Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                           ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..842.69 rows=59626 width=0)
                                 Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.11 rows=1 width=4)
                           Index Cond: (l_orderkey = orders.o_orderkey)
                           Filter: (l_commitdate < l_receiptdate)
(13 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=102398.86..102398.86 rows=1 width=58)
   ->  Sort  (cost=102398.86..102398.92 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=102307.18..102398.73 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=102307.18..102325.43 rows=7299 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=474.28..101838.83 rows=7299 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=1.28..100407.33 rows=182569 width=50)
                                 ->  Nested Loop  (cost=0.85..36941.61 rows=45642 width=38)
                                       ->  Nested Loop  (cost=0.42..1992.51 rows=30000 width=38)
                                             ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                                   Join Filter: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                             ->  Index Scan using idx_customer_nationkey on customer  (cost=0.42..337.98 rows=6000 width=8)
                                                   Index Cond: (c_nationkey = nation.n_nationkey)
                                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.13 rows=3 width=8)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                             Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.35 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(26 rows)

query 5 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=102398.86..102398.86 rows=1 width=58)
   ->  Sort  (cost=102398.86..102398.92 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=102307.18..102398.73 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=102307.18..102325.43 rows=7299 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=474.28..101838.83 rows=7299 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=1.28..100407.33 rows=182569 width=50)
                                 ->  Nested Loop  (cost=0.85..36941.61 rows=45642 width=38)
                                       ->  Nested Loop  (cost=0.42..1992.51 rows=30000 width=38)
                                             ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                                   Join Filter: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                             ->  Index Scan using idx_customer_nationkey on customer  (cost=0.42..337.98 rows=6000 width=8)
                                                   Index Cond: (c_nationkey = nation.n_nationkey)
                                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.13 rows=3 width=8)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                             Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.35 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(26 rows)

query 5 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=102398.86..102398.86 rows=1 width=58)
   ->  Sort  (cost=102398.86..102398.92 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=102307.18..102398.73 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=102307.18..102325.43 rows=7299 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=474.28..101838.83 rows=7299 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=1.28..100407.33 rows=182569 width=50)
                                 ->  Nested Loop  (cost=0.85..36941.61 rows=45642 width=38)
                                       ->  Nested Loop  (cost=0.42..1992.51 rows=30000 width=38)
                                             ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                                   Join Filter: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                             ->  Index Scan using idx_customer_nationkey on customer  (cost=0.42..337.98 rows=6000 width=8)
                                                   Index Cond: (c_nationkey = nation.n_nationkey)
                                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.13 rows=3 width=8)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                             Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.35 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(26 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=110575.30..110575.31 rows=1 width=32)
   ->  Aggregate  (cost=110575.30..110575.31 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=21435.09..109961.86 rows=122689 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21404.42 rows=122689 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 2
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=110575.30..110575.31 rows=1 width=32)
   ->  Aggregate  (cost=110575.30..110575.31 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=21435.09..109961.86 rows=122689 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21404.42 rows=122689 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 3
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=110575.30..110575.31 rows=1 width=32)
   ->  Aggregate  (cost=110575.30..110575.31 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=21435.09..109961.86 rows=122689 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21404.42 rows=122689 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=100104.10..100104.13 rows=1 width=92)
   ->  GroupAggregate  (cost=100104.10..100315.18 rows=6031 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=100104.10..100119.17 rows=6031 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=371.30..99725.40 rows=6031 width=72)
                     Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Nested Loop  (cost=72.53..98621.13 rows=144924 width=46)
                           ->  Nested Loop  (cost=72.10..19239.09 rows=120000 width=30)
                                 ->  Nested Loop  (cost=71.67..4539.45 rows=12000 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                             Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Bitmap Heap Scan on customer  (cost=71.67..2209.04 rows=6000 width=8)
                                             Recheck Cond: (c_nationkey = n2.n_nationkey)
                                             ->  Bitmap Index Scan on idx_customer_nationkey  (cost=0.00..70.17 rows=6000 width=0)
                                                   Index Cond: (c_nationkey = n2.n_nationkey)
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.04 rows=18 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.65 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Hash  (cost=288.77..288.77 rows=800 width=30)
                           ->  Nested Loop  (cost=6.38..288.77 rows=800 width=30)
                                 ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                       Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                 ->  Bitmap Heap Scan on supplier  (cost=6.38..139.70 rows=400 width=8)
                                       Recheck Cond: (s_nationkey = n1.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                             Index Cond: (s_nationkey = n1.n_nationkey)
(30 rows)

query 7 run 2
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=100104.10..100104.13 rows=1 width=92)
   ->  GroupAggregate  (cost=100104.10..100315.18 rows=6031 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=100104.10..100119.17 rows=6031 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=371.30..99725.40 rows=6031 width=72)
                     Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Nested Loop  (cost=72.53..98621.13 rows=144924 width=46)
                           ->  Nested Loop  (cost=72.10..19239.09 rows=120000 width=30)
                                 ->  Nested Loop  (cost=71.67..4539.45 rows=12000 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                             Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Bitmap Heap Scan on customer  (cost=71.67..2209.04 rows=6000 width=8)
                                             Recheck Cond: (c_nationkey = n2.n_nationkey)
                                             ->  Bitmap Index Scan on idx_customer_nationkey  (cost=0.00..70.17 rows=6000 width=0)
                                                   Index Cond: (c_nationkey = n2.n_nationkey)
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.04 rows=18 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.65 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Hash  (cost=288.77..288.77 rows=800 width=30)
                           ->  Nested Loop  (cost=6.38..288.77 rows=800 width=30)
                                 ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                       Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                 ->  Bitmap Heap Scan on supplier  (cost=6.38..139.70 rows=400 width=8)
                                       Recheck Cond: (s_nationkey = n1.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                             Index Cond: (s_nationkey = n1.n_nationkey)
(30 rows)

query 7 run 3
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=100104.10..100104.13 rows=1 width=92)
   ->  GroupAggregate  (cost=100104.10..100315.18 rows=6031 width=92)
         Group Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         ->  Sort  (cost=100104.10..100119.17 rows=6031 width=72)
               Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
               ->  Hash Join  (cost=371.30..99725.40 rows=6031 width=72)
                     Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Nested Loop  (cost=72.53..98621.13 rows=144924 width=46)
                           ->  Nested Loop  (cost=72.10..19239.09 rows=120000 width=30)
                                 ->  Nested Loop  (cost=71.67..4539.45 rows=12000 width=30)
                                       ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                             Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Bitmap Heap Scan on customer  (cost=71.67..2209.04 rows=6000 width=8)
                                             Recheck Cond: (c_nationkey = n2.n_nationkey)
                                             ->  Bitmap Index Scan on idx_customer_nationkey  (cost=0.00..70.17 rows=6000 width=0)
                                                   Index Cond: (c_nationkey = n2.n_nationkey)
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.04 rows=18 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.65 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Hash  (cost=288.77..288.77 rows=800 width=30)
                           ->  Nested Loop  (cost=6.38..288.77 rows=800 width=30)
                                 ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                       Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                 ->  Bitmap Heap Scan on supplier  (cost=6.38..139.70 rows=400 width=8)
                                       Recheck Cond: (s_nationkey = n1.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                             Index Cond: (s_nationkey = n1.n_nationkey)
(30 rows)

query 8 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=85697.56..85697.61 rows=1 width=40)
   ->  GroupAggregate  (cost=85697.56..85805.97 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=85697.56..85703.59 rows=2412 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Nested Loop  (cost=2368.79..85562.06 rows=2412 width=46)
                     ->  Nested Loop  (cost=2368.66..85176.57 rows=2412 width=20)
                           ->  Hash Join  (cost=2368.37..84446.79 rows=2412 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=0.86..82009.94 rows=12058 width=24)
                                       ->  Nested Loop  (cost=0.43..63806.33 rows=39784 width=20)
                                             ->  Seq Scan on part  (cost=0.00..6599.00 rows=1326 width=4)
                                                   Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..42.82 rows=32 width=24)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..0.46 rows=1 width=12)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                             Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=1992.51..1992.51 rows=30000 width=4)
                                       ->  Nested Loop  (cost=0.42..1992.51 rows=30000 width=4)
                                             ->  Nested Loop  (cost=0.00..2.62 rows=5 width=4)
                                                   Join Filter: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                             ->  Index Scan using idx_customer_nationkey on customer  (cost=0.42..337.98 rows=6000 width=8)
                                                   Index Cond: (c_nationkey = n1.n_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                 Index Cond: (s_suppkey = lineitem.l_suppkey)
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(31 rows)

query 8 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=85697.56..85697.61 rows=1 width=40)
   ->  GroupAggregate  (cost=85697.56..85805.97 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=85697.56..85703.59 rows=2412 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Nested Loop  (cost=2368.79..85562.06 rows=2412 width=46)
                     ->  Nested Loop  (cost=2368.66..85176.57 rows=2412 width=20)
                           ->  Hash Join  (cost=2368.37..84446.79 rows=2412 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=0.86..82009.94 rows=12058 width=24)
                                       ->  Nested Loop  (cost=0.43..63806.33 rows=39784 width=20)
                                             ->  Seq Scan on part  (cost=0.00..6599.00 rows=1326 width=4)
                                                   Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..42.82 rows=32 width=24)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..0.46 rows=1 width=12)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                             Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=1992.51..1992.51 rows=30000 width=4)
                                       ->  Nested Loop  (cost=0.42..1992.51 rows=30000 width=4)
                                             ->  Nested Loop  (cost=0.00..2.62 rows=5 width=4)
                                                   Join Filter: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                             ->  Index Scan using idx_customer_nationkey on customer  (cost=0.42..337.98 rows=6000 width=8)
                                                   Index Cond: (c_nationkey = n1.n_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                 Index Cond: (s_suppkey = lineitem.l_suppkey)
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(31 rows)

query 8 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=85697.56..85697.61 rows=1 width=40)
   ->  GroupAggregate  (cost=85697.56..85805.97 rows=2406 width=40)
         Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=85697.56..85703.59 rows=2412 width=46)
               Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Nested Loop  (cost=2368.79..85562.06 rows=2412 width=46)
                     ->  Nested Loop  (cost=2368.66..85176.57 rows=2412 width=20)
                           ->  Hash Join  (cost=2368.37..84446.79 rows=2412 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=0.86..82009.94 rows=12058 width=24)
                                       ->  Nested Loop  (cost=0.43..63806.33 rows=39784 width=20)
                                             ->  Seq Scan on part  (cost=0.00..6599.00 rows=1326 width=4)
                                                   Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..42.82 rows=32 width=24)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..0.46 rows=1 width=12)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
                                             Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Hash  (cost=1992.51..1992.51 rows=30000 width=4)
                                       ->  Nested Loop  (cost=0.42..1992.51 rows=30000 width=4)
                                             ->  Nested Loop  (cost=0.00..2.62 rows=5 width=4)
                                                   Join Filter: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                             ->  Index Scan using idx_customer_nationkey on customer  (cost=0.42..337.98 rows=6000 width=8)
                                                   Index Cond: (c_nationkey = n1.n_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                 Index Cond: (s_suppkey = lineitem.l_suppkey)
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(31 rows)

query 9 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64212.41..64212.45 rows=1 width=66)
   ->  GroupAggregate  (cost=64212.41..64217.89 rows=146 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=64212.41..64212.78 rows=146 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Nested Loop  (cost=1.57..64207.16 rows=146 width=57)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=1.57..64152.45 rows=146 width=31)
                           ->  Nested Loop  (cost=1.14..64086.37 rows=146 width=31)
                                 ->  Nested Loop  (cost=0.86..64042.20 rows=146 width=35)
                                       ->  Nested Loop  (cost=0.42..29889.73 rows=48484 width=18)
                                             ->  Seq Scan on part  (cost=0.00..6599.00 rows=12121 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.88 rows=4 width=14)
                                                   Index Cond: (ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.69 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 9 run 2
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64212.41..64212.45 rows=1 width=66)
   ->  GroupAggregate  (cost=64212.41..64217.89 rows=146 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=64212.41..64212.78 rows=146 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Nested Loop  (cost=1.57..64207.16 rows=146 width=57)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=1.57..64152.45 rows=146 width=31)
                           ->  Nested Loop  (cost=1.14..64086.37 rows=146 width=31)
                                 ->  Nested Loop  (cost=0.86..64042.20 rows=146 width=35)
                                       ->  Nested Loop  (cost=0.42..29889.73 rows=48484 width=18)
                                             ->  Seq Scan on part  (cost=0.00..6599.00 rows=12121 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.88 rows=4 width=14)
                                                   Index Cond: (ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.69 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 9 run 3
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64212.41..64212.45 rows=1 width=66)
   ->  GroupAggregate  (cost=64212.41..64217.89 rows=146 width=66)
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         ->  Sort  (cost=64212.41..64212.78 rows=146 width=57)
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               ->  Nested Loop  (cost=1.57..64207.16 rows=146 width=57)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop  (cost=1.57..64152.45 rows=146 width=31)
                           ->  Nested Loop  (cost=1.14..64086.37 rows=146 width=31)
                                 ->  Nested Loop  (cost=0.86..64042.20 rows=146 width=35)
                                       ->  Nested Loop  (cost=0.42..29889.73 rows=48484 width=18)
                                             ->  Seq Scan on part  (cost=0.00..6599.00 rows=12121 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.88 rows=4 width=14)
                                                   Index Cond: (ps_partkey = part.p_partkey)
                                       ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.69 rows=1 width=29)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Materialize  (cost=0.00..1.38 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

query 10 run 1
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=159972.74..159972.79 rows=20 width=202)
   ->  Sort  (cost=159972.74..160111.36 rows=55449 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=157804.15..158497.26 rows=55449 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Hash Join  (cost=7788.06..157111.03 rows=55449 width=182)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=7786.50..156939.24 rows=55449 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Nested Loop  (cost=814.50..149821.69 rows=55449 width=16)
                                 ->  Bitmap Heap Scan on orders  (cost=814.07..27793.31 rows=56550 width=8)
                                       Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..799.93 rows=56550 width=0)
                                             Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.15 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(21 rows)

query 10 run 2
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=159972.74..159972.79 rows=20 width=202)
   ->  Sort  (cost=159972.74..160111.36 rows=55449 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=157804.15..158497.26 rows=55449 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Hash Join  (cost=7788.06..157111.03 rows=55449 width=182)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=7786.50..156939.24 rows=55449 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Nested Loop  (cost=814.50..149821.69 rows=55449 width=16)
                                 ->  Bitmap Heap Scan on orders  (cost=814.07..27793.31 rows=56550 width=8)
                                       Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..799.93 rows=56550 width=0)
                                             Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.15 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(21 rows)

query 10 run 3
SET
SET
SET
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=159972.74..159972.79 rows=20 width=202)
   ->  Sort  (cost=159972.74..160111.36 rows=55449 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=157804.15..158497.26 rows=55449 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Hash Join  (cost=7788.06..157111.03 rows=55449 width=182)
                     Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=7786.50..156939.24 rows=55449 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Nested Loop  (cost=814.50..149821.69 rows=55449 width=16)
                                 ->  Bitmap Heap Scan on orders  (cost=814.07..27793.31 rows=56550 width=8)
                                       Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..799.93 rows=56550 width=0)
                                             Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..2.15 rows=1 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_returnflag = 'R'::bpchar)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(21 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6340.25..6340.25 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2704.06..2704.08 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..2464.38 rows=31958 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.78 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3636.17..3662.80 rows=10653 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=3023.64..3582.91 rows=10653 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..2464.38 rows=31958 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 2
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6340.25..6340.25 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2704.06..2704.08 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..2464.38 rows=31958 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.78 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3636.17..3662.80 rows=10653 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=3023.64..3582.91 rows=10653 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..2464.38 rows=31958 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 3
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6340.25..6340.25 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2704.06..2704.08 rows=1 width=32)
           ->  Nested Loop  (cost=6.81..2464.38 rows=31958 width=10)
                 ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=6.38..225.26 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.78 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3636.17..3662.80 rows=10653 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=3023.64..3582.91 rows=10653 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=6.81..2464.38 rows=31958 width=14)
                     ->  Nested Loop  (cost=6.38..230.58 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.78 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=296452.75..296534.79 rows=1 width=27)
   ->  GroupAggregate  (cost=296452.75..297027.08 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=296452.75..296524.53 rows=28713 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Nested Loop  (cost=0.43..294326.63 rows=28713 width=27)
                     ->  Seq Scan on lineitem  (cost=0.00..247574.51 rows=28716 width=15)
                           Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..1.63 rows=1 width=20)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(10 rows)

query 12 run 2
SET
SET
SET
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=296452.75..296534.79 rows=1 width=27)
   ->  GroupAggregate  (cost=296452.75..297027.08 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=296452.75..296524.53 rows=28713 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Nested Loop  (cost=0.43..294326.63 rows=28713 width=27)
                     ->  Seq Scan on lineitem  (cost=0.00..247574.51 rows=28716 width=15)
                           Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..1.63 rows=1 width=20)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(10 rows)

query 12 run 3
SET
SET
SET
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=296452.75..296534.79 rows=1 width=27)
   ->  GroupAggregate  (cost=296452.75..297027.08 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Sort  (cost=296452.75..296524.53 rows=28713 width=27)
               Sort Key: lineitem.l_shipmode
               ->  Nested Loop  (cost=0.43..294326.63 rows=28713 width=27)
                     ->  Seq Scan on lineitem  (cost=0.00..247574.51 rows=28716 width=15)
                           Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..1.63 rows=1 width=20)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(10 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64702.50..64702.50 rows=1 width=16)
   ->  Sort  (cost=64702.50..64703.00 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64699.50..64701.50 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60949.50..62449.50 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53525.26 rows=1484848 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484848 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64702.50..64702.50 rows=1 width=16)
   ->  Sort  (cost=64702.50..64703.00 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64699.50..64701.50 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60949.50..62449.50 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53525.26 rows=1484848 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484848 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64702.50..64702.50 rows=1 width=16)
   ->  Sort  (cost=64702.50..64703.00 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64699.50..64701.50 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60949.50..62449.50 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53525.26 rows=1484848 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1484848 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=79923.53..79923.55 rows=1 width=32)
   ->  Aggregate  (cost=79923.53..79923.55 rows=1 width=32)
         ->  Hash Join  (cost=9884.09..78521.55 rows=80113 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1285.09..69712.25 rows=80113 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1265.06 rows=80113 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 14 run 2
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=79923.53..79923.55 rows=1 width=32)
   ->  Aggregate  (cost=79923.53..79923.55 rows=1 width=32)
         ->  Hash Join  (cost=9884.09..78521.55 rows=80113 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1285.09..69712.25 rows=80113 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1265.06 rows=80113 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 14 run 3
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=79923.53..79923.55 rows=1 width=32)
   ->  Aggregate  (cost=79923.53..79923.55 rows=1 width=32)
         ->  Hash Join  (cost=9884.09..78521.55 rows=80113 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1285.09..69712.25 rows=80113 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1265.06 rows=80113 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=240120.46..240129.34 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=119296.35..119296.36 rows=1 width=32)
           ->  HashAggregate  (cost=119046.37..119171.36 rows=9999 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3420.84..116912.31 rows=213406 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3367.49 rows=213406 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=120824.10..121268.35 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=120823.81..120823.94 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=120646.92..120822.40 rows=50 width=36)
                     ->  HashAggregate  (cost=120646.92..120821.90 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3420.84..116912.31 rows=213406 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3367.49 rows=213406 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=240120.46..240129.34 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=119296.35..119296.36 rows=1 width=32)
           ->  HashAggregate  (cost=119046.37..119171.36 rows=9999 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3420.84..116912.31 rows=213406 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3367.49 rows=213406 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=120824.10..121268.35 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=120823.81..120823.94 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=120646.92..120822.40 rows=50 width=36)
                     ->  HashAggregate  (cost=120646.92..120821.90 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3420.84..116912.31 rows=213406 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3367.49 rows=213406 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=240120.46..240129.34 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=119296.35..119296.36 rows=1 width=32)
           ->  HashAggregate  (cost=119046.37..119171.36 rows=9999 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3420.84..116912.31 rows=213406 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3367.49 rows=213406 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=120824.10..121268.35 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..418.79 rows=10000 width=71)
         ->  Sort  (cost=120823.81..120823.94 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=120646.92..120822.40 rows=50 width=36)
                     ->  HashAggregate  (cost=120646.92..120821.90 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
                           ->  Bitmap Heap Scan on lineitem  (cost=3420.84..116912.31 rows=213406 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3367.49 rows=213406 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=33837.41..33837.42 rows=1 width=44)
   ->  Sort  (cost=33837.41..33877.35 rows=15973 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=32857.37..33757.55 rows=15973 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=32857.37..33005.46 rows=59236 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9817.65..28161.67 rows=59236 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17642.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29618 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29618 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 2
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=33837.41..33837.42 rows=1 width=44)
   ->  Sort  (cost=33837.41..33877.35 rows=15973 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=32857.37..33757.55 rows=15973 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=32857.37..33005.46 rows=59236 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9817.65..28161.67 rows=59236 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17642.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29618 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29618 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 3
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=33837.41..33837.42 rows=1 width=44)
   ->  Sort  (cost=33837.41..33877.35 rows=15973 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=32857.37..33757.55 rows=15973 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=32857.37..33005.46 rows=59236 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size
                     ->  Hash Join  (cost=9817.65..28161.67 rows=59236 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..17642.43 rows=400000 width=8)
                                 Filter: (NOT (hashed SubPlan 1))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=29618 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=29618 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=328127.43..328127.45 rows=1 width=32)
   ->  Aggregate  (cost=328127.43..328127.45 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..328122.63 rows=1920 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..327694.83 rows=192 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=202 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..316389.99 rows=190080 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..283535.56 rows=6000645 width=9)
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..2.09 rows=11 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 17 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=328127.43..328127.45 rows=1 width=32)
   ->  Aggregate  (cost=328127.43..328127.45 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..328122.63 rows=1920 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..327694.83 rows=192 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=202 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..316389.99 rows=190080 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..283535.56 rows=6000645 width=9)
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..2.09 rows=11 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 17 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=328127.43..328127.45 rows=1 width=32)
   ->  Aggregate  (cost=328127.43..328127.45 rows=1 width=32)
         ->  Nested Loop  (cost=1.29..328122.63 rows=1920 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=0.85..327694.83 rows=192 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Index Scan using part_pkey on part  (cost=0.42..8926.42 rows=202 width=4)
                           Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..316389.99 rows=190080 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Scan using idx_lineitem_part_supp on lineitem lineitem_1  (cost=0.43..283535.56 rows=6000645 width=9)
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..2.09 rows=11 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(14 rows)

query 18 run 1
SET
SET
SET
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=939974.67..939974.92 rows=100 width=71)
   ->  Sort  (cost=939974.67..944975.21 rows=2000216 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=818522.99..863527.85 rows=2000216 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=818522.99..823523.53 rows=2000216 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=349304.15..569625.89 rows=2000216 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Hash Join  (cost=342332.15..557403.18 rows=2000216 width=25)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Seq Scan on lineitem  (cost=0.00..172566.45 rows=6000645 width=9)
                                 ->  Hash  (cost=336081.47..336081.47 rows=500054 width=24)
                                       ->  Hash Join  (cost=291012.96..336081.47 rows=500054 width=24)
                                             Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                             ->  Hash  (cost=284762.29..284762.29 rows=500054 width=4)
                                                   ->  GroupAggregate  (cost=0.43..279761.75 rows=500054 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227256.11 rows=6000645 width=9)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(23 rows)

query 18 run 2
SET
SET
SET
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=939974.67..939974.92 rows=100 width=71)
   ->  Sort  (cost=939974.67..944975.21 rows=2000216 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=818522.99..863527.85 rows=2000216 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=818522.99..823523.53 rows=2000216 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=349304.15..569625.89 rows=2000216 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Hash Join  (cost=342332.15..557403.18 rows=2000216 width=25)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Seq Scan on lineitem  (cost=0.00..172566.45 rows=6000645 width=9)
                                 ->  Hash  (cost=336081.47..336081.47 rows=500054 width=24)
                                       ->  Hash Join  (cost=291012.96..336081.47 rows=500054 width=24)
                                             Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                             ->  Hash  (cost=284762.29..284762.29 rows=500054 width=4)
                                                   ->  GroupAggregate  (cost=0.43..279761.75 rows=500054 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227256.11 rows=6000645 width=9)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(23 rows)

query 18 run 3
SET
SET
SET
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=939974.67..939974.92 rows=100 width=71)
   ->  Sort  (cost=939974.67..944975.21 rows=2000216 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=818522.99..863527.85 rows=2000216 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               ->  Sort  (cost=818522.99..823523.53 rows=2000216 width=44)
                     Sort Key: customer.c_custkey, orders.o_orderkey
                     ->  Hash Join  (cost=349304.15..569625.89 rows=2000216 width=44)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Hash Join  (cost=342332.15..557403.18 rows=2000216 width=25)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Seq Scan on lineitem  (cost=0.00..172566.45 rows=6000645 width=9)
                                 ->  Hash  (cost=336081.47..336081.47 rows=500054 width=24)
                                       ->  Hash Join  (cost=291012.96..336081.47 rows=500054 width=24)
                                             Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                             ->  Hash  (cost=284762.29..284762.29 rows=500054 width=4)
                                                   ->  GroupAggregate  (cost=0.43..279761.75 rows=500054 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..227256.11 rows=6000645 width=9)
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(23 rows)

query 19 run 1
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            

 Limit  (cost=36778.21..36778.22 rows=1 width=32)
   ->  Aggregate  (cost=36778.21..36778.22 rows=1 width=32)
         ->  Nested Loop  (cost=0.43..36777.33 rows=117 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=489 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..49.43 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=36778.21..36778.22 rows=1 width=32)
   ->  Aggregate  (cost=36778.21..36778.22 rows=1 width=32)
         ->  Nested Loop  (cost=0.43..36777.33 rows=117 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=489 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..49.43 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=36778.21..36778.22 rows=1 width=32)
   ->  Aggregate  (cost=36778.21..36778.22 rows=1 width=32)
         ->  Nested Loop  (cost=0.43..36777.33 rows=117 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=489 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..49.43 rows=1 width=21)
                     Index Cond: (l_partkey = part.p_partkey)
                     Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=273525.52..273525.52 rows=1 width=51)
   ->  Sort  (cost=273525.52..273525.52 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=239756.57..273525.51 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=239756.57..273070.20 rows=1 width=8)
                     ->  Nested Loop  (cost=239756.57..273070.19 rows=1 width=8)
                           ->  Merge Join  (cost=239756.15..270529.71 rows=4873 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  GroupAggregate  (cost=239755.73..256018.39 rows=482490 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Sort  (cost=239755.73..242012.06 rows=902531 width=13)
                                             Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                             ->  Bitmap Heap Scan on lineitem  (cost=14465.38..140563.34 rows=902531 width=13)
                                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14239.74 rows=902531 width=0)
                                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Index Scan using part_pkey on part  (cost=0.42..8426.42 rows=2020 width=4)
                                       Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=273525.52..273525.52 rows=1 width=51)
   ->  Sort  (cost=273525.52..273525.52 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=239756.57..273525.51 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=239756.57..273070.20 rows=1 width=8)
                     ->  Nested Loop  (cost=239756.57..273070.19 rows=1 width=8)
                           ->  Merge Join  (cost=239756.15..270529.71 rows=4873 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  GroupAggregate  (cost=239755.73..256018.39 rows=482490 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Sort  (cost=239755.73..242012.06 rows=902531 width=13)
                                             Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                             ->  Bitmap Heap Scan on lineitem  (cost=14465.38..140563.34 rows=902531 width=13)
                                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14239.74 rows=902531 width=0)
                                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Index Scan using part_pkey on part  (cost=0.42..8426.42 rows=2020 width=4)
                                       Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=273525.52..273525.52 rows=1 width=51)
   ->  Sort  (cost=273525.52..273525.52 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=239756.57..273525.51 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=239756.57..273070.20 rows=1 width=8)
                     ->  Nested Loop  (cost=239756.57..273070.19 rows=1 width=8)
                           ->  Merge Join  (cost=239756.15..270529.71 rows=4873 width=44)
                                 Merge Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  GroupAggregate  (cost=239755.73..256018.39 rows=482490 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       ->  Sort  (cost=239755.73..242012.06 rows=902531 width=13)
                                             Sort Key: lineitem.l_partkey, lineitem.l_suppkey
                                             ->  Bitmap Heap Scan on lineitem  (cost=14465.38..140563.34 rows=902531 width=13)
                                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14239.74 rows=902531 width=0)
                                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Index Scan using part_pkey on part  (cost=0.42..8426.42 rows=2020 width=4)
                                       Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 21 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=244203.47..244203.48 rows=1 width=34)
   ->  Sort  (cost=244203.47..244203.48 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=244203.44..244203.46 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=244203.44..244203.45 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=236.87..244203.43 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=236.44..244202.96 rows=1 width=34)
                                 ->  Nested Loop Anti Join  (cost=236.01..244202.34 rows=1 width=34)
                                       ->  Hash Join  (cost=235.58..196104.53 rows=80009 width=34)
                                             Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                             ->  Seq Scan on lineitem l1  (cost=0.00..187568.06 rows=2000215 width=8)
                                                   Filter: (l_receiptdate > l_commitdate)
                                             ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                   ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                               Filter: (n_name = 'PERU'::bpchar)
                                                         ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                               Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                     Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.62 rows=1 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.61 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(31 rows)

query 21 run 2
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=244203.47..244203.48 rows=1 width=34)
   ->  Sort  (cost=244203.47..244203.48 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=244203.44..244203.46 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=244203.44..244203.45 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=236.87..244203.43 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=236.44..244202.96 rows=1 width=34)
                                 ->  Nested Loop Anti Join  (cost=236.01..244202.34 rows=1 width=34)
                                       ->  Hash Join  (cost=235.58..196104.53 rows=80009 width=34)
                                             Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                             ->  Seq Scan on lineitem l1  (cost=0.00..187568.06 rows=2000215 width=8)
                                                   Filter: (l_receiptdate > l_commitdate)
                                             ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                   ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                               Filter: (n_name = 'PERU'::bpchar)
                                                         ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                               Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                     Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.62 rows=1 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.61 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(31 rows)

query 21 run 3
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=244203.47..244203.48 rows=1 width=34)
   ->  Sort  (cost=244203.47..244203.48 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=244203.44..244203.46 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=244203.44..244203.45 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=236.87..244203.43 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=236.44..244202.96 rows=1 width=34)
                                 ->  Nested Loop Anti Join  (cost=236.01..244202.34 rows=1 width=34)
                                       ->  Hash Join  (cost=235.58..196104.53 rows=80009 width=34)
                                             Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                             ->  Seq Scan on lineitem l1  (cost=0.00..187568.06 rows=2000215 width=8)
                                                   Filter: (l_receiptdate > l_commitdate)
                                             ->  Hash  (cost=230.58..230.58 rows=400 width=30)
                                                   ->  Nested Loop  (cost=6.38..230.58 rows=400 width=30)
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                               Filter: (n_name = 'PERU'::bpchar)
                                                         ->  Bitmap Heap Scan on supplier  (cost=6.38..225.26 rows=400 width=34)
                                                               Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..6.29 rows=400 width=0)
                                                                     Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.62 rows=1 width=8)
                                             Index Cond: (l_orderkey = l1.l_orderkey)
                                             Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.61 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(31 rows)

query 22 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16118.98..16119.00 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7546.43..7546.44 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4773 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8572.53..8593.38 rows=758 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8572.53..8574.43 rows=758 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8536.27 rows=758 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.98 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 2
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16118.98..16119.00 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7546.43..7546.44 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4773 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8572.53..8593.38 rows=758 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8572.53..8574.43 rows=758 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8536.27 rows=758 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.98 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 3
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16118.98..16119.00 rows=1 width=72)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7546.43..7546.44 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4773 width=6)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8572.53..8593.38 rows=758 width=72)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=8572.53..8574.43 rows=758 width=38)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               ->  Nested Loop Anti Join  (cost=0.43..8536.27 rows=758 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.98 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

