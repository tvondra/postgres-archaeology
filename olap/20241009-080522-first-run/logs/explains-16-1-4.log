query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=184210.62..184211.26 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=184210.62..184214.44 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=184210.62..184213.49 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=183210.56..183210.58 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=183210.35..183210.48 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131313.29 rows=1482773 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=184210.62..184211.26 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=184210.62..184214.44 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=184210.62..184213.49 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=183210.56..183210.58 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=183210.35..183210.48 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131313.29 rows=1482773 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=184210.62..184211.26 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=184210.62..184214.44 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=184210.62..184213.49 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=183210.56..183210.58 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=183210.35..183210.48 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131313.29 rows=1482773 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=28086.46..28086.47 rows=1 width=192)
   ->  Sort  (cost=28086.46..28086.47 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=14233.81..28086.45 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6440.10 rows=911 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=380 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=10841.00..10841.00 rows=159521 width=172)
                     ->  Nested Loop  (cost=0.71..10841.00 rows=159521 width=172)
                           ->  Nested Loop  (cost=0.29..129.20 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..21.32 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 2 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=28086.46..28086.47 rows=1 width=192)
   ->  Sort  (cost=28086.46..28086.47 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=14233.81..28086.45 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6440.10 rows=911 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=380 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=10841.00..10841.00 rows=159521 width=172)
                     ->  Nested Loop  (cost=0.71..10841.00 rows=159521 width=172)
                           ->  Nested Loop  (cost=0.29..129.20 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..21.32 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 2 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=28086.46..28086.47 rows=1 width=192)
   ->  Sort  (cost=28086.46..28086.47 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Hash Join  (cost=14233.81..28086.45 rows=1 width=192)
               Hash Cond: ((part.p_partkey = partsupp.ps_partkey) AND ((SubPlan 1) = partsupp.ps_supplycost))
               ->  Gather  (cost=1000.00..6440.10 rows=911 width=30)
                     Workers Planned: 2
                     ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=380 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Hash  (cost=10841.00..10841.00 rows=159521 width=172)
                     ->  Nested Loop  (cost=0.71..10841.00 rows=159521 width=172)
                           ->  Nested Loop  (cost=0.29..129.20 rows=2000 width=166)
                                 ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'AMERICA'::bpchar)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..21.32 rows=400 width=144)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=14)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=18.44..18.45 rows=1 width=32)
                       ->  Nested Loop  (cost=0.85..18.44 rows=1 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Nested Loop  (cost=0.85..17.33 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.71..16.71 rows=4 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.42..3.50 rows=4 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.30 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(35 rows)

query 3 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=142541.50..142541.52 rows=10 width=44)
   ->  Sort  (cost=142541.50..143344.99 rows=321397 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=93299.21..135596.23 rows=321397 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=93299.21..128230.89 rows=267830 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=92299.19..96316.64 rows=133915 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=92299.19..92633.97 rows=133915 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=0.86..80895.68 rows=133915 width=24)
                                       ->  Nested Loop  (cost=0.43..32481.08 rows=61687 width=12)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12752 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.12 rows=8 width=16)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.76 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(21 rows)

query 3 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=142541.50..142541.52 rows=10 width=44)
   ->  Sort  (cost=142541.50..143344.99 rows=321397 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=93299.21..135596.23 rows=321397 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=93299.21..128230.89 rows=267830 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=92299.19..96316.64 rows=133915 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=92299.19..92633.97 rows=133915 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=0.86..80895.68 rows=133915 width=24)
                                       ->  Nested Loop  (cost=0.43..32481.08 rows=61687 width=12)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12752 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.12 rows=8 width=16)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.76 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(21 rows)

query 3 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=142541.50..142541.52 rows=10 width=44)
   ->  Sort  (cost=142541.50..143344.99 rows=321397 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  Finalize GroupAggregate  (cost=93299.21..135596.23 rows=321397 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=93299.21..128230.89 rows=267830 width=44)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=92299.19..96316.64 rows=133915 width=44)
                           Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Sort  (cost=92299.19..92633.97 rows=133915 width=24)
                                 Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                                 ->  Nested Loop  (cost=0.86..80895.68 rows=133915 width=24)
                                       ->  Nested Loop  (cost=0.43..32481.08 rows=61687 width=12)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12752 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                             ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..2.12 rows=8 width=16)
                                                   Index Cond: (o_custkey = customer.c_custkey)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.76 rows=2 width=16)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: (l_shipdate > '1995-03-07'::date)
(21 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29278.95..49990.91 rows=1 width=24)
   ->  GroupAggregate  (cost=29278.95..132838.74 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29278.95..132564.74 rows=54790 width=16)
               ->  Gather Merge  (cost=29278.52..35760.53 rows=54790 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28278.48..28322.67 rows=17674 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=635.52..27031.64 rows=17674 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..621.83 rows=54790 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.98 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29278.95..49990.91 rows=1 width=24)
   ->  GroupAggregate  (cost=29278.95..132838.74 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29278.95..132564.74 rows=54790 width=16)
               ->  Gather Merge  (cost=29278.52..35760.53 rows=54790 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28278.48..28322.67 rows=17674 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=635.52..27031.64 rows=17674 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..621.83 rows=54790 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.98 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29278.95..49990.91 rows=1 width=24)
   ->  GroupAggregate  (cost=29278.95..132838.74 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29278.95..132564.74 rows=54790 width=16)
               ->  Gather Merge  (cost=29278.52..35760.53 rows=54790 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28278.48..28322.67 rows=17674 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=635.52..27031.64 rows=17674 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..621.83 rows=54790 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.98 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=46004.97..46004.97 rows=1 width=58)
   ->  Sort  (cost=46004.97..46005.03 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=45960.76..46004.85 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=45960.76..46004.16 rows=50 width=58)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=44960.74..44998.36 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=44960.74..44968.20 rows=2985 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=476.37..44788.45 rows=2985 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=3.37..43922.77 rows=74796 width=50)
                                             ->  Nested Loop  (cost=2.94..18543.01 rows=18699 width=38)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.32 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(32 rows)

query 5 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=46004.97..46004.97 rows=1 width=58)
   ->  Sort  (cost=46004.97..46005.03 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=45960.76..46004.85 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=45960.76..46004.16 rows=50 width=58)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=44960.74..44998.36 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=44960.74..44968.20 rows=2985 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=476.37..44788.45 rows=2985 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=3.37..43922.77 rows=74796 width=50)
                                             ->  Nested Loop  (cost=2.94..18543.01 rows=18699 width=38)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.32 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(32 rows)

query 5 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=46004.97..46004.97 rows=1 width=58)
   ->  Sort  (cost=46004.97..46005.03 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=45960.76..46004.85 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=45960.76..46004.16 rows=50 width=58)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=44960.74..44998.36 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=44960.74..44968.20 rows=2985 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=476.37..44788.45 rows=2985 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=3.37..43922.77 rows=74796 width=50)
                                             ->  Nested Loop  (cost=2.94..18543.01 rows=18699 width=38)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                         Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                     Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=3 width=8)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.32 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(32 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=107117.36..107117.37 rows=1 width=32)
   ->  Finalize Aggregate  (cost=107117.36..107117.37 rows=1 width=32)
         ->  Gather  (cost=107116.93..107117.34 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=106116.93..106116.94 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=20949.06..105968.35 rows=29716 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..20919.34 rows=118862 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=107117.36..107117.37 rows=1 width=32)
   ->  Finalize Aggregate  (cost=107117.36..107117.37 rows=1 width=32)
         ->  Gather  (cost=107116.93..107117.34 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=106116.93..106116.94 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=20949.06..105968.35 rows=29716 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..20919.34 rows=118862 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=107117.36..107117.37 rows=1 width=32)
   ->  Finalize Aggregate  (cost=107117.36..107117.37 rows=1 width=32)
         ->  Gather  (cost=107116.93..107117.34 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=106116.93..106116.94 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=20949.06..105968.35 rows=29716 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..20919.34 rows=118862 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=42333.40..42351.51 rows=1 width=116)
   ->  GroupAggregate  (cost=42333.40..152096.82 rows=6062 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Incremental Sort  (cost=42333.40..151914.96 rows=6062 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               Presorted Key: n1.n_name, n2.n_name
               ->  Nested Loop  (cost=5831.50..151518.86 rows=6062 width=96)
                     Join Filter: (supplier.s_nationkey = n1.n_nationkey)
                     ->  Nested Loop  (cost=5831.22..103635.00 rows=151864 width=76)
                           ->  Nested Loop  (cost=5830.79..21913.49 rows=124848 width=60)
                                 ->  Gather Merge  (cost=5830.36..7284.44 rows=12485 width=60)
                                       Workers Planned: 2
                                       ->  Sort  (cost=4830.33..4843.34 rows=5202 width=60)
                                             Sort Key: n1.n_name, n2.n_name
                                             ->  Hash Join  (cost=2.87..4509.24 rows=5202 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.00 rows=17 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.64 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
(32 rows)

query 7 run 2
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=42333.40..42351.51 rows=1 width=116)
   ->  GroupAggregate  (cost=42333.40..152096.82 rows=6062 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Incremental Sort  (cost=42333.40..151914.96 rows=6062 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               Presorted Key: n1.n_name, n2.n_name
               ->  Nested Loop  (cost=5831.50..151518.86 rows=6062 width=96)
                     Join Filter: (supplier.s_nationkey = n1.n_nationkey)
                     ->  Nested Loop  (cost=5831.22..103635.00 rows=151864 width=76)
                           ->  Nested Loop  (cost=5830.79..21913.49 rows=124848 width=60)
                                 ->  Gather Merge  (cost=5830.36..7284.44 rows=12485 width=60)
                                       Workers Planned: 2
                                       ->  Sort  (cost=4830.33..4843.34 rows=5202 width=60)
                                             Sort Key: n1.n_name, n2.n_name
                                             ->  Hash Join  (cost=2.87..4509.24 rows=5202 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.00 rows=17 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.64 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
(32 rows)

query 7 run 3
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=42333.40..42351.51 rows=1 width=116)
   ->  GroupAggregate  (cost=42333.40..152096.82 rows=6062 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Incremental Sort  (cost=42333.40..151914.96 rows=6062 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               Presorted Key: n1.n_name, n2.n_name
               ->  Nested Loop  (cost=5831.50..151518.86 rows=6062 width=96)
                     Join Filter: (supplier.s_nationkey = n1.n_nationkey)
                     ->  Nested Loop  (cost=5831.22..103635.00 rows=151864 width=76)
                           ->  Nested Loop  (cost=5830.79..21913.49 rows=124848 width=60)
                                 ->  Gather Merge  (cost=5830.36..7284.44 rows=12485 width=60)
                                       Workers Planned: 2
                                       ->  Sort  (cost=4830.33..4843.34 rows=5202 width=60)
                                             Sort Key: n1.n_name, n2.n_name
                                             ->  Hash Join  (cost=2.87..4509.24 rows=5202 width=60)
                                                   Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                 ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.00 rows=17 width=8)
                                       Index Cond: (o_custkey = customer.c_custkey)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.64 rows=1 width=24)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
(32 rows)

query 8 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22684.76..22765.82 rows=1 width=64)
   ->  GroupAggregate  (cost=22684.76..217715.92 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=22684.76..217619.52 rows=2414 width=70)
               ->  Nested Loop  (cost=22684.62..217239.77 rows=2414 width=20)
                     ->  Nested Loop  (cost=22684.33..216508.17 rows=2418 width=20)
                           ->  Nested Loop  (cost=22683.90..119398.24 rows=364781 width=24)
                                 ->  Gather Merge  (cost=22683.47..33304.63 rows=91195 width=8)
                                       Workers Planned: 2
                                       ->  Sort  (cost=21683.45..21778.44 rows=37998 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Nested Loop  (cost=2.94..18793.01 rows=37998 width=8)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=5 width=12)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.90 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Memoize  (cost=0.43..0.45 rows=1 width=4)
                                 Cache Key: lineitem.l_partkey
                                 Cache Mode: logical
                                 ->  Index Scan using part_pkey on part  (cost=0.42..0.44 rows=1 width=4)
                                       Index Cond: (p_partkey = lineitem.l_partkey)
                                       Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
(37 rows)

query 8 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22684.76..22765.82 rows=1 width=64)
   ->  GroupAggregate  (cost=22684.76..217715.92 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=22684.76..217619.52 rows=2414 width=70)
               ->  Nested Loop  (cost=22684.62..217239.77 rows=2414 width=20)
                     ->  Nested Loop  (cost=22684.33..216508.17 rows=2418 width=20)
                           ->  Nested Loop  (cost=22683.90..119398.24 rows=364781 width=24)
                                 ->  Gather Merge  (cost=22683.47..33304.63 rows=91195 width=8)
                                       Workers Planned: 2
                                       ->  Sort  (cost=21683.45..21778.44 rows=37998 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Nested Loop  (cost=2.94..18793.01 rows=37998 width=8)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=5 width=12)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.90 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Memoize  (cost=0.43..0.45 rows=1 width=4)
                                 Cache Key: lineitem.l_partkey
                                 Cache Mode: logical
                                 ->  Index Scan using part_pkey on part  (cost=0.42..0.44 rows=1 width=4)
                                       Index Cond: (p_partkey = lineitem.l_partkey)
                                       Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
(37 rows)

query 8 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=22684.76..22765.82 rows=1 width=64)
   ->  GroupAggregate  (cost=22684.76..217715.92 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=22684.76..217619.52 rows=2414 width=70)
               ->  Nested Loop  (cost=22684.62..217239.77 rows=2414 width=20)
                     ->  Nested Loop  (cost=22684.33..216508.17 rows=2418 width=20)
                           ->  Nested Loop  (cost=22683.90..119398.24 rows=364781 width=24)
                                 ->  Gather Merge  (cost=22683.47..33304.63 rows=91195 width=8)
                                       Workers Planned: 2
                                       ->  Sort  (cost=21683.45..21778.44 rows=37998 width=8)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Nested Loop  (cost=2.94..18793.01 rows=37998 width=8)
                                                   ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=4)
                                                         Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                         ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                                     Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                                     ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                 Filter: (r_name = 'AMERICA'::bpchar)
                                                   ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.09 rows=5 width=12)
                                                         Index Cond: (o_custkey = customer.c_custkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..0.90 rows=4 width=24)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Memoize  (cost=0.43..0.45 rows=1 width=4)
                                 Cache Key: lineitem.l_partkey
                                 Cache Mode: logical
                                 ->  Index Scan using part_pkey on part  (cost=0.42..0.44 rows=1 width=4)
                                       Index Cond: (p_partkey = lineitem.l_partkey)
                                       Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                     ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.16 rows=1 width=30)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
(37 rows)

query 9 run 1
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18792.23..19050.82 rows=1 width=90)
   ->  GroupAggregate  (cost=18792.23..56287.53 rows=145 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=18792.23..56282.82 rows=145 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=17230.22..56278.67 rows=145 width=81)
                     ->  Nested Loop  (cost=17229.79..56212.68 rows=145 width=53)
                           Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Gather Merge  (cost=17229.36..22859.23 rows=48339 width=48)
                                 Workers Planned: 2
                                 ->  Sort  (cost=16229.33..16279.68 rows=20141 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=449.99..14789.47 rows=20141 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Hash Join  (cost=448.43..14726.07 rows=20141 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.42..14225.02 rows=20202 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=5050 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.76 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.68 rows=1 width=29)
                                 Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(30 rows)

query 9 run 2
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18792.23..19050.82 rows=1 width=90)
   ->  GroupAggregate  (cost=18792.23..56287.53 rows=145 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=18792.23..56282.82 rows=145 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=17230.22..56278.67 rows=145 width=81)
                     ->  Nested Loop  (cost=17229.79..56212.68 rows=145 width=53)
                           Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Gather Merge  (cost=17229.36..22859.23 rows=48339 width=48)
                                 Workers Planned: 2
                                 ->  Sort  (cost=16229.33..16279.68 rows=20141 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=449.99..14789.47 rows=20141 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Hash Join  (cost=448.43..14726.07 rows=20141 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.42..14225.02 rows=20202 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=5050 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.76 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.68 rows=1 width=29)
                                 Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(30 rows)

query 9 run 3
SET
SET
SET
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18792.23..19050.82 rows=1 width=90)
   ->  GroupAggregate  (cost=18792.23..56287.53 rows=145 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=18792.23..56282.82 rows=145 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=17230.22..56278.67 rows=145 width=81)
                     ->  Nested Loop  (cost=17229.79..56212.68 rows=145 width=53)
                           Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                           ->  Gather Merge  (cost=17229.36..22859.23 rows=48339 width=48)
                                 Workers Planned: 2
                                 ->  Sort  (cost=16229.33..16279.68 rows=20141 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=449.99..14789.47 rows=20141 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Hash Join  (cost=448.43..14726.07 rows=20141 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.42..14225.02 rows=20202 width=18)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=5050 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.42..1.76 rows=4 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..0.68 rows=1 width=29)
                                 Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..0.45 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(30 rows)

query 10 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=80365.25..80365.30 rows=20 width=202)
   ->  Sort  (cost=80365.25..80518.47 rows=61289 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=77968.26..78734.37 rows=61289 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6705.97..77202.15 rows=61289 width=182)
                     Workers Planned: 3
                     ->  Nested Loop  (cost=5705.97..70073.25 rows=19771 width=182)
                           ->  Hash Join  (cost=5705.53..32239.88 rows=19490 width=174)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=5703.97..32178.48 rows=19490 width=152)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=700.72..27124.07 rows=19490 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..685.62 rows=60419 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.93 rows=1 width=16)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_returnflag = 'R'::bpchar)
(23 rows)

query 10 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=80365.25..80365.30 rows=20 width=202)
   ->  Sort  (cost=80365.25..80518.47 rows=61289 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=77968.26..78734.37 rows=61289 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6705.97..77202.15 rows=61289 width=182)
                     Workers Planned: 3
                     ->  Nested Loop  (cost=5705.97..70073.25 rows=19771 width=182)
                           ->  Hash Join  (cost=5705.53..32239.88 rows=19490 width=174)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=5703.97..32178.48 rows=19490 width=152)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=700.72..27124.07 rows=19490 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..685.62 rows=60419 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.93 rows=1 width=16)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_returnflag = 'R'::bpchar)
(23 rows)

query 10 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=80365.25..80365.30 rows=20 width=202)
   ->  Sort  (cost=80365.25..80518.47 rows=61289 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=77968.26..78734.37 rows=61289 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6705.97..77202.15 rows=61289 width=182)
                     Workers Planned: 3
                     ->  Nested Loop  (cost=5705.97..70073.25 rows=19771 width=182)
                           ->  Hash Join  (cost=5705.53..32239.88 rows=19490 width=174)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=5703.97..32178.48 rows=19490 width=152)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=700.72..27124.07 rows=19490 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..685.62 rows=60419 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.43..1.93 rows=1 width=16)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
                                 Filter: (l_returnflag = 'R'::bpchar)
(23 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5832.94..5832.94 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2610.72..2610.73 rows=1 width=32)
           ->  Nested Loop  (cost=5.31..2371.43 rows=31904 width=10)
                 ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=4.88..223.76 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.56 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3222.21..3248.80 rows=10635 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=2690.47..3169.03 rows=10635 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=5.31..2371.43 rows=31904 width=14)
                     ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 2
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5832.94..5832.94 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2610.72..2610.73 rows=1 width=32)
           ->  Nested Loop  (cost=5.31..2371.43 rows=31904 width=10)
                 ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=4.88..223.76 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.56 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3222.21..3248.80 rows=10635 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=2690.47..3169.03 rows=10635 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=5.31..2371.43 rows=31904 width=14)
                     ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 3
SET
SET
SET
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5832.94..5832.94 rows=1 width=36)
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=2610.72..2610.73 rows=1 width=32)
           ->  Nested Loop  (cost=5.31..2371.43 rows=31904 width=10)
                 ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=4.88..223.76 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..4.56 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=3222.21..3248.80 rows=10635 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=2690.47..3169.03 rows=10635 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
               ->  Nested Loop  (cost=5.31..2371.43 rows=31904 width=14)
                     ->  Nested Loop  (cost=4.88..229.08 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=147790.63..155171.28 rows=1 width=27)
   ->  GroupAggregate  (cost=147790.63..199455.16 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=147790.63..198938.49 rows=29520 width=27)
               ->  Gather Merge  (cost=147790.20..151325.37 rows=29525 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=146790.14..146808.60 rows=7381 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..146315.93 rows=7381 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..1.61 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 2
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=147790.63..155171.28 rows=1 width=27)
   ->  GroupAggregate  (cost=147790.63..199455.16 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=147790.63..198938.49 rows=29520 width=27)
               ->  Gather Merge  (cost=147790.20..151325.37 rows=29525 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=146790.14..146808.60 rows=7381 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..146315.93 rows=7381 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..1.61 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 3
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=147790.63..155171.28 rows=1 width=27)
   ->  GroupAggregate  (cost=147790.63..199455.16 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=147790.63..198938.49 rows=29520 width=27)
               ->  Gather Merge  (cost=147790.20..151325.37 rows=29525 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=146790.14..146808.60 rows=7381 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..146315.93 rows=7381 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..1.61 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64816.89..64816.89 rows=1 width=16)
   ->  Sort  (cost=64816.89..64817.39 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64813.89..64815.89 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61063.89..62563.89 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53564.64 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64816.89..64816.89 rows=1 width=16)
   ->  Sort  (cost=64816.89..64817.39 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64813.89..64815.89 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61063.89..62563.89 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53564.64 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 13 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64816.89..64816.89 rows=1 width=16)
   ->  Sort  (cost=64816.89..64817.39 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64813.89..64815.89 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61063.89..62563.89 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4746.42..53564.64 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=2871.42..2871.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..2871.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=77191.48..77191.49 rows=1 width=32)
   ->  Finalize Aggregate  (cost=77191.48..77191.49 rows=1 width=32)
         ->  Gather  (cost=77191.02..77191.43 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=76191.02..76191.03 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7288.60..75832.41 rows=20492 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1314.60..69804.62 rows=20492 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1294.11 rows=81968 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=77191.48..77191.49 rows=1 width=32)
   ->  Finalize Aggregate  (cost=77191.48..77191.49 rows=1 width=32)
         ->  Gather  (cost=77191.02..77191.43 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=76191.02..76191.03 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7288.60..75832.41 rows=20492 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1314.60..69804.62 rows=20492 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1294.11 rows=81968 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=77191.48..77191.49 rows=1 width=32)
   ->  Finalize Aggregate  (cost=77191.48..77191.49 rows=1 width=32)
         ->  Gather  (cost=77191.02..77191.43 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=76191.02..76191.03 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7288.60..75832.41 rows=20492 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1314.60..69804.62 rows=20492 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1294.11 rows=81968 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=239872.57..239980.07 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=121243.49..121243.50 rows=1 width=32)
           ->  HashAggregate  (cost=120992.99..121118.24 rows=10020 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3554.54..118776.79 rows=221620 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3499.13 rows=221620 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=118629.07..124003.77 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=118628.78..123878.65 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Gather Merge  (cost=118628.78..123427.75 rows=40080 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=117628.73..117653.78 rows=10020 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=116837.62..116962.87 rows=10020 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=3554.54..116283.57 rows=55405 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3499.13 rows=221620 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.49 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=239872.57..239980.07 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=121243.49..121243.50 rows=1 width=32)
           ->  HashAggregate  (cost=120992.99..121118.24 rows=10020 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3554.54..118776.79 rows=221620 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3499.13 rows=221620 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=118629.07..124003.77 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=118628.78..123878.65 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Gather Merge  (cost=118628.78..123427.75 rows=40080 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=117628.73..117653.78 rows=10020 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=116837.62..116962.87 rows=10020 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=3554.54..116283.57 rows=55405 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3499.13 rows=221620 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.49 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=239872.57..239980.07 rows=1 width=103)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=121243.49..121243.50 rows=1 width=32)
           ->  HashAggregate  (cost=120992.99..121118.24 rows=10020 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=3554.54..118776.79 rows=221620 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3499.13 rows=221620 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=118629.07..124003.77 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=118628.78..123878.65 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = $0)
               ->  Gather Merge  (cost=118628.78..123427.75 rows=40080 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=117628.73..117653.78 rows=10020 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=116837.62..116962.87 rows=10020 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=3554.54..116283.57 rows=55405 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3499.13 rows=221620 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.49 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(25 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=26749.58..26749.58 rows=1 width=44)
   ->  Sort  (cost=26749.58..26789.62 rows=16017 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=18775.58..26669.49 rows=16017 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=18775.58..25913.20 rows=59612 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=17775.52..17812.78 rows=14903 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=6686.00..16742.50 rows=14903 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12419 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12419 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=26749.58..26749.58 rows=1 width=44)
   ->  Sort  (cost=26749.58..26789.62 rows=16017 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=18775.58..26669.49 rows=16017 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=18775.58..25913.20 rows=59612 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=17775.52..17812.78 rows=14903 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=6686.00..16742.50 rows=14903 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12419 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12419 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=26749.58..26749.58 rows=1 width=44)
   ->  Sort  (cost=26749.58..26789.62 rows=16017 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=18775.58..26669.49 rows=16017 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=18775.58..25913.20 rows=59612 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=17775.52..17812.78 rows=14903 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=6686.00..16742.50 rows=14903 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..10142.43 rows=100000 width=8)
                                       Filter: (NOT (hashed SubPlan 1))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12419 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12419 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit  (cost=212873.17..212873.18 rows=1 width=32)
   ->  Aggregate  (cost=212873.17..212873.18 rows=1 width=32)
         ->  Nested Loop  (cost=208947.52..212868.23 rows=1975 width=8)
               Join Filter: (lineitem.l_partkey = part.p_partkey)
               ->  Hash Join  (cost=208947.09..212462.42 rows=197 width=40)
                     Hash Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=202575.81..205567.58 rows=199451 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..172570.54 rows=6001054 width=9)
                     ->  Hash  (cost=6368.80..6368.80 rows=198 width=4)
                           ->  Gather  (cost=1000.00..6368.80 rows=198 width=4)
                                 Workers Planned: 2
                                 ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=82 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..1.93 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(17 rows)

query 17 run 2
SET
SET
SET
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit  (cost=212873.17..212873.18 rows=1 width=32)
   ->  Aggregate  (cost=212873.17..212873.18 rows=1 width=32)
         ->  Nested Loop  (cost=208947.52..212868.23 rows=1975 width=8)
               Join Filter: (lineitem.l_partkey = part.p_partkey)
               ->  Hash Join  (cost=208947.09..212462.42 rows=197 width=40)
                     Hash Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=202575.81..205567.58 rows=199451 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..172570.54 rows=6001054 width=9)
                     ->  Hash  (cost=6368.80..6368.80 rows=198 width=4)
                           ->  Gather  (cost=1000.00..6368.80 rows=198 width=4)
                                 Workers Planned: 2
                                 ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=82 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..1.93 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(17 rows)

query 17 run 3
SET
SET
SET
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit  (cost=212873.17..212873.18 rows=1 width=32)
   ->  Aggregate  (cost=212873.17..212873.18 rows=1 width=32)
         ->  Nested Loop  (cost=208947.52..212868.23 rows=1975 width=8)
               Join Filter: (lineitem.l_partkey = part.p_partkey)
               ->  Hash Join  (cost=208947.09..212462.42 rows=197 width=40)
                     Hash Cond: (lineitem_1.l_partkey = part.p_partkey)
                     ->  HashAggregate  (cost=202575.81..205567.58 rows=199451 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Seq Scan on lineitem lineitem_1  (cost=0.00..172570.54 rows=6001054 width=9)
                     ->  Hash  (cost=6368.80..6368.80 rows=198 width=4)
                           ->  Gather  (cost=1000.00..6368.80 rows=198 width=4)
                                 Workers Planned: 2
                                 ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=82 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..1.93 rows=10 width=17)
                     Index Cond: (l_partkey = lineitem_1.l_partkey)
                     Filter: (l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
(17 rows)

query 18 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=794653.52..794653.77 rows=100 width=71)
   ->  Sort  (cost=794653.52..799654.39 rows=2000351 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=658034.73..718201.54 rows=2000351 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 16
               ->  Hash Join  (cost=335203.45..550281.45 rows=2000351 width=44)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..172570.54 rows=6001054 width=9)
                     ->  Hash  (cost=328952.35..328952.35 rows=500088 width=43)
                           ->  Hash Join  (cost=282571.07..328952.35 rows=500088 width=43)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=275599.07..320667.58 rows=500088 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                       ->  Hash  (cost=269347.97..269347.97 rows=500088 width=4)
                                             ->  GroupAggregate  (cost=0.43..269347.97 rows=500088 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..216838.74 rows=6001054 width=9)
                                 ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                       ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 18 run 2
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=794653.52..794653.77 rows=100 width=71)
   ->  Sort  (cost=794653.52..799654.39 rows=2000351 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=658034.73..718201.54 rows=2000351 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 16
               ->  Hash Join  (cost=335203.45..550281.45 rows=2000351 width=44)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..172570.54 rows=6001054 width=9)
                     ->  Hash  (cost=328952.35..328952.35 rows=500088 width=43)
                           ->  Hash Join  (cost=282571.07..328952.35 rows=500088 width=43)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=275599.07..320667.58 rows=500088 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                       ->  Hash  (cost=269347.97..269347.97 rows=500088 width=4)
                                             ->  GroupAggregate  (cost=0.43..269347.97 rows=500088 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..216838.74 rows=6001054 width=9)
                                 ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                       ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 18 run 3
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=794653.52..794653.77 rows=100 width=71)
   ->  Sort  (cost=794653.52..799654.39 rows=2000351 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  HashAggregate  (cost=658034.73..718201.54 rows=2000351 width=71)
               Group Key: customer.c_custkey, orders.o_orderkey
               Planned Partitions: 16
               ->  Hash Join  (cost=335203.45..550281.45 rows=2000351 width=44)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..172570.54 rows=6001054 width=9)
                     ->  Hash  (cost=328952.35..328952.35 rows=500088 width=43)
                           ->  Hash Join  (cost=282571.07..328952.35 rows=500088 width=43)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=275599.07..320667.58 rows=500088 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                       ->  Hash  (cost=269347.97..269347.97 rows=500088 width=4)
                                             ->  GroupAggregate  (cost=0.43..269347.97 rows=500088 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.43..216838.74 rows=6001054 width=9)
                                 ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                       ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
(22 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=18326.42..18326.43 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18326.42..18326.43 rows=1 width=32)
         ->  Gather  (cost=18326.20..18326.41 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17326.20..17326.21 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17325.83 rows=48 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=208 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.55 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

 Limit  (cost=18326.42..18326.43 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18326.42..18326.43 rows=1 width=32)
         ->  Gather  (cost=18326.20..18326.41 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17326.20..17326.21 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17325.83 rows=48 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=208 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.55 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=18326.42..18326.43 rows=1 width=32)
   ->  Finalize Aggregate  (cost=18326.42..18326.43 rows=1 width=32)
         ->  Gather  (cost=18326.20..18326.41 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=17326.20..17326.21 rows=1 width=32)
                     ->  Nested Loop  (cost=0.43..17325.83 rows=48 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=208 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.43..46.55 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=206051.03..206051.04 rows=1 width=51)
   ->  Sort  (cost=206051.03..206051.04 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=185609.30..206051.02 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=185609.30..205595.71 rows=1 width=8)
                     ->  Nested Loop  (cost=185609.30..205595.71 rows=1 width=8)
                           ->  Hash Join  (cost=185608.88..203046.04 rows=4893 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=179240.96..195406.32 rows=484485 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=14609.36..140836.82 rows=911164 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14381.57 rows=911164 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6342.67..6342.67 rows=2020 width=4)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(29 rows)

query 20 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=206051.03..206051.04 rows=1 width=51)
   ->  Sort  (cost=206051.03..206051.04 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=185609.30..206051.02 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=185609.30..205595.71 rows=1 width=8)
                     ->  Nested Loop  (cost=185609.30..205595.71 rows=1 width=8)
                           ->  Hash Join  (cost=185608.88..203046.04 rows=4893 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=179240.96..195406.32 rows=484485 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=14609.36..140836.82 rows=911164 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14381.57 rows=911164 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6342.67..6342.67 rows=2020 width=4)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(29 rows)

query 20 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=206051.03..206051.04 rows=1 width=51)
   ->  Sort  (cost=206051.03..206051.04 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=185609.30..206051.02 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=185609.30..205595.71 rows=1 width=8)
                     ->  Nested Loop  (cost=185609.30..205595.71 rows=1 width=8)
                           ->  Hash Join  (cost=185608.88..203046.04 rows=4893 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=179240.96..195406.32 rows=484485 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=14609.36..140836.82 rows=911164 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14381.57 rows=911164 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6342.67..6342.67 rows=2020 width=4)
                                       ->  Gather  (cost=1000.00..6342.67 rows=2020 width=4)
                                             Workers Planned: 2
                                             ->  Parallel Seq Scan on part  (cost=0.00..5140.67 rows=842 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Scan using partsupp_pkey on partsupp  (cost=0.42..0.51 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(29 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146535.76..146535.76 rows=1 width=34)
   ->  Sort  (cost=146535.76..146535.76 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=146535.73..146535.75 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=146535.73..146535.73 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1235.37..146535.72 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1234.94..146535.25 rows=1 width=34)
                                 ->  Gather  (cost=1234.51..146534.63 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=234.51..145534.53 rows=1 width=34)
                                             ->  Hash Join  (cost=234.08..133622.34 rows=19964 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131313.29 rows=500088 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=229.08..229.08 rows=400 width=30)
                                                         ->  Nested Loop  (cost=4.88..229.08 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.61 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.60 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(33 rows)

query 21 run 2
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146535.76..146535.76 rows=1 width=34)
   ->  Sort  (cost=146535.76..146535.76 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=146535.73..146535.75 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=146535.73..146535.73 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1235.37..146535.72 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1234.94..146535.25 rows=1 width=34)
                                 ->  Gather  (cost=1234.51..146534.63 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=234.51..145534.53 rows=1 width=34)
                                             ->  Hash Join  (cost=234.08..133622.34 rows=19964 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131313.29 rows=500088 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=229.08..229.08 rows=400 width=30)
                                                         ->  Nested Loop  (cost=4.88..229.08 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.61 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.60 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(33 rows)

query 21 run 3
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=146535.76..146535.76 rows=1 width=34)
   ->  Sort  (cost=146535.76..146535.76 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=146535.73..146535.75 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=146535.73..146535.73 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=1235.37..146535.72 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=1234.94..146535.25 rows=1 width=34)
                                 ->  Gather  (cost=1234.51..146534.63 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=234.51..145534.53 rows=1 width=34)
                                             ->  Hash Join  (cost=234.08..133622.34 rows=19964 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..131313.29 rows=500088 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Hash  (cost=229.08..229.08 rows=400 width=30)
                                                         ->  Nested Loop  (cost=4.88..229.08 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=4.88..223.76 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..4.79 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..0.61 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..0.60 rows=4 width=8)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=4)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(33 rows)

query 22 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.56..12517.18 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.81..6242.82 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1983 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7460.15 rows=730 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7441.90 rows=730 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     Params Evaluated: $1
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > $1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.68 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

query 22 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.56..12517.18 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.81..6242.82 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1983 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7460.15 rows=730 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7441.90 rows=730 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     Params Evaluated: $1
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > $1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.68 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

query 22 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.56..12517.18 rows=1 width=72)
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=6242.81..6242.82 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1983 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7460.15 rows=730 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7441.90 rows=730 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     Params Evaluated: $1
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > $1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.68 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

