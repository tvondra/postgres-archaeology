query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1831562.23..1831562.86 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1831562.23..1831566.04 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1831562.23..1831565.10 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1830562.17..1830562.18 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1830561.96..1830562.09 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312580.57 rows=14799468 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1831562.23..1831562.86 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1831562.23..1831566.04 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1831562.23..1831565.10 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1830562.17..1830562.18 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1830561.96..1830562.09 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312580.57 rows=14799468 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1831562.23..1831562.86 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1831562.23..1831566.04 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1831562.23..1831565.10 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1830562.17..1830562.18 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1830561.96..1830562.09 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312580.57 rows=14799468 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=886205.60..886205.61 rows=1 width=192)
   ->  Sort  (cost=886205.60..886205.61 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=361766.60..886205.59 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68713.92 rows=8404 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.87 rows=2101 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=360766.07..368752.00 rows=1597186 width=172)
                     ->  Sort  (cost=360766.07..364759.03 rows=1597186 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..108462.70 rows=1597186 width=172)
                                 ->  Nested Loop  (cost=0.29..1239.28 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..207.33 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.56 rows=80 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 2 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=886205.60..886205.61 rows=1 width=192)
   ->  Sort  (cost=886205.60..886205.61 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=361766.60..886205.59 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68713.92 rows=8404 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.87 rows=2101 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=360766.07..368752.00 rows=1597186 width=172)
                     ->  Sort  (cost=360766.07..364759.03 rows=1597186 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..108462.70 rows=1597186 width=172)
                                 ->  Nested Loop  (cost=0.29..1239.28 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..207.33 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.56 rows=80 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 2 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=886205.60..886205.61 rows=1 width=192)
   ->  Sort  (cost=886205.60..886205.61 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=361766.60..886205.59 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.49..68713.92 rows=8404 width=30)
                     Workers Planned: 4
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.87 rows=2101 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
               ->  Materialize  (cost=360766.07..368752.00 rows=1597186 width=172)
                     ->  Sort  (cost=360766.07..364759.03 rows=1597186 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=0.72..108462.70 rows=1597186 width=172)
                                 ->  Nested Loop  (cost=0.29..1239.28 rows=20000 width=166)
                                       ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                                             Join Filter: (nation.n_regionkey = region.r_regionkey)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                       ->  Index Scan using idx_supplier_nation_key on supplier  (cost=0.29..207.33 rows=4000 width=144)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.56 rows=80 width=14)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=66.25..66.26 rows=1 width=32)
                       ->  Nested Loop  (cost=2.29..66.24 rows=4 width=6)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'AMERICA'::bpchar)
                             ->  Hash Join  (cost=2.29..64.95 rows=18 width=10)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Nested Loop  (cost=0.72..63.33 rows=18 width=10)
                                         ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..3.75 rows=18 width=10)
                                               Index Cond: (ps_partkey = part.p_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..3.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
(39 rows)

query 3 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1911196.23..1911196.26 rows=10 width=44)
   ->  Sort  (cost=1911196.23..1918954.86 rows=3103450 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1387196.45..1844131.79 rows=3103450 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1387196.45..1758786.92 rows=3103450 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1386196.39..1388136.04 rows=775862 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41563.47..1300065.23 rows=775862 width=24)
                                 ->  Parallel Hash Join  (cost=41562.90..354439.00 rows=357281 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308139.40 rows=1804452 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.73..40634.73 rows=74254 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.73 rows=74254 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 3 run 2
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1911196.23..1911196.26 rows=10 width=44)
   ->  Sort  (cost=1911196.23..1918954.86 rows=3103450 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1387196.45..1844131.79 rows=3103450 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1387196.45..1758786.92 rows=3103450 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1386196.39..1388136.04 rows=775862 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41563.47..1300065.23 rows=775862 width=24)
                                 ->  Parallel Hash Join  (cost=41562.90..354439.00 rows=357281 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308139.40 rows=1804452 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.73..40634.73 rows=74254 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.73 rows=74254 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 3 run 3
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1911196.23..1911196.26 rows=10 width=44)
   ->  Sort  (cost=1911196.23..1918954.86 rows=3103450 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1387196.45..1844131.79 rows=3103450 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1387196.45..1758786.92 rows=3103450 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1386196.39..1388136.04 rows=775862 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Nested Loop  (cost=41563.47..1300065.23 rows=775862 width=24)
                                 ->  Parallel Hash Join  (cost=41562.90..354439.00 rows=357281 width=12)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..308139.40 rows=1804452 width=16)
                                             Filter: (o_orderdate < '1995-03-07'::date)
                                       ->  Parallel Hash  (cost=40634.73..40634.73 rows=74254 width=4)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..40634.73 rows=74254 width=4)
                                                   Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=2 width=16)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: (l_shipdate > '1995-03-07'::date)
(20 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=284026.04..595398.90 rows=1 width=24)
   ->  GroupAggregate  (cost=284026.04..1840890.35 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=284026.04..1837931.22 rows=591816 width=16)
               ->  Gather Merge  (cost=284025.48..354904.55 rows=591968 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=283025.42..283395.40 rows=147992 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6828.61..270316.49 rows=147992 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6680.62 rows=591968 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.82 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=284026.04..595398.90 rows=1 width=24)
   ->  GroupAggregate  (cost=284026.04..1840890.35 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=284026.04..1837931.22 rows=591816 width=16)
               ->  Gather Merge  (cost=284025.48..354904.55 rows=591968 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=283025.42..283395.40 rows=147992 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6828.61..270316.49 rows=147992 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6680.62 rows=591968 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.82 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=284026.04..595398.90 rows=1 width=24)
   ->  GroupAggregate  (cost=284026.04..1840890.35 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=284026.04..1837931.22 rows=591816 width=16)
               ->  Gather Merge  (cost=284025.48..354904.55 rows=591968 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=283025.42..283395.40 rows=147992 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6828.61..270316.49 rows=147992 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6680.62 rows=591968 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.82 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
(15 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=655138.29..655138.29 rows=1 width=58)
   ->  Sort  (cost=655138.29..655138.35 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=654904.67..655138.17 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=654904.67..655137.10 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=653904.61..654125.13 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=653904.61..653948.65 rows=17617 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=72604.57..652662.20 rows=17617 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=68912.98..646593.31 rows=452818 width=50)
                                             ->  Parallel Hash Join  (cost=68912.41..341079.15 rows=113234 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=26118.81..295879.33 rows=566168 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25552.65 rows=2264671 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41856.05..41856.05 rows=75004 width=38)
                                                         ->  Hash Join  (cost=2.51..41856.05 rows=75004 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.18 rows=375018 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.66 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=655138.29..655138.29 rows=1 width=58)
   ->  Sort  (cost=655138.29..655138.35 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=654904.67..655138.17 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=654904.67..655137.10 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=653904.61..654125.13 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=653904.61..653948.65 rows=17617 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=72604.57..652662.20 rows=17617 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=68912.98..646593.31 rows=452818 width=50)
                                             ->  Parallel Hash Join  (cost=68912.41..341079.15 rows=113234 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=26118.81..295879.33 rows=566168 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25552.65 rows=2264671 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41856.05..41856.05 rows=75004 width=38)
                                                         ->  Hash Join  (cost=2.51..41856.05 rows=75004 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.18 rows=375018 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.66 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=655138.29..655138.29 rows=1 width=58)
   ->  Sort  (cost=655138.29..655138.35 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=654904.67..655138.17 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=654904.67..655137.10 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=653904.61..654125.13 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=653904.61..653948.65 rows=17617 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=72604.57..652662.20 rows=17617 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=68912.98..646593.31 rows=452818 width=50)
                                             ->  Parallel Hash Join  (cost=68912.41..341079.15 rows=113234 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=26118.81..295879.33 rows=566168 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..25552.65 rows=2264671 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41856.05..41856.05 rows=75004 width=38)
                                                         ->  Hash Join  (cost=2.51..41856.05 rows=75004 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.18 rows=375018 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.66 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1284025.36..1284025.37 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1284025.36..1284025.37 rows=1 width=32)
         ->  Gather  (cost=1284024.93..1284025.34 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1283024.93..1283024.94 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=211195.71..1281536.10 rows=297765 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..210897.95 rows=1191061 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1284025.36..1284025.37 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1284025.36..1284025.37 rows=1 width=32)
         ->  Gather  (cost=1284024.93..1284025.34 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1283024.93..1283024.94 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=211195.71..1281536.10 rows=297765 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..210897.95 rows=1191061 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1284025.36..1284025.37 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1284025.36..1284025.37 rows=1 width=32)
         ->  Gather  (cost=1284024.93..1284025.34 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1283024.93..1283024.94 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=211195.71..1281536.10 rows=297765 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..210897.95 rows=1191061 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1153179.91..1153180.50 rows=1 width=116)
   ->  Finalize GroupAggregate  (cost=1153179.91..1159032.53 rows=10052 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Gather Merge  (cost=1153179.91..1158379.15 rows=40208 width=116)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1152179.86..1152589.93 rows=10052 width=116)
                     Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Sort  (cost=1152179.86..1152216.90 rows=14817 width=96)
                           Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                           ->  Parallel Hash Join  (cost=44275.53..1151153.41 rows=14817 width=96)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41225.48..1146358.23 rows=366131 width=46)
                                       ->  Parallel Hash Join  (cost=41224.92..354801.41 rows=299977 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298765.12 rows=3749712 width=8)
                                             ->  Parallel Hash  (cost=40849.89..40849.89 rows=30002 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.89 rows=30002 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.18 rows=375018 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 7 run 2
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1153179.91..1153180.50 rows=1 width=116)
   ->  Finalize GroupAggregate  (cost=1153179.91..1159032.53 rows=10052 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Gather Merge  (cost=1153179.91..1158379.15 rows=40208 width=116)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1152179.86..1152589.93 rows=10052 width=116)
                     Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Sort  (cost=1152179.86..1152216.90 rows=14817 width=96)
                           Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                           ->  Parallel Hash Join  (cost=44275.53..1151153.41 rows=14817 width=96)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41225.48..1146358.23 rows=366131 width=46)
                                       ->  Parallel Hash Join  (cost=41224.92..354801.41 rows=299977 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298765.12 rows=3749712 width=8)
                                             ->  Parallel Hash  (cost=40849.89..40849.89 rows=30002 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.89 rows=30002 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.18 rows=375018 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 7 run 3
SET
SET
SET
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1153179.91..1153180.50 rows=1 width=116)
   ->  Finalize GroupAggregate  (cost=1153179.91..1159032.53 rows=10052 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Gather Merge  (cost=1153179.91..1158379.15 rows=40208 width=116)
               Workers Planned: 4
               ->  Partial GroupAggregate  (cost=1152179.86..1152589.93 rows=10052 width=116)
                     Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     ->  Sort  (cost=1152179.86..1152216.90 rows=14817 width=96)
                           Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                           ->  Parallel Hash Join  (cost=44275.53..1151153.41 rows=14817 width=96)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                 ->  Nested Loop  (cost=41225.48..1146358.23 rows=366131 width=46)
                                       ->  Parallel Hash Join  (cost=41224.92..354801.41 rows=299977 width=30)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..298765.12 rows=3749712 width=8)
                                             ->  Parallel Hash  (cost=40849.89..40849.89 rows=30002 width=30)
                                                   ->  Hash Join  (cost=1.40..40849.89 rows=30002 width=30)
                                                         Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.18 rows=375018 width=8)
                                                         ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.63 rows=1 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Parallel Hash  (cost=2991.23..2991.23 rows=4706 width=30)
                                       ->  Hash Join  (cost=1.40..2991.23 rows=4706 width=30)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
(33 rows)

query 8 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=389991.70..390103.66 rows=1 width=64)
   ->  GroupAggregate  (cost=389991.70..659366.40 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=389991.70..658894.90 rows=21169 width=70)
               ->  Nested Loop  (cost=389991.55..658301.67 rows=21169 width=20)
                     Join Filter: (n1.n_regionkey = region.r_regionkey)
                     ->  Nested Loop  (cost=389991.55..656712.94 rows=105844 width=24)
                           ->  Nested Loop  (cost=389991.40..654102.65 rows=105844 width=24)
                                 ->  Gather Merge  (cost=389990.97..402664.17 rows=105844 width=24)
                                       Workers Planned: 4
                                       ->  Sort  (cost=388990.92..389057.07 rows=26461 width=24)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Nested Loop  (cost=3545.41..387047.15 rows=26461 width=24)
                                                   ->  Parallel Hash Join  (cost=3544.98..175457.50 rows=87647 width=20)
                                                         Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                         ->  Nested Loop  (cost=0.44..171676.36 rows=90130 width=20)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..47231.16 rows=3319 width=4)
                                                                     Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..37.22 rows=27 width=24)
                                                                     Index Cond: (l_partkey = part.p_partkey)
                                                         ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..2.38 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Memoize  (cost=0.15..0.92 rows=1 width=8)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation n1  (cost=0.14..0.91 rows=1 width=8)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
                     ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                 Filter: (r_name = 'AMERICA'::bpchar)
               ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.91 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=389991.70..390103.66 rows=1 width=64)
   ->  GroupAggregate  (cost=389991.70..659366.40 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=389991.70..658894.90 rows=21169 width=70)
               ->  Nested Loop  (cost=389991.55..658301.67 rows=21169 width=20)
                     Join Filter: (n1.n_regionkey = region.r_regionkey)
                     ->  Nested Loop  (cost=389991.55..656712.94 rows=105844 width=24)
                           ->  Nested Loop  (cost=389991.40..654102.65 rows=105844 width=24)
                                 ->  Gather Merge  (cost=389990.97..402664.17 rows=105844 width=24)
                                       Workers Planned: 4
                                       ->  Sort  (cost=388990.92..389057.07 rows=26461 width=24)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Nested Loop  (cost=3545.41..387047.15 rows=26461 width=24)
                                                   ->  Parallel Hash Join  (cost=3544.98..175457.50 rows=87647 width=20)
                                                         Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                         ->  Nested Loop  (cost=0.44..171676.36 rows=90130 width=20)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..47231.16 rows=3319 width=4)
                                                                     Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..37.22 rows=27 width=24)
                                                                     Index Cond: (l_partkey = part.p_partkey)
                                                         ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..2.38 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Memoize  (cost=0.15..0.92 rows=1 width=8)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation n1  (cost=0.14..0.91 rows=1 width=8)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
                     ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                 Filter: (r_name = 'AMERICA'::bpchar)
               ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.91 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=389991.70..390103.66 rows=1 width=64)
   ->  GroupAggregate  (cost=389991.70..659366.40 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=389991.70..658894.90 rows=21169 width=70)
               ->  Nested Loop  (cost=389991.55..658301.67 rows=21169 width=20)
                     Join Filter: (n1.n_regionkey = region.r_regionkey)
                     ->  Nested Loop  (cost=389991.55..656712.94 rows=105844 width=24)
                           ->  Nested Loop  (cost=389991.40..654102.65 rows=105844 width=24)
                                 ->  Gather Merge  (cost=389990.97..402664.17 rows=105844 width=24)
                                       Workers Planned: 4
                                       ->  Sort  (cost=388990.92..389057.07 rows=26461 width=24)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Nested Loop  (cost=3545.41..387047.15 rows=26461 width=24)
                                                   ->  Parallel Hash Join  (cost=3544.98..175457.50 rows=87647 width=20)
                                                         Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                         ->  Nested Loop  (cost=0.44..171676.36 rows=90130 width=20)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..47231.16 rows=3319 width=4)
                                                                     Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                               ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..37.22 rows=27 width=24)
                                                                     Index Cond: (l_partkey = part.p_partkey)
                                                         ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..2.41 rows=1 width=12)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..2.38 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Memoize  (cost=0.15..0.92 rows=1 width=8)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation n1  (cost=0.14..0.91 rows=1 width=8)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
                     ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                 Filter: (r_name = 'AMERICA'::bpchar)
               ->  Memoize  (cost=0.15..0.92 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..0.91 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 9 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=31269.34..36673.53 rows=1 width=90)
   ->  GroupAggregate  (cost=31269.34..550071.57 rows=96 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=31269.34..550068.45 rows=96 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=9652.78..550065.82 rows=96 width=81)
                     Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                     ->  Gather Merge  (cost=8651.47..20048.53 rows=100000 width=30)
                           Workers Planned: 1
                           ->  Sort  (cost=7651.46..7798.52 rows=58824 width=30)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=1.56..2991.39 rows=58824 width=30)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                     ->  Materialize  (cost=1001.31..384517.29 rows=97 width=35)
                           ->  Gather  (cost=1001.31..384516.81 rows=97 width=35)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=1.31..383507.11 rows=24 width=35)
                                       ->  Nested Loop  (cost=0.87..383447.17 rows=24 width=35)
                                             ->  Nested Loop  (cost=0.43..126250.26 rows=101009 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47231.16 rows=25253 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..2.95 rows=18 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..2.54 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(31 rows)

query 9 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=31269.34..36673.53 rows=1 width=90)
   ->  GroupAggregate  (cost=31269.34..550071.57 rows=96 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=31269.34..550068.45 rows=96 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=9652.78..550065.82 rows=96 width=81)
                     Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                     ->  Gather Merge  (cost=8651.47..20048.53 rows=100000 width=30)
                           Workers Planned: 1
                           ->  Sort  (cost=7651.46..7798.52 rows=58824 width=30)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=1.56..2991.39 rows=58824 width=30)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                     ->  Materialize  (cost=1001.31..384517.29 rows=97 width=35)
                           ->  Gather  (cost=1001.31..384516.81 rows=97 width=35)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=1.31..383507.11 rows=24 width=35)
                                       ->  Nested Loop  (cost=0.87..383447.17 rows=24 width=35)
                                             ->  Nested Loop  (cost=0.43..126250.26 rows=101009 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47231.16 rows=25253 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..2.95 rows=18 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..2.54 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(31 rows)

query 9 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=31269.34..36673.53 rows=1 width=90)
   ->  GroupAggregate  (cost=31269.34..550071.57 rows=96 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=31269.34..550068.45 rows=96 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=9652.78..550065.82 rows=96 width=81)
                     Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                     ->  Gather Merge  (cost=8651.47..20048.53 rows=100000 width=30)
                           Workers Planned: 1
                           ->  Sort  (cost=7651.46..7798.52 rows=58824 width=30)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=1.56..2991.39 rows=58824 width=30)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                     ->  Materialize  (cost=1001.31..384517.29 rows=97 width=35)
                           ->  Gather  (cost=1001.31..384516.81 rows=97 width=35)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=1.31..383507.11 rows=24 width=35)
                                       ->  Nested Loop  (cost=0.87..383447.17 rows=24 width=35)
                                             ->  Nested Loop  (cost=0.43..126250.26 rows=101009 width=18)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..47231.16 rows=25253 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..2.95 rows=18 width=14)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..2.54 rows=1 width=29)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using orders_pkey on orders  (cost=0.43..2.50 rows=1 width=8)
                                             Index Cond: (o_orderkey = lineitem.l_orderkey)
(31 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=829432.72..829432.77 rows=20 width=201)
   ->  Sort  (cost=829432.72..830843.70 rows=564394 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=732727.04..814414.40 rows=564394 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=732727.04..800304.55 rows=564394 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=731726.98..732079.72 rows=141098 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=676362.90..719658.63 rows=141098 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=676361.34..719223.89 rows=141098 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39697.18 rows=375018 width=147)
                                       ->  Parallel Hash  (cost=674597.61..674597.61 rows=141098 width=16)
                                             ->  Nested Loop  (cost=6549.11..674597.61 rows=141098 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6548.54..269945.49 rows=141930 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6406.62 rows=567718 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.84 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 10 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=829432.72..829432.77 rows=20 width=201)
   ->  Sort  (cost=829432.72..830843.70 rows=564394 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=732727.04..814414.40 rows=564394 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=732727.04..800304.55 rows=564394 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=731726.98..732079.72 rows=141098 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=676362.90..719658.63 rows=141098 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=676361.34..719223.89 rows=141098 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39697.18 rows=375018 width=147)
                                       ->  Parallel Hash  (cost=674597.61..674597.61 rows=141098 width=16)
                                             ->  Nested Loop  (cost=6549.11..674597.61 rows=141098 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6548.54..269945.49 rows=141930 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6406.62 rows=567718 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.84 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 10 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=829432.72..829432.77 rows=20 width=201)
   ->  Sort  (cost=829432.72..830843.70 rows=564394 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=732727.04..814414.40 rows=564394 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=732727.04..800304.55 rows=564394 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=731726.98..732079.72 rows=141098 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=676362.90..719658.63 rows=141098 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=676361.34..719223.89 rows=141098 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39697.18 rows=375018 width=147)
                                       ->  Parallel Hash  (cost=674597.61..674597.61 rows=141098 width=16)
                                             ->  Nested Loop  (cost=6549.11..674597.61 rows=141098 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6548.54..269945.49 rows=141930 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6406.62 rows=567718 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2.84 rows=1 width=16)
                                                         Index Cond: (l_orderkey = orders.o_orderkey)
                                                         Filter: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

query 11 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64427.36..64427.36 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=18015.39..18015.40 rows=1 width=32)
           ->  Gather  (cost=18015.27..18015.38 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17015.27..17015.28 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..15605.99 rows=187904 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.56 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=46411.96..46678.16 rows=106479 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=37968.51..45879.56 rows=106479 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Nested Loop  (cost=37.72..23706.14 rows=319437 width=14)
                     ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(31 rows)

query 11 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64427.36..64427.36 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=18015.39..18015.40 rows=1 width=32)
           ->  Gather  (cost=18015.27..18015.38 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17015.27..17015.28 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..15605.99 rows=187904 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.56 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=46411.96..46678.16 rows=106479 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=37968.51..45879.56 rows=106479 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Nested Loop  (cost=37.72..23706.14 rows=319437 width=14)
                     ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(31 rows)

query 11 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64427.36..64427.36 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=18015.39..18015.40 rows=1 width=32)
           ->  Gather  (cost=18015.27..18015.38 rows=1 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=17015.27..17015.28 rows=1 width=32)
                       ->  Nested Loop  (cost=1.76..15605.99 rows=187904 width=10)
                             ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=4)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..2809.24 rows=58824 width=8)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..4.56 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=46411.96..46678.16 rows=106479 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=37968.51..45879.56 rows=106479 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Nested Loop  (cost=37.72..23706.14 rows=319437 width=14)
                     ->  Nested Loop  (cost=37.29..2261.46 rows=4000 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=37.29..2220.15 rows=4000 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..36.29 rows=4000 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..4.56 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(31 rows)

query 12 run 1
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469465.24..1579202.51 rows=1 width=27)
   ->  GroupAggregate  (cost=1469465.24..2237626.08 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469465.24..2232486.33 rows=293696 width=27)
               ->  Gather Merge  (cost=1469464.81..1504630.39 rows=293696 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468464.75..1468648.31 rows=73424 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462530.64 rows=73424 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 2
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469465.24..1579202.51 rows=1 width=27)
   ->  GroupAggregate  (cost=1469465.24..2237626.08 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469465.24..2232486.33 rows=293696 width=27)
               ->  Gather Merge  (cost=1469464.81..1504630.39 rows=293696 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468464.75..1468648.31 rows=73424 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462530.64 rows=73424 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 3
SET
SET
SET
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1469465.24..1579202.51 rows=1 width=27)
   ->  GroupAggregate  (cost=1469465.24..2237626.08 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=1469465.24..2232486.33 rows=293696 width=27)
               ->  Gather Merge  (cost=1469464.81..1504630.39 rows=293696 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=1468464.75..1468648.31 rows=73424 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1462530.64 rows=73424 width=15)
                                 Filter: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using orders_pkey on orders  (cost=0.43..2.48 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1009844.92..1009844.92 rows=1 width=16)
   ->  Sort  (cost=1009844.92..1009845.42 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1009841.92..1009843.92 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=61.17..987340.83 rows=1500073 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=61.17..897353.36 rows=14997347 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28675.52 rows=1500073 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..677467.63 rows=14997347 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 2
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1009844.92..1009844.92 rows=1 width=16)
   ->  Sort  (cost=1009844.92..1009845.42 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1009841.92..1009843.92 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=61.17..987340.83 rows=1500073 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=61.17..897353.36 rows=14997347 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28675.52 rows=1500073 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..677467.63 rows=14997347 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 13 run 3
SET
SET
SET
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1009844.92..1009844.92 rows=1 width=16)
   ->  Sort  (cost=1009844.92..1009845.42 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1009841.92..1009843.92 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  GroupAggregate  (cost=61.17..987340.83 rows=1500073 width=12)
                     Group Key: customer.c_custkey
                     ->  Merge Left Join  (cost=61.17..897353.36 rows=14997347 width=8)
                           Merge Cond: (customer.c_custkey = orders.o_custkey)
                           ->  Index Only Scan using customer_pkey on customer  (cost=0.43..28675.52 rows=1500073 width=4)
                           ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..677467.63 rows=14997347 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
(12 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=844282.13..844282.15 rows=1 width=32)
   ->  Finalize Aggregate  (cost=844282.13..844282.15 rows=1 width=32)
         ->  Gather  (cost=844281.68..844282.09 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=843281.68..843281.69 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=64480.51..840255.50 rows=172924 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=12249.23..787522.94 rows=190968 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12058.27 rows=763870 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.12..45981.12 rows=500012 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.12 rows=500012 width=25)
(13 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=844282.13..844282.15 rows=1 width=32)
   ->  Finalize Aggregate  (cost=844282.13..844282.15 rows=1 width=32)
         ->  Gather  (cost=844281.68..844282.09 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=843281.68..843281.69 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=64480.51..840255.50 rows=172924 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=12249.23..787522.94 rows=190968 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12058.27 rows=763870 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.12..45981.12 rows=500012 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.12 rows=500012 width=25)
(13 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=844282.13..844282.15 rows=1 width=32)
   ->  Finalize Aggregate  (cost=844282.13..844282.15 rows=1 width=32)
         ->  Gather  (cost=844281.68..844282.09 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=843281.68..843281.69 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=64480.51..840255.50 rows=172924 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=12249.23..787522.94 rows=190968 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12058.27 rows=763870 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.12..45981.12 rows=500012 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.12 rows=500012 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2743626.53..2743733.79 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1390927.18..1390927.19 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1388356.36..1389641.77 rows=102833 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1342852.75..1385271.37 rows=411332 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1341852.75..1343138.17 rows=102833 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=36508.02..1336160.70 rows=569206 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35938.82 rows=2276825 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352699.34..1407833.70 rows=514 width=103)
         ->  Finalize GroupAggregate  (cost=1352699.04..1406577.22 rows=514 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1352699.04..1401949.73 rows=411332 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351698.99..1351956.07 rows=102833 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1341852.75..1343138.17 rows=102833 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=36508.02..1336160.70 rows=569206 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35938.82 rows=2276825 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.43 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2743626.53..2743733.79 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1390927.18..1390927.19 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1388356.36..1389641.77 rows=102833 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1342852.75..1385271.37 rows=411332 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1341852.75..1343138.17 rows=102833 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=36508.02..1336160.70 rows=569206 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35938.82 rows=2276825 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352699.34..1407833.70 rows=514 width=103)
         ->  Finalize GroupAggregate  (cost=1352699.04..1406577.22 rows=514 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1352699.04..1401949.73 rows=411332 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351698.99..1351956.07 rows=102833 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1341852.75..1343138.17 rows=102833 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=36508.02..1336160.70 rows=569206 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35938.82 rows=2276825 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.43 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2743626.53..2743733.79 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1390927.18..1390927.19 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1388356.36..1389641.77 rows=102833 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1342852.75..1385271.37 rows=411332 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1341852.75..1343138.17 rows=102833 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=36508.02..1336160.70 rows=569206 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35938.82 rows=2276825 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352699.34..1407833.70 rows=514 width=103)
         ->  Finalize GroupAggregate  (cost=1352699.04..1406577.22 rows=514 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1352699.04..1401949.73 rows=411332 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351698.99..1351956.07 rows=102833 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1341852.75..1343138.17 rows=102833 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=36508.02..1336160.70 rows=569206 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..35938.82 rows=2276825 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..2.43 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=251404.98..251404.99 rows=1 width=44)
   ->  Sort  (cost=251404.98..251789.14 rows=153661 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172146.15..250636.68 rows=153661 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172146.15..243168.43 rows=593164 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171146.09..171516.82 rows=148291 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57879.62..158409.32 rows=148291 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101376.19 rows=999988 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.31..53481.31 rows=74148 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.31 rows=74148 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=251404.98..251404.99 rows=1 width=44)
   ->  Sort  (cost=251404.98..251789.14 rows=153661 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172146.15..250636.68 rows=153661 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172146.15..243168.43 rows=593164 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171146.09..171516.82 rows=148291 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57879.62..158409.32 rows=148291 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101376.19 rows=999988 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.31..53481.31 rows=74148 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.31 rows=74148 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=251404.98..251404.99 rows=1 width=44)
   ->  Sort  (cost=251404.98..251789.14 rows=153661 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=172146.15..250636.68 rows=153661 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=172146.15..243168.43 rows=593164 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=171146.09..171516.82 rows=148291 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57879.62..158409.32 rows=148291 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..101376.19 rows=999988 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.31..53481.31 rows=74148 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.31 rows=74148 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3575619.83..3575619.85 rows=1 width=32)
   ->  Aggregate  (cost=3575619.83..3575619.85 rows=1 width=32)
         ->  Merge Join  (cost=2317237.14..3575569.42 rows=20163 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2316236.21..3473480.27 rows=2208740 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2316236.21..3374086.97 rows=8834960 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2315236.16..2320758.01 rows=2208740 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869621.62..2043666.47 rows=2208740 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 16
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275093.06 rows=14995006 width=9)
               ->  Materialize  (cost=1000.93..95645.69 rows=54773 width=21)
                     ->  Gather Merge  (cost=1000.93..95508.76 rows=54773 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..87984.71 rows=13693 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.87 rows=504 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..41.94 rows=27 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 17 run 2
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3575619.83..3575619.85 rows=1 width=32)
   ->  Aggregate  (cost=3575619.83..3575619.85 rows=1 width=32)
         ->  Merge Join  (cost=2317237.14..3575569.42 rows=20163 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2316236.21..3473480.27 rows=2208740 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2316236.21..3374086.97 rows=8834960 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2315236.16..2320758.01 rows=2208740 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869621.62..2043666.47 rows=2208740 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 16
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275093.06 rows=14995006 width=9)
               ->  Materialize  (cost=1000.93..95645.69 rows=54773 width=21)
                     ->  Gather Merge  (cost=1000.93..95508.76 rows=54773 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..87984.71 rows=13693 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.87 rows=504 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..41.94 rows=27 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 17 run 3
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3575619.83..3575619.85 rows=1 width=32)
   ->  Aggregate  (cost=3575619.83..3575619.85 rows=1 width=32)
         ->  Merge Join  (cost=2317237.14..3575569.42 rows=20163 width=8)
               Merge Cond: (lineitem_1.l_partkey = part.p_partkey)
               Join Filter: (lineitem.l_quantity < ((0.2 * avg(lineitem_1.l_quantity))))
               ->  Finalize GroupAggregate  (cost=2316236.21..3473480.27 rows=2208740 width=36)
                     Group Key: lineitem_1.l_partkey
                     ->  Gather Merge  (cost=2316236.21..3374086.97 rows=8834960 width=36)
                           Workers Planned: 4
                           ->  Sort  (cost=2315236.16..2320758.01 rows=2208740 width=36)
                                 Sort Key: lineitem_1.l_partkey
                                 ->  Partial HashAggregate  (cost=1869621.62..2043666.47 rows=2208740 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       Planned Partitions: 16
                                       ->  Parallel Seq Scan on lineitem lineitem_1  (cost=0.00..1275093.06 rows=14995006 width=9)
               ->  Materialize  (cost=1000.93..95645.69 rows=54773 width=21)
                     ->  Gather Merge  (cost=1000.93..95508.76 rows=54773 width=21)
                           Workers Planned: 4
                           ->  Nested Loop  (cost=0.87..87984.71 rows=13693 width=21)
                                 ->  Parallel Index Scan using part_pkey on part  (cost=0.43..66712.87 rows=504 width=4)
                                       Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..41.94 rows=27 width=17)
                                       Index Cond: (l_partkey = part.p_partkey)
(23 rows)

query 18 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8578800.71..8578800.96 rows=100 width=71)
   ->  Sort  (cost=8578800.71..8628771.26 rows=19988220 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=830347.43..7814865.32 rows=19988220 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=830347.43..7415100.92 rows=19988220 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=830347.03..6690259.07 rows=19988220 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=829345.00..4160640.19 rows=4998335 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=828344.94..3564290.25 rows=1249584 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=828344.38..837718.66 rows=3749712 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.91..352993.04 rows=3749712 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298765.12 rows=3749712 width=20)
                                                   ->  Parallel Hash  (cost=39697.18..39697.18 rows=375018 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.18 rows=375018 width=23)
                                       ->  GroupAggregate  (cost=0.56..2692205.64 rows=4998335 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167380.43 rows=59980024 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167380.43 rows=59980024 width=9)
(26 rows)

query 18 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8578800.71..8578800.96 rows=100 width=71)
   ->  Sort  (cost=8578800.71..8628771.26 rows=19988220 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=830347.43..7814865.32 rows=19988220 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=830347.43..7415100.92 rows=19988220 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=830347.03..6690259.07 rows=19988220 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=829345.00..4160640.19 rows=4998335 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=828344.94..3564290.25 rows=1249584 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=828344.38..837718.66 rows=3749712 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.91..352993.04 rows=3749712 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298765.12 rows=3749712 width=20)
                                                   ->  Parallel Hash  (cost=39697.18..39697.18 rows=375018 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.18 rows=375018 width=23)
                                       ->  GroupAggregate  (cost=0.56..2692205.64 rows=4998335 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167380.43 rows=59980024 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167380.43 rows=59980024 width=9)
(26 rows)

query 18 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=8578800.71..8578800.96 rows=100 width=71)
   ->  Sort  (cost=8578800.71..8628771.26 rows=19988220 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=830347.43..7814865.32 rows=19988220 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=830347.43..7415100.92 rows=19988220 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=830347.03..6690259.07 rows=19988220 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=829345.00..4160640.19 rows=4998335 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=828344.94..3564290.25 rows=1249584 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=828344.38..837718.66 rows=3749712 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.91..352993.04 rows=3749712 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298765.12 rows=3749712 width=20)
                                                   ->  Parallel Hash  (cost=39697.18..39697.18 rows=375018 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.18 rows=375018 width=23)
                                       ->  GroupAggregate  (cost=0.56..2692205.64 rows=4998335 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem lineitem_1  (cost=0.56..2167380.43 rows=59980024 width=9)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.56..2167380.43 rows=59980024 width=9)
(26 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=112772.52..112772.53 rows=1 width=32)
   ->  Finalize Aggregate  (cost=112772.52..112772.53 rows=1 width=32)
         ->  Gather  (cost=112772.09..112772.50 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=111772.09..111772.10 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..111770.24 rows=246 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.53 rows=1166 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..42.48 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=112772.52..112772.53 rows=1 width=32)
   ->  Finalize Aggregate  (cost=112772.52..112772.53 rows=1 width=32)
         ->  Gather  (cost=112772.09..112772.50 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=111772.09..111772.10 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..111770.24 rows=246 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.53 rows=1166 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..42.48 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=112772.52..112772.53 rows=1 width=32)
   ->  Finalize Aggregate  (cost=112772.52..112772.53 rows=1 width=32)
         ->  Gather  (cost=112772.09..112772.50 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=111772.09..111772.10 rows=1 width=32)
                     ->  Nested Loop  (cost=0.44..111770.24 rows=246 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.53 rows=1166 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.44..42.48 rows=1 width=21)
                                 Index Cond: (l_partkey = part.p_partkey)
                                 Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2427410.40..2627185.01 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2427410.40..2627185.01 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2423287.47..2622426.20 rows=3 width=8)
               ->  Nested Loop  (cost=2423287.47..2622426.19 rows=3 width=8)
                     ->  Hash Join  (cost=2423287.04..2596644.04 rows=48759 width=44)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  HashAggregate  (cost=2372783.05..2533469.02 rows=4827047 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Bitmap Heap Scan on lineitem  (cost=144948.04..1991765.39 rows=9039900 width=13)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..142688.07 rows=9039900 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=50251.46..50251.46 rows=20203 width=4)
                                 ->  Gather  (cost=1000.00..50251.46 rows=20203 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..47231.16 rows=5051 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                     ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                           Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                           Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(32 rows)

query 20 run 2
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2427410.40..2627185.01 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2427410.40..2627185.01 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2423287.47..2622426.20 rows=3 width=8)
               ->  Nested Loop  (cost=2423287.47..2622426.19 rows=3 width=8)
                     ->  Hash Join  (cost=2423287.04..2596644.04 rows=48759 width=44)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  HashAggregate  (cost=2372783.05..2533469.02 rows=4827047 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Bitmap Heap Scan on lineitem  (cost=144948.04..1991765.39 rows=9039900 width=13)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..142688.07 rows=9039900 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=50251.46..50251.46 rows=20203 width=4)
                                 ->  Gather  (cost=1000.00..50251.46 rows=20203 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..47231.16 rows=5051 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                     ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                           Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                           Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(32 rows)

query 20 run 3
SET
SET
SET
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2427410.40..2627185.01 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2427410.40..2627185.01 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2423287.47..2622426.20 rows=3 width=8)
               ->  Nested Loop  (cost=2423287.47..2622426.19 rows=3 width=8)
                     ->  Hash Join  (cost=2423287.04..2596644.04 rows=48759 width=44)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  HashAggregate  (cost=2372783.05..2533469.02 rows=4827047 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Bitmap Heap Scan on lineitem  (cost=144948.04..1991765.39 rows=9039900 width=13)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..142688.07 rows=9039900 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=50251.46..50251.46 rows=20203 width=4)
                                 ->  Gather  (cost=1000.00..50251.46 rows=20203 width=4)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..47231.16 rows=5051 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                     ->  Index Scan using partsupp_pkey on partsupp  (cost=0.43..0.52 rows=1 width=12)
                           Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                           Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(32 rows)

query 21 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1892924.62..1892924.63 rows=1 width=34)
   ->  Sort  (cost=1892924.62..1892924.63 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1892924.59..1892924.61 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1892924.59..1892924.60 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1892924.58 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1892921.34 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1892918.32 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1891918.22 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335488.60 rows=194425 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312580.57 rows=4998335 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.23 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1892924.62..1892924.63 rows=1 width=34)
   ->  Sort  (cost=1892924.62..1892924.63 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1892924.59..1892924.61 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1892924.59..1892924.60 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1892924.58 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1892921.34 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1892918.32 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1891918.22 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335488.60 rows=194425 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312580.57 rows=4998335 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.23 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1892924.62..1892924.63 rows=1 width=34)
   ->  Sort  (cost=1892924.62..1892924.63 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1892924.59..1892924.61 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1892924.59..1892924.60 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=4022.13..1892924.58 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=4021.56..1892921.34 rows=1 width=38)
                                 ->  Gather  (cost=4021.13..1892918.32 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Nested Loop Anti Join  (cost=3021.13..1891918.22 rows=1 width=34)
                                             ->  Parallel Hash Join  (cost=3020.56..1335488.60 rows=194425 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Seq Scan on lineitem l1  (cost=0.00..1312580.57 rows=4998335 width=8)
                                                         Filter: (l_receiptdate > l_commitdate)
                                                   ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                             ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.56..3.23 rows=1 width=8)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: ((l_receiptdate > l_commitdate) AND (l_suppkey <> l1.l_suppkey))
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..3.03 rows=1 width=4)
                                       Index Cond: (o_orderkey = l1.l_orderkey)
                                       Filter: (o_orderstatus = 'F'::bpchar)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.56..3.22 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 22 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93877.83..93879.37 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.52..46821.53 rows=1 width=32)
           ->  Gather  (cost=46821.09..46821.50 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45821.09..45821.10 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.23 rows=11943 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.30..59028.49 rows=7799 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.30..58833.52 rows=7799 width=38)
               ->  Gather Merge  (cost=47055.87..49151.34 rows=17501 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46055.81..46066.75 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.23 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.71 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 2
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93877.83..93879.37 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.52..46821.53 rows=1 width=32)
           ->  Gather  (cost=46821.09..46821.50 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45821.09..45821.10 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.23 rows=11943 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.30..59028.49 rows=7799 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.30..58833.52 rows=7799 width=38)
               ->  Gather Merge  (cost=47055.87..49151.34 rows=17501 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46055.81..46066.75 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.23 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.71 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 3
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93877.83..93879.37 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.52..46821.53 rows=1 width=32)
           ->  Gather  (cost=46821.09..46821.50 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45821.09..45821.10 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.23 rows=11943 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.30..59028.49 rows=7799 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.30..58833.52 rows=7799 width=38)
               ->  Gather Merge  (cost=47055.87..49151.34 rows=17501 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46055.81..46066.75 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.23 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..1.71 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

